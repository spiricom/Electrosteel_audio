
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3f0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001c6c0  0800c688  0800c688  0001c688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028d48  08028d48  00040414  2**0
                  CONTENTS
  4 .ARM          00000000  08028d48  08028d48  00040414  2**0
                  CONTENTS
  5 .preinit_array 00000000  08028d48  08028d48  00040414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028d48  08028d48  00038d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028d4c  08028d4c  00038d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  08028d50  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000182a8  20000414  08029164  00040414  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200186bc  08029164  000486bc  2**0
                  ALLOC
 11 .RAM_D1       0007eb58  24000000  24000000  00050000  2**5
                  ALLOC
 12 .RAM_D2       000004a0  30000000  30000000  00050000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00050000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00040414  2**0
                  CONTENTS, READONLY
 15 .debug_info   00075b55  00000000  00000000  00040442  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00009abb  00000000  00000000  000b5f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00042dc2  00000000  00000000  000bfa52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00002fb8  00000000  00000000  00102818  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 0000a608  00000000  00000000  001057d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0003e7de  00000000  00000000  0010fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0002fa55  00000000  00000000  0014e5b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    001693cd  00000000  00000000  0017e00b  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  002e73d8  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000afe0  00000000  00000000  002e7454  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000414 	.word	0x20000414
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c670 	.word	0x0800c670

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000418 	.word	0x20000418
 80002d4:	0800c670 	.word	0x0800c670

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_InitTick+0x40>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <HAL_InitTick+0x44>)
 80002e8:	fbb2 f3f3 	udiv	r3, r2, r3
{
 80002ec:	b510      	push	{r4, lr}
 80002ee:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002f0:	6808      	ldr	r0, [r1, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 f8d3 	bl	80004a0 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fa:	2c0f      	cmp	r4, #15
 80002fc:	d800      	bhi.n	8000300 <HAL_InitTick+0x28>
 80002fe:	b108      	cbz	r0, 8000304 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
}
 8000302:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 f884 	bl	8000418 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <HAL_InitTick+0x48>)
 8000312:	2000      	movs	r0, #0
 8000314:	601c      	str	r4, [r3, #0]
}
 8000316:	bd10      	pop	{r4, pc}
 8000318:	20000000 	.word	0x20000000
 800031c:	200003a4 	.word	0x200003a4
 8000320:	20000004 	.word	0x20000004

08000324 <HAL_Init>:
{
 8000324:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
{
 8000328:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800032a:	f000 f861 	bl	80003f0 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800032e:	4c12      	ldr	r4, [pc, #72]	; (8000378 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000330:	f002 fb1a 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8000334:	4a11      	ldr	r2, [pc, #68]	; (800037c <HAL_Init+0x58>)
 8000336:	4912      	ldr	r1, [pc, #72]	; (8000380 <HAL_Init+0x5c>)
 8000338:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800033a:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800033c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8000340:	4d10      	ldr	r5, [pc, #64]	; (8000384 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000342:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000346:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000348:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800034a:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800034e:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000352:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000356:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000358:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800035c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800035e:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000360:	f7ff ffba 	bl	80002d8 <HAL_InitTick>
 8000364:	b110      	cbz	r0, 800036c <HAL_Init+0x48>
    return HAL_ERROR;
 8000366:	2001      	movs	r0, #1
}
 8000368:	b003      	add	sp, #12
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 800036e:	f008 fdd7 	bl	8008f20 <HAL_MspInit>
  return HAL_OK;
 8000372:	9801      	ldr	r0, [sp, #4]
}
 8000374:	b003      	add	sp, #12
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	200003a8 	.word	0x200003a8
 800037c:	58024400 	.word	0x58024400
 8000380:	0800c6a4 	.word	0x0800c6a4
 8000384:	200003a4 	.word	0x200003a4

08000388 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000388:	4a03      	ldr	r2, [pc, #12]	; (8000398 <HAL_IncTick+0x10>)
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <HAL_IncTick+0x14>)
 800038c:	6811      	ldr	r1, [r2, #0]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	440b      	add	r3, r1
 8000392:	6013      	str	r3, [r2, #0]
}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000468 	.word	0x20000468
 800039c:	20000000 	.word	0x20000000

080003a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003a0:	4b01      	ldr	r3, [pc, #4]	; (80003a8 <HAL_GetTick+0x8>)
 80003a2:	6818      	ldr	r0, [r3, #0]
}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20000468 	.word	0x20000468

080003ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003ac:	b538      	push	{r3, r4, r5, lr}
 80003ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003b0:	f7ff fff6 	bl	80003a0 <HAL_GetTick>
 80003b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b6:	1c63      	adds	r3, r4, #1
 80003b8:	d002      	beq.n	80003c0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <HAL_Delay+0x20>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003c0:	f7ff ffee 	bl	80003a0 <HAL_GetTick>
 80003c4:	1b40      	subs	r0, r0, r5
 80003c6:	42a0      	cmp	r0, r4
 80003c8:	d3fa      	bcc.n	80003c0 <HAL_Delay+0x14>
  {
  }
}
 80003ca:	bd38      	pop	{r3, r4, r5, pc}
 80003cc:	20000000 	.word	0x20000000

080003d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003d0:	4b01      	ldr	r3, [pc, #4]	; (80003d8 <HAL_GetREVID+0x8>)
 80003d2:	6818      	ldr	r0, [r3, #0]
}
 80003d4:	0c00      	lsrs	r0, r0, #16
 80003d6:	4770      	bx	lr
 80003d8:	5c001000 	.word	0x5c001000

080003dc <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <HAL_SetFMCMemorySwappingConfig+0x10>)
 80003de:	6813      	ldr	r3, [r2, #0]
 80003e0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80003e4:	4318      	orrs	r0, r3
 80003e6:	6010      	str	r0, [r2, #0]
}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	52004000 	.word	0x52004000

080003f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003f0:	4907      	ldr	r1, [pc, #28]	; (8000410 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003f2:	0200      	lsls	r0, r0, #8
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80003f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003fa:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003fc:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000400:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000402:	4022      	ands	r2, r4
 8000404:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000406:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8000408:	60c8      	str	r0, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800040a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	e000ed00 	.word	0xe000ed00
 8000414:	05fa0000 	.word	0x05fa0000

08000418 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000418:	4b17      	ldr	r3, [pc, #92]	; (8000478 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800041a:	b430      	push	{r4, r5}
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000422:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000426:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000428:	2d04      	cmp	r5, #4
 800042a:	bf28      	it	cs
 800042c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800042e:	2c06      	cmp	r4, #6
 8000430:	d918      	bls.n	8000464 <HAL_NVIC_SetPriority+0x4c>
 8000432:	3b03      	subs	r3, #3
 8000434:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000438:	409c      	lsls	r4, r3
 800043a:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800043e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8000442:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000444:	fa02 f205 	lsl.w	r2, r2, r5
 8000448:	ea21 0102 	bic.w	r1, r1, r2
 800044c:	fa01 f203 	lsl.w	r2, r1, r3
 8000450:	ea42 0204 	orr.w	r2, r2, r4
 8000454:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000458:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 800045a:	db06      	blt.n	800046a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <HAL_NVIC_SetPriority+0x64>)
 800045e:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000460:	bc30      	pop	{r4, r5}
 8000462:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000464:	2400      	movs	r4, #0
 8000466:	4623      	mov	r3, r4
 8000468:	e7e9      	b.n	800043e <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800046a:	f000 000f 	and.w	r0, r0, #15
 800046e:	4b04      	ldr	r3, [pc, #16]	; (8000480 <HAL_NVIC_SetPriority+0x68>)
 8000470:	541a      	strb	r2, [r3, r0]
 8000472:	bc30      	pop	{r4, r5}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	e000ed00 	.word	0xe000ed00
 800047c:	e000e400 	.word	0xe000e400
 8000480:	e000ed14 	.word	0xe000ed14

08000484 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000484:	2800      	cmp	r0, #0
 8000486:	db07      	blt.n	8000498 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000488:	f000 011f 	and.w	r1, r0, #31
 800048c:	2301      	movs	r3, #1
 800048e:	0940      	lsrs	r0, r0, #5
 8000490:	4a02      	ldr	r2, [pc, #8]	; (800049c <HAL_NVIC_EnableIRQ+0x18>)
 8000492:	408b      	lsls	r3, r1
 8000494:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e000e100 	.word	0xe000e100

080004a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004a0:	3801      	subs	r0, #1
 80004a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004a6:	d20d      	bcs.n	80004c4 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004aa:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ac:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004ae:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b0:	25f0      	movs	r5, #240	; 0xf0
 80004b2:	4c06      	ldr	r4, [pc, #24]	; (80004cc <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004b4:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004b6:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b8:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004be:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80004c0:	bc30      	pop	{r4, r5}
 80004c2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004c4:	2001      	movs	r0, #1
 80004c6:	4770      	bx	lr
 80004c8:	e000e010 	.word	0xe000e010
 80004cc:	e000ed00 	.word	0xe000ed00

080004d0 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80004d0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80004d6:	2000      	movs	r0, #0
 80004d8:	4904      	ldr	r1, [pc, #16]	; (80004ec <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80004da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80004dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004e0:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 80004e2:	6048      	str	r0, [r1, #4]
}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	e000ed00 	.word	0xe000ed00
 80004ec:	e000ed90 	.word	0xe000ed90

080004f0 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80004f2:	f040 0001 	orr.w	r0, r0, #1
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_MPU_Enable+0x20>)
 80004f8:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80004fa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80004fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000500:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000502:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000506:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800050a:	4770      	bx	lr
 800050c:	e000ed00 	.word	0xe000ed00
 8000510:	e000ed90 	.word	0xe000ed90

08000514 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000514:	7843      	ldrb	r3, [r0, #1]
 8000516:	4a13      	ldr	r2, [pc, #76]	; (8000564 <HAL_MPU_ConfigRegion+0x50>)
 8000518:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 800051a:	7803      	ldrb	r3, [r0, #0]
 800051c:	b913      	cbnz	r3, 8000524 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 800051e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = 0x00;
 8000520:	6113      	str	r3, [r2, #16]
 8000522:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8000524:	6843      	ldr	r3, [r0, #4]
{
 8000526:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8000528:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800052a:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800052c:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800052e:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000530:	7805      	ldrb	r5, [r0, #0]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000532:	7a84      	ldrb	r4, [r0, #10]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000534:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000538:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800053a:	7b86      	ldrb	r6, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800053c:	432b      	orrs	r3, r5
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800053e:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000540:	ea43 43c4 	orr.w	r3, r3, r4, lsl #19
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000544:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000546:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800054a:	7a01      	ldrb	r1, [r0, #8]
 800054c:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8000550:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8000554:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8000558:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800055c:	6113      	str	r3, [r2, #16]
  }
}
 800055e:	bc70      	pop	{r4, r5, r6}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	e000ed90 	.word	0xe000ed90

08000568 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000568:	4b35      	ldr	r3, [pc, #212]	; (8000640 <DMA_CalcBaseAndBitshift+0xd8>)
{
 800056a:	4601      	mov	r1, r0
 800056c:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800056e:	4c35      	ldr	r4, [pc, #212]	; (8000644 <DMA_CalcBaseAndBitshift+0xdc>)
 8000570:	6802      	ldr	r2, [r0, #0]
 8000572:	4835      	ldr	r0, [pc, #212]	; (8000648 <DMA_CalcBaseAndBitshift+0xe0>)
 8000574:	42a2      	cmp	r2, r4
 8000576:	bf18      	it	ne
 8000578:	429a      	cmpne	r2, r3
 800057a:	4d34      	ldr	r5, [pc, #208]	; (800064c <DMA_CalcBaseAndBitshift+0xe4>)
 800057c:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8000580:	bf0c      	ite	eq
 8000582:	2301      	moveq	r3, #1
 8000584:	2300      	movne	r3, #0
 8000586:	4282      	cmp	r2, r0
 8000588:	bf08      	it	eq
 800058a:	f043 0301 	orreq.w	r3, r3, #1
 800058e:	3048      	adds	r0, #72	; 0x48
 8000590:	42aa      	cmp	r2, r5
 8000592:	bf08      	it	eq
 8000594:	f043 0301 	orreq.w	r3, r3, #1
 8000598:	3548      	adds	r5, #72	; 0x48
 800059a:	42a2      	cmp	r2, r4
 800059c:	bf08      	it	eq
 800059e:	f043 0301 	orreq.w	r3, r3, #1
 80005a2:	3448      	adds	r4, #72	; 0x48
 80005a4:	4282      	cmp	r2, r0
 80005a6:	bf08      	it	eq
 80005a8:	f043 0301 	orreq.w	r3, r3, #1
 80005ac:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80005b0:	42aa      	cmp	r2, r5
 80005b2:	bf08      	it	eq
 80005b4:	f043 0301 	orreq.w	r3, r3, #1
 80005b8:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80005bc:	42a2      	cmp	r2, r4
 80005be:	bf08      	it	eq
 80005c0:	f043 0301 	orreq.w	r3, r3, #1
 80005c4:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80005c8:	4282      	cmp	r2, r0
 80005ca:	bf08      	it	eq
 80005cc:	f043 0301 	orreq.w	r3, r3, #1
 80005d0:	3048      	adds	r0, #72	; 0x48
 80005d2:	42aa      	cmp	r2, r5
 80005d4:	bf08      	it	eq
 80005d6:	f043 0301 	orreq.w	r3, r3, #1
 80005da:	3548      	adds	r5, #72	; 0x48
 80005dc:	42a2      	cmp	r2, r4
 80005de:	bf08      	it	eq
 80005e0:	f043 0301 	orreq.w	r3, r3, #1
 80005e4:	3448      	adds	r4, #72	; 0x48
 80005e6:	4282      	cmp	r2, r0
 80005e8:	bf08      	it	eq
 80005ea:	f043 0301 	orreq.w	r3, r3, #1
 80005ee:	3048      	adds	r0, #72	; 0x48
 80005f0:	42aa      	cmp	r2, r5
 80005f2:	bf08      	it	eq
 80005f4:	f043 0301 	orreq.w	r3, r3, #1
 80005f8:	42a2      	cmp	r2, r4
 80005fa:	bf08      	it	eq
 80005fc:	f043 0301 	orreq.w	r3, r3, #1
 8000600:	4282      	cmp	r2, r0
 8000602:	bf08      	it	eq
 8000604:	f043 0301 	orreq.w	r3, r3, #1
 8000608:	b913      	cbnz	r3, 8000610 <DMA_CalcBaseAndBitshift+0xa8>
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <DMA_CalcBaseAndBitshift+0xe8>)
 800060c:	429a      	cmp	r2, r3
 800060e:	d112      	bne.n	8000636 <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8000610:	b2d3      	uxtb	r3, r2
 8000612:	4d10      	ldr	r5, [pc, #64]	; (8000654 <DMA_CalcBaseAndBitshift+0xec>)
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <DMA_CalcBaseAndBitshift+0xf0>)
 8000616:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000618:	4c10      	ldr	r4, [pc, #64]	; (800065c <DMA_CalcBaseAndBitshift+0xf4>)
 800061a:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800061c:	fba5 5303 	umull	r5, r3, r5, r3
 8000620:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000622:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 8000626:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000628:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800062a:	bf88      	it	hi
 800062c:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800062e:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8000630:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8000632:	bc30      	pop	{r4, r5}
 8000634:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8000636:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 800063a:	6588      	str	r0, [r1, #88]	; 0x58
 800063c:	e7f9      	b.n	8000632 <DMA_CalcBaseAndBitshift+0xca>
 800063e:	bf00      	nop
 8000640:	40020010 	.word	0x40020010
 8000644:	40020028 	.word	0x40020028
 8000648:	40020040 	.word	0x40020040
 800064c:	40020058 	.word	0x40020058
 8000650:	400204b8 	.word	0x400204b8
 8000654:	aaaaaaab 	.word	0xaaaaaaab
 8000658:	fffffc00 	.word	0xfffffc00
 800065c:	0800c688 	.word	0x0800c688

08000660 <HAL_DMA_Init>:
{
 8000660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000664:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000666:	f7ff fe9b 	bl	80003a0 <HAL_GetTick>
  if(hdma == NULL)
 800066a:	2c00      	cmp	r4, #0
 800066c:	f000 81ab 	beq.w	80009c6 <HAL_DMA_Init+0x366>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000670:	6822      	ldr	r2, [r4, #0]
 8000672:	4605      	mov	r5, r0
 8000674:	4b56      	ldr	r3, [pc, #344]	; (80007d0 <HAL_DMA_Init+0x170>)
 8000676:	429a      	cmp	r2, r3
 8000678:	d049      	beq.n	800070e <HAL_DMA_Init+0xae>
 800067a:	3318      	adds	r3, #24
 800067c:	429a      	cmp	r2, r3
 800067e:	d046      	beq.n	800070e <HAL_DMA_Init+0xae>
 8000680:	3330      	adds	r3, #48	; 0x30
 8000682:	4854      	ldr	r0, [pc, #336]	; (80007d4 <HAL_DMA_Init+0x174>)
 8000684:	4954      	ldr	r1, [pc, #336]	; (80007d8 <HAL_DMA_Init+0x178>)
 8000686:	4282      	cmp	r2, r0
 8000688:	bf18      	it	ne
 800068a:	429a      	cmpne	r2, r3
 800068c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000690:	bf0c      	ite	eq
 8000692:	2301      	moveq	r3, #1
 8000694:	2300      	movne	r3, #0
 8000696:	428a      	cmp	r2, r1
 8000698:	bf08      	it	eq
 800069a:	f043 0301 	orreq.w	r3, r3, #1
 800069e:	3130      	adds	r1, #48	; 0x30
 80006a0:	4282      	cmp	r2, r0
 80006a2:	bf08      	it	eq
 80006a4:	f043 0301 	orreq.w	r3, r3, #1
 80006a8:	3030      	adds	r0, #48	; 0x30
 80006aa:	428a      	cmp	r2, r1
 80006ac:	bf08      	it	eq
 80006ae:	f043 0301 	orreq.w	r3, r3, #1
 80006b2:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80006b6:	4282      	cmp	r2, r0
 80006b8:	bf08      	it	eq
 80006ba:	f043 0301 	orreq.w	r3, r3, #1
 80006be:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80006c2:	428a      	cmp	r2, r1
 80006c4:	bf08      	it	eq
 80006c6:	f043 0301 	orreq.w	r3, r3, #1
 80006ca:	3130      	adds	r1, #48	; 0x30
 80006cc:	4282      	cmp	r2, r0
 80006ce:	bf08      	it	eq
 80006d0:	f043 0301 	orreq.w	r3, r3, #1
 80006d4:	3030      	adds	r0, #48	; 0x30
 80006d6:	428a      	cmp	r2, r1
 80006d8:	bf08      	it	eq
 80006da:	f043 0301 	orreq.w	r3, r3, #1
 80006de:	3130      	adds	r1, #48	; 0x30
 80006e0:	4282      	cmp	r2, r0
 80006e2:	bf08      	it	eq
 80006e4:	f043 0301 	orreq.w	r3, r3, #1
 80006e8:	3030      	adds	r0, #48	; 0x30
 80006ea:	428a      	cmp	r2, r1
 80006ec:	bf08      	it	eq
 80006ee:	f043 0301 	orreq.w	r3, r3, #1
 80006f2:	3130      	adds	r1, #48	; 0x30
 80006f4:	4282      	cmp	r2, r0
 80006f6:	bf08      	it	eq
 80006f8:	f043 0301 	orreq.w	r3, r3, #1
 80006fc:	428a      	cmp	r2, r1
 80006fe:	bf08      	it	eq
 8000700:	f043 0301 	orreq.w	r3, r3, #1
 8000704:	b91b      	cbnz	r3, 800070e <HAL_DMA_Init+0xae>
 8000706:	4b35      	ldr	r3, [pc, #212]	; (80007dc <HAL_DMA_Init+0x17c>)
 8000708:	429a      	cmp	r2, r3
 800070a:	f040 81eb 	bne.w	8000ae4 <HAL_DMA_Init+0x484>
    hdma->State = HAL_DMA_STATE_BUSY;
 800070e:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8000710:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000712:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8000716:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800071a:	6813      	ldr	r3, [r2, #0]
 800071c:	f023 0301 	bic.w	r3, r3, #1
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	e005      	b.n	8000730 <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000724:	f7ff fe3c 	bl	80003a0 <HAL_GetTick>
 8000728:	1b40      	subs	r0, r0, r5
 800072a:	2805      	cmp	r0, #5
 800072c:	f200 8143 	bhi.w	80009b6 <HAL_DMA_Init+0x356>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000730:	6823      	ldr	r3, [r4, #0]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	07d0      	lsls	r0, r2, #31
 8000736:	d4f5      	bmi.n	8000724 <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 8000738:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800073c:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800073e:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000740:	e9d4 5005 	ldrd	r5, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000744:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000746:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000748:	432a      	orrs	r2, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 800074a:	6a25      	ldr	r5, [r4, #32]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800074c:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800074e:	6818      	ldr	r0, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000750:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000752:	4923      	ldr	r1, [pc, #140]	; (80007e0 <HAL_DMA_Init+0x180>)
 8000754:	4001      	ands	r1, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000756:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8000758:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800075a:	2804      	cmp	r0, #4
    registerValue |=  hdma->Init.Direction           |
 800075c:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000760:	d103      	bne.n	800076a <HAL_DMA_Init+0x10a>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000762:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8000766:	4301      	orrs	r1, r0
 8000768:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800076a:	481e      	ldr	r0, [pc, #120]	; (80007e4 <HAL_DMA_Init+0x184>)
 800076c:	491e      	ldr	r1, [pc, #120]	; (80007e8 <HAL_DMA_Init+0x188>)
 800076e:	6800      	ldr	r0, [r0, #0]
 8000770:	4001      	ands	r1, r0
 8000772:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000776:	d30a      	bcc.n	800078e <HAL_DMA_Init+0x12e>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000778:	6860      	ldr	r0, [r4, #4]
 800077a:	f1a0 0529 	sub.w	r5, r0, #41	; 0x29
 800077e:	2d1f      	cmp	r5, #31
 8000780:	f240 8124 	bls.w	80009cc <HAL_DMA_Init+0x36c>
 8000784:	384f      	subs	r0, #79	; 0x4f
 8000786:	2803      	cmp	r0, #3
 8000788:	d801      	bhi.n	800078e <HAL_DMA_Init+0x12e>
        registerValue |= DMA_SxCR_TRBUFF;
 800078a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800078e:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000790:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 8000792:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000794:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000796:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000798:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800079c:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007a0:	d12a      	bne.n	80007f8 <HAL_DMA_Init+0x198>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80007a2:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 80007a6:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80007a8:	b330      	cbz	r0, 80007f8 <HAL_DMA_Init+0x198>
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80007aa:	69a5      	ldr	r5, [r4, #24]
 80007ac:	b1f5      	cbz	r5, 80007ec <HAL_DMA_Init+0x18c>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80007ae:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80007b2:	f000 81fb 	beq.w	8000bac <HAL_DMA_Init+0x54c>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80007b6:	2a02      	cmp	r2, #2
 80007b8:	d903      	bls.n	80007c2 <HAL_DMA_Init+0x162>
 80007ba:	2a03      	cmp	r2, #3
 80007bc:	d11c      	bne.n	80007f8 <HAL_DMA_Init+0x198>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007be:	01c2      	lsls	r2, r0, #7
 80007c0:	d51a      	bpl.n	80007f8 <HAL_DMA_Init+0x198>
          hdma->State = HAL_DMA_STATE_READY;
 80007c2:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80007c4:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80007c6:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80007c8:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80007ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 80007ce:	e0f0      	b.n	80009b2 <HAL_DMA_Init+0x352>
 80007d0:	40020010 	.word	0x40020010
 80007d4:	40020040 	.word	0x40020040
 80007d8:	40020070 	.word	0x40020070
 80007dc:	400204b8 	.word	0x400204b8
 80007e0:	fe10803f 	.word	0xfe10803f
 80007e4:	5c001000 	.word	0x5c001000
 80007e8:	ffff0000 	.word	0xffff0000
    switch (hdma->Init.FIFOThreshold)
 80007ec:	2a01      	cmp	r2, #1
 80007ee:	f000 81d8 	beq.w	8000ba2 <HAL_DMA_Init+0x542>
 80007f2:	d3e4      	bcc.n	80007be <HAL_DMA_Init+0x15e>
 80007f4:	2a02      	cmp	r2, #2
 80007f6:	d0e2      	beq.n	80007be <HAL_DMA_Init+0x15e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80007f8:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80007fa:	4620      	mov	r0, r4
 80007fc:	f7ff feb4 	bl	8000568 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000800:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000802:	233f      	movs	r3, #63	; 0x3f
 8000804:	f002 021f 	and.w	r2, r2, #31
 8000808:	4093      	lsls	r3, r2
 800080a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800080c:	6822      	ldr	r2, [r4, #0]
 800080e:	4b9d      	ldr	r3, [pc, #628]	; (8000a84 <HAL_DMA_Init+0x424>)
 8000810:	489d      	ldr	r0, [pc, #628]	; (8000a88 <HAL_DMA_Init+0x428>)
 8000812:	499e      	ldr	r1, [pc, #632]	; (8000a8c <HAL_DMA_Init+0x42c>)
 8000814:	4282      	cmp	r2, r0
 8000816:	bf18      	it	ne
 8000818:	429a      	cmpne	r2, r3
 800081a:	4e9d      	ldr	r6, [pc, #628]	; (8000a90 <HAL_DMA_Init+0x430>)
 800081c:	4d9d      	ldr	r5, [pc, #628]	; (8000a94 <HAL_DMA_Init+0x434>)
 800081e:	f100 0060 	add.w	r0, r0, #96	; 0x60
 8000822:	bf0c      	ite	eq
 8000824:	2301      	moveq	r3, #1
 8000826:	2300      	movne	r3, #0
 8000828:	f8df e2a8 	ldr.w	lr, [pc, #680]	; 8000ad4 <HAL_DMA_Init+0x474>
 800082c:	428a      	cmp	r2, r1
 800082e:	bf08      	it	eq
 8000830:	f043 0301 	orreq.w	r3, r3, #1
 8000834:	3160      	adds	r1, #96	; 0x60
 8000836:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 8000ad8 <HAL_DMA_Init+0x478>
 800083a:	42b2      	cmp	r2, r6
 800083c:	bf08      	it	eq
 800083e:	f043 0301 	orreq.w	r3, r3, #1
 8000842:	4f95      	ldr	r7, [pc, #596]	; (8000a98 <HAL_DMA_Init+0x438>)
 8000844:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8000848:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8000adc <HAL_DMA_Init+0x47c>
 800084c:	42aa      	cmp	r2, r5
 800084e:	bf08      	it	eq
 8000850:	f043 0301 	orreq.w	r3, r3, #1
 8000854:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
 8000858:	f8df a258 	ldr.w	sl, [pc, #600]	; 8000ab4 <HAL_DMA_Init+0x454>
 800085c:	4282      	cmp	r2, r0
 800085e:	bf08      	it	eq
 8000860:	f043 0301 	orreq.w	r3, r3, #1
 8000864:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8000868:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8000ae0 <HAL_DMA_Init+0x480>
 800086c:	428a      	cmp	r2, r1
 800086e:	bf08      	it	eq
 8000870:	f043 0301 	orreq.w	r3, r3, #1
 8000874:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8000878:	4572      	cmp	r2, lr
 800087a:	bf08      	it	eq
 800087c:	f043 0301 	orreq.w	r3, r3, #1
 8000880:	f8df e228 	ldr.w	lr, [pc, #552]	; 8000aac <HAL_DMA_Init+0x44c>
 8000884:	4562      	cmp	r2, ip
 8000886:	bf08      	it	eq
 8000888:	f043 0301 	orreq.w	r3, r3, #1
 800088c:	eba2 0e0e 	sub.w	lr, r2, lr
 8000890:	f8df c21c 	ldr.w	ip, [pc, #540]	; 8000ab0 <HAL_DMA_Init+0x450>
 8000894:	42ba      	cmp	r2, r7
 8000896:	bf08      	it	eq
 8000898:	f043 0301 	orreq.w	r3, r3, #1
 800089c:	fabe fe8e 	clz	lr, lr
 80008a0:	eba2 070c 	sub.w	r7, r2, ip
 80008a4:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80008a8:	42b2      	cmp	r2, r6
 80008aa:	bf08      	it	eq
 80008ac:	f043 0301 	orreq.w	r3, r3, #1
 80008b0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80008b4:	eba2 060a 	sub.w	r6, r2, sl
 80008b8:	fab7 f787 	clz	r7, r7
 80008bc:	42aa      	cmp	r2, r5
 80008be:	bf08      	it	eq
 80008c0:	f043 0301 	orreq.w	r3, r3, #1
 80008c4:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 80008c8:	eba2 050c 	sub.w	r5, r2, ip
 80008cc:	097f      	lsrs	r7, r7, #5
 80008ce:	4282      	cmp	r2, r0
 80008d0:	bf08      	it	eq
 80008d2:	f043 0301 	orreq.w	r3, r3, #1
 80008d6:	fab6 f686 	clz	r6, r6
 80008da:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80008de:	fab5 f585 	clz	r5, r5
 80008e2:	428a      	cmp	r2, r1
 80008e4:	bf08      	it	eq
 80008e6:	f043 0301 	orreq.w	r3, r3, #1
 80008ea:	0976      	lsrs	r6, r6, #5
 80008ec:	eba2 000a 	sub.w	r0, r2, sl
 80008f0:	eba2 010c 	sub.w	r1, r2, ip
 80008f4:	4542      	cmp	r2, r8
 80008f6:	bf08      	it	eq
 80008f8:	f043 0301 	orreq.w	r3, r3, #1
 80008fc:	096d      	lsrs	r5, r5, #5
 80008fe:	fab0 f080 	clz	r0, r0
 8000902:	f10c 0c14 	add.w	ip, ip, #20
 8000906:	454a      	cmp	r2, r9
 8000908:	bf08      	it	eq
 800090a:	f043 0301 	orreq.w	r3, r3, #1
 800090e:	fab1 f181 	clz	r1, r1
 8000912:	0940      	lsrs	r0, r0, #5
 8000914:	eba2 0c0c 	sub.w	ip, r2, ip
 8000918:	ea4e 0303 	orr.w	r3, lr, r3
 800091c:	0949      	lsrs	r1, r1, #5
 800091e:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8000ab8 <HAL_DMA_Init+0x458>
 8000922:	fabc fc8c 	clz	ip, ip
 8000926:	433b      	orrs	r3, r7
 8000928:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800092c:	eba2 0808 	sub.w	r8, r2, r8
 8000930:	4333      	orrs	r3, r6
 8000932:	fab8 f888 	clz	r8, r8
 8000936:	432b      	orrs	r3, r5
 8000938:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800093c:	4303      	orrs	r3, r0
 800093e:	430b      	orrs	r3, r1
 8000940:	ea5c 0303 	orrs.w	r3, ip, r3
 8000944:	d102      	bne.n	800094c <HAL_DMA_Init+0x2ec>
 8000946:	f1b8 0f00 	cmp.w	r8, #0
 800094a:	d02d      	beq.n	80009a8 <HAL_DMA_Init+0x348>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800094c:	ea47 070e 	orr.w	r7, r7, lr
 8000950:	b2d3      	uxtb	r3, r2
 8000952:	433e      	orrs	r6, r7
 8000954:	4335      	orrs	r5, r6
 8000956:	4328      	orrs	r0, r5
 8000958:	4301      	orrs	r1, r0
 800095a:	ea5c 0101 	orrs.w	r1, ip, r1
 800095e:	d102      	bne.n	8000966 <HAL_DMA_Init+0x306>
 8000960:	f1b8 0f00 	cmp.w	r8, #0
 8000964:	d076      	beq.n	8000a54 <HAL_DMA_Init+0x3f4>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8000966:	484d      	ldr	r0, [pc, #308]	; (8000a9c <HAL_DMA_Init+0x43c>)
 8000968:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800096a:	4a4d      	ldr	r2, [pc, #308]	; (8000aa0 <HAL_DMA_Init+0x440>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800096c:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800096e:	fba0 0303 	umull	r0, r3, r0, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8000972:	484c      	ldr	r0, [pc, #304]	; (8000aa4 <HAL_DMA_Init+0x444>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8000974:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8000976:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8000978:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800097a:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800097e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8000984:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8000986:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000988:	68a3      	ldr	r3, [r4, #8]
 800098a:	2b80      	cmp	r3, #128	; 0x80
 800098c:	d026      	beq.n	80009dc <HAL_DMA_Init+0x37c>
 800098e:	7923      	ldrb	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000990:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000992:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8000996:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000998:	6860      	ldr	r0, [r4, #4]
 800099a:	1e41      	subs	r1, r0, #1
 800099c:	2907      	cmp	r1, #7
 800099e:	d921      	bls.n	80009e4 <HAL_DMA_Init+0x384>
      hdma->DMAmuxRequestGen = 0U;
 80009a0:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 80009a2:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80009a6:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80009aa:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ac:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80009ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009b6:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80009b8:	2303      	movs	r3, #3
        return HAL_ERROR;
 80009ba:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009bc:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80009be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 80009c6:	2001      	movs	r0, #1
}
 80009c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80009cc:	4936      	ldr	r1, [pc, #216]	; (8000aa8 <HAL_DMA_Init+0x448>)
 80009ce:	40e9      	lsrs	r1, r5
 80009d0:	07c9      	lsls	r1, r1, #31
 80009d2:	f57f aed7 	bpl.w	8000784 <HAL_DMA_Init+0x124>
        registerValue |= DMA_SxCR_TRBUFF;
 80009d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80009da:	e6d8      	b.n	800078e <HAL_DMA_Init+0x12e>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80009dc:	2100      	movs	r1, #0
 80009de:	460b      	mov	r3, r1
 80009e0:	6061      	str	r1, [r4, #4]
 80009e2:	e7d5      	b.n	8000990 <HAL_DMA_Init+0x330>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80009e4:	6822      	ldr	r2, [r4, #0]
 80009e6:	4b31      	ldr	r3, [pc, #196]	; (8000aac <HAL_DMA_Init+0x44c>)
 80009e8:	4e31      	ldr	r6, [pc, #196]	; (8000ab0 <HAL_DMA_Init+0x450>)
 80009ea:	4d32      	ldr	r5, [pc, #200]	; (8000ab4 <HAL_DMA_Init+0x454>)
 80009ec:	42b2      	cmp	r2, r6
 80009ee:	bf18      	it	ne
 80009f0:	429a      	cmpne	r2, r3
 80009f2:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80009f6:	bf0c      	ite	eq
 80009f8:	2301      	moveq	r3, #1
 80009fa:	2300      	movne	r3, #0
 80009fc:	42aa      	cmp	r2, r5
 80009fe:	bf08      	it	eq
 8000a00:	f043 0301 	orreq.w	r3, r3, #1
 8000a04:	3528      	adds	r5, #40	; 0x28
 8000a06:	42b2      	cmp	r2, r6
 8000a08:	bf08      	it	eq
 8000a0a:	f043 0301 	orreq.w	r3, r3, #1
 8000a0e:	3628      	adds	r6, #40	; 0x28
 8000a10:	42aa      	cmp	r2, r5
 8000a12:	bf08      	it	eq
 8000a14:	f043 0301 	orreq.w	r3, r3, #1
 8000a18:	3528      	adds	r5, #40	; 0x28
 8000a1a:	42b2      	cmp	r2, r6
 8000a1c:	bf08      	it	eq
 8000a1e:	f043 0301 	orreq.w	r3, r3, #1
 8000a22:	42aa      	cmp	r2, r5
 8000a24:	bf08      	it	eq
 8000a26:	f043 0301 	orreq.w	r3, r3, #1
 8000a2a:	b91b      	cbnz	r3, 8000a34 <HAL_DMA_Init+0x3d4>
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <HAL_DMA_Init+0x458>)
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	f040 80ca 	bne.w	8000bc8 <HAL_DMA_Init+0x568>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8000a34:	4b21      	ldr	r3, [pc, #132]	; (8000abc <HAL_DMA_Init+0x45c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8000a36:	4d22      	ldr	r5, [pc, #136]	; (8000ac0 <HAL_DMA_Init+0x460>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8000a38:	4403      	add	r3, r0
 8000a3a:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8000a3c:	2201      	movs	r2, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000a3e:	2000      	movs	r0, #0
 8000a40:	6725      	str	r5, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8000a42:	fa02 f101 	lsl.w	r1, r2, r1
 8000a46:	66e3      	str	r3, [r4, #108]	; 0x6c
 8000a48:	6761      	str	r1, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000a4a:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a4c:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	e7a9      	b.n	80009a8 <HAL_DMA_Init+0x348>
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8000a54:	491b      	ldr	r1, [pc, #108]	; (8000ac4 <HAL_DMA_Init+0x464>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8000a56:	3b10      	subs	r3, #16
 8000a58:	481b      	ldr	r0, [pc, #108]	; (8000ac8 <HAL_DMA_Init+0x468>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8000a5a:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8000a5c:	fba0 0303 	umull	r0, r3, r0, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8000a60:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8000a62:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8000a66:	d800      	bhi.n	8000a6a <HAL_DMA_Init+0x40a>
      stream_number += 8U;
 8000a68:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8000a6a:	4a18      	ldr	r2, [pc, #96]	; (8000acc <HAL_DMA_Init+0x46c>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8000a6c:	f003 051f 	and.w	r5, r3, #31
 8000a70:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000a72:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <HAL_DMA_Init+0x470>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8000a74:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8000a76:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000a78:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8000a7a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8000a7c:	66a1      	str	r1, [r4, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8000a7e:	6622      	str	r2, [r4, #96]	; 0x60
 8000a80:	e782      	b.n	8000988 <HAL_DMA_Init+0x328>
 8000a82:	bf00      	nop
 8000a84:	40020010 	.word	0x40020010
 8000a88:	40020028 	.word	0x40020028
 8000a8c:	40020040 	.word	0x40020040
 8000a90:	40020058 	.word	0x40020058
 8000a94:	40020070 	.word	0x40020070
 8000a98:	40020428 	.word	0x40020428
 8000a9c:	cccccccd 	.word	0xcccccccd
 8000aa0:	16009600 	.word	0x16009600
 8000aa4:	58025880 	.word	0x58025880
 8000aa8:	c3c0003f 	.word	0xc3c0003f
 8000aac:	58025408 	.word	0x58025408
 8000ab0:	5802541c 	.word	0x5802541c
 8000ab4:	58025430 	.word	0x58025430
 8000ab8:	58025494 	.word	0x58025494
 8000abc:	1600963f 	.word	0x1600963f
 8000ac0:	58025940 	.word	0x58025940
 8000ac4:	bffdfbf0 	.word	0xbffdfbf0
 8000ac8:	aaaaaaab 	.word	0xaaaaaaab
 8000acc:	10008200 	.word	0x10008200
 8000ad0:	40020880 	.word	0x40020880
 8000ad4:	400200b8 	.word	0x400200b8
 8000ad8:	40020410 	.word	0x40020410
 8000adc:	400204a0 	.word	0x400204a0
 8000ae0:	400204b8 	.word	0x400204b8
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000ae4:	4b3f      	ldr	r3, [pc, #252]	; (8000be4 <HAL_DMA_Init+0x584>)
 8000ae6:	4940      	ldr	r1, [pc, #256]	; (8000be8 <HAL_DMA_Init+0x588>)
 8000ae8:	4840      	ldr	r0, [pc, #256]	; (8000bec <HAL_DMA_Init+0x58c>)
 8000aea:	428a      	cmp	r2, r1
 8000aec:	bf18      	it	ne
 8000aee:	429a      	cmpne	r2, r3
 8000af0:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8000af4:	4d3e      	ldr	r5, [pc, #248]	; (8000bf0 <HAL_DMA_Init+0x590>)
 8000af6:	bf0c      	ite	eq
 8000af8:	2301      	moveq	r3, #1
 8000afa:	2300      	movne	r3, #0
 8000afc:	4282      	cmp	r2, r0
 8000afe:	bf08      	it	eq
 8000b00:	f043 0301 	orreq.w	r3, r3, #1
 8000b04:	303c      	adds	r0, #60	; 0x3c
 8000b06:	428a      	cmp	r2, r1
 8000b08:	bf08      	it	eq
 8000b0a:	f043 0301 	orreq.w	r3, r3, #1
 8000b0e:	313c      	adds	r1, #60	; 0x3c
 8000b10:	42aa      	cmp	r2, r5
 8000b12:	bf08      	it	eq
 8000b14:	f043 0301 	orreq.w	r3, r3, #1
 8000b18:	4282      	cmp	r2, r0
 8000b1a:	bf08      	it	eq
 8000b1c:	f043 0301 	orreq.w	r3, r3, #1
 8000b20:	428a      	cmp	r2, r1
 8000b22:	bf08      	it	eq
 8000b24:	f043 0301 	orreq.w	r3, r3, #1
 8000b28:	b913      	cbnz	r3, 8000b30 <HAL_DMA_Init+0x4d0>
 8000b2a:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <HAL_DMA_Init+0x594>)
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d152      	bne.n	8000bd6 <HAL_DMA_Init+0x576>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b30:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8000b32:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000b34:	4f30      	ldr	r7, [pc, #192]	; (8000bf8 <HAL_DMA_Init+0x598>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b36:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000b3a:	68a3      	ldr	r3, [r4, #8]
    __HAL_UNLOCK(hdma);
 8000b3c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000b40:	2b40      	cmp	r3, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000b42:	6811      	ldr	r1, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000b44:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000b48:	d043      	beq.n	8000bd2 <HAL_DMA_Init+0x572>
 8000b4a:	2b80      	cmp	r3, #128	; 0x80
 8000b4c:	bf14      	ite	ne
 8000b4e:	2100      	movne	r1, #0
 8000b50:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000b54:	6923      	ldr	r3, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b56:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000b58:	68e5      	ldr	r5, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000b5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000b5c:	6966      	ldr	r6, [r4, #20]
 8000b5e:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000b62:	69a5      	ldr	r5, [r4, #24]
 8000b64:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000b68:	69e6      	ldr	r6, [r4, #28]
 8000b6a:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000b6e:	6a25      	ldr	r5, [r4, #32]
 8000b70:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000b74:	4e21      	ldr	r6, [pc, #132]	; (8000bfc <HAL_DMA_Init+0x59c>)
 8000b76:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8000b7a:	4d21      	ldr	r5, [pc, #132]	; (8000c00 <HAL_DMA_Init+0x5a0>)
 8000b7c:	433b      	orrs	r3, r7
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000b7e:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000b80:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000b82:	6823      	ldr	r3, [r4, #0]
 8000b84:	441e      	add	r6, r3
 8000b86:	fba5 2306 	umull	r2, r3, r5, r6
 8000b8a:	091b      	lsrs	r3, r3, #4
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b90:	f7ff fcea 	bl	8000568 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000b94:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b96:	2301      	movs	r3, #1
 8000b98:	f002 021f 	and.w	r2, r2, #31
 8000b9c:	4093      	lsls	r3, r2
 8000b9e:	6043      	str	r3, [r0, #4]
 8000ba0:	e634      	b.n	800080c <HAL_DMA_Init+0x1ac>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ba2:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8000ba6:	f47f ae27 	bne.w	80007f8 <HAL_DMA_Init+0x198>
 8000baa:	e60a      	b.n	80007c2 <HAL_DMA_Init+0x162>
    switch (hdma->Init.FIFOThreshold)
 8000bac:	2a03      	cmp	r2, #3
 8000bae:	f63f ae23 	bhi.w	80007f8 <HAL_DMA_Init+0x198>
 8000bb2:	a501      	add	r5, pc, #4	; (adr r5, 8000bb8 <HAL_DMA_Init+0x558>)
 8000bb4:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8000bb8:	080007c3 	.word	0x080007c3
 8000bbc:	080007bf 	.word	0x080007bf
 8000bc0:	080007c3 	.word	0x080007c3
 8000bc4:	08000ba3 	.word	0x08000ba3
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_DMA_Init+0x5a4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000bca:	4d0f      	ldr	r5, [pc, #60]	; (8000c08 <HAL_DMA_Init+0x5a8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000bcc:	4403      	add	r3, r0
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	e734      	b.n	8000a3c <HAL_DMA_Init+0x3dc>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	e7be      	b.n	8000b54 <HAL_DMA_Init+0x4f4>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000bd6:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000bd8:	2303      	movs	r3, #3
    return HAL_ERROR;
 8000bda:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000bdc:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000bde:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8000be2:	e6e6      	b.n	80009b2 <HAL_DMA_Init+0x352>
 8000be4:	58025408 	.word	0x58025408
 8000be8:	5802541c 	.word	0x5802541c
 8000bec:	58025430 	.word	0x58025430
 8000bf0:	58025458 	.word	0x58025458
 8000bf4:	58025494 	.word	0x58025494
 8000bf8:	fffe000f 	.word	0xfffe000f
 8000bfc:	a7fdabf8 	.word	0xa7fdabf8
 8000c00:	cccccccd 	.word	0xcccccccd
 8000c04:	1000823f 	.word	0x1000823f
 8000c08:	40020940 	.word	0x40020940

08000c0c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	f000 8268 	beq.w	80010e2 <HAL_DMA_Start_IT+0x4d6>
{
 8000c12:	b4f0      	push	{r4, r5, r6, r7}
 8000c14:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 8000c16:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8000c1a:	2801      	cmp	r0, #1
 8000c1c:	f000 8268 	beq.w	80010f0 <HAL_DMA_Start_IT+0x4e4>
 8000c20:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c22:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 8000c26:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8000c28:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c2c:	d007      	beq.n	8000c3e <HAL_DMA_Start_IT+0x32>
    __HAL_UNLOCK(hdma);
 8000c2e:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8000c34:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000c38:	656b      	str	r3, [r5, #84]	; 0x54
}
 8000c3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c3c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c3e:	2702      	movs	r7, #2
    __HAL_DMA_DISABLE(hdma);
 8000c40:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000c42:	4e9e      	ldr	r6, [pc, #632]	; (8000ebc <HAL_DMA_Start_IT+0x2b0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c44:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c48:	2700      	movs	r7, #0
 8000c4a:	656f      	str	r7, [r5, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8000c4c:	6820      	ldr	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000c4e:	4f9c      	ldr	r7, [pc, #624]	; (8000ec0 <HAL_DMA_Start_IT+0x2b4>)
    __HAL_DMA_DISABLE(hdma);
 8000c50:	f020 0001 	bic.w	r0, r0, #1
 8000c54:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000c56:	489b      	ldr	r0, [pc, #620]	; (8000ec4 <HAL_DMA_Start_IT+0x2b8>)
 8000c58:	682c      	ldr	r4, [r5, #0]
 8000c5a:	42b4      	cmp	r4, r6
 8000c5c:	bf18      	it	ne
 8000c5e:	4284      	cmpne	r4, r0
 8000c60:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8000c64:	bf0c      	ite	eq
 8000c66:	2001      	moveq	r0, #1
 8000c68:	2000      	movne	r0, #0
 8000c6a:	42bc      	cmp	r4, r7
 8000c6c:	bf08      	it	eq
 8000c6e:	f040 0001 	orreq.w	r0, r0, #1
 8000c72:	3730      	adds	r7, #48	; 0x30
 8000c74:	42b4      	cmp	r4, r6
 8000c76:	bf08      	it	eq
 8000c78:	f040 0001 	orreq.w	r0, r0, #1
 8000c7c:	3630      	adds	r6, #48	; 0x30
 8000c7e:	42bc      	cmp	r4, r7
 8000c80:	bf08      	it	eq
 8000c82:	f040 0001 	orreq.w	r0, r0, #1
 8000c86:	3730      	adds	r7, #48	; 0x30
 8000c88:	42b4      	cmp	r4, r6
 8000c8a:	bf08      	it	eq
 8000c8c:	f040 0001 	orreq.w	r0, r0, #1
 8000c90:	3630      	adds	r6, #48	; 0x30
 8000c92:	42bc      	cmp	r4, r7
 8000c94:	bf08      	it	eq
 8000c96:	f040 0001 	orreq.w	r0, r0, #1
 8000c9a:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8000c9e:	42b4      	cmp	r4, r6
 8000ca0:	bf08      	it	eq
 8000ca2:	f040 0001 	orreq.w	r0, r0, #1
 8000ca6:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8000caa:	42bc      	cmp	r4, r7
 8000cac:	bf08      	it	eq
 8000cae:	f040 0001 	orreq.w	r0, r0, #1
 8000cb2:	3730      	adds	r7, #48	; 0x30
 8000cb4:	42b4      	cmp	r4, r6
 8000cb6:	bf08      	it	eq
 8000cb8:	f040 0001 	orreq.w	r0, r0, #1
 8000cbc:	3630      	adds	r6, #48	; 0x30
 8000cbe:	42bc      	cmp	r4, r7
 8000cc0:	bf08      	it	eq
 8000cc2:	f040 0001 	orreq.w	r0, r0, #1
 8000cc6:	3730      	adds	r7, #48	; 0x30
 8000cc8:	42b4      	cmp	r4, r6
 8000cca:	bf08      	it	eq
 8000ccc:	f040 0001 	orreq.w	r0, r0, #1
 8000cd0:	3630      	adds	r6, #48	; 0x30
 8000cd2:	42bc      	cmp	r4, r7
 8000cd4:	bf08      	it	eq
 8000cd6:	f040 0001 	orreq.w	r0, r0, #1
 8000cda:	3730      	adds	r7, #48	; 0x30
 8000cdc:	42b4      	cmp	r4, r6
 8000cde:	bf08      	it	eq
 8000ce0:	f040 0001 	orreq.w	r0, r0, #1
 8000ce4:	3630      	adds	r6, #48	; 0x30
 8000ce6:	42bc      	cmp	r4, r7
 8000ce8:	bf08      	it	eq
 8000cea:	f040 0001 	orreq.w	r0, r0, #1
 8000cee:	4f76      	ldr	r7, [pc, #472]	; (8000ec8 <HAL_DMA_Start_IT+0x2bc>)
 8000cf0:	42b4      	cmp	r4, r6
 8000cf2:	bf08      	it	eq
 8000cf4:	f040 0001 	orreq.w	r0, r0, #1
 8000cf8:	4e74      	ldr	r6, [pc, #464]	; (8000ecc <HAL_DMA_Start_IT+0x2c0>)
 8000cfa:	42bc      	cmp	r4, r7
 8000cfc:	bf08      	it	eq
 8000cfe:	f040 0001 	orreq.w	r0, r0, #1
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	42b4      	cmp	r4, r6
 8000d06:	bf08      	it	eq
 8000d08:	f040 0001 	orreq.w	r0, r0, #1
 8000d0c:	3628      	adds	r6, #40	; 0x28
 8000d0e:	42bc      	cmp	r4, r7
 8000d10:	bf08      	it	eq
 8000d12:	f040 0001 	orreq.w	r0, r0, #1
 8000d16:	3728      	adds	r7, #40	; 0x28
 8000d18:	42b4      	cmp	r4, r6
 8000d1a:	bf08      	it	eq
 8000d1c:	f040 0001 	orreq.w	r0, r0, #1
 8000d20:	3628      	adds	r6, #40	; 0x28
 8000d22:	42bc      	cmp	r4, r7
 8000d24:	bf08      	it	eq
 8000d26:	f040 0001 	orreq.w	r0, r0, #1
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	42b4      	cmp	r4, r6
 8000d2e:	bf08      	it	eq
 8000d30:	f040 0001 	orreq.w	r0, r0, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d34:	6dae      	ldr	r6, [r5, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000d36:	42bc      	cmp	r4, r7
 8000d38:	bf08      	it	eq
 8000d3a:	f040 0001 	orreq.w	r0, r0, #1
 8000d3e:	b910      	cbnz	r0, 8000d46 <HAL_DMA_Start_IT+0x13a>
 8000d40:	4863      	ldr	r0, [pc, #396]	; (8000ed0 <HAL_DMA_Start_IT+0x2c4>)
 8000d42:	4284      	cmp	r4, r0
 8000d44:	d108      	bne.n	8000d58 <HAL_DMA_Start_IT+0x14c>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d46:	e9d5 0419 	ldrd	r0, r4, [r5, #100]	; 0x64
 8000d4a:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8000d4c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8000d4e:	b110      	cbz	r0, 8000d56 <HAL_DMA_Start_IT+0x14a>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d50:	e9d5 041c 	ldrd	r0, r4, [r5, #112]	; 0x70
 8000d54:	6044      	str	r4, [r0, #4]
 8000d56:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000d58:	485a      	ldr	r0, [pc, #360]	; (8000ec4 <HAL_DMA_Start_IT+0x2b8>)
 8000d5a:	f8df c160 	ldr.w	ip, [pc, #352]	; 8000ebc <HAL_DMA_Start_IT+0x2b0>
 8000d5e:	4f58      	ldr	r7, [pc, #352]	; (8000ec0 <HAL_DMA_Start_IT+0x2b4>)
 8000d60:	4564      	cmp	r4, ip
 8000d62:	bf18      	it	ne
 8000d64:	4284      	cmpne	r4, r0
 8000d66:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000d6a:	bf0c      	ite	eq
 8000d6c:	2001      	moveq	r0, #1
 8000d6e:	2000      	movne	r0, #0
 8000d70:	42bc      	cmp	r4, r7
 8000d72:	bf08      	it	eq
 8000d74:	f040 0001 	orreq.w	r0, r0, #1
 8000d78:	3730      	adds	r7, #48	; 0x30
 8000d7a:	4564      	cmp	r4, ip
 8000d7c:	bf08      	it	eq
 8000d7e:	f040 0001 	orreq.w	r0, r0, #1
 8000d82:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000d86:	42bc      	cmp	r4, r7
 8000d88:	bf08      	it	eq
 8000d8a:	f040 0001 	orreq.w	r0, r0, #1
 8000d8e:	3730      	adds	r7, #48	; 0x30
 8000d90:	4564      	cmp	r4, ip
 8000d92:	bf08      	it	eq
 8000d94:	f040 0001 	orreq.w	r0, r0, #1
 8000d98:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000d9c:	42bc      	cmp	r4, r7
 8000d9e:	bf08      	it	eq
 8000da0:	f040 0001 	orreq.w	r0, r0, #1
 8000da4:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8000da8:	4564      	cmp	r4, ip
 8000daa:	bf08      	it	eq
 8000dac:	f040 0001 	orreq.w	r0, r0, #1
 8000db0:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8000db4:	42bc      	cmp	r4, r7
 8000db6:	bf08      	it	eq
 8000db8:	f040 0001 	orreq.w	r0, r0, #1
 8000dbc:	3730      	adds	r7, #48	; 0x30
 8000dbe:	4564      	cmp	r4, ip
 8000dc0:	bf08      	it	eq
 8000dc2:	f040 0001 	orreq.w	r0, r0, #1
 8000dc6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000dca:	42bc      	cmp	r4, r7
 8000dcc:	bf08      	it	eq
 8000dce:	f040 0001 	orreq.w	r0, r0, #1
 8000dd2:	3730      	adds	r7, #48	; 0x30
 8000dd4:	4564      	cmp	r4, ip
 8000dd6:	bf08      	it	eq
 8000dd8:	f040 0001 	orreq.w	r0, r0, #1
 8000ddc:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000de0:	42bc      	cmp	r4, r7
 8000de2:	bf08      	it	eq
 8000de4:	f040 0001 	orreq.w	r0, r0, #1
 8000de8:	3730      	adds	r7, #48	; 0x30
 8000dea:	4564      	cmp	r4, ip
 8000dec:	bf08      	it	eq
 8000dee:	f040 0001 	orreq.w	r0, r0, #1
 8000df2:	42bc      	cmp	r4, r7
 8000df4:	bf08      	it	eq
 8000df6:	f040 0001 	orreq.w	r0, r0, #1
 8000dfa:	b918      	cbnz	r0, 8000e04 <HAL_DMA_Start_IT+0x1f8>
 8000dfc:	4835      	ldr	r0, [pc, #212]	; (8000ed4 <HAL_DMA_Start_IT+0x2c8>)
 8000dfe:	4284      	cmp	r4, r0
 8000e00:	f040 8179 	bne.w	80010f6 <HAL_DMA_Start_IT+0x4ea>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000e04:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8000e06:	203f      	movs	r0, #63	; 0x3f
 8000e08:	f004 041f 	and.w	r4, r4, #31
 8000e0c:	40a0      	lsls	r0, r4
 8000e0e:	60b0      	str	r0, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e10:	682c      	ldr	r4, [r5, #0]
 8000e12:	6820      	ldr	r0, [r4, #0]
 8000e14:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8000e18:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8000e1a:	6828      	ldr	r0, [r5, #0]
 8000e1c:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e1e:	68ab      	ldr	r3, [r5, #8]
 8000e20:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8000e22:	682b      	ldr	r3, [r5, #0]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e24:	f000 815f 	beq.w	80010e6 <HAL_DMA_Start_IT+0x4da>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8000e28:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8000e2a:	682b      	ldr	r3, [r5, #0]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	682c      	ldr	r4, [r5, #0]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000e30:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <HAL_DMA_Start_IT+0x2b8>)
 8000e32:	4922      	ldr	r1, [pc, #136]	; (8000ebc <HAL_DMA_Start_IT+0x2b0>)
 8000e34:	4a22      	ldr	r2, [pc, #136]	; (8000ec0 <HAL_DMA_Start_IT+0x2b4>)
 8000e36:	428c      	cmp	r4, r1
 8000e38:	bf18      	it	ne
 8000e3a:	429c      	cmpne	r4, r3
 8000e3c:	4826      	ldr	r0, [pc, #152]	; (8000ed8 <HAL_DMA_Start_IT+0x2cc>)
 8000e3e:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8000e42:	bf0c      	ite	eq
 8000e44:	2301      	moveq	r3, #1
 8000e46:	2300      	movne	r3, #0
 8000e48:	4294      	cmp	r4, r2
 8000e4a:	bf08      	it	eq
 8000e4c:	f043 0301 	orreq.w	r3, r3, #1
 8000e50:	3248      	adds	r2, #72	; 0x48
 8000e52:	4284      	cmp	r4, r0
 8000e54:	bf08      	it	eq
 8000e56:	f043 0301 	orreq.w	r3, r3, #1
 8000e5a:	3048      	adds	r0, #72	; 0x48
 8000e5c:	428c      	cmp	r4, r1
 8000e5e:	bf08      	it	eq
 8000e60:	f043 0301 	orreq.w	r3, r3, #1
 8000e64:	3148      	adds	r1, #72	; 0x48
 8000e66:	4294      	cmp	r4, r2
 8000e68:	bf08      	it	eq
 8000e6a:	f043 0301 	orreq.w	r3, r3, #1
 8000e6e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000e72:	4284      	cmp	r4, r0
 8000e74:	bf08      	it	eq
 8000e76:	f043 0301 	orreq.w	r3, r3, #1
 8000e7a:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8000e7e:	428c      	cmp	r4, r1
 8000e80:	bf08      	it	eq
 8000e82:	f043 0301 	orreq.w	r3, r3, #1
 8000e86:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8000e8a:	4294      	cmp	r4, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f043 0301 	orreq.w	r3, r3, #1
 8000e92:	3248      	adds	r2, #72	; 0x48
 8000e94:	4284      	cmp	r4, r0
 8000e96:	bf08      	it	eq
 8000e98:	f043 0301 	orreq.w	r3, r3, #1
 8000e9c:	3048      	adds	r0, #72	; 0x48
 8000e9e:	428c      	cmp	r4, r1
 8000ea0:	bf08      	it	eq
 8000ea2:	f043 0301 	orreq.w	r3, r3, #1
 8000ea6:	3148      	adds	r1, #72	; 0x48
 8000ea8:	4294      	cmp	r4, r2
 8000eaa:	bf08      	it	eq
 8000eac:	f043 0301 	orreq.w	r3, r3, #1
 8000eb0:	3248      	adds	r2, #72	; 0x48
 8000eb2:	4284      	cmp	r4, r0
 8000eb4:	bf08      	it	eq
 8000eb6:	f043 0301 	orreq.w	r3, r3, #1
 8000eba:	e00f      	b.n	8000edc <HAL_DMA_Start_IT+0x2d0>
 8000ebc:	40020028 	.word	0x40020028
 8000ec0:	40020040 	.word	0x40020040
 8000ec4:	40020010 	.word	0x40020010
 8000ec8:	58025408 	.word	0x58025408
 8000ecc:	5802541c 	.word	0x5802541c
 8000ed0:	58025494 	.word	0x58025494
 8000ed4:	400204b8 	.word	0x400204b8
 8000ed8:	40020058 	.word	0x40020058
 8000edc:	428c      	cmp	r4, r1
 8000ede:	bf08      	it	eq
 8000ee0:	f043 0301 	orreq.w	r3, r3, #1
 8000ee4:	4294      	cmp	r4, r2
 8000ee6:	bf08      	it	eq
 8000ee8:	f043 0301 	orreq.w	r3, r3, #1
 8000eec:	b91b      	cbnz	r3, 8000ef6 <HAL_DMA_Start_IT+0x2ea>
 8000eee:	4b9c      	ldr	r3, [pc, #624]	; (8001160 <HAL_DMA_Start_IT+0x554>)
 8000ef0:	429c      	cmp	r4, r3
 8000ef2:	f040 8149 	bne.w	8001188 <HAL_DMA_Start_IT+0x57c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	f023 031e 	bic.w	r3, r3, #30
 8000efc:	f043 0316 	orr.w	r3, r3, #22
 8000f00:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8000f02:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000f04:	b123      	cbz	r3, 8000f10 <HAL_DMA_Start_IT+0x304>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8000f06:	682a      	ldr	r2, [r5, #0]
 8000f08:	6813      	ldr	r3, [r2, #0]
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000f10:	682c      	ldr	r4, [r5, #0]
 8000f12:	4b94      	ldr	r3, [pc, #592]	; (8001164 <HAL_DMA_Start_IT+0x558>)
 8000f14:	4a94      	ldr	r2, [pc, #592]	; (8001168 <HAL_DMA_Start_IT+0x55c>)
 8000f16:	4895      	ldr	r0, [pc, #596]	; (800116c <HAL_DMA_Start_IT+0x560>)
 8000f18:	4294      	cmp	r4, r2
 8000f1a:	bf18      	it	ne
 8000f1c:	429c      	cmpne	r4, r3
 8000f1e:	4994      	ldr	r1, [pc, #592]	; (8001170 <HAL_DMA_Start_IT+0x564>)
 8000f20:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8000f24:	bf0c      	ite	eq
 8000f26:	2301      	moveq	r3, #1
 8000f28:	2300      	movne	r3, #0
 8000f2a:	4284      	cmp	r4, r0
 8000f2c:	bf08      	it	eq
 8000f2e:	f043 0301 	orreq.w	r3, r3, #1
 8000f32:	3048      	adds	r0, #72	; 0x48
 8000f34:	428c      	cmp	r4, r1
 8000f36:	bf08      	it	eq
 8000f38:	f043 0301 	orreq.w	r3, r3, #1
 8000f3c:	3148      	adds	r1, #72	; 0x48
 8000f3e:	4294      	cmp	r4, r2
 8000f40:	bf08      	it	eq
 8000f42:	f043 0301 	orreq.w	r3, r3, #1
 8000f46:	3248      	adds	r2, #72	; 0x48
 8000f48:	4284      	cmp	r4, r0
 8000f4a:	bf08      	it	eq
 8000f4c:	f043 0301 	orreq.w	r3, r3, #1
 8000f50:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8000f54:	428c      	cmp	r4, r1
 8000f56:	bf08      	it	eq
 8000f58:	f043 0301 	orreq.w	r3, r3, #1
 8000f5c:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8000f60:	4294      	cmp	r4, r2
 8000f62:	bf08      	it	eq
 8000f64:	f043 0301 	orreq.w	r3, r3, #1
 8000f68:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000f6c:	4284      	cmp	r4, r0
 8000f6e:	bf08      	it	eq
 8000f70:	f043 0301 	orreq.w	r3, r3, #1
 8000f74:	3048      	adds	r0, #72	; 0x48
 8000f76:	428c      	cmp	r4, r1
 8000f78:	bf08      	it	eq
 8000f7a:	f043 0301 	orreq.w	r3, r3, #1
 8000f7e:	3148      	adds	r1, #72	; 0x48
 8000f80:	4294      	cmp	r4, r2
 8000f82:	bf08      	it	eq
 8000f84:	f043 0301 	orreq.w	r3, r3, #1
 8000f88:	3248      	adds	r2, #72	; 0x48
 8000f8a:	4284      	cmp	r4, r0
 8000f8c:	bf08      	it	eq
 8000f8e:	f043 0301 	orreq.w	r3, r3, #1
 8000f92:	3048      	adds	r0, #72	; 0x48
 8000f94:	428c      	cmp	r4, r1
 8000f96:	bf08      	it	eq
 8000f98:	f043 0301 	orreq.w	r3, r3, #1
 8000f9c:	3148      	adds	r1, #72	; 0x48
 8000f9e:	4294      	cmp	r4, r2
 8000fa0:	bf08      	it	eq
 8000fa2:	f043 0301 	orreq.w	r3, r3, #1
 8000fa6:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8000faa:	4284      	cmp	r4, r0
 8000fac:	bf08      	it	eq
 8000fae:	f043 0301 	orreq.w	r3, r3, #1
 8000fb2:	f502 429f 	add.w	r2, r2, #20352	; 0x4f80
 8000fb6:	486f      	ldr	r0, [pc, #444]	; (8001174 <HAL_DMA_Start_IT+0x568>)
 8000fb8:	428c      	cmp	r4, r1
 8000fba:	bf08      	it	eq
 8000fbc:	f043 0301 	orreq.w	r3, r3, #1
 8000fc0:	496d      	ldr	r1, [pc, #436]	; (8001178 <HAL_DMA_Start_IT+0x56c>)
 8000fc2:	4294      	cmp	r4, r2
 8000fc4:	bf08      	it	eq
 8000fc6:	f043 0301 	orreq.w	r3, r3, #1
 8000fca:	323c      	adds	r2, #60	; 0x3c
 8000fcc:	4284      	cmp	r4, r0
 8000fce:	bf08      	it	eq
 8000fd0:	f043 0301 	orreq.w	r3, r3, #1
 8000fd4:	303c      	adds	r0, #60	; 0x3c
 8000fd6:	428c      	cmp	r4, r1
 8000fd8:	bf08      	it	eq
 8000fda:	f043 0301 	orreq.w	r3, r3, #1
 8000fde:	313c      	adds	r1, #60	; 0x3c
 8000fe0:	4294      	cmp	r4, r2
 8000fe2:	bf08      	it	eq
 8000fe4:	f043 0301 	orreq.w	r3, r3, #1
 8000fe8:	323c      	adds	r2, #60	; 0x3c
 8000fea:	4284      	cmp	r4, r0
 8000fec:	bf08      	it	eq
 8000fee:	f043 0301 	orreq.w	r3, r3, #1
 8000ff2:	428c      	cmp	r4, r1
 8000ff4:	bf08      	it	eq
 8000ff6:	f043 0301 	orreq.w	r3, r3, #1
 8000ffa:	4294      	cmp	r4, r2
 8000ffc:	bf08      	it	eq
 8000ffe:	f043 0301 	orreq.w	r3, r3, #1
 8001002:	b913      	cbnz	r3, 800100a <HAL_DMA_Start_IT+0x3fe>
 8001004:	4b5d      	ldr	r3, [pc, #372]	; (800117c <HAL_DMA_Start_IT+0x570>)
 8001006:	429c      	cmp	r4, r3
 8001008:	d10e      	bne.n	8001028 <HAL_DMA_Start_IT+0x41c>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800100a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	03d2      	lsls	r2, r2, #15
 8001010:	d503      	bpl.n	800101a <HAL_DMA_Start_IT+0x40e>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001018:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800101a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800101c:	b11b      	cbz	r3, 8001026 <HAL_DMA_Start_IT+0x41a>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	682c      	ldr	r4, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8001028:	4b4e      	ldr	r3, [pc, #312]	; (8001164 <HAL_DMA_Start_IT+0x558>)
 800102a:	494f      	ldr	r1, [pc, #316]	; (8001168 <HAL_DMA_Start_IT+0x55c>)
 800102c:	4a4f      	ldr	r2, [pc, #316]	; (800116c <HAL_DMA_Start_IT+0x560>)
 800102e:	428c      	cmp	r4, r1
 8001030:	bf18      	it	ne
 8001032:	429c      	cmpne	r4, r3
 8001034:	4d4e      	ldr	r5, [pc, #312]	; (8001170 <HAL_DMA_Start_IT+0x564>)
 8001036:	4852      	ldr	r0, [pc, #328]	; (8001180 <HAL_DMA_Start_IT+0x574>)
 8001038:	f101 0160 	add.w	r1, r1, #96	; 0x60
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	4294      	cmp	r4, r2
 8001044:	bf08      	it	eq
 8001046:	f043 0301 	orreq.w	r3, r3, #1
 800104a:	3260      	adds	r2, #96	; 0x60
 800104c:	42ac      	cmp	r4, r5
 800104e:	bf08      	it	eq
 8001050:	f043 0301 	orreq.w	r3, r3, #1
 8001054:	3560      	adds	r5, #96	; 0x60
 8001056:	4284      	cmp	r4, r0
 8001058:	bf08      	it	eq
 800105a:	f043 0301 	orreq.w	r3, r3, #1
 800105e:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8001062:	428c      	cmp	r4, r1
 8001064:	bf08      	it	eq
 8001066:	f043 0301 	orreq.w	r3, r3, #1
 800106a:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 800106e:	4294      	cmp	r4, r2
 8001070:	bf08      	it	eq
 8001072:	f043 0301 	orreq.w	r3, r3, #1
 8001076:	f502 7268 	add.w	r2, r2, #928	; 0x3a0
 800107a:	42ac      	cmp	r4, r5
 800107c:	bf08      	it	eq
 800107e:	f043 0301 	orreq.w	r3, r3, #1
 8001082:	f505 7568 	add.w	r5, r5, #928	; 0x3a0
 8001086:	4284      	cmp	r4, r0
 8001088:	bf08      	it	eq
 800108a:	f043 0301 	orreq.w	r3, r3, #1
 800108e:	3060      	adds	r0, #96	; 0x60
 8001090:	428c      	cmp	r4, r1
 8001092:	bf08      	it	eq
 8001094:	f043 0301 	orreq.w	r3, r3, #1
 8001098:	3160      	adds	r1, #96	; 0x60
 800109a:	4294      	cmp	r4, r2
 800109c:	bf08      	it	eq
 800109e:	f043 0301 	orreq.w	r3, r3, #1
 80010a2:	3260      	adds	r2, #96	; 0x60
 80010a4:	42ac      	cmp	r4, r5
 80010a6:	bf08      	it	eq
 80010a8:	f043 0301 	orreq.w	r3, r3, #1
 80010ac:	4284      	cmp	r4, r0
 80010ae:	bf08      	it	eq
 80010b0:	f043 0301 	orreq.w	r3, r3, #1
 80010b4:	428c      	cmp	r4, r1
 80010b6:	bf08      	it	eq
 80010b8:	f043 0301 	orreq.w	r3, r3, #1
 80010bc:	4294      	cmp	r4, r2
 80010be:	bf08      	it	eq
 80010c0:	f043 0301 	orreq.w	r3, r3, #1
 80010c4:	b933      	cbnz	r3, 80010d4 <HAL_DMA_Start_IT+0x4c8>
 80010c6:	3048      	adds	r0, #72	; 0x48
 80010c8:	1a20      	subs	r0, r4, r0
 80010ca:	fab0 f080 	clz	r0, r0
 80010ce:	0940      	lsrs	r0, r0, #5
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d040      	beq.n	8001156 <HAL_DMA_Start_IT+0x54a>
 80010d4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010d6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6023      	str	r3, [r4, #0]
}
 80010de:	bcf0      	pop	{r4, r5, r6, r7}
 80010e0:	4770      	bx	lr
    return HAL_ERROR;
 80010e2:	2001      	movs	r0, #1
}
 80010e4:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80010e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80010e8:	682b      	ldr	r3, [r5, #0]
 80010ea:	60d9      	str	r1, [r3, #12]
 80010ec:	682c      	ldr	r4, [r5, #0]
 80010ee:	e69f      	b.n	8000e30 <HAL_DMA_Start_IT+0x224>
  __HAL_LOCK(hdma);
 80010f0:	2002      	movs	r0, #2
}
 80010f2:	bcf0      	pop	{r4, r5, r6, r7}
 80010f4:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80010f6:	4823      	ldr	r0, [pc, #140]	; (8001184 <HAL_DMA_Start_IT+0x578>)
 80010f8:	f8df c078 	ldr.w	ip, [pc, #120]	; 8001174 <HAL_DMA_Start_IT+0x568>
 80010fc:	4f1e      	ldr	r7, [pc, #120]	; (8001178 <HAL_DMA_Start_IT+0x56c>)
 80010fe:	4564      	cmp	r4, ip
 8001100:	bf18      	it	ne
 8001102:	4284      	cmpne	r4, r0
 8001104:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001108:	bf0c      	ite	eq
 800110a:	2001      	moveq	r0, #1
 800110c:	2000      	movne	r0, #0
 800110e:	42bc      	cmp	r4, r7
 8001110:	bf08      	it	eq
 8001112:	f040 0001 	orreq.w	r0, r0, #1
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	4564      	cmp	r4, ip
 800111a:	bf08      	it	eq
 800111c:	f040 0001 	orreq.w	r0, r0, #1
 8001120:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001124:	42bc      	cmp	r4, r7
 8001126:	bf08      	it	eq
 8001128:	f040 0001 	orreq.w	r0, r0, #1
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	4564      	cmp	r4, ip
 8001130:	bf08      	it	eq
 8001132:	f040 0001 	orreq.w	r0, r0, #1
 8001136:	42bc      	cmp	r4, r7
 8001138:	bf08      	it	eq
 800113a:	f040 0001 	orreq.w	r0, r0, #1
 800113e:	b918      	cbnz	r0, 8001148 <HAL_DMA_Start_IT+0x53c>
 8001140:	480e      	ldr	r0, [pc, #56]	; (800117c <HAL_DMA_Start_IT+0x570>)
 8001142:	4284      	cmp	r4, r0
 8001144:	f47f ae74 	bne.w	8000e30 <HAL_DMA_Start_IT+0x224>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001148:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 800114a:	2001      	movs	r0, #1
 800114c:	f004 041f 	and.w	r4, r4, #31
 8001150:	40a0      	lsls	r0, r4
 8001152:	6070      	str	r0, [r6, #4]
 8001154:	e661      	b.n	8000e1a <HAL_DMA_Start_IT+0x20e>
    __HAL_DMA_ENABLE(hdma);
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6023      	str	r3, [r4, #0]
 800115e:	e56c      	b.n	8000c3a <HAL_DMA_Start_IT+0x2e>
 8001160:	400204b8 	.word	0x400204b8
 8001164:	40020010 	.word	0x40020010
 8001168:	40020028 	.word	0x40020028
 800116c:	40020040 	.word	0x40020040
 8001170:	40020058 	.word	0x40020058
 8001174:	5802541c 	.word	0x5802541c
 8001178:	58025430 	.word	0x58025430
 800117c:	58025494 	.word	0x58025494
 8001180:	40020070 	.word	0x40020070
 8001184:	58025408 	.word	0x58025408
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	f023 030e 	bic.w	r3, r3, #14
 800118e:	f043 030a 	orr.w	r3, r3, #10
 8001192:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001194:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001196:	2b00      	cmp	r3, #0
 8001198:	f43f aeba 	beq.w	8000f10 <HAL_DMA_Start_IT+0x304>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800119c:	682a      	ldr	r2, [r5, #0]
 800119e:	6813      	ldr	r3, [r2, #0]
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e6b3      	b.n	8000f10 <HAL_DMA_Start_IT+0x304>

080011a8 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d06a      	beq.n	8001282 <HAL_DMA_Abort_IT+0xda>
{
 80011ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b0:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80011b4:	4603      	mov	r3, r0
 80011b6:	2a02      	cmp	r2, #2
 80011b8:	d004      	beq.n	80011c4 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ba:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80011bc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011be:	655a      	str	r2, [r3, #84]	; 0x54
}
 80011c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80011c4:	6802      	ldr	r2, [r0, #0]
 80011c6:	4986      	ldr	r1, [pc, #536]	; (80013e0 <HAL_DMA_Abort_IT+0x238>)
 80011c8:	428a      	cmp	r2, r1
 80011ca:	d050      	beq.n	800126e <HAL_DMA_Abort_IT+0xc6>
 80011cc:	4885      	ldr	r0, [pc, #532]	; (80013e4 <HAL_DMA_Abort_IT+0x23c>)
 80011ce:	4282      	cmp	r2, r0
 80011d0:	d04d      	beq.n	800126e <HAL_DMA_Abort_IT+0xc6>
 80011d2:	f8df 8228 	ldr.w	r8, [pc, #552]	; 80013fc <HAL_DMA_Abort_IT+0x254>
 80011d6:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80013f8 <HAL_DMA_Abort_IT+0x250>
 80011da:	f8df e230 	ldr.w	lr, [pc, #560]	; 800140c <HAL_DMA_Abort_IT+0x264>
 80011de:	454a      	cmp	r2, r9
 80011e0:	bf18      	it	ne
 80011e2:	4542      	cmpne	r2, r8
 80011e4:	f8df c228 	ldr.w	ip, [pc, #552]	; 8001410 <HAL_DMA_Abort_IT+0x268>
 80011e8:	4f7f      	ldr	r7, [pc, #508]	; (80013e8 <HAL_DMA_Abort_IT+0x240>)
 80011ea:	bf0c      	ite	eq
 80011ec:	f04f 0a01 	moveq.w	sl, #1
 80011f0:	f04f 0a00 	movne.w	sl, #0
 80011f4:	4c7d      	ldr	r4, [pc, #500]	; (80013ec <HAL_DMA_Abort_IT+0x244>)
 80011f6:	4572      	cmp	r2, lr
 80011f8:	bf08      	it	eq
 80011fa:	f04a 0a01 	orreq.w	sl, sl, #1
 80011fe:	f8df b214 	ldr.w	fp, [pc, #532]	; 8001414 <HAL_DMA_Abort_IT+0x26c>
 8001202:	4e7b      	ldr	r6, [pc, #492]	; (80013f0 <HAL_DMA_Abort_IT+0x248>)
 8001204:	4562      	cmp	r2, ip
 8001206:	bf08      	it	eq
 8001208:	f04a 0a01 	orreq.w	sl, sl, #1
 800120c:	4d79      	ldr	r5, [pc, #484]	; (80013f4 <HAL_DMA_Abort_IT+0x24c>)
 800120e:	42ba      	cmp	r2, r7
 8001210:	bf08      	it	eq
 8001212:	f04a 0a01 	orreq.w	sl, sl, #1
 8001216:	42a2      	cmp	r2, r4
 8001218:	bf08      	it	eq
 800121a:	f04a 0a01 	orreq.w	sl, sl, #1
 800121e:	f504 7456 	add.w	r4, r4, #856	; 0x358
 8001222:	42a2      	cmp	r2, r4
 8001224:	bf08      	it	eq
 8001226:	f04a 0a01 	orreq.w	sl, sl, #1
 800122a:	3418      	adds	r4, #24
 800122c:	42a2      	cmp	r2, r4
 800122e:	bf08      	it	eq
 8001230:	f04a 0a01 	orreq.w	sl, sl, #1
 8001234:	3418      	adds	r4, #24
 8001236:	42a2      	cmp	r2, r4
 8001238:	bf08      	it	eq
 800123a:	f04a 0a01 	orreq.w	sl, sl, #1
 800123e:	3460      	adds	r4, #96	; 0x60
 8001240:	455a      	cmp	r2, fp
 8001242:	bf08      	it	eq
 8001244:	f04a 0a01 	orreq.w	sl, sl, #1
 8001248:	42b2      	cmp	r2, r6
 800124a:	bf08      	it	eq
 800124c:	f04a 0a01 	orreq.w	sl, sl, #1
 8001250:	42aa      	cmp	r2, r5
 8001252:	bf08      	it	eq
 8001254:	f04a 0a01 	orreq.w	sl, sl, #1
 8001258:	42a2      	cmp	r2, r4
 800125a:	bf08      	it	eq
 800125c:	f04a 0a01 	orreq.w	sl, sl, #1
 8001260:	f1ba 0f00 	cmp.w	sl, #0
 8001264:	d103      	bne.n	800126e <HAL_DMA_Abort_IT+0xc6>
 8001266:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8001418 <HAL_DMA_Abort_IT+0x270>
 800126a:	4552      	cmp	r2, sl
 800126c:	d10b      	bne.n	8001286 <HAL_DMA_Abort_IT+0xde>
      hdma->State = HAL_DMA_STATE_ABORT;
 800126e:	2104      	movs	r1, #4
  return HAL_OK;
 8001270:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8001272:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001276:	6813      	ldr	r3, [r2, #0]
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	6013      	str	r3, [r2, #0]
}
 800127e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8001282:	2001      	movs	r0, #1
}
 8001284:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001286:	6814      	ldr	r4, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001288:	4856      	ldr	r0, [pc, #344]	; (80013e4 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800128a:	f024 040e 	bic.w	r4, r4, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800128e:	4d5a      	ldr	r5, [pc, #360]	; (80013f8 <HAL_DMA_Abort_IT+0x250>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001290:	6014      	str	r4, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 8001292:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001294:	4c59      	ldr	r4, [pc, #356]	; (80013fc <HAL_DMA_Abort_IT+0x254>)
      __HAL_DMA_DISABLE(hdma);
 8001296:	6811      	ldr	r1, [r2, #0]
 8001298:	f021 0101 	bic.w	r1, r1, #1
 800129c:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800129e:	4a50      	ldr	r2, [pc, #320]	; (80013e0 <HAL_DMA_Abort_IT+0x238>)
 80012a0:	6819      	ldr	r1, [r3, #0]
 80012a2:	4281      	cmp	r1, r0
 80012a4:	bf18      	it	ne
 80012a6:	4291      	cmpne	r1, r2
 80012a8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80012ac:	bf0c      	ite	eq
 80012ae:	2201      	moveq	r2, #1
 80012b0:	2200      	movne	r2, #0
 80012b2:	42a9      	cmp	r1, r5
 80012b4:	bf08      	it	eq
 80012b6:	f042 0201 	orreq.w	r2, r2, #1
 80012ba:	3548      	adds	r5, #72	; 0x48
 80012bc:	42a1      	cmp	r1, r4
 80012be:	bf08      	it	eq
 80012c0:	f042 0201 	orreq.w	r2, r2, #1
 80012c4:	3448      	adds	r4, #72	; 0x48
 80012c6:	4281      	cmp	r1, r0
 80012c8:	bf08      	it	eq
 80012ca:	f042 0201 	orreq.w	r2, r2, #1
 80012ce:	3048      	adds	r0, #72	; 0x48
 80012d0:	42a9      	cmp	r1, r5
 80012d2:	bf08      	it	eq
 80012d4:	f042 0201 	orreq.w	r2, r2, #1
 80012d8:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80012dc:	42a1      	cmp	r1, r4
 80012de:	bf08      	it	eq
 80012e0:	f042 0201 	orreq.w	r2, r2, #1
 80012e4:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80012e8:	4281      	cmp	r1, r0
 80012ea:	bf08      	it	eq
 80012ec:	f042 0201 	orreq.w	r2, r2, #1
 80012f0:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80012f4:	42a9      	cmp	r1, r5
 80012f6:	bf08      	it	eq
 80012f8:	f042 0201 	orreq.w	r2, r2, #1
 80012fc:	3548      	adds	r5, #72	; 0x48
 80012fe:	42a1      	cmp	r1, r4
 8001300:	bf08      	it	eq
 8001302:	f042 0201 	orreq.w	r2, r2, #1
 8001306:	3448      	adds	r4, #72	; 0x48
 8001308:	4281      	cmp	r1, r0
 800130a:	bf08      	it	eq
 800130c:	f042 0201 	orreq.w	r2, r2, #1
 8001310:	3048      	adds	r0, #72	; 0x48
 8001312:	42a9      	cmp	r1, r5
 8001314:	bf08      	it	eq
 8001316:	f042 0201 	orreq.w	r2, r2, #1
 800131a:	3548      	adds	r5, #72	; 0x48
 800131c:	42a1      	cmp	r1, r4
 800131e:	bf08      	it	eq
 8001320:	f042 0201 	orreq.w	r2, r2, #1
 8001324:	3448      	adds	r4, #72	; 0x48
 8001326:	4281      	cmp	r1, r0
 8001328:	bf08      	it	eq
 800132a:	f042 0201 	orreq.w	r2, r2, #1
 800132e:	f100 50c0 	add.w	r0, r0, #402653184	; 0x18000000
 8001332:	42a9      	cmp	r1, r5
 8001334:	bf08      	it	eq
 8001336:	f042 0201 	orreq.w	r2, r2, #1
 800133a:	f500 409f 	add.w	r0, r0, #20352	; 0x4f80
 800133e:	4d30      	ldr	r5, [pc, #192]	; (8001400 <HAL_DMA_Abort_IT+0x258>)
 8001340:	42a1      	cmp	r1, r4
 8001342:	bf08      	it	eq
 8001344:	f042 0201 	orreq.w	r2, r2, #1
 8001348:	4c2e      	ldr	r4, [pc, #184]	; (8001404 <HAL_DMA_Abort_IT+0x25c>)
 800134a:	4281      	cmp	r1, r0
 800134c:	bf08      	it	eq
 800134e:	f042 0201 	orreq.w	r2, r2, #1
 8001352:	303c      	adds	r0, #60	; 0x3c
 8001354:	42a9      	cmp	r1, r5
 8001356:	bf08      	it	eq
 8001358:	f042 0201 	orreq.w	r2, r2, #1
 800135c:	353c      	adds	r5, #60	; 0x3c
 800135e:	42a1      	cmp	r1, r4
 8001360:	bf08      	it	eq
 8001362:	f042 0201 	orreq.w	r2, r2, #1
 8001366:	343c      	adds	r4, #60	; 0x3c
 8001368:	4281      	cmp	r1, r0
 800136a:	bf08      	it	eq
 800136c:	f042 0201 	orreq.w	r2, r2, #1
 8001370:	303c      	adds	r0, #60	; 0x3c
 8001372:	42a9      	cmp	r1, r5
 8001374:	bf08      	it	eq
 8001376:	f042 0201 	orreq.w	r2, r2, #1
 800137a:	42a1      	cmp	r1, r4
 800137c:	bf08      	it	eq
 800137e:	f042 0201 	orreq.w	r2, r2, #1
 8001382:	4281      	cmp	r1, r0
 8001384:	bf08      	it	eq
 8001386:	f042 0201 	orreq.w	r2, r2, #1
 800138a:	b912      	cbnz	r2, 8001392 <HAL_DMA_Abort_IT+0x1ea>
 800138c:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <HAL_DMA_Abort_IT+0x260>)
 800138e:	4291      	cmp	r1, r2
 8001390:	d117      	bne.n	80013c2 <HAL_DMA_Abort_IT+0x21a>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001392:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001394:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001396:	6801      	ldr	r1, [r0, #0]
 8001398:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800139c:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800139e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80013a2:	f001 011f 	and.w	r1, r1, #31
 80013a6:	408a      	lsls	r2, r1
 80013a8:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013aa:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 80013ae:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80013b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013b2:	b132      	cbz	r2, 80013c2 <HAL_DMA_Abort_IT+0x21a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013b4:	6811      	ldr	r1, [r2, #0]
 80013b6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80013ba:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013bc:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 80013c0:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 80013c2:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 80013c4:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 80013c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 80013c8:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80013cc:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 80013d0:	b11a      	cbz	r2, 80013da <HAL_DMA_Abort_IT+0x232>
 80013d2:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 80013d4:	4790      	blx	r2
  return HAL_OK;
 80013d6:	4620      	mov	r0, r4
 80013d8:	e6f2      	b.n	80011c0 <HAL_DMA_Abort_IT+0x18>
 80013da:	4610      	mov	r0, r2
 80013dc:	e6f0      	b.n	80011c0 <HAL_DMA_Abort_IT+0x18>
 80013de:	bf00      	nop
 80013e0:	40020010 	.word	0x40020010
 80013e4:	40020028 	.word	0x40020028
 80013e8:	400200a0 	.word	0x400200a0
 80013ec:	400200b8 	.word	0x400200b8
 80013f0:	40020470 	.word	0x40020470
 80013f4:	40020488 	.word	0x40020488
 80013f8:	40020040 	.word	0x40020040
 80013fc:	40020058 	.word	0x40020058
 8001400:	5802541c 	.word	0x5802541c
 8001404:	58025430 	.word	0x58025430
 8001408:	58025494 	.word	0x58025494
 800140c:	40020070 	.word	0x40020070
 8001410:	40020088 	.word	0x40020088
 8001414:	40020458 	.word	0x40020458
 8001418:	400204b8 	.word	0x400204b8

0800141c <HAL_DMA_IRQHandler>:
{
 800141c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800141e:	4ba5      	ldr	r3, [pc, #660]	; (80016b4 <HAL_DMA_IRQHandler+0x298>)
{
 8001420:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001422:	6804      	ldr	r4, [r0, #0]
  __IO uint32_t count = 0U;
 8001424:	2100      	movs	r1, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8001426:	4aa4      	ldr	r2, [pc, #656]	; (80016b8 <HAL_DMA_IRQHandler+0x29c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001428:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800142a:	429c      	cmp	r4, r3
  __IO uint32_t count = 0U;
 800142c:	9101      	str	r1, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800142e:	6816      	ldr	r6, [r2, #0]
  tmpisr_dma  = regs_dma->ISR;
 8001430:	682f      	ldr	r7, [r5, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8001432:	682a      	ldr	r2, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001434:	d04d      	beq.n	80014d2 <HAL_DMA_IRQHandler+0xb6>
 8001436:	3318      	adds	r3, #24
 8001438:	429c      	cmp	r4, r3
 800143a:	d04a      	beq.n	80014d2 <HAL_DMA_IRQHandler+0xb6>
 800143c:	3330      	adds	r3, #48	; 0x30
 800143e:	f8df c284 	ldr.w	ip, [pc, #644]	; 80016c4 <HAL_DMA_IRQHandler+0x2a8>
 8001442:	499e      	ldr	r1, [pc, #632]	; (80016bc <HAL_DMA_IRQHandler+0x2a0>)
 8001444:	4564      	cmp	r4, ip
 8001446:	bf18      	it	ne
 8001448:	429c      	cmpne	r4, r3
 800144a:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	428c      	cmp	r4, r1
 8001456:	bf08      	it	eq
 8001458:	f043 0301 	orreq.w	r3, r3, #1
 800145c:	3130      	adds	r1, #48	; 0x30
 800145e:	4564      	cmp	r4, ip
 8001460:	bf08      	it	eq
 8001462:	f043 0301 	orreq.w	r3, r3, #1
 8001466:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800146a:	428c      	cmp	r4, r1
 800146c:	bf08      	it	eq
 800146e:	f043 0301 	orreq.w	r3, r3, #1
 8001472:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8001476:	4564      	cmp	r4, ip
 8001478:	bf08      	it	eq
 800147a:	f043 0301 	orreq.w	r3, r3, #1
 800147e:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8001482:	428c      	cmp	r4, r1
 8001484:	bf08      	it	eq
 8001486:	f043 0301 	orreq.w	r3, r3, #1
 800148a:	3130      	adds	r1, #48	; 0x30
 800148c:	4564      	cmp	r4, ip
 800148e:	bf08      	it	eq
 8001490:	f043 0301 	orreq.w	r3, r3, #1
 8001494:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001498:	428c      	cmp	r4, r1
 800149a:	bf08      	it	eq
 800149c:	f043 0301 	orreq.w	r3, r3, #1
 80014a0:	3130      	adds	r1, #48	; 0x30
 80014a2:	4564      	cmp	r4, ip
 80014a4:	bf08      	it	eq
 80014a6:	f043 0301 	orreq.w	r3, r3, #1
 80014aa:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80014ae:	428c      	cmp	r4, r1
 80014b0:	bf08      	it	eq
 80014b2:	f043 0301 	orreq.w	r3, r3, #1
 80014b6:	3130      	adds	r1, #48	; 0x30
 80014b8:	4564      	cmp	r4, ip
 80014ba:	bf08      	it	eq
 80014bc:	f043 0301 	orreq.w	r3, r3, #1
 80014c0:	428c      	cmp	r4, r1
 80014c2:	bf08      	it	eq
 80014c4:	f043 0301 	orreq.w	r3, r3, #1
 80014c8:	b91b      	cbnz	r3, 80014d2 <HAL_DMA_IRQHandler+0xb6>
 80014ca:	4b7d      	ldr	r3, [pc, #500]	; (80016c0 <HAL_DMA_IRQHandler+0x2a4>)
 80014cc:	429c      	cmp	r4, r3
 80014ce:	f040 821e 	bne.w	800190e <HAL_DMA_IRQHandler+0x4f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014d2:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80014d4:	2308      	movs	r3, #8
 80014d6:	f001 021f 	and.w	r2, r1, #31
 80014da:	4093      	lsls	r3, r2
 80014dc:	423b      	tst	r3, r7
 80014de:	f040 81fb 	bne.w	80018d8 <HAL_DMA_IRQHandler+0x4bc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014e2:	fa27 f302 	lsr.w	r3, r7, r2
 80014e6:	07dc      	lsls	r4, r3, #31
 80014e8:	d563      	bpl.n	80015b2 <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80014ea:	6801      	ldr	r1, [r0, #0]
 80014ec:	4b71      	ldr	r3, [pc, #452]	; (80016b4 <HAL_DMA_IRQHandler+0x298>)
 80014ee:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80016c8 <HAL_DMA_IRQHandler+0x2ac>
 80014f2:	4c74      	ldr	r4, [pc, #464]	; (80016c4 <HAL_DMA_IRQHandler+0x2a8>)
 80014f4:	4561      	cmp	r1, ip
 80014f6:	bf18      	it	ne
 80014f8:	4299      	cmpne	r1, r3
 80014fa:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80014fe:	bf0c      	ite	eq
 8001500:	2301      	moveq	r3, #1
 8001502:	2300      	movne	r3, #0
 8001504:	42a1      	cmp	r1, r4
 8001506:	bf08      	it	eq
 8001508:	f043 0301 	orreq.w	r3, r3, #1
 800150c:	3430      	adds	r4, #48	; 0x30
 800150e:	4561      	cmp	r1, ip
 8001510:	bf08      	it	eq
 8001512:	f043 0301 	orreq.w	r3, r3, #1
 8001516:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800151a:	42a1      	cmp	r1, r4
 800151c:	bf08      	it	eq
 800151e:	f043 0301 	orreq.w	r3, r3, #1
 8001522:	3430      	adds	r4, #48	; 0x30
 8001524:	4561      	cmp	r1, ip
 8001526:	bf08      	it	eq
 8001528:	f043 0301 	orreq.w	r3, r3, #1
 800152c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001530:	42a1      	cmp	r1, r4
 8001532:	bf08      	it	eq
 8001534:	f043 0301 	orreq.w	r3, r3, #1
 8001538:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800153c:	4561      	cmp	r1, ip
 800153e:	bf08      	it	eq
 8001540:	f043 0301 	orreq.w	r3, r3, #1
 8001544:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8001548:	42a1      	cmp	r1, r4
 800154a:	bf08      	it	eq
 800154c:	f043 0301 	orreq.w	r3, r3, #1
 8001550:	3430      	adds	r4, #48	; 0x30
 8001552:	4561      	cmp	r1, ip
 8001554:	bf08      	it	eq
 8001556:	f043 0301 	orreq.w	r3, r3, #1
 800155a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800155e:	42a1      	cmp	r1, r4
 8001560:	bf08      	it	eq
 8001562:	f043 0301 	orreq.w	r3, r3, #1
 8001566:	3430      	adds	r4, #48	; 0x30
 8001568:	4561      	cmp	r1, ip
 800156a:	bf08      	it	eq
 800156c:	f043 0301 	orreq.w	r3, r3, #1
 8001570:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001574:	42a1      	cmp	r1, r4
 8001576:	bf08      	it	eq
 8001578:	f043 0301 	orreq.w	r3, r3, #1
 800157c:	3430      	adds	r4, #48	; 0x30
 800157e:	4561      	cmp	r1, ip
 8001580:	bf08      	it	eq
 8001582:	f043 0301 	orreq.w	r3, r3, #1
 8001586:	42a1      	cmp	r1, r4
 8001588:	bf08      	it	eq
 800158a:	f043 0301 	orreq.w	r3, r3, #1
 800158e:	b91b      	cbnz	r3, 8001598 <HAL_DMA_IRQHandler+0x17c>
 8001590:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <HAL_DMA_IRQHandler+0x2a4>)
 8001592:	4299      	cmp	r1, r3
 8001594:	f040 8285 	bne.w	8001aa2 <HAL_DMA_IRQHandler+0x686>
 8001598:	694b      	ldr	r3, [r1, #20]
 800159a:	0619      	lsls	r1, r3, #24
 800159c:	d509      	bpl.n	80015b2 <HAL_DMA_IRQHandler+0x196>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800159e:	2101      	movs	r1, #1
 80015a0:	4091      	lsls	r1, r2
 80015a2:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80015a6:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	f001 021f 	and.w	r2, r1, #31
 80015b0:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80015b2:	2404      	movs	r4, #4
 80015b4:	4094      	lsls	r4, r2
 80015b6:	423c      	tst	r4, r7
 80015b8:	d067      	beq.n	800168a <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80015ba:	6801      	ldr	r1, [r0, #0]
 80015bc:	4b3d      	ldr	r3, [pc, #244]	; (80016b4 <HAL_DMA_IRQHandler+0x298>)
 80015be:	f8df e108 	ldr.w	lr, [pc, #264]	; 80016c8 <HAL_DMA_IRQHandler+0x2ac>
 80015c2:	f8df c100 	ldr.w	ip, [pc, #256]	; 80016c4 <HAL_DMA_IRQHandler+0x2a8>
 80015c6:	4571      	cmp	r1, lr
 80015c8:	bf18      	it	ne
 80015ca:	4299      	cmpne	r1, r3
 80015cc:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80015d0:	bf0c      	ite	eq
 80015d2:	2301      	moveq	r3, #1
 80015d4:	2300      	movne	r3, #0
 80015d6:	4561      	cmp	r1, ip
 80015d8:	bf08      	it	eq
 80015da:	f043 0301 	orreq.w	r3, r3, #1
 80015de:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80015e2:	4571      	cmp	r1, lr
 80015e4:	bf08      	it	eq
 80015e6:	f043 0301 	orreq.w	r3, r3, #1
 80015ea:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80015ee:	4561      	cmp	r1, ip
 80015f0:	bf08      	it	eq
 80015f2:	f043 0301 	orreq.w	r3, r3, #1
 80015f6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80015fa:	4571      	cmp	r1, lr
 80015fc:	bf08      	it	eq
 80015fe:	f043 0301 	orreq.w	r3, r3, #1
 8001602:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001606:	4561      	cmp	r1, ip
 8001608:	bf08      	it	eq
 800160a:	f043 0301 	orreq.w	r3, r3, #1
 800160e:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8001612:	4571      	cmp	r1, lr
 8001614:	bf08      	it	eq
 8001616:	f043 0301 	orreq.w	r3, r3, #1
 800161a:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 800161e:	4561      	cmp	r1, ip
 8001620:	bf08      	it	eq
 8001622:	f043 0301 	orreq.w	r3, r3, #1
 8001626:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800162a:	4571      	cmp	r1, lr
 800162c:	bf08      	it	eq
 800162e:	f043 0301 	orreq.w	r3, r3, #1
 8001632:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001636:	4561      	cmp	r1, ip
 8001638:	bf08      	it	eq
 800163a:	f043 0301 	orreq.w	r3, r3, #1
 800163e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001642:	4571      	cmp	r1, lr
 8001644:	bf08      	it	eq
 8001646:	f043 0301 	orreq.w	r3, r3, #1
 800164a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800164e:	4561      	cmp	r1, ip
 8001650:	bf08      	it	eq
 8001652:	f043 0301 	orreq.w	r3, r3, #1
 8001656:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800165a:	4571      	cmp	r1, lr
 800165c:	bf08      	it	eq
 800165e:	f043 0301 	orreq.w	r3, r3, #1
 8001662:	4561      	cmp	r1, ip
 8001664:	bf08      	it	eq
 8001666:	f043 0301 	orreq.w	r3, r3, #1
 800166a:	b91b      	cbnz	r3, 8001674 <HAL_DMA_IRQHandler+0x258>
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_DMA_IRQHandler+0x2a4>)
 800166e:	4299      	cmp	r1, r3
 8001670:	f040 8215 	bne.w	8001a9e <HAL_DMA_IRQHandler+0x682>
 8001674:	680b      	ldr	r3, [r1, #0]
 8001676:	079b      	lsls	r3, r3, #30
 8001678:	d507      	bpl.n	800168a <HAL_DMA_IRQHandler+0x26e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800167a:	60ac      	str	r4, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800167c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800167e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	f001 021f 	and.w	r2, r1, #31
 8001688:	6543      	str	r3, [r0, #84]	; 0x54
 800168a:	4604      	mov	r4, r0
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800168c:	2010      	movs	r0, #16
 800168e:	4090      	lsls	r0, r2
 8001690:	4238      	tst	r0, r7
 8001692:	f000 8086 	beq.w	80017a2 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001696:	6821      	ldr	r1, [r4, #0]
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_DMA_IRQHandler+0x298>)
 800169a:	f8df e02c 	ldr.w	lr, [pc, #44]	; 80016c8 <HAL_DMA_IRQHandler+0x2ac>
 800169e:	f8df c024 	ldr.w	ip, [pc, #36]	; 80016c4 <HAL_DMA_IRQHandler+0x2a8>
 80016a2:	4571      	cmp	r1, lr
 80016a4:	bf18      	it	ne
 80016a6:	4299      	cmpne	r1, r3
 80016a8:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80016ac:	bf08      	it	eq
 80016ae:	2301      	moveq	r3, #1
 80016b0:	e00c      	b.n	80016cc <HAL_DMA_IRQHandler+0x2b0>
 80016b2:	bf00      	nop
 80016b4:	40020010 	.word	0x40020010
 80016b8:	200003a4 	.word	0x200003a4
 80016bc:	40020070 	.word	0x40020070
 80016c0:	400204b8 	.word	0x400204b8
 80016c4:	40020040 	.word	0x40020040
 80016c8:	40020028 	.word	0x40020028
 80016cc:	bf18      	it	ne
 80016ce:	2300      	movne	r3, #0
 80016d0:	4561      	cmp	r1, ip
 80016d2:	bf08      	it	eq
 80016d4:	f043 0301 	orreq.w	r3, r3, #1
 80016d8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80016dc:	4571      	cmp	r1, lr
 80016de:	bf08      	it	eq
 80016e0:	f043 0301 	orreq.w	r3, r3, #1
 80016e4:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80016e8:	4561      	cmp	r1, ip
 80016ea:	bf08      	it	eq
 80016ec:	f043 0301 	orreq.w	r3, r3, #1
 80016f0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80016f4:	4571      	cmp	r1, lr
 80016f6:	bf08      	it	eq
 80016f8:	f043 0301 	orreq.w	r3, r3, #1
 80016fc:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001700:	4561      	cmp	r1, ip
 8001702:	bf08      	it	eq
 8001704:	f043 0301 	orreq.w	r3, r3, #1
 8001708:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 800170c:	4571      	cmp	r1, lr
 800170e:	bf08      	it	eq
 8001710:	f043 0301 	orreq.w	r3, r3, #1
 8001714:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8001718:	4561      	cmp	r1, ip
 800171a:	bf08      	it	eq
 800171c:	f043 0301 	orreq.w	r3, r3, #1
 8001720:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001724:	4571      	cmp	r1, lr
 8001726:	bf08      	it	eq
 8001728:	f043 0301 	orreq.w	r3, r3, #1
 800172c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001730:	4561      	cmp	r1, ip
 8001732:	bf08      	it	eq
 8001734:	f043 0301 	orreq.w	r3, r3, #1
 8001738:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800173c:	4571      	cmp	r1, lr
 800173e:	bf08      	it	eq
 8001740:	f043 0301 	orreq.w	r3, r3, #1
 8001744:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001748:	4561      	cmp	r1, ip
 800174a:	bf08      	it	eq
 800174c:	f043 0301 	orreq.w	r3, r3, #1
 8001750:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001754:	4571      	cmp	r1, lr
 8001756:	bf08      	it	eq
 8001758:	f043 0301 	orreq.w	r3, r3, #1
 800175c:	4561      	cmp	r1, ip
 800175e:	bf08      	it	eq
 8001760:	f043 0301 	orreq.w	r3, r3, #1
 8001764:	b91b      	cbnz	r3, 800176e <HAL_DMA_IRQHandler+0x352>
 8001766:	4b9f      	ldr	r3, [pc, #636]	; (80019e4 <HAL_DMA_IRQHandler+0x5c8>)
 8001768:	4299      	cmp	r1, r3
 800176a:	f040 8194 	bne.w	8001a96 <HAL_DMA_IRQHandler+0x67a>
 800176e:	680b      	ldr	r3, [r1, #0]
 8001770:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001774:	b1ab      	cbz	r3, 80017a2 <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001776:	60a8      	str	r0, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	0350      	lsls	r0, r2, #13
 800177e:	f100 8102 	bmi.w	8001986 <HAL_DMA_IRQHandler+0x56a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	05d2      	lsls	r2, r2, #23
 8001786:	d403      	bmi.n	8001790 <HAL_DMA_IRQHandler+0x374>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	f022 0208 	bic.w	r2, r2, #8
 800178e:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8001790:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 80ff 	beq.w	8001996 <HAL_DMA_IRQHandler+0x57a>
            hdma->XferHalfCpltCallback(hdma);
 8001798:	4620      	mov	r0, r4
 800179a:	4798      	blx	r3
 800179c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800179e:	f001 021f 	and.w	r2, r1, #31
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80017a2:	2120      	movs	r1, #32
 80017a4:	4091      	lsls	r1, r2
 80017a6:	4239      	tst	r1, r7
 80017a8:	d068      	beq.n	800187c <HAL_DMA_IRQHandler+0x460>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80017aa:	6822      	ldr	r2, [r4, #0]
 80017ac:	4b8e      	ldr	r3, [pc, #568]	; (80019e8 <HAL_DMA_IRQHandler+0x5cc>)
 80017ae:	4f8f      	ldr	r7, [pc, #572]	; (80019ec <HAL_DMA_IRQHandler+0x5d0>)
 80017b0:	488f      	ldr	r0, [pc, #572]	; (80019f0 <HAL_DMA_IRQHandler+0x5d4>)
 80017b2:	42ba      	cmp	r2, r7
 80017b4:	bf18      	it	ne
 80017b6:	429a      	cmpne	r2, r3
 80017b8:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80017bc:	bf0c      	ite	eq
 80017be:	2301      	moveq	r3, #1
 80017c0:	2300      	movne	r3, #0
 80017c2:	4282      	cmp	r2, r0
 80017c4:	bf08      	it	eq
 80017c6:	f043 0301 	orreq.w	r3, r3, #1
 80017ca:	3030      	adds	r0, #48	; 0x30
 80017cc:	42ba      	cmp	r2, r7
 80017ce:	bf08      	it	eq
 80017d0:	f043 0301 	orreq.w	r3, r3, #1
 80017d4:	3730      	adds	r7, #48	; 0x30
 80017d6:	4282      	cmp	r2, r0
 80017d8:	bf08      	it	eq
 80017da:	f043 0301 	orreq.w	r3, r3, #1
 80017de:	3030      	adds	r0, #48	; 0x30
 80017e0:	42ba      	cmp	r2, r7
 80017e2:	bf08      	it	eq
 80017e4:	f043 0301 	orreq.w	r3, r3, #1
 80017e8:	3730      	adds	r7, #48	; 0x30
 80017ea:	4282      	cmp	r2, r0
 80017ec:	bf08      	it	eq
 80017ee:	f043 0301 	orreq.w	r3, r3, #1
 80017f2:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80017f6:	42ba      	cmp	r2, r7
 80017f8:	bf08      	it	eq
 80017fa:	f043 0301 	orreq.w	r3, r3, #1
 80017fe:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8001802:	4282      	cmp	r2, r0
 8001804:	bf08      	it	eq
 8001806:	f043 0301 	orreq.w	r3, r3, #1
 800180a:	3030      	adds	r0, #48	; 0x30
 800180c:	42ba      	cmp	r2, r7
 800180e:	bf08      	it	eq
 8001810:	f043 0301 	orreq.w	r3, r3, #1
 8001814:	3730      	adds	r7, #48	; 0x30
 8001816:	4282      	cmp	r2, r0
 8001818:	bf08      	it	eq
 800181a:	f043 0301 	orreq.w	r3, r3, #1
 800181e:	3030      	adds	r0, #48	; 0x30
 8001820:	42ba      	cmp	r2, r7
 8001822:	bf08      	it	eq
 8001824:	f043 0301 	orreq.w	r3, r3, #1
 8001828:	3730      	adds	r7, #48	; 0x30
 800182a:	4282      	cmp	r2, r0
 800182c:	bf08      	it	eq
 800182e:	f043 0301 	orreq.w	r3, r3, #1
 8001832:	3030      	adds	r0, #48	; 0x30
 8001834:	42ba      	cmp	r2, r7
 8001836:	bf08      	it	eq
 8001838:	f043 0301 	orreq.w	r3, r3, #1
 800183c:	4282      	cmp	r2, r0
 800183e:	bf08      	it	eq
 8001840:	f043 0301 	orreq.w	r3, r3, #1
 8001844:	b91b      	cbnz	r3, 800184e <HAL_DMA_IRQHandler+0x432>
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <HAL_DMA_IRQHandler+0x5c8>)
 8001848:	429a      	cmp	r2, r3
 800184a:	f040 812c 	bne.w	8001aa6 <HAL_DMA_IRQHandler+0x68a>
 800184e:	6813      	ldr	r3, [r2, #0]
 8001850:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001854:	b193      	cbz	r3, 800187c <HAL_DMA_IRQHandler+0x460>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001856:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001858:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800185c:	2b04      	cmp	r3, #4
 800185e:	f000 809e 	beq.w	800199e <HAL_DMA_IRQHandler+0x582>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	0357      	lsls	r7, r2, #13
 8001868:	f140 80ce 	bpl.w	8001a08 <HAL_DMA_IRQHandler+0x5ec>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	031d      	lsls	r5, r3, #12
 8001870:	f140 80d9 	bpl.w	8001a26 <HAL_DMA_IRQHandler+0x60a>
          if(hdma->XferCpltCallback != NULL)
 8001874:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001876:	b10b      	cbz	r3, 800187c <HAL_DMA_IRQHandler+0x460>
            hdma->XferCpltCallback(hdma);
 8001878:	4620      	mov	r0, r4
 800187a:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800187c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800187e:	2b00      	cmp	r3, #0
 8001880:	d07f      	beq.n	8001982 <HAL_DMA_IRQHandler+0x566>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001882:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001884:	07d8      	lsls	r0, r3, #31
 8001886:	d51f      	bpl.n	80018c8 <HAL_DMA_IRQHandler+0x4ac>
        __HAL_DMA_DISABLE(hdma);
 8001888:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 800188a:	2004      	movs	r0, #4
 800188c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8001890:	6813      	ldr	r3, [r2, #0]
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001898:	4b56      	ldr	r3, [pc, #344]	; (80019f4 <HAL_DMA_IRQHandler+0x5d8>)
 800189a:	6822      	ldr	r2, [r4, #0]
 800189c:	fba3 3606 	umull	r3, r6, r3, r6
 80018a0:	0ab6      	lsrs	r6, r6, #10
 80018a2:	e002      	b.n	80018aa <HAL_DMA_IRQHandler+0x48e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80018a4:	6813      	ldr	r3, [r2, #0]
 80018a6:	07d9      	lsls	r1, r3, #31
 80018a8:	d504      	bpl.n	80018b4 <HAL_DMA_IRQHandler+0x498>
          if (++count > timeout)
 80018aa:	9b01      	ldr	r3, [sp, #4]
 80018ac:	3301      	adds	r3, #1
 80018ae:	42b3      	cmp	r3, r6
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	d9f7      	bls.n	80018a4 <HAL_DMA_IRQHandler+0x488>
        __HAL_UNLOCK(hdma);
 80018b4:	2300      	movs	r3, #0
 80018b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018ba:	6813      	ldr	r3, [r2, #0]
 80018bc:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80018be:	bf4c      	ite	mi
 80018c0:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80018c2:	2301      	movpl	r3, #1
 80018c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 80018c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d059      	beq.n	8001982 <HAL_DMA_IRQHandler+0x566>
        hdma->XferErrorCallback(hdma);
 80018ce:	4620      	mov	r0, r4
}
 80018d0:	b003      	add	sp, #12
 80018d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 80018d6:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	075b      	lsls	r3, r3, #29
 80018dc:	f57f ae01 	bpl.w	80014e2 <HAL_DMA_IRQHandler+0xc6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80018e0:	6822      	ldr	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018e2:	2308      	movs	r3, #8
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80018e4:	f022 0204 	bic.w	r2, r2, #4
 80018e8:	6022      	str	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018ea:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80018ec:	f002 021f 	and.w	r2, r2, #31
 80018f0:	4093      	lsls	r3, r2
 80018f2:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018f4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80018f6:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	f001 021f 	and.w	r2, r1, #31
 8001900:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001902:	fa27 f302 	lsr.w	r3, r7, r2
 8001906:	07dc      	lsls	r4, r3, #31
 8001908:	f57f ae53 	bpl.w	80015b2 <HAL_DMA_IRQHandler+0x196>
 800190c:	e5ed      	b.n	80014ea <HAL_DMA_IRQHandler+0xce>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800190e:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <HAL_DMA_IRQHandler+0x5dc>)
 8001910:	4e3a      	ldr	r6, [pc, #232]	; (80019fc <HAL_DMA_IRQHandler+0x5e0>)
 8001912:	493b      	ldr	r1, [pc, #236]	; (8001a00 <HAL_DMA_IRQHandler+0x5e4>)
 8001914:	42b4      	cmp	r4, r6
 8001916:	bf18      	it	ne
 8001918:	429c      	cmpne	r4, r3
 800191a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	428c      	cmp	r4, r1
 8001926:	bf08      	it	eq
 8001928:	f043 0301 	orreq.w	r3, r3, #1
 800192c:	3128      	adds	r1, #40	; 0x28
 800192e:	42b4      	cmp	r4, r6
 8001930:	bf08      	it	eq
 8001932:	f043 0301 	orreq.w	r3, r3, #1
 8001936:	3628      	adds	r6, #40	; 0x28
 8001938:	428c      	cmp	r4, r1
 800193a:	bf08      	it	eq
 800193c:	f043 0301 	orreq.w	r3, r3, #1
 8001940:	3128      	adds	r1, #40	; 0x28
 8001942:	42b4      	cmp	r4, r6
 8001944:	bf08      	it	eq
 8001946:	f043 0301 	orreq.w	r3, r3, #1
 800194a:	428c      	cmp	r4, r1
 800194c:	bf08      	it	eq
 800194e:	f043 0301 	orreq.w	r3, r3, #1
 8001952:	b913      	cbnz	r3, 800195a <HAL_DMA_IRQHandler+0x53e>
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_DMA_IRQHandler+0x5e8>)
 8001956:	429c      	cmp	r4, r3
 8001958:	d113      	bne.n	8001982 <HAL_DMA_IRQHandler+0x566>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800195a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800195c:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800195e:	6823      	ldr	r3, [r4, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001960:	f001 011f 	and.w	r1, r1, #31
 8001964:	408e      	lsls	r6, r1
 8001966:	4216      	tst	r6, r2
 8001968:	d066      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x61c>
 800196a:	075f      	lsls	r7, r3, #29
 800196c:	d564      	bpl.n	8001a38 <HAL_DMA_IRQHandler+0x61c>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800196e:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001970:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001972:	f140 809c 	bpl.w	8001aae <HAL_DMA_IRQHandler+0x692>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001976:	03da      	lsls	r2, r3, #15
 8001978:	f100 80f1 	bmi.w	8001b5e <HAL_DMA_IRQHandler+0x742>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800197c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1a6      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x4b4>
}
 8001982:	b003      	add	sp, #12
 8001984:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0319      	lsls	r1, r3, #12
 800198a:	f57f af01 	bpl.w	8001790 <HAL_DMA_IRQHandler+0x374>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800198e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001990:	2b00      	cmp	r3, #0
 8001992:	f47f af01 	bne.w	8001798 <HAL_DMA_IRQHandler+0x37c>
 8001996:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001998:	f002 021f 	and.w	r2, r2, #31
 800199c:	e701      	b.n	80017a2 <HAL_DMA_IRQHandler+0x386>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800199e:	6822      	ldr	r2, [r4, #0]
 80019a0:	6813      	ldr	r3, [r2, #0]
 80019a2:	f023 0316 	bic.w	r3, r3, #22
 80019a6:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80019a8:	6822      	ldr	r2, [r4, #0]
 80019aa:	6953      	ldr	r3, [r2, #20]
 80019ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019b0:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d03b      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x614>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80019b8:	6822      	ldr	r2, [r4, #0]
 80019ba:	6813      	ldr	r3, [r2, #0]
 80019bc:	f023 0308 	bic.w	r3, r3, #8
 80019c0:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019c4:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 80019c6:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 80019c8:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019ca:	f002 021f 	and.w	r2, r2, #31
 80019ce:	4093      	lsls	r3, r2
 80019d0:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 80019d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
          __HAL_UNLOCK(hdma);
 80019d4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80019d8:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f47f af76 	bne.w	80018ce <HAL_DMA_IRQHandler+0x4b2>
 80019e2:	e7ce      	b.n	8001982 <HAL_DMA_IRQHandler+0x566>
 80019e4:	400204b8 	.word	0x400204b8
 80019e8:	40020010 	.word	0x40020010
 80019ec:	40020028 	.word	0x40020028
 80019f0:	40020040 	.word	0x40020040
 80019f4:	1b4e81b5 	.word	0x1b4e81b5
 80019f8:	58025408 	.word	0x58025408
 80019fc:	5802541c 	.word	0x5802541c
 8001a00:	58025430 	.word	0x58025430
 8001a04:	58025494 	.word	0x58025494
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001a0e:	f47f af31 	bne.w	8001874 <HAL_DMA_IRQHandler+0x458>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001a12:	6819      	ldr	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8001a14:	2001      	movs	r0, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001a16:	f021 0110 	bic.w	r1, r1, #16
 8001a1a:	6019      	str	r1, [r3, #0]
            __HAL_UNLOCK(hdma);
 8001a1c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8001a20:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8001a24:	e726      	b.n	8001874 <HAL_DMA_IRQHandler+0x458>
            if(hdma->XferM1CpltCallback != NULL)
 8001a26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f47f af25 	bne.w	8001878 <HAL_DMA_IRQHandler+0x45c>
 8001a2e:	e725      	b.n	800187c <HAL_DMA_IRQHandler+0x460>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a30:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1c0      	bne.n	80019b8 <HAL_DMA_IRQHandler+0x59c>
 8001a36:	e7c4      	b.n	80019c2 <HAL_DMA_IRQHandler+0x5a6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001a38:	2602      	movs	r6, #2
 8001a3a:	408e      	lsls	r6, r1
 8001a3c:	4216      	tst	r6, r2
 8001a3e:	d00d      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x640>
 8001a40:	079f      	lsls	r7, r3, #30
 8001a42:	d50b      	bpl.n	8001a5c <HAL_DMA_IRQHandler+0x640>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001a44:	041c      	lsls	r4, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8001a46:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001a48:	f140 808e 	bpl.w	8001b68 <HAL_DMA_IRQHandler+0x74c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001a4c:	03d9      	lsls	r1, r3, #15
 8001a4e:	f100 80e9 	bmi.w	8001c24 <HAL_DMA_IRQHandler+0x808>
          if(hdma->XferM1CpltCallback != NULL)
 8001a52:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f47f af3b 	bne.w	80018d0 <HAL_DMA_IRQHandler+0x4b4>
 8001a5a:	e792      	b.n	8001982 <HAL_DMA_IRQHandler+0x566>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8001a5c:	2608      	movs	r6, #8
 8001a5e:	fa06 f101 	lsl.w	r1, r6, r1
 8001a62:	4211      	tst	r1, r2
 8001a64:	d08d      	beq.n	8001982 <HAL_DMA_IRQHandler+0x566>
 8001a66:	071b      	lsls	r3, r3, #28
 8001a68:	d58b      	bpl.n	8001982 <HAL_DMA_IRQHandler+0x566>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a6a:	6823      	ldr	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001a6c:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8001a6e:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a70:	f023 030e 	bic.w	r3, r3, #14
 8001a74:	6023      	str	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001a76:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 8001a82:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a84:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8001a86:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f47f af1e 	bne.w	80018d0 <HAL_DMA_IRQHandler+0x4b4>
 8001a94:	e775      	b.n	8001982 <HAL_DMA_IRQHandler+0x566>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a96:	680b      	ldr	r3, [r1, #0]
 8001a98:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001a9c:	e66a      	b.n	8001774 <HAL_DMA_IRQHandler+0x358>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001a9e:	680b      	ldr	r3, [r1, #0]
 8001aa0:	e5f3      	b.n	800168a <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001aa2:	680b      	ldr	r3, [r1, #0]
 8001aa4:	e585      	b.n	80015b2 <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001aa6:	6813      	ldr	r3, [r2, #0]
 8001aa8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001aac:	e6d2      	b.n	8001854 <HAL_DMA_IRQHandler+0x438>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001aae:	069b      	lsls	r3, r3, #26
 8001ab0:	d455      	bmi.n	8001b5e <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ab2:	6802      	ldr	r2, [r0, #0]
 8001ab4:	4b63      	ldr	r3, [pc, #396]	; (8001c44 <HAL_DMA_IRQHandler+0x828>)
 8001ab6:	4c64      	ldr	r4, [pc, #400]	; (8001c48 <HAL_DMA_IRQHandler+0x82c>)
 8001ab8:	4964      	ldr	r1, [pc, #400]	; (8001c4c <HAL_DMA_IRQHandler+0x830>)
 8001aba:	42a2      	cmp	r2, r4
 8001abc:	bf18      	it	ne
 8001abe:	429a      	cmpne	r2, r3
 8001ac0:	4d63      	ldr	r5, [pc, #396]	; (8001c50 <HAL_DMA_IRQHandler+0x834>)
 8001ac2:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	428a      	cmp	r2, r1
 8001ace:	bf08      	it	eq
 8001ad0:	f043 0301 	orreq.w	r3, r3, #1
 8001ad4:	3148      	adds	r1, #72	; 0x48
 8001ad6:	42aa      	cmp	r2, r5
 8001ad8:	bf08      	it	eq
 8001ada:	f043 0301 	orreq.w	r3, r3, #1
 8001ade:	3548      	adds	r5, #72	; 0x48
 8001ae0:	42a2      	cmp	r2, r4
 8001ae2:	bf08      	it	eq
 8001ae4:	f043 0301 	orreq.w	r3, r3, #1
 8001ae8:	3448      	adds	r4, #72	; 0x48
 8001aea:	428a      	cmp	r2, r1
 8001aec:	bf08      	it	eq
 8001aee:	f043 0301 	orreq.w	r3, r3, #1
 8001af2:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001af6:	42aa      	cmp	r2, r5
 8001af8:	bf08      	it	eq
 8001afa:	f043 0301 	orreq.w	r3, r3, #1
 8001afe:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8001b02:	42a2      	cmp	r2, r4
 8001b04:	bf08      	it	eq
 8001b06:	f043 0301 	orreq.w	r3, r3, #1
 8001b0a:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8001b0e:	428a      	cmp	r2, r1
 8001b10:	bf08      	it	eq
 8001b12:	f043 0301 	orreq.w	r3, r3, #1
 8001b16:	3148      	adds	r1, #72	; 0x48
 8001b18:	42aa      	cmp	r2, r5
 8001b1a:	bf08      	it	eq
 8001b1c:	f043 0301 	orreq.w	r3, r3, #1
 8001b20:	3548      	adds	r5, #72	; 0x48
 8001b22:	42a2      	cmp	r2, r4
 8001b24:	bf08      	it	eq
 8001b26:	f043 0301 	orreq.w	r3, r3, #1
 8001b2a:	3448      	adds	r4, #72	; 0x48
 8001b2c:	428a      	cmp	r2, r1
 8001b2e:	bf08      	it	eq
 8001b30:	f043 0301 	orreq.w	r3, r3, #1
 8001b34:	3148      	adds	r1, #72	; 0x48
 8001b36:	42aa      	cmp	r2, r5
 8001b38:	bf08      	it	eq
 8001b3a:	f043 0301 	orreq.w	r3, r3, #1
 8001b3e:	42a2      	cmp	r2, r4
 8001b40:	bf08      	it	eq
 8001b42:	f043 0301 	orreq.w	r3, r3, #1
 8001b46:	428a      	cmp	r2, r1
 8001b48:	bf08      	it	eq
 8001b4a:	f043 0301 	orreq.w	r3, r3, #1
 8001b4e:	b913      	cbnz	r3, 8001b56 <HAL_DMA_IRQHandler+0x73a>
 8001b50:	4b40      	ldr	r3, [pc, #256]	; (8001c54 <HAL_DMA_IRQHandler+0x838>)
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d16b      	bne.n	8001c2e <HAL_DMA_IRQHandler+0x812>
 8001b56:	6813      	ldr	r3, [r2, #0]
 8001b58:	f023 0308 	bic.w	r3, r3, #8
 8001b5c:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8001b5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f47f aeb5 	bne.w	80018d0 <HAL_DMA_IRQHandler+0x4b4>
 8001b66:	e70c      	b.n	8001982 <HAL_DMA_IRQHandler+0x566>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001b68:	069a      	lsls	r2, r3, #26
 8001b6a:	d45b      	bmi.n	8001c24 <HAL_DMA_IRQHandler+0x808>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b6c:	6802      	ldr	r2, [r0, #0]
 8001b6e:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <HAL_DMA_IRQHandler+0x828>)
 8001b70:	4c35      	ldr	r4, [pc, #212]	; (8001c48 <HAL_DMA_IRQHandler+0x82c>)
 8001b72:	4936      	ldr	r1, [pc, #216]	; (8001c4c <HAL_DMA_IRQHandler+0x830>)
 8001b74:	42a2      	cmp	r2, r4
 8001b76:	bf18      	it	ne
 8001b78:	429a      	cmpne	r2, r3
 8001b7a:	4d35      	ldr	r5, [pc, #212]	; (8001c50 <HAL_DMA_IRQHandler+0x834>)
 8001b7c:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8001b80:	bf0c      	ite	eq
 8001b82:	2301      	moveq	r3, #1
 8001b84:	2300      	movne	r3, #0
 8001b86:	428a      	cmp	r2, r1
 8001b88:	bf08      	it	eq
 8001b8a:	f043 0301 	orreq.w	r3, r3, #1
 8001b8e:	3148      	adds	r1, #72	; 0x48
 8001b90:	42aa      	cmp	r2, r5
 8001b92:	bf08      	it	eq
 8001b94:	f043 0301 	orreq.w	r3, r3, #1
 8001b98:	3548      	adds	r5, #72	; 0x48
 8001b9a:	42a2      	cmp	r2, r4
 8001b9c:	bf08      	it	eq
 8001b9e:	f043 0301 	orreq.w	r3, r3, #1
 8001ba2:	3448      	adds	r4, #72	; 0x48
 8001ba4:	428a      	cmp	r2, r1
 8001ba6:	bf08      	it	eq
 8001ba8:	f043 0301 	orreq.w	r3, r3, #1
 8001bac:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001bb0:	42aa      	cmp	r2, r5
 8001bb2:	bf08      	it	eq
 8001bb4:	f043 0301 	orreq.w	r3, r3, #1
 8001bb8:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8001bbc:	42a2      	cmp	r2, r4
 8001bbe:	bf08      	it	eq
 8001bc0:	f043 0301 	orreq.w	r3, r3, #1
 8001bc4:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8001bc8:	428a      	cmp	r2, r1
 8001bca:	bf08      	it	eq
 8001bcc:	f043 0301 	orreq.w	r3, r3, #1
 8001bd0:	3148      	adds	r1, #72	; 0x48
 8001bd2:	42aa      	cmp	r2, r5
 8001bd4:	bf08      	it	eq
 8001bd6:	f043 0301 	orreq.w	r3, r3, #1
 8001bda:	3548      	adds	r5, #72	; 0x48
 8001bdc:	42a2      	cmp	r2, r4
 8001bde:	bf08      	it	eq
 8001be0:	f043 0301 	orreq.w	r3, r3, #1
 8001be4:	3448      	adds	r4, #72	; 0x48
 8001be6:	428a      	cmp	r2, r1
 8001be8:	bf08      	it	eq
 8001bea:	f043 0301 	orreq.w	r3, r3, #1
 8001bee:	3148      	adds	r1, #72	; 0x48
 8001bf0:	42aa      	cmp	r2, r5
 8001bf2:	bf08      	it	eq
 8001bf4:	f043 0301 	orreq.w	r3, r3, #1
 8001bf8:	42a2      	cmp	r2, r4
 8001bfa:	bf08      	it	eq
 8001bfc:	f043 0301 	orreq.w	r3, r3, #1
 8001c00:	428a      	cmp	r2, r1
 8001c02:	bf08      	it	eq
 8001c04:	f043 0301 	orreq.w	r3, r3, #1
 8001c08:	b913      	cbnz	r3, 8001c10 <HAL_DMA_IRQHandler+0x7f4>
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_DMA_IRQHandler+0x838>)
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d113      	bne.n	8001c38 <HAL_DMA_IRQHandler+0x81c>
 8001c10:	6813      	ldr	r3, [r2, #0]
 8001c12:	f023 0314 	bic.w	r3, r3, #20
 8001c16:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(hdma);
 8001c18:	2200      	movs	r2, #0
          hdma->State = HAL_DMA_STATE_READY;
 8001c1a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001c1c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001c20:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001c24:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f47f ae52 	bne.w	80018d0 <HAL_DMA_IRQHandler+0x4b4>
 8001c2c:	e6a9      	b.n	8001982 <HAL_DMA_IRQHandler+0x566>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c2e:	6813      	ldr	r3, [r2, #0]
 8001c30:	f023 0304 	bic.w	r3, r3, #4
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e792      	b.n	8001b5e <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	f023 030a 	bic.w	r3, r3, #10
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	e7ea      	b.n	8001c18 <HAL_DMA_IRQHandler+0x7fc>
 8001c42:	bf00      	nop
 8001c44:	40020010 	.word	0x40020010
 8001c48:	40020028 	.word	0x40020028
 8001c4c:	40020040 	.word	0x40020040
 8001c50:	40020058 	.word	0x40020058
 8001c54:	400204b8 	.word	0x400204b8

08001c58 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001c58:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c5c:	680b      	ldr	r3, [r1, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80e8 	beq.w	8001e34 <HAL_GPIO_Init+0x1d8>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c64:	f8df c224 	ldr.w	ip, [pc, #548]	; 8001e8c <HAL_GPIO_Init+0x230>
{
 8001c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8001c6c:	2500      	movs	r5, #0
{
 8001c6e:	b083      	sub	sp, #12
 8001c70:	f8df e21c 	ldr.w	lr, [pc, #540]	; 8001e90 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c74:	4f7f      	ldr	r7, [pc, #508]	; (8001e74 <HAL_GPIO_Init+0x218>)
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c76:	2201      	movs	r2, #1
 8001c78:	40aa      	lsls	r2, r5
    if (iocurrent != 0x00U)
 8001c7a:	ea12 0603 	ands.w	r6, r2, r3
 8001c7e:	f000 80bf 	beq.w	8001e00 <HAL_GPIO_Init+0x1a4>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c82:	684b      	ldr	r3, [r1, #4]
 8001c84:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8001c88:	2403      	movs	r4, #3
 8001c8a:	f023 0910 	bic.w	r9, r3, #16
 8001c8e:	fa04 f408 	lsl.w	r4, r4, r8
 8001c92:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8001c96:	43e4      	mvns	r4, r4
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c98:	f1b9 0f01 	cmp.w	r9, #1
 8001c9c:	d814      	bhi.n	8001cc8 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->OSPEEDR;
 8001c9e:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ca0:	ea03 0904 	and.w	r9, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca4:	68cb      	ldr	r3, [r1, #12]
 8001ca6:	fa03 f308 	lsl.w	r3, r3, r8
 8001caa:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OSPEEDR = temp;
 8001cae:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cb0:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 8001cb2:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cb6:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cba:	ea29 0902 	bic.w	r9, r9, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cbe:	fa03 f205 	lsl.w	r2, r3, r5
 8001cc2:	ea42 0209 	orr.w	r2, r2, r9
        GPIOx->OTYPER = temp;
 8001cc6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001cc8:	68c2      	ldr	r2, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cca:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ccc:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cce:	fa03 f308 	lsl.w	r3, r3, r8
 8001cd2:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 8001cd4:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd6:	684b      	ldr	r3, [r1, #4]
 8001cd8:	f023 0210 	bic.w	r2, r3, #16
 8001cdc:	2a02      	cmp	r2, #2
 8001cde:	d115      	bne.n	8001d0c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 8001ce0:	08ea      	lsrs	r2, r5, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ce2:	f005 0907 	and.w	r9, r5, #7
 8001ce6:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cea:	690b      	ldr	r3, [r1, #16]
 8001cec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cf0:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8001cf4:	f8d2 a020 	ldr.w	sl, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cf8:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cfc:	fa03 f309 	lsl.w	r3, r3, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d00:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d04:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001d08:	6213      	str	r3, [r2, #32]
 8001d0a:	684b      	ldr	r3, [r1, #4]
      temp = GPIOx->MODER;
 8001d0c:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d0e:	f003 0303 	and.w	r3, r3, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d12:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d14:	fa03 f308 	lsl.w	r3, r3, r8
 8001d18:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8001d1a:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1c:	684b      	ldr	r3, [r1, #4]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	d56d      	bpl.n	8001dfe <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	f8dc 40f4 	ldr.w	r4, [ip, #244]	; 0xf4
 8001d26:	f025 0903 	bic.w	r9, r5, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d2a:	f005 0303 	and.w	r3, r5, #3
 8001d2e:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d30:	f044 0802 	orr.w	r8, r4, #2
 8001d34:	eb09 040e 	add.w	r4, r9, lr
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d38:	ea4f 0983 	mov.w	r9, r3, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d3c:	4b4e      	ldr	r3, [pc, #312]	; (8001e78 <HAL_GPIO_Init+0x21c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	f8cc 80f4 	str.w	r8, [ip, #244]	; 0xf4
 8001d42:	f8dc 80f4 	ldr.w	r8, [ip, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d46:	fa02 f209 	lsl.w	r2, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d4a:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4c:	f008 0802 	and.w	r8, r8, #2
 8001d50:	f8cd 8004 	str.w	r8, [sp, #4]
 8001d54:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d58:	f8d4 8008 	ldr.w	r8, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d5c:	ea28 0202 	bic.w	r2, r8, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d60:	d026      	beq.n	8001db0 <HAL_GPIO_Init+0x154>
 8001d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d66:	4298      	cmp	r0, r3
 8001d68:	d058      	beq.n	8001e1c <HAL_GPIO_Init+0x1c0>
 8001d6a:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <HAL_GPIO_Init+0x220>)
 8001d6c:	4298      	cmp	r0, r3
 8001d6e:	d04f      	beq.n	8001e10 <HAL_GPIO_Init+0x1b4>
 8001d70:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <HAL_GPIO_Init+0x224>)
 8001d72:	4298      	cmp	r0, r3
 8001d74:	d05f      	beq.n	8001e36 <HAL_GPIO_Init+0x1da>
 8001d76:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <HAL_GPIO_Init+0x228>)
 8001d78:	4298      	cmp	r0, r3
 8001d7a:	d062      	beq.n	8001e42 <HAL_GPIO_Init+0x1e6>
 8001d7c:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <HAL_GPIO_Init+0x22c>)
 8001d7e:	4298      	cmp	r0, r3
 8001d80:	d052      	beq.n	8001e28 <HAL_GPIO_Init+0x1cc>
 8001d82:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8001e94 <HAL_GPIO_Init+0x238>
 8001d86:	4540      	cmp	r0, r8
 8001d88:	d061      	beq.n	8001e4e <HAL_GPIO_Init+0x1f2>
 8001d8a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8001e98 <HAL_GPIO_Init+0x23c>
 8001d8e:	4540      	cmp	r0, r8
 8001d90:	d063      	beq.n	8001e5a <HAL_GPIO_Init+0x1fe>
 8001d92:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8001e9c <HAL_GPIO_Init+0x240>
 8001d96:	4540      	cmp	r0, r8
 8001d98:	d065      	beq.n	8001e66 <HAL_GPIO_Init+0x20a>
 8001d9a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001ea0 <HAL_GPIO_Init+0x244>
 8001d9e:	4540      	cmp	r0, r8
 8001da0:	bf0c      	ite	eq
 8001da2:	f04f 0809 	moveq.w	r8, #9
 8001da6:	f04f 080a 	movne.w	r8, #10
 8001daa:	fa08 f309 	lsl.w	r3, r8, r9
 8001dae:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db0:	60a2      	str	r2, [r4, #8]
        temp &= ~(iocurrent);
 8001db2:	43f2      	mvns	r2, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db4:	684c      	ldr	r4, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8001db6:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp = EXTI_CurrentCPU->IMR1;
 8001dba:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dbc:	03e4      	lsls	r4, r4, #15
          temp |= iocurrent;
 8001dbe:	bf4c      	ite	mi
 8001dc0:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 8001dc2:	4013      	andpl	r3, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8001dc4:	603b      	str	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc6:	684c      	ldr	r4, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dca:	03a4      	lsls	r4, r4, #14
          temp |= iocurrent;
 8001dcc:	bf4c      	ite	mi
 8001dce:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 8001dd0:	4013      	andpl	r3, r2
        EXTI_CurrentCPU->EMR1 = temp;
 8001dd2:	607b      	str	r3, [r7, #4]
        temp = EXTI->RTSR1;
 8001dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd8:	684c      	ldr	r4, [r1, #4]
        temp = EXTI->RTSR1;
 8001dda:	681b      	ldr	r3, [r3, #0]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ddc:	02e4      	lsls	r4, r4, #11
          temp |= iocurrent;
 8001dde:	bf4c      	ite	mi
 8001de0:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 8001de2:	4013      	andpl	r3, r2
        EXTI->RTSR1 = temp;
 8001de4:	f8c8 3000 	str.w	r3, [r8]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de8:	684c      	ldr	r4, [r1, #4]
        temp = EXTI->FTSR1;
 8001dea:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dee:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8001df0:	bf54      	ite	pl
 8001df2:	ea02 0603 	andpl.w	r6, r2, r3
        {
          temp |= iocurrent;
 8001df6:	431e      	orrmi	r6, r3
        }
        EXTI->FTSR1 = temp;
 8001df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfc:	605e      	str	r6, [r3, #4]
 8001dfe:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 8001e00:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e02:	fa33 f205 	lsrs.w	r2, r3, r5
 8001e06:	f47f af36 	bne.w	8001c76 <HAL_GPIO_Init+0x1a>
  }
}
 8001e0a:	b003      	add	sp, #12
 8001e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e10:	f04f 0802 	mov.w	r8, #2
 8001e14:	fa08 f309 	lsl.w	r3, r8, r9
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	e7c9      	b.n	8001db0 <HAL_GPIO_Init+0x154>
 8001e1c:	f04f 0801 	mov.w	r8, #1
 8001e20:	fa08 f309 	lsl.w	r3, r8, r9
 8001e24:	431a      	orrs	r2, r3
 8001e26:	e7c3      	b.n	8001db0 <HAL_GPIO_Init+0x154>
 8001e28:	f04f 0805 	mov.w	r8, #5
 8001e2c:	fa08 f309 	lsl.w	r3, r8, r9
 8001e30:	431a      	orrs	r2, r3
 8001e32:	e7bd      	b.n	8001db0 <HAL_GPIO_Init+0x154>
 8001e34:	4770      	bx	lr
 8001e36:	f04f 0803 	mov.w	r8, #3
 8001e3a:	fa08 f309 	lsl.w	r3, r8, r9
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	e7b6      	b.n	8001db0 <HAL_GPIO_Init+0x154>
 8001e42:	f04f 0804 	mov.w	r8, #4
 8001e46:	fa08 f309 	lsl.w	r3, r8, r9
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	e7b0      	b.n	8001db0 <HAL_GPIO_Init+0x154>
 8001e4e:	f04f 0806 	mov.w	r8, #6
 8001e52:	fa08 f309 	lsl.w	r3, r8, r9
 8001e56:	431a      	orrs	r2, r3
 8001e58:	e7aa      	b.n	8001db0 <HAL_GPIO_Init+0x154>
 8001e5a:	f04f 0807 	mov.w	r8, #7
 8001e5e:	fa08 f309 	lsl.w	r3, r8, r9
 8001e62:	431a      	orrs	r2, r3
 8001e64:	e7a4      	b.n	8001db0 <HAL_GPIO_Init+0x154>
 8001e66:	f04f 0808 	mov.w	r8, #8
 8001e6a:	fa08 f309 	lsl.w	r3, r8, r9
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	e79e      	b.n	8001db0 <HAL_GPIO_Init+0x154>
 8001e72:	bf00      	nop
 8001e74:	58000080 	.word	0x58000080
 8001e78:	58020000 	.word	0x58020000
 8001e7c:	58020800 	.word	0x58020800
 8001e80:	58020c00 	.word	0x58020c00
 8001e84:	58021000 	.word	0x58021000
 8001e88:	58021400 	.word	0x58021400
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	58000400 	.word	0x58000400
 8001e94:	58021800 	.word	0x58021800
 8001e98:	58021c00 	.word	0x58021c00
 8001e9c:	58022000 	.word	0x58022000
 8001ea0:	58022400 	.word	0x58022400

08001ea4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ea4:	6903      	ldr	r3, [r0, #16]
 8001ea6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001ea8:	bf14      	ite	ne
 8001eaa:	2001      	movne	r0, #1
 8001eac:	2000      	moveq	r0, #0
 8001eae:	4770      	bx	lr

08001eb0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eb0:	b902      	cbnz	r2, 8001eb4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001eb2:	0409      	lsls	r1, r1, #16
 8001eb4:	6181      	str	r1, [r0, #24]
  }
}
 8001eb6:	4770      	bx	lr

08001eb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b570      	push	{r4, r5, r6, lr}
 8001eba:	4604      	mov	r4, r0
 8001ebc:	460d      	mov	r5, r1
 8001ebe:	4616      	mov	r6, r2
 8001ec0:	1c6b      	adds	r3, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ec2:	6822      	ldr	r2, [r4, #0]
 8001ec4:	d12e      	bne.n	8001f24 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
 8001ec6:	6993      	ldr	r3, [r2, #24]
 8001ec8:	0798      	lsls	r0, r3, #30
 8001eca:	d42e      	bmi.n	8001f2a <I2C_WaitOnTXISFlagUntilTimeout+0x72>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ecc:	6993      	ldr	r3, [r2, #24]
 8001ece:	06d9      	lsls	r1, r3, #27
 8001ed0:	d5f9      	bpl.n	8001ec6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ed2:	6993      	ldr	r3, [r2, #24]
 8001ed4:	069d      	lsls	r5, r3, #26
 8001ed6:	d5fc      	bpl.n	8001ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed8:	2310      	movs	r3, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eda:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001edc:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	0791      	lsls	r1, r2, #30
 8001ee8:	d502      	bpl.n	8001ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
    hi2c->Instance->TXDR = 0x00U;
 8001eea:	2200      	movs	r2, #0
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28
 8001eee:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	07d2      	lsls	r2, r2, #31
 8001ef4:	d404      	bmi.n	8001f00 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	619a      	str	r2, [r3, #24]
 8001efe:	6823      	ldr	r3, [r4, #0]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f00:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f02:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001f04:	4e1b      	ldr	r6, [pc, #108]	; (8001f74 <I2C_WaitOnTXISFlagUntilTimeout+0xbc>)
    hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	2520      	movs	r5, #32
      return HAL_ERROR;
 8001f08:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001f0a:	4032      	ands	r2, r6
 8001f0c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f0e:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f10:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f1a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f24:	6993      	ldr	r3, [r2, #24]
 8001f26:	079b      	lsls	r3, r3, #30
 8001f28:	d501      	bpl.n	8001f2e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  return HAL_OK;
 8001f2a:	2000      	movs	r0, #0
}
 8001f2c:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f2e:	6993      	ldr	r3, [r2, #24]
 8001f30:	06db      	lsls	r3, r3, #27
 8001f32:	d407      	bmi.n	8001f44 <I2C_WaitOnTXISFlagUntilTimeout+0x8c>
 8001f34:	e00a      	b.n	8001f4c <I2C_WaitOnTXISFlagUntilTimeout+0x94>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f36:	f7fe fa33 	bl	80003a0 <HAL_GetTick>
 8001f3a:	1b80      	subs	r0, r0, r6
 8001f3c:	4285      	cmp	r5, r0
 8001f3e:	d30c      	bcc.n	8001f5a <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 8001f40:	b15d      	cbz	r5, 8001f5a <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 8001f42:	6822      	ldr	r2, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f44:	6993      	ldr	r3, [r2, #24]
 8001f46:	0698      	lsls	r0, r3, #26
 8001f48:	d5f5      	bpl.n	8001f36 <I2C_WaitOnTXISFlagUntilTimeout+0x7e>
 8001f4a:	e7c5      	b.n	8001ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4c:	f7fe fa28 	bl	80003a0 <HAL_GetTick>
 8001f50:	1b80      	subs	r0, r0, r6
 8001f52:	42a8      	cmp	r0, r5
 8001f54:	d801      	bhi.n	8001f5a <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 8001f56:	2d00      	cmp	r5, #0
 8001f58:	d1b2      	bne.n	8001ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8001f60:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f62:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8001f64:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f68:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8001f72:	bd70      	pop	{r4, r5, r6, pc}
 8001f74:	fe00e800 	.word	0xfe00e800

08001f78 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	460d      	mov	r5, r1
 8001f7e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f80:	6822      	ldr	r2, [r4, #0]
 8001f82:	6993      	ldr	r3, [r2, #24]
 8001f84:	069b      	lsls	r3, r3, #26
 8001f86:	d44d      	bmi.n	8002024 <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f88:	6993      	ldr	r3, [r2, #24]
 8001f8a:	06d9      	lsls	r1, r3, #27
 8001f8c:	d52a      	bpl.n	8001fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
 8001f8e:	1c6b      	adds	r3, r5, #1
 8001f90:	d13c      	bne.n	800200c <I2C_WaitOnSTOPFlagUntilTimeout+0x94>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f92:	6993      	ldr	r3, [r2, #24]
 8001f94:	069d      	lsls	r5, r3, #26
 8001f96:	d5fc      	bpl.n	8001f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f98:	2310      	movs	r3, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f9a:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f9c:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	0791      	lsls	r1, r2, #30
 8001fa8:	d502      	bpl.n	8001fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
    hi2c->Instance->TXDR = 0x00U;
 8001faa:	2200      	movs	r2, #0
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
 8001fae:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	07d2      	lsls	r2, r2, #31
 8001fb4:	d404      	bmi.n	8001fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fb6:	699a      	ldr	r2, [r3, #24]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	619a      	str	r2, [r3, #24]
 8001fbe:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001fc0:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc2:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001fc4:	4e18      	ldr	r6, [pc, #96]	; (8002028 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>)
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	2520      	movs	r5, #32
      return HAL_ERROR;
 8001fc8:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001fca:	4032      	ands	r2, r6
 8001fcc:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fce:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8001fd0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fde:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe4:	f7fe f9dc 	bl	80003a0 <HAL_GetTick>
 8001fe8:	1b80      	subs	r0, r0, r6
 8001fea:	42a8      	cmp	r0, r5
 8001fec:	d801      	bhi.n	8001ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 8001fee:	2d00      	cmp	r5, #0
 8001ff0:	d1c6      	bne.n	8001f80 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ff4:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8001ff8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ffa:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8001ffc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002000:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002002:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002006:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800200a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800200c:	6993      	ldr	r3, [r2, #24]
 800200e:	0698      	lsls	r0, r3, #26
 8002010:	d4c2      	bmi.n	8001f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002012:	f7fe f9c5 	bl	80003a0 <HAL_GetTick>
 8002016:	1b80      	subs	r0, r0, r6
 8002018:	4285      	cmp	r5, r0
 800201a:	d3ea      	bcc.n	8001ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 800201c:	2d00      	cmp	r5, #0
 800201e:	d0e8      	beq.n	8001ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 8002020:	6822      	ldr	r2, [r4, #0]
 8002022:	e7b4      	b.n	8001f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002024:	2000      	movs	r0, #0
}
 8002026:	bd70      	pop	{r4, r5, r6, pc}
 8002028:	fe00e800 	.word	0xfe00e800

0800202c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800202c:	2800      	cmp	r0, #0
 800202e:	d056      	beq.n	80020de <HAL_I2C_Init+0xb2>
{
 8002030:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002032:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002036:	4604      	mov	r4, r0
 8002038:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800203c:	2b00      	cmp	r3, #0
 800203e:	d049      	beq.n	80020d4 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 8002040:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002042:	2324      	movs	r3, #36	; 0x24
 8002044:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002048:	6813      	ldr	r3, [r2, #0]
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002050:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002054:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002058:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800205a:	6822      	ldr	r2, [r4, #0]
 800205c:	6893      	ldr	r3, [r2, #8]
 800205e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002062:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002064:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002066:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002068:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800206a:	68a3      	ldr	r3, [r4, #8]
 800206c:	bf0c      	ite	eq
 800206e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002072:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8002076:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002078:	68e3      	ldr	r3, [r4, #12]
 800207a:	6825      	ldr	r5, [r4, #0]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d024      	beq.n	80020ca <HAL_I2C_Init+0x9e>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002080:	6868      	ldr	r0, [r5, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002082:	2200      	movs	r2, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002084:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_I2C_Init+0xb8>)
  hi2c->State = HAL_I2C_STATE_READY;
 8002086:	2120      	movs	r1, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002088:	4303      	orrs	r3, r0
  return HAL_OK;
 800208a:	4610      	mov	r0, r2
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800208c:	606b      	str	r3, [r5, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800208e:	6825      	ldr	r5, [r4, #0]
 8002090:	68eb      	ldr	r3, [r5, #12]
 8002092:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002096:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002098:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
 800209c:	432b      	orrs	r3, r5
 800209e:	69a5      	ldr	r5, [r4, #24]
 80020a0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80020a4:	6825      	ldr	r5, [r4, #0]
 80020a6:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020a8:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 80020ac:	432b      	orrs	r3, r5
 80020ae:	6825      	ldr	r5, [r4, #0]
 80020b0:	602b      	str	r3, [r5, #0]
  __HAL_I2C_ENABLE(hi2c);
 80020b2:	6825      	ldr	r5, [r4, #0]
 80020b4:	682b      	ldr	r3, [r5, #0]
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	602b      	str	r3, [r5, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020bc:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020be:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c2:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80020c8:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020ce:	606b      	str	r3, [r5, #4]
 80020d0:	6825      	ldr	r5, [r4, #0]
 80020d2:	e7d5      	b.n	8002080 <HAL_I2C_Init+0x54>
    hi2c->Lock = HAL_UNLOCKED;
 80020d4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80020d8:	f006 f974 	bl	80083c4 <HAL_I2C_MspInit>
 80020dc:	e7b0      	b.n	8002040 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80020de:	2001      	movs	r0, #1
}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	02008000 	.word	0x02008000

080020e8 <HAL_I2C_Master_Transmit>:
{
 80020e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ec:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 80020f0:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f2:	2c20      	cmp	r4, #32
 80020f4:	d170      	bne.n	80021d8 <HAL_I2C_Master_Transmit+0xf0>
    __HAL_LOCK(hi2c);
 80020f6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80020fa:	2c01      	cmp	r4, #1
 80020fc:	d06c      	beq.n	80021d8 <HAL_I2C_Master_Transmit+0xf0>
 80020fe:	4698      	mov	r8, r3
 8002100:	2301      	movs	r3, #1
 8002102:	4691      	mov	r9, r2
 8002104:	460f      	mov	r7, r1
 8002106:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800210a:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800210c:	f7fe f948 	bl	80003a0 <HAL_GetTick>
 8002110:	4605      	mov	r5, r0
 8002112:	e004      	b.n	800211e <HAL_I2C_Master_Transmit+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002114:	f7fe f944 	bl	80003a0 <HAL_GetTick>
 8002118:	1b40      	subs	r0, r0, r5
 800211a:	2819      	cmp	r0, #25
 800211c:	d873      	bhi.n	8002206 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	6998      	ldr	r0, [r3, #24]
 8002122:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8002126:	d1f5      	bne.n	8002114 <HAL_I2C_Master_Transmit+0x2c>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002128:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800212a:	2121      	movs	r1, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800212c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8002130:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002134:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002138:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800213c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800213e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002142:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002144:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002146:	2aff      	cmp	r2, #255	; 0xff
 8002148:	d849      	bhi.n	80021de <HAL_I2C_Master_Transmit+0xf6>
      hi2c->XferSize = hi2c->XferCount;
 800214a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800214c:	4a47      	ldr	r2, [pc, #284]	; (800226c <HAL_I2C_Master_Transmit+0x184>)
      hi2c->XferSize = hi2c->XferCount;
 800214e:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002150:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8002270 <HAL_I2C_Master_Transmit+0x188>
 8002154:	433a      	orrs	r2, r7
      hi2c->XferSize = hi2c->XferCount;
 8002156:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002158:	b2c9      	uxtb	r1, r1
 800215a:	6858      	ldr	r0, [r3, #4]
 800215c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002160:	ea00 010c 	and.w	r1, r0, ip
 8002164:	430a      	orrs	r2, r1
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800227c <HAL_I2C_Master_Transmit+0x194>
 800216c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8002280 <HAL_I2C_Master_Transmit+0x198>
 8002170:	ea47 0808 	orr.w	r8, r7, r8
    while (hi2c->XferCount > 0U)
 8002174:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002176:	462a      	mov	r2, r5
 8002178:	4631      	mov	r1, r6
 800217a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d060      	beq.n	8002244 <HAL_I2C_Master_Transmit+0x15c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002182:	f7ff fe99 	bl	8001eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002186:	2800      	cmp	r0, #0
 8002188:	d159      	bne.n	800223e <HAL_I2C_Master_Transmit+0x156>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800218a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	7812      	ldrb	r2, [r2, #0]
 8002190:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002192:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002194:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002196:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8002198:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800219a:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800219c:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800219e:	3201      	adds	r2, #1
      hi2c->XferSize--;
 80021a0:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 80021a2:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021a4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80021a6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021a8:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 80021aa:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021ac:	2900      	cmp	r1, #0
 80021ae:	d0e1      	beq.n	8002174 <HAL_I2C_Master_Transmit+0x8c>
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1df      	bne.n	8002174 <HAL_I2C_Master_Transmit+0x8c>
 80021b4:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021b6:	6822      	ldr	r2, [r4, #0]
 80021b8:	d11b      	bne.n	80021f2 <HAL_I2C_Master_Transmit+0x10a>
 80021ba:	6993      	ldr	r3, [r2, #24]
 80021bc:	0619      	lsls	r1, r3, #24
 80021be:	d5fc      	bpl.n	80021ba <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021c2:	2bff      	cmp	r3, #255	; 0xff
 80021c4:	d92d      	bls.n	8002222 <HAL_I2C_Master_Transmit+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021c6:	23ff      	movs	r3, #255	; 0xff
 80021c8:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80021ca:	6853      	ldr	r3, [r2, #4]
 80021cc:	ea03 0309 	and.w	r3, r3, r9
 80021d0:	ea43 0308 	orr.w	r3, r3, r8
 80021d4:	6053      	str	r3, [r2, #4]
 80021d6:	e7cd      	b.n	8002174 <HAL_I2C_Master_Transmit+0x8c>
    return HAL_BUSY;
 80021d8:	2002      	movs	r0, #2
}
 80021da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021de:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80021e0:	4823      	ldr	r0, [pc, #140]	; (8002270 <HAL_I2C_Master_Transmit+0x188>)
 80021e2:	4924      	ldr	r1, [pc, #144]	; (8002274 <HAL_I2C_Master_Transmit+0x18c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021e4:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4339      	orrs	r1, r7
 80021ea:	4002      	ands	r2, r0
 80021ec:	430a      	orrs	r2, r1
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	e7ba      	b.n	8002168 <HAL_I2C_Master_Transmit+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f2:	6993      	ldr	r3, [r2, #24]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	d4e3      	bmi.n	80021c0 <HAL_I2C_Master_Transmit+0xd8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f8:	f7fe f8d2 	bl	80003a0 <HAL_GetTick>
 80021fc:	1b40      	subs	r0, r0, r5
 80021fe:	4286      	cmp	r6, r0
 8002200:	d301      	bcc.n	8002206 <HAL_I2C_Master_Transmit+0x11e>
 8002202:	2e00      	cmp	r6, #0
 8002204:	d1d6      	bne.n	80021b4 <HAL_I2C_Master_Transmit+0xcc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002206:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002208:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800220a:	2200      	movs	r2, #0
          return HAL_ERROR;
 800220c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800220e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8002210:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002214:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002216:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800221a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800221e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8002222:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002224:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8002228:	b289      	uxth	r1, r1
 800222a:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800222c:	b2c9      	uxtb	r1, r1
 800222e:	6850      	ldr	r0, [r2, #4]
 8002230:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002234:	ea00 0109 	and.w	r1, r0, r9
 8002238:	430b      	orrs	r3, r1
 800223a:	6053      	str	r3, [r2, #4]
 800223c:	e79a      	b.n	8002174 <HAL_I2C_Master_Transmit+0x8c>
        return HAL_ERROR;
 800223e:	2001      	movs	r0, #1
}
 8002240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002244:	f7ff fe98 	bl	8001f78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002248:	2800      	cmp	r0, #0
 800224a:	d1f8      	bne.n	800223e <HAL_I2C_Master_Transmit+0x156>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 8002250:	4d09      	ldr	r5, [pc, #36]	; (8002278 <HAL_I2C_Master_Transmit+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002252:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002254:	6821      	ldr	r1, [r4, #0]
 8002256:	684b      	ldr	r3, [r1, #4]
 8002258:	402b      	ands	r3, r5
 800225a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800225c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002260:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002264:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002268:	e7b7      	b.n	80021da <HAL_I2C_Master_Transmit+0xf2>
 800226a:	bf00      	nop
 800226c:	82002000 	.word	0x82002000
 8002270:	fc009800 	.word	0xfc009800
 8002274:	81ff2000 	.word	0x81ff2000
 8002278:	fe00e800 	.word	0xfe00e800
 800227c:	01ff0000 	.word	0x01ff0000
 8002280:	fc009c00 	.word	0xfc009c00

08002284 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002284:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	2a20      	cmp	r2, #32
 800228c:	d126      	bne.n	80022dc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800228e:	4603      	mov	r3, r0
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002290:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002294:	2801      	cmp	r0, #1
 8002296:	d021      	beq.n	80022dc <HAL_I2CEx_ConfigAnalogFilter+0x58>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002298:	2024      	movs	r0, #36	; 0x24
{
 800229a:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(hi2c);
 800229c:	2401      	movs	r4, #1

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800229e:	681e      	ldr	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a0:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	2500      	movs	r5, #0
    __HAL_LOCK(hi2c);
 80022a6:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 80022aa:	6834      	ldr	r4, [r6, #0]

    return HAL_OK;
 80022ac:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 80022ae:	f024 0401 	bic.w	r4, r4, #1
 80022b2:	6034      	str	r4, [r6, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022b4:	681e      	ldr	r6, [r3, #0]
 80022b6:	6834      	ldr	r4, [r6, #0]
 80022b8:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80022bc:	6034      	str	r4, [r6, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80022be:	681e      	ldr	r6, [r3, #0]
 80022c0:	6834      	ldr	r4, [r6, #0]
 80022c2:	4321      	orrs	r1, r4
 80022c4:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 80022c6:	681c      	ldr	r4, [r3, #0]
 80022c8:	6821      	ldr	r1, [r4, #0]
 80022ca:	f041 0101 	orr.w	r1, r1, #1
 80022ce:	6021      	str	r1, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80022d4:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80022d8:	bc70      	pop	{r4, r5, r6}
 80022da:	4770      	bx	lr
    return HAL_BUSY;
 80022dc:	2002      	movs	r0, #2
}
 80022de:	4770      	bx	lr

080022e0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	2a20      	cmp	r2, #32
 80022e8:	d124      	bne.n	8002334 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80022ea:	4603      	mov	r3, r0
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ec:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80022f0:	2801      	cmp	r0, #1
 80022f2:	d01f      	beq.n	8002334 <HAL_I2CEx_ConfigDigitalFilter+0x54>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f4:	2024      	movs	r0, #36	; 0x24
{
 80022f6:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(hi2c);
 80022f8:	2401      	movs	r4, #1

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022fa:	681e      	ldr	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022fc:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002300:	2500      	movs	r5, #0
    __HAL_LOCK(hi2c);
 8002302:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002306:	6834      	ldr	r4, [r6, #0]

    return HAL_OK;
 8002308:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 800230a:	f024 0401 	bic.w	r4, r4, #1
 800230e:	6034      	str	r4, [r6, #0]
    tmpreg = hi2c->Instance->CR1;
 8002310:	681e      	ldr	r6, [r3, #0]
 8002312:	6834      	ldr	r4, [r6, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002314:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002318:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800231c:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 800231e:	681c      	ldr	r4, [r3, #0]
 8002320:	6821      	ldr	r1, [r4, #0]
 8002322:	f041 0101 	orr.w	r1, r1, #1
 8002326:	6021      	str	r1, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800232c:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002330:	bc70      	pop	{r4, r5, r6}
 8002332:	4770      	bx	lr
    return HAL_BUSY;
 8002334:	2002      	movs	r0, #2
}
 8002336:	4770      	bx	lr

08002338 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002338:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_PWREx_ConfigSupply+0x48>)
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	0752      	lsls	r2, r2, #29
 8002340:	d406      	bmi.n	8002350 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002348:	1a18      	subs	r0, r3, r0
 800234a:	bf18      	it	ne
 800234c:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800234e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002350:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002352:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002354:	f022 0207 	bic.w	r2, r2, #7
 8002358:	4310      	orrs	r0, r2
 800235a:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 800235c:	f7fe f820 	bl	80003a0 <HAL_GetTick>
 8002360:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002362:	e005      	b.n	8002370 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002364:	f7fe f81c 	bl	80003a0 <HAL_GetTick>
 8002368:	1b40      	subs	r0, r0, r5
 800236a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800236e:	d804      	bhi.n	800237a <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002370:	6863      	ldr	r3, [r4, #4]
 8002372:	049b      	lsls	r3, r3, #18
 8002374:	d5f6      	bpl.n	8002364 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8002376:	2000      	movs	r0, #0
}
 8002378:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800237a:	2001      	movs	r0, #1
}
 800237c:	bd38      	pop	{r3, r4, r5, pc}
 800237e:	bf00      	nop
 8002380:	58024800 	.word	0x58024800

08002384 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002384:	2800      	cmp	r0, #0
 8002386:	f000 8195 	beq.w	80026b4 <HAL_RCC_OscConfig+0x330>
{
 800238a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238c:	6803      	ldr	r3, [r0, #0]
 800238e:	4604      	mov	r4, r0
 8002390:	07d9      	lsls	r1, r3, #31
 8002392:	d52e      	bpl.n	80023f2 <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002394:	49a7      	ldr	r1, [pc, #668]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 8002396:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002398:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800239e:	2a10      	cmp	r2, #16
 80023a0:	f000 810d 	beq.w	80025be <HAL_RCC_OscConfig+0x23a>
 80023a4:	2a18      	cmp	r2, #24
 80023a6:	f000 8105 	beq.w	80025b4 <HAL_RCC_OscConfig+0x230>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023aa:	6863      	ldr	r3, [r4, #4]
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b0:	f000 8130 	beq.w	8002614 <HAL_RCC_OscConfig+0x290>
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f040 81a5 	bne.w	8002704 <HAL_RCC_OscConfig+0x380>
 80023ba:	4b9e      	ldr	r3, [pc, #632]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023cc:	6863      	ldr	r3, [r4, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 8162 	beq.w	8002698 <HAL_RCC_OscConfig+0x314>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fd ffe4 	bl	80003a0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023d8:	4d96      	ldr	r5, [pc, #600]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80023da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023dc:	e005      	b.n	80023ea <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023de:	f7fd ffdf 	bl	80003a0 <HAL_GetTick>
 80023e2:	1b80      	subs	r0, r0, r6
 80023e4:	2864      	cmp	r0, #100	; 0x64
 80023e6:	f200 8155 	bhi.w	8002694 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023ea:	682b      	ldr	r3, [r5, #0]
 80023ec:	039f      	lsls	r7, r3, #14
 80023ee:	d5f6      	bpl.n	80023de <HAL_RCC_OscConfig+0x5a>
 80023f0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	0799      	lsls	r1, r3, #30
 80023f4:	f100 808e 	bmi.w	8002514 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023f8:	06d9      	lsls	r1, r3, #27
 80023fa:	d534      	bpl.n	8002466 <HAL_RCC_OscConfig+0xe2>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fc:	4a8d      	ldr	r2, [pc, #564]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 80023fe:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002400:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002402:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002406:	2b08      	cmp	r3, #8
 8002408:	f000 80e9 	beq.w	80025de <HAL_RCC_OscConfig+0x25a>
 800240c:	2b18      	cmp	r3, #24
 800240e:	f000 80e1 	beq.w	80025d4 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002412:	69e3      	ldr	r3, [r4, #28]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 8183 	beq.w	8002720 <HAL_RCC_OscConfig+0x39c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800241a:	4b86      	ldr	r3, [pc, #536]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 800241c:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800241e:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8002420:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002424:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002426:	f7fd ffbb 	bl	80003a0 <HAL_GetTick>
 800242a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800242c:	e005      	b.n	800243a <HAL_RCC_OscConfig+0xb6>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800242e:	f7fd ffb7 	bl	80003a0 <HAL_GetTick>
 8002432:	1b80      	subs	r0, r0, r6
 8002434:	2802      	cmp	r0, #2
 8002436:	f200 812d 	bhi.w	8002694 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800243a:	682b      	ldr	r3, [r5, #0]
 800243c:	05db      	lsls	r3, r3, #23
 800243e:	d5f6      	bpl.n	800242e <HAL_RCC_OscConfig+0xaa>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002440:	f7fd ffc6 	bl	80003d0 <HAL_GetREVID>
 8002444:	f241 0303 	movw	r3, #4099	; 0x1003
 8002448:	4298      	cmp	r0, r3
 800244a:	f200 8257 	bhi.w	80028fc <HAL_RCC_OscConfig+0x578>
 800244e:	6a22      	ldr	r2, [r4, #32]
 8002450:	686b      	ldr	r3, [r5, #4]
 8002452:	2a20      	cmp	r2, #32
 8002454:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002458:	bf0c      	ite	eq
 800245a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800245e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8002462:	606b      	str	r3, [r5, #4]
 8002464:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002466:	071d      	lsls	r5, r3, #28
 8002468:	d517      	bpl.n	800249a <HAL_RCC_OscConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800246a:	6963      	ldr	r3, [r4, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8123 	beq.w	80026b8 <HAL_RCC_OscConfig+0x334>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002472:	4b70      	ldr	r3, [pc, #448]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 8002474:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002476:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8002478:	f042 0201 	orr.w	r2, r2, #1
 800247c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800247e:	f7fd ff8f 	bl	80003a0 <HAL_GetTick>
 8002482:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002484:	e005      	b.n	8002492 <HAL_RCC_OscConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002486:	f7fd ff8b 	bl	80003a0 <HAL_GetTick>
 800248a:	1b80      	subs	r0, r0, r6
 800248c:	2802      	cmp	r0, #2
 800248e:	f200 8101 	bhi.w	8002694 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002492:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002494:	0798      	lsls	r0, r3, #30
 8002496:	d5f6      	bpl.n	8002486 <HAL_RCC_OscConfig+0x102>
 8002498:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800249a:	069a      	lsls	r2, r3, #26
 800249c:	d517      	bpl.n	80024ce <HAL_RCC_OscConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800249e:	69a3      	ldr	r3, [r4, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 811c 	beq.w	80026de <HAL_RCC_OscConfig+0x35a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024a6:	4b63      	ldr	r3, [pc, #396]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 80024a8:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024aa:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 80024ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024b0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024b2:	f7fd ff75 	bl	80003a0 <HAL_GetTick>
 80024b6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024b8:	e005      	b.n	80024c6 <HAL_RCC_OscConfig+0x142>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80024ba:	f7fd ff71 	bl	80003a0 <HAL_GetTick>
 80024be:	1b80      	subs	r0, r0, r6
 80024c0:	2802      	cmp	r0, #2
 80024c2:	f200 80e7 	bhi.w	8002694 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024c6:	682b      	ldr	r3, [r5, #0]
 80024c8:	049f      	lsls	r7, r3, #18
 80024ca:	d5f6      	bpl.n	80024ba <HAL_RCC_OscConfig+0x136>
 80024cc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ce:	0759      	lsls	r1, r3, #29
 80024d0:	f100 80a6 	bmi.w	8002620 <HAL_RCC_OscConfig+0x29c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80024d6:	b1d8      	cbz	r0, 8002510 <HAL_RCC_OscConfig+0x18c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80024d8:	4b56      	ldr	r3, [pc, #344]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80024e0:	2a18      	cmp	r2, #24
 80024e2:	f000 81cc 	beq.w	800287e <HAL_RCC_OscConfig+0x4fa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e6:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ea:	f000 815e 	beq.w	80027aa <HAL_RCC_OscConfig+0x426>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024f2:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 80024f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024f6:	f7fd ff53 	bl	80003a0 <HAL_GetTick>
 80024fa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024fc:	e005      	b.n	800250a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fd ff4f 	bl	80003a0 <HAL_GetTick>
 8002502:	1b40      	subs	r0, r0, r5
 8002504:	2802      	cmp	r0, #2
 8002506:	f200 80c5 	bhi.w	8002694 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800250a:	6823      	ldr	r3, [r4, #0]
 800250c:	019b      	lsls	r3, r3, #6
 800250e:	d4f6      	bmi.n	80024fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002510:	2000      	movs	r0, #0
}
 8002512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002514:	4a47      	ldr	r2, [pc, #284]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 8002516:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002518:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800251a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800251e:	d02f      	beq.n	8002580 <HAL_RCC_OscConfig+0x1fc>
 8002520:	2b18      	cmp	r3, #24
 8002522:	d02b      	beq.n	800257c <HAL_RCC_OscConfig+0x1f8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002524:	68e2      	ldr	r2, [r4, #12]
 8002526:	2a00      	cmp	r2, #0
 8002528:	f000 810e 	beq.w	8002748 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800252c:	4941      	ldr	r1, [pc, #260]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 800252e:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002530:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002532:	f023 0319 	bic.w	r3, r3, #25
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 800253a:	f7fd ff31 	bl	80003a0 <HAL_GetTick>
 800253e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002540:	e005      	b.n	800254e <HAL_RCC_OscConfig+0x1ca>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002542:	f7fd ff2d 	bl	80003a0 <HAL_GetTick>
 8002546:	1b80      	subs	r0, r0, r6
 8002548:	2802      	cmp	r0, #2
 800254a:	f200 80a3 	bhi.w	8002694 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800254e:	682b      	ldr	r3, [r5, #0]
 8002550:	075f      	lsls	r7, r3, #29
 8002552:	d5f6      	bpl.n	8002542 <HAL_RCC_OscConfig+0x1be>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	f7fd ff3c 	bl	80003d0 <HAL_GetREVID>
 8002558:	f241 0303 	movw	r3, #4099	; 0x1003
 800255c:	4298      	cmp	r0, r3
 800255e:	f200 81d6 	bhi.w	800290e <HAL_RCC_OscConfig+0x58a>
 8002562:	6922      	ldr	r2, [r4, #16]
 8002564:	686b      	ldr	r3, [r5, #4]
 8002566:	2a40      	cmp	r2, #64	; 0x40
 8002568:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800256c:	bf0c      	ite	eq
 800256e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8002572:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8002576:	606b      	str	r3, [r5, #4]
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	e73d      	b.n	80023f8 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800257c:	0792      	lsls	r2, r2, #30
 800257e:	d1d1      	bne.n	8002524 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002580:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	075b      	lsls	r3, r3, #29
 8002586:	d501      	bpl.n	800258c <HAL_RCC_OscConfig+0x208>
 8002588:	68e3      	ldr	r3, [r4, #12]
 800258a:	b30b      	cbz	r3, 80025d0 <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	f7fd ff20 	bl	80003d0 <HAL_GetREVID>
 8002590:	f241 0303 	movw	r3, #4099	; 0x1003
 8002594:	4298      	cmp	r0, r3
 8002596:	f200 80eb 	bhi.w	8002770 <HAL_RCC_OscConfig+0x3ec>
 800259a:	6922      	ldr	r2, [r4, #16]
 800259c:	2a40      	cmp	r2, #64	; 0x40
 800259e:	f000 80fb 	beq.w	8002798 <HAL_RCC_OscConfig+0x414>
 80025a2:	4924      	ldr	r1, [pc, #144]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 80025a4:	684b      	ldr	r3, [r1, #4]
 80025a6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025aa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	e721      	b.n	80023f8 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025b4:	f001 0103 	and.w	r1, r1, #3
 80025b8:	2902      	cmp	r1, #2
 80025ba:	f47f aef6 	bne.w	80023aa <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025be:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	0392      	lsls	r2, r2, #14
 80025c4:	f57f af15 	bpl.w	80023f2 <HAL_RCC_OscConfig+0x6e>
 80025c8:	6862      	ldr	r2, [r4, #4]
 80025ca:	2a00      	cmp	r2, #0
 80025cc:	f47f af11 	bne.w	80023f2 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 80025d0:	2001      	movs	r0, #1
}
 80025d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025d4:	f002 0203 	and.w	r2, r2, #3
 80025d8:	2a01      	cmp	r2, #1
 80025da:	f47f af1a 	bne.w	8002412 <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	05da      	lsls	r2, r3, #23
 80025e4:	d502      	bpl.n	80025ec <HAL_RCC_OscConfig+0x268>
 80025e6:	69e3      	ldr	r3, [r4, #28]
 80025e8:	2b80      	cmp	r3, #128	; 0x80
 80025ea:	d1f1      	bne.n	80025d0 <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ec:	f7fd fef0 	bl	80003d0 <HAL_GetREVID>
 80025f0:	f241 0303 	movw	r3, #4099	; 0x1003
 80025f4:	4298      	cmp	r0, r3
 80025f6:	f200 80c5 	bhi.w	8002784 <HAL_RCC_OscConfig+0x400>
 80025fa:	6a22      	ldr	r2, [r4, #32]
 80025fc:	2a20      	cmp	r2, #32
 80025fe:	f000 81a8 	beq.w	8002952 <HAL_RCC_OscConfig+0x5ce>
 8002602:	490c      	ldr	r1, [pc, #48]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 8002604:	684b      	ldr	r3, [r1, #4]
 8002606:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800260a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800260e:	604b      	str	r3, [r1, #4]
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	e728      	b.n	8002466 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002614:	4a07      	ldr	r2, [pc, #28]	; (8002634 <HAL_RCC_OscConfig+0x2b0>)
 8002616:	6813      	ldr	r3, [r2, #0]
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e6d5      	b.n	80023cc <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_OscConfig+0x2b4>)
 8002622:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002624:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8002626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800262a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800262c:	f7fd feb8 	bl	80003a0 <HAL_GetTick>
 8002630:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x2c2>
 8002634:	58024400 	.word	0x58024400
 8002638:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800263c:	f7fd feb0 	bl	80003a0 <HAL_GetTick>
 8002640:	1b80      	subs	r0, r0, r6
 8002642:	2864      	cmp	r0, #100	; 0x64
 8002644:	d826      	bhi.n	8002694 <HAL_RCC_OscConfig+0x310>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002646:	682b      	ldr	r3, [r5, #0]
 8002648:	05da      	lsls	r2, r3, #23
 800264a:	d5f7      	bpl.n	800263c <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	68a3      	ldr	r3, [r4, #8]
 800264e:	2b01      	cmp	r3, #1
 8002650:	f000 816c 	beq.w	800292c <HAL_RCC_OscConfig+0x5a8>
 8002654:	2b00      	cmp	r3, #0
 8002656:	f040 816f 	bne.w	8002938 <HAL_RCC_OscConfig+0x5b4>
 800265a:	4bb1      	ldr	r3, [pc, #708]	; (8002920 <HAL_RCC_OscConfig+0x59c>)
 800265c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	671a      	str	r2, [r3, #112]	; 0x70
 8002664:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002666:	f022 0204 	bic.w	r2, r2, #4
 800266a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800266c:	68a3      	ldr	r3, [r4, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8133 	beq.w	80028da <HAL_RCC_OscConfig+0x556>
      tickstart = HAL_GetTick();
 8002674:	f7fd fe94 	bl	80003a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002678:	4da9      	ldr	r5, [pc, #676]	; (8002920 <HAL_RCC_OscConfig+0x59c>)
      tickstart = HAL_GetTick();
 800267a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800267c:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002680:	e004      	b.n	800268c <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fd fe8d 	bl	80003a0 <HAL_GetTick>
 8002686:	1bc0      	subs	r0, r0, r7
 8002688:	42b0      	cmp	r0, r6
 800268a:	d803      	bhi.n	8002694 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800268c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800268e:	079b      	lsls	r3, r3, #30
 8002690:	d5f7      	bpl.n	8002682 <HAL_RCC_OscConfig+0x2fe>
 8002692:	e71f      	b.n	80024d4 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8002694:	2003      	movs	r0, #3
}
 8002696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8002698:	f7fd fe82 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800269c:	4da0      	ldr	r5, [pc, #640]	; (8002920 <HAL_RCC_OscConfig+0x59c>)
        tickstart = HAL_GetTick();
 800269e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026a0:	e004      	b.n	80026ac <HAL_RCC_OscConfig+0x328>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a2:	f7fd fe7d 	bl	80003a0 <HAL_GetTick>
 80026a6:	1b80      	subs	r0, r0, r6
 80026a8:	2864      	cmp	r0, #100	; 0x64
 80026aa:	d8f3      	bhi.n	8002694 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026ac:	682b      	ldr	r3, [r5, #0]
 80026ae:	0398      	lsls	r0, r3, #14
 80026b0:	d4f7      	bmi.n	80026a2 <HAL_RCC_OscConfig+0x31e>
 80026b2:	e69d      	b.n	80023f0 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 80026b4:	2001      	movs	r0, #1
}
 80026b6:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 80026b8:	4b99      	ldr	r3, [pc, #612]	; (8002920 <HAL_RCC_OscConfig+0x59c>)
 80026ba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026bc:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80026c4:	f7fd fe6c 	bl	80003a0 <HAL_GetTick>
 80026c8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ca:	e004      	b.n	80026d6 <HAL_RCC_OscConfig+0x352>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026cc:	f7fd fe68 	bl	80003a0 <HAL_GetTick>
 80026d0:	1b80      	subs	r0, r0, r6
 80026d2:	2802      	cmp	r0, #2
 80026d4:	d8de      	bhi.n	8002694 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026d6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80026d8:	0799      	lsls	r1, r3, #30
 80026da:	d4f7      	bmi.n	80026cc <HAL_RCC_OscConfig+0x348>
 80026dc:	e6dc      	b.n	8002498 <HAL_RCC_OscConfig+0x114>
      __HAL_RCC_HSI48_DISABLE();
 80026de:	4b90      	ldr	r3, [pc, #576]	; (8002920 <HAL_RCC_OscConfig+0x59c>)
 80026e0:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026e2:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 80026e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026e8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80026ea:	f7fd fe59 	bl	80003a0 <HAL_GetTick>
 80026ee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026f0:	e004      	b.n	80026fc <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80026f2:	f7fd fe55 	bl	80003a0 <HAL_GetTick>
 80026f6:	1b80      	subs	r0, r0, r6
 80026f8:	2802      	cmp	r0, #2
 80026fa:	d8cb      	bhi.n	8002694 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026fc:	682b      	ldr	r3, [r5, #0]
 80026fe:	0498      	lsls	r0, r3, #18
 8002700:	d4f7      	bmi.n	80026f2 <HAL_RCC_OscConfig+0x36e>
 8002702:	e6e3      	b.n	80024cc <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002708:	4b85      	ldr	r3, [pc, #532]	; (8002920 <HAL_RCC_OscConfig+0x59c>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	f47f ae57 	bne.w	80023be <HAL_RCC_OscConfig+0x3a>
 8002710:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e655      	b.n	80023cc <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_CSI_DISABLE();
 8002720:	4b7f      	ldr	r3, [pc, #508]	; (8002920 <HAL_RCC_OscConfig+0x59c>)
 8002722:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002724:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8002726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800272a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800272c:	f7fd fe38 	bl	80003a0 <HAL_GetTick>
 8002730:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002732:	e004      	b.n	800273e <HAL_RCC_OscConfig+0x3ba>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002734:	f7fd fe34 	bl	80003a0 <HAL_GetTick>
 8002738:	1b80      	subs	r0, r0, r6
 800273a:	2802      	cmp	r0, #2
 800273c:	d8aa      	bhi.n	8002694 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800273e:	682b      	ldr	r3, [r5, #0]
 8002740:	05df      	lsls	r7, r3, #23
 8002742:	d4f7      	bmi.n	8002734 <HAL_RCC_OscConfig+0x3b0>
 8002744:	6823      	ldr	r3, [r4, #0]
 8002746:	e68e      	b.n	8002466 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 8002748:	4b75      	ldr	r3, [pc, #468]	; (8002920 <HAL_RCC_OscConfig+0x59c>)
 800274a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800274c:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002754:	f7fd fe24 	bl	80003a0 <HAL_GetTick>
 8002758:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800275a:	e004      	b.n	8002766 <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275c:	f7fd fe20 	bl	80003a0 <HAL_GetTick>
 8002760:	1b80      	subs	r0, r0, r6
 8002762:	2802      	cmp	r0, #2
 8002764:	d896      	bhi.n	8002694 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002766:	682b      	ldr	r3, [r5, #0]
 8002768:	0758      	lsls	r0, r3, #29
 800276a:	d4f7      	bmi.n	800275c <HAL_RCC_OscConfig+0x3d8>
 800276c:	6823      	ldr	r3, [r4, #0]
 800276e:	e643      	b.n	80023f8 <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4a6b      	ldr	r2, [pc, #428]	; (8002920 <HAL_RCC_OscConfig+0x59c>)
 8002772:	6921      	ldr	r1, [r4, #16]
 8002774:	6853      	ldr	r3, [r2, #4]
 8002776:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800277a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800277e:	6053      	str	r3, [r2, #4]
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	e639      	b.n	80023f8 <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002784:	4a66      	ldr	r2, [pc, #408]	; (8002920 <HAL_RCC_OscConfig+0x59c>)
 8002786:	6a21      	ldr	r1, [r4, #32]
 8002788:	68d3      	ldr	r3, [r2, #12]
 800278a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800278e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002792:	60d3      	str	r3, [r2, #12]
 8002794:	6823      	ldr	r3, [r4, #0]
 8002796:	e666      	b.n	8002466 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4a61      	ldr	r2, [pc, #388]	; (8002920 <HAL_RCC_OscConfig+0x59c>)
 800279a:	6853      	ldr	r3, [r2, #4]
 800279c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a4:	6053      	str	r3, [r2, #4]
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	e626      	b.n	80023f8 <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_PLL_DISABLE();
 80027aa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ae:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80027b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027b2:	f7fd fdf5 	bl	80003a0 <HAL_GetTick>
 80027b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027b8:	e005      	b.n	80027c6 <HAL_RCC_OscConfig+0x442>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ba:	f7fd fdf1 	bl	80003a0 <HAL_GetTick>
 80027be:	1b80      	subs	r0, r0, r6
 80027c0:	2802      	cmp	r0, #2
 80027c2:	f63f af67 	bhi.w	8002694 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027c6:	682b      	ldr	r3, [r5, #0]
 80027c8:	0199      	lsls	r1, r3, #6
 80027ca:	d4f6      	bmi.n	80027ba <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80027ce:	4b55      	ldr	r3, [pc, #340]	; (8002924 <HAL_RCC_OscConfig+0x5a0>)
 80027d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80027d2:	4013      	ands	r3, r2
 80027d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027d6:	4954      	ldr	r1, [pc, #336]	; (8002928 <HAL_RCC_OscConfig+0x5a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d8:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027da:	4e51      	ldr	r6, [pc, #324]	; (8002920 <HAL_RCC_OscConfig+0x59c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027dc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80027e0:	62ab      	str	r3, [r5, #40]	; 0x28
 80027e2:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80027e4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80027e8:	3f01      	subs	r7, #1
 80027ea:	1e50      	subs	r0, r2, #1
 80027ec:	3b01      	subs	r3, #1
 80027ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80027f0:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80027f4:	025b      	lsls	r3, r3, #9
 80027f6:	0400      	lsls	r0, r0, #16
 80027f8:	3a01      	subs	r2, #1
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8002800:	0612      	lsls	r2, r2, #24
 8002802:	4303      	orrs	r3, r0
 8002804:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002808:	433b      	orrs	r3, r7
 800280a:	4313      	orrs	r3, r2
 800280c:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800280e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002816:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002818:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800281a:	4011      	ands	r1, r2
 800281c:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002820:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002822:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002824:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002826:	f023 030c 	bic.w	r3, r3, #12
 800282a:	4313      	orrs	r3, r2
 800282c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800282e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002830:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002832:	f023 0302 	bic.w	r3, r3, #2
 8002836:	4313      	orrs	r3, r2
 8002838:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800283a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800283c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002840:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002842:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002848:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800284a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800284c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002850:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8002852:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800285a:	682b      	ldr	r3, [r5, #0]
 800285c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002860:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002862:	f7fd fd9d 	bl	80003a0 <HAL_GetTick>
 8002866:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002868:	e005      	b.n	8002876 <HAL_RCC_OscConfig+0x4f2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286a:	f7fd fd99 	bl	80003a0 <HAL_GetTick>
 800286e:	1b00      	subs	r0, r0, r4
 8002870:	2802      	cmp	r0, #2
 8002872:	f63f af0f 	bhi.w	8002694 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002876:	6833      	ldr	r3, [r6, #0]
 8002878:	019a      	lsls	r2, r3, #6
 800287a:	d5f6      	bpl.n	800286a <HAL_RCC_OscConfig+0x4e6>
 800287c:	e648      	b.n	8002510 <HAL_RCC_OscConfig+0x18c>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287e:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002882:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002884:	f43f ae45 	beq.w	8002512 <HAL_RCC_OscConfig+0x18e>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002888:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800288e:	428b      	cmp	r3, r1
 8002890:	f47f ae9e 	bne.w	80025d0 <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002894:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002898:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800289a:	429a      	cmp	r2, r3
 800289c:	f47f ae98 	bne.w	80025d0 <HAL_RCC_OscConfig+0x24c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028a2:	f3c5 0208 	ubfx	r2, r5, #0, #9
 80028a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f47f ae91 	bne.w	80025d0 <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028b0:	f3c5 2246 	ubfx	r2, r5, #9, #7
 80028b4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	f47f ae8a 	bne.w	80025d0 <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028be:	f3c5 4206 	ubfx	r2, r5, #16, #7
 80028c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	f47f ae83 	bne.w	80025d0 <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80028ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80028cc:	f3c5 6506 	ubfx	r5, r5, #24, #7
 80028d0:	3801      	subs	r0, #1
    return HAL_ERROR;
 80028d2:	1a28      	subs	r0, r5, r0
 80028d4:	bf18      	it	ne
 80028d6:	2001      	movne	r0, #1
 80028d8:	e61b      	b.n	8002512 <HAL_RCC_OscConfig+0x18e>
      tickstart = HAL_GetTick();
 80028da:	f7fd fd61 	bl	80003a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028de:	4d10      	ldr	r5, [pc, #64]	; (8002920 <HAL_RCC_OscConfig+0x59c>)
      tickstart = HAL_GetTick();
 80028e0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028e6:	e005      	b.n	80028f4 <HAL_RCC_OscConfig+0x570>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7fd fd5a 	bl	80003a0 <HAL_GetTick>
 80028ec:	1bc0      	subs	r0, r0, r7
 80028ee:	42b0      	cmp	r0, r6
 80028f0:	f63f aed0 	bhi.w	8002694 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80028f6:	0798      	lsls	r0, r3, #30
 80028f8:	d4f6      	bmi.n	80028e8 <HAL_RCC_OscConfig+0x564>
 80028fa:	e5eb      	b.n	80024d4 <HAL_RCC_OscConfig+0x150>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028fc:	68eb      	ldr	r3, [r5, #12]
 80028fe:	6a22      	ldr	r2, [r4, #32]
 8002900:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002904:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002908:	60eb      	str	r3, [r5, #12]
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	e5ab      	b.n	8002466 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	686b      	ldr	r3, [r5, #4]
 8002910:	6922      	ldr	r2, [r4, #16]
 8002912:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002916:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800291a:	606b      	str	r3, [r5, #4]
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	e56b      	b.n	80023f8 <HAL_RCC_OscConfig+0x74>
 8002920:	58024400 	.word	0x58024400
 8002924:	fffffc0c 	.word	0xfffffc0c
 8002928:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800292c:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <HAL_RCC_OscConfig+0x5e0>)
 800292e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6713      	str	r3, [r2, #112]	; 0x70
 8002936:	e699      	b.n	800266c <HAL_RCC_OscConfig+0x2e8>
 8002938:	2b05      	cmp	r3, #5
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_RCC_OscConfig+0x5e0>)
 800293c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800293e:	f47f ae8e 	bne.w	800265e <HAL_RCC_OscConfig+0x2da>
 8002942:	f042 0204 	orr.w	r2, r2, #4
 8002946:	671a      	str	r2, [r3, #112]	; 0x70
 8002948:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	671a      	str	r2, [r3, #112]	; 0x70
 8002950:	e68c      	b.n	800266c <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002952:	4a04      	ldr	r2, [pc, #16]	; (8002964 <HAL_RCC_OscConfig+0x5e0>)
 8002954:	6853      	ldr	r3, [r2, #4]
 8002956:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800295a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800295e:	6053      	str	r3, [r2, #4]
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	e580      	b.n	8002466 <HAL_RCC_OscConfig+0xe2>
 8002964:	58024400 	.word	0x58024400

08002968 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002968:	4a3e      	ldr	r2, [pc, #248]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xfc>)
 800296a:	6913      	ldr	r3, [r2, #16]
 800296c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002970:	2b10      	cmp	r3, #16
 8002972:	d04f      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0xac>
 8002974:	2b18      	cmp	r3, #24
 8002976:	d00b      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x28>
 8002978:	b10b      	cbz	r3, 800297e <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800297a:	483b      	ldr	r0, [pc, #236]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x100>)
 800297c:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800297e:	6813      	ldr	r3, [r2, #0]
 8002980:	0699      	lsls	r1, r3, #26
 8002982:	d549      	bpl.n	8002a18 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002984:	6813      	ldr	r3, [r2, #0]
 8002986:	4839      	ldr	r0, [pc, #228]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8002988:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800298c:	40d8      	lsrs	r0, r3
 800298e:	4770      	bx	lr
{
 8002990:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002992:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002994:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002996:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002998:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800299c:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 800299e:	b3b0      	cbz	r0, 8002a0e <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80029a0:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029a4:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029a8:	f001 0103 	and.w	r1, r1, #3
 80029ac:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80029b0:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 80029b4:	2901      	cmp	r1, #1
 80029b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80029ba:	ee07 3a10 	vmov	s14, r3
 80029be:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 80029c2:	d002      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x62>
 80029c4:	d32d      	bcc.n	8002a22 <HAL_RCC_GetSysClockFreq+0xba>
 80029c6:	2902      	cmp	r1, #2
 80029c8:	d028      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029ca:	eddf 5a29 	vldr	s11, [pc, #164]	; 8002a70 <HAL_RCC_GetSysClockFreq+0x108>
 80029ce:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80029d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80029e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80029e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80029ec:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80029f8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a0a:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8002a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a12:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8002a14:	4817      	ldr	r0, [pc, #92]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a16:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a18:	4814      	ldr	r0, [pc, #80]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x104>)
}
 8002a1a:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a1c:	eddf 5a16 	vldr	s11, [pc, #88]	; 8002a78 <HAL_RCC_GetSysClockFreq+0x110>
 8002a20:	e7d5      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a22:	6813      	ldr	r3, [r2, #0]
 8002a24:	069b      	lsls	r3, r3, #26
 8002a26:	d51a      	bpl.n	8002a5e <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a28:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a2a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a2e:	490f      	ldr	r1, [pc, #60]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8002a30:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a34:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a36:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3c:	ee06 1a90 	vmov	s13, r1
 8002a40:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8002a44:	ee06 3a90 	vmov	s13, r3
 8002a48:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8002a4c:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8002a50:	ee76 7a05 	vadd.f32	s15, s12, s10
 8002a54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a58:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002a5c:	e7c8      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a5e:	eddf 5a07 	vldr	s11, [pc, #28]	; 8002a7c <HAL_RCC_GetSysClockFreq+0x114>
 8002a62:	e7b4      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x66>
 8002a64:	58024400 	.word	0x58024400
 8002a68:	003d0900 	.word	0x003d0900
 8002a6c:	03d09000 	.word	0x03d09000
 8002a70:	4a742400 	.word	0x4a742400
 8002a74:	017d7840 	.word	0x017d7840
 8002a78:	4bbebc20 	.word	0x4bbebc20
 8002a7c:	4c742400 	.word	0x4c742400

08002a80 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002a80:	b178      	cbz	r0, 8002aa2 <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a82:	4a91      	ldr	r2, [pc, #580]	; (8002cc8 <HAL_RCC_ClockConfig+0x248>)
 8002a84:	6813      	ldr	r3, [r2, #0]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	428b      	cmp	r3, r1
 8002a8c:	d20b      	bcs.n	8002aa6 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	6813      	ldr	r3, [r2, #0]
 8002a90:	f023 030f 	bic.w	r3, r3, #15
 8002a94:	430b      	orrs	r3, r1
 8002a96:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a98:	6813      	ldr	r3, [r2, #0]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	428b      	cmp	r3, r1
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8002aa2:	2001      	movs	r0, #1
}
 8002aa4:	4770      	bx	lr
{
 8002aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002aaa:	6803      	ldr	r3, [r0, #0]
 8002aac:	075f      	lsls	r7, r3, #29
 8002aae:	d50c      	bpl.n	8002aca <HAL_RCC_ClockConfig+0x4a>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ab0:	4c86      	ldr	r4, [pc, #536]	; (8002ccc <HAL_RCC_ClockConfig+0x24c>)
 8002ab2:	6905      	ldr	r5, [r0, #16]
 8002ab4:	69a2      	ldr	r2, [r4, #24]
 8002ab6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002aba:	4295      	cmp	r5, r2
 8002abc:	d905      	bls.n	8002aca <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002abe:	69a3      	ldr	r3, [r4, #24]
 8002ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac4:	432b      	orrs	r3, r5
 8002ac6:	61a3      	str	r3, [r4, #24]
 8002ac8:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aca:	071e      	lsls	r6, r3, #28
 8002acc:	d50c      	bpl.n	8002ae8 <HAL_RCC_ClockConfig+0x68>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ace:	4c7f      	ldr	r4, [pc, #508]	; (8002ccc <HAL_RCC_ClockConfig+0x24c>)
 8002ad0:	6945      	ldr	r5, [r0, #20]
 8002ad2:	69e2      	ldr	r2, [r4, #28]
 8002ad4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002ad8:	4295      	cmp	r5, r2
 8002ada:	d905      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x68>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002adc:	69e3      	ldr	r3, [r4, #28]
 8002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae2:	432b      	orrs	r3, r5
 8002ae4:	61e3      	str	r3, [r4, #28]
 8002ae6:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae8:	06dd      	lsls	r5, r3, #27
 8002aea:	d50c      	bpl.n	8002b06 <HAL_RCC_ClockConfig+0x86>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002aec:	4c77      	ldr	r4, [pc, #476]	; (8002ccc <HAL_RCC_ClockConfig+0x24c>)
 8002aee:	6985      	ldr	r5, [r0, #24]
 8002af0:	69e2      	ldr	r2, [r4, #28]
 8002af2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002af6:	4295      	cmp	r5, r2
 8002af8:	d905      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x86>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002afa:	69e3      	ldr	r3, [r4, #28]
 8002afc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b00:	432b      	orrs	r3, r5
 8002b02:	61e3      	str	r3, [r4, #28]
 8002b04:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b06:	069c      	lsls	r4, r3, #26
 8002b08:	d50c      	bpl.n	8002b24 <HAL_RCC_ClockConfig+0xa4>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b0a:	4c70      	ldr	r4, [pc, #448]	; (8002ccc <HAL_RCC_ClockConfig+0x24c>)
 8002b0c:	69c5      	ldr	r5, [r0, #28]
 8002b0e:	6a22      	ldr	r2, [r4, #32]
 8002b10:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002b14:	4295      	cmp	r5, r2
 8002b16:	d905      	bls.n	8002b24 <HAL_RCC_ClockConfig+0xa4>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b18:	6a23      	ldr	r3, [r4, #32]
 8002b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1e:	432b      	orrs	r3, r5
 8002b20:	6223      	str	r3, [r4, #32]
 8002b22:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	079a      	lsls	r2, r3, #30
 8002b26:	4604      	mov	r4, r0
 8002b28:	460d      	mov	r5, r1
 8002b2a:	d512      	bpl.n	8002b52 <HAL_RCC_ClockConfig+0xd2>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b2c:	4867      	ldr	r0, [pc, #412]	; (8002ccc <HAL_RCC_ClockConfig+0x24c>)
 8002b2e:	68e1      	ldr	r1, [r4, #12]
 8002b30:	6982      	ldr	r2, [r0, #24]
 8002b32:	f002 020f 	and.w	r2, r2, #15
 8002b36:	4291      	cmp	r1, r2
 8002b38:	d93d      	bls.n	8002bb6 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3a:	6983      	ldr	r3, [r0, #24]
 8002b3c:	f023 030f 	bic.w	r3, r3, #15
 8002b40:	4319      	orrs	r1, r3
 8002b42:	6181      	str	r1, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	07df      	lsls	r7, r3, #31
 8002b48:	d405      	bmi.n	8002b56 <HAL_RCC_ClockConfig+0xd6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4a:	079f      	lsls	r7, r3, #30
 8002b4c:	d540      	bpl.n	8002bd0 <HAL_RCC_ClockConfig+0x150>
 8002b4e:	68e1      	ldr	r1, [r4, #12]
 8002b50:	e033      	b.n	8002bba <HAL_RCC_ClockConfig+0x13a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b52:	07db      	lsls	r3, r3, #31
 8002b54:	d53c      	bpl.n	8002bd0 <HAL_RCC_ClockConfig+0x150>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b56:	4a5d      	ldr	r2, [pc, #372]	; (8002ccc <HAL_RCC_ClockConfig+0x24c>)
 8002b58:	68a1      	ldr	r1, [r4, #8]
 8002b5a:	6993      	ldr	r3, [r2, #24]
 8002b5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b64:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b66:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	f000 809e 	beq.w	8002caa <HAL_RCC_ClockConfig+0x22a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	f000 80a1 	beq.w	8002cb6 <HAL_RCC_ClockConfig+0x236>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	f000 80a2 	beq.w	8002cbe <HAL_RCC_ClockConfig+0x23e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b7a:	0752      	lsls	r2, r2, #29
 8002b7c:	d538      	bpl.n	8002bf0 <HAL_RCC_ClockConfig+0x170>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b7e:	4953      	ldr	r1, [pc, #332]	; (8002ccc <HAL_RCC_ClockConfig+0x24c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b80:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b84:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b88:	f022 0207 	bic.w	r2, r2, #7
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8002b90:	f7fd fc06 	bl	80003a0 <HAL_GetTick>
 8002b94:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	e005      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x124>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b98:	f7fd fc02 	bl	80003a0 <HAL_GetTick>
 8002b9c:	1bc0      	subs	r0, r0, r7
 8002b9e:	4540      	cmp	r0, r8
 8002ba0:	f200 8087 	bhi.w	8002cb2 <HAL_RCC_ClockConfig+0x232>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba4:	6933      	ldr	r3, [r6, #16]
 8002ba6:	6862      	ldr	r2, [r4, #4]
 8002ba8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bac:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002bb0:	d1f2      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x118>
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	e7c9      	b.n	8002b4a <HAL_RCC_ClockConfig+0xca>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	07da      	lsls	r2, r3, #31
 8002bb8:	d4cd      	bmi.n	8002b56 <HAL_RCC_ClockConfig+0xd6>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bba:	4a44      	ldr	r2, [pc, #272]	; (8002ccc <HAL_RCC_ClockConfig+0x24c>)
 8002bbc:	6993      	ldr	r3, [r2, #24]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	428b      	cmp	r3, r1
 8002bc4:	d904      	bls.n	8002bd0 <HAL_RCC_ClockConfig+0x150>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc6:	6993      	ldr	r3, [r2, #24]
 8002bc8:	f023 030f 	bic.w	r3, r3, #15
 8002bcc:	4319      	orrs	r1, r3
 8002bce:	6191      	str	r1, [r2, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd0:	4a3d      	ldr	r2, [pc, #244]	; (8002cc8 <HAL_RCC_ClockConfig+0x248>)
 8002bd2:	6813      	ldr	r3, [r2, #0]
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	42ab      	cmp	r3, r5
 8002bda:	d90c      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x176>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bdc:	6813      	ldr	r3, [r2, #0]
 8002bde:	f023 030f 	bic.w	r3, r3, #15
 8002be2:	432b      	orrs	r3, r5
 8002be4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	6813      	ldr	r3, [r2, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	42ab      	cmp	r3, r5
 8002bee:	d002      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x176>
    return HAL_ERROR;
 8002bf0:	2001      	movs	r0, #1
}
 8002bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	075e      	lsls	r6, r3, #29
 8002bfa:	d50c      	bpl.n	8002c16 <HAL_RCC_ClockConfig+0x196>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bfc:	4933      	ldr	r1, [pc, #204]	; (8002ccc <HAL_RCC_ClockConfig+0x24c>)
 8002bfe:	6920      	ldr	r0, [r4, #16]
 8002c00:	698a      	ldr	r2, [r1, #24]
 8002c02:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002c06:	4290      	cmp	r0, r2
 8002c08:	d205      	bcs.n	8002c16 <HAL_RCC_ClockConfig+0x196>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c0a:	698b      	ldr	r3, [r1, #24]
 8002c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c10:	4303      	orrs	r3, r0
 8002c12:	618b      	str	r3, [r1, #24]
 8002c14:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c16:	071d      	lsls	r5, r3, #28
 8002c18:	d50c      	bpl.n	8002c34 <HAL_RCC_ClockConfig+0x1b4>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c1a:	492c      	ldr	r1, [pc, #176]	; (8002ccc <HAL_RCC_ClockConfig+0x24c>)
 8002c1c:	6960      	ldr	r0, [r4, #20]
 8002c1e:	69ca      	ldr	r2, [r1, #28]
 8002c20:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002c24:	4290      	cmp	r0, r2
 8002c26:	d205      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x1b4>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c28:	69cb      	ldr	r3, [r1, #28]
 8002c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2e:	4303      	orrs	r3, r0
 8002c30:	61cb      	str	r3, [r1, #28]
 8002c32:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	06d8      	lsls	r0, r3, #27
 8002c36:	d50c      	bpl.n	8002c52 <HAL_RCC_ClockConfig+0x1d2>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c38:	4924      	ldr	r1, [pc, #144]	; (8002ccc <HAL_RCC_ClockConfig+0x24c>)
 8002c3a:	69a0      	ldr	r0, [r4, #24]
 8002c3c:	69ca      	ldr	r2, [r1, #28]
 8002c3e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002c42:	4290      	cmp	r0, r2
 8002c44:	d205      	bcs.n	8002c52 <HAL_RCC_ClockConfig+0x1d2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c46:	69cb      	ldr	r3, [r1, #28]
 8002c48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c4c:	4303      	orrs	r3, r0
 8002c4e:	61cb      	str	r3, [r1, #28]
 8002c50:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c52:	0699      	lsls	r1, r3, #26
 8002c54:	d50b      	bpl.n	8002c6e <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c56:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <HAL_RCC_ClockConfig+0x24c>)
 8002c58:	69e1      	ldr	r1, [r4, #28]
 8002c5a:	6a13      	ldr	r3, [r2, #32]
 8002c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c60:	4299      	cmp	r1, r3
 8002c62:	d204      	bcs.n	8002c6e <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c64:	6a13      	ldr	r3, [r2, #32]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c6e:	f7ff fe7b 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002c72:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <HAL_RCC_ClockConfig+0x24c>)
 8002c74:	4916      	ldr	r1, [pc, #88]	; (8002cd0 <HAL_RCC_ClockConfig+0x250>)
 8002c76:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c78:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c7a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8002c7e:	4d15      	ldr	r5, [pc, #84]	; (8002cd4 <HAL_RCC_ClockConfig+0x254>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c80:	f002 020f 	and.w	r2, r2, #15
 8002c84:	4c14      	ldr	r4, [pc, #80]	; (8002cd8 <HAL_RCC_ClockConfig+0x258>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c88:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c8a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8002c8e:	4913      	ldr	r1, [pc, #76]	; (8002cdc <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c90:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c94:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8002c98:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c9a:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8002c9e:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ca0:	6022      	str	r2, [r4, #0]
}
 8002ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8002ca6:	f7fd bb17 	b.w	80002d8 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002caa:	0396      	lsls	r6, r2, #14
 8002cac:	f53f af67 	bmi.w	8002b7e <HAL_RCC_ClockConfig+0xfe>
 8002cb0:	e79e      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x170>
            return HAL_TIMEOUT;
 8002cb2:	2003      	movs	r0, #3
 8002cb4:	e79d      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x172>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cb6:	0190      	lsls	r0, r2, #6
 8002cb8:	f53f af61 	bmi.w	8002b7e <HAL_RCC_ClockConfig+0xfe>
 8002cbc:	e798      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x170>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cbe:	05d1      	lsls	r1, r2, #23
 8002cc0:	f53f af5d 	bmi.w	8002b7e <HAL_RCC_ClockConfig+0xfe>
 8002cc4:	e794      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x170>
 8002cc6:	bf00      	nop
 8002cc8:	52002000 	.word	0x52002000
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	0800c6a4 	.word	0x0800c6a4
 8002cd4:	20000004 	.word	0x20000004
 8002cd8:	200003a8 	.word	0x200003a8
 8002cdc:	200003a4 	.word	0x200003a4

08002ce0 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce0:	4a49      	ldr	r2, [pc, #292]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x128>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce2:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce4:	6913      	ldr	r3, [r2, #16]
 8002ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cea:	2b10      	cmp	r3, #16
 8002cec:	d064      	beq.n	8002db8 <HAL_RCC_GetHCLKFreq+0xd8>
 8002cee:	2b18      	cmp	r3, #24
 8002cf0:	d022      	beq.n	8002d38 <HAL_RCC_GetHCLKFreq+0x58>
 8002cf2:	b1bb      	cbz	r3, 8002d24 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 8002cf4:	4b45      	ldr	r3, [pc, #276]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002cf6:	4944      	ldr	r1, [pc, #272]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x128>)
 8002cf8:	4845      	ldr	r0, [pc, #276]	; (8002e10 <HAL_RCC_GetHCLKFreq+0x130>)
 8002cfa:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cfc:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002cfe:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d02:	4c44      	ldr	r4, [pc, #272]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x134>)
 8002d04:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d08:	4d43      	ldr	r5, [pc, #268]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d0a:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d0c:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d0e:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d12:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d16:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d18:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8002d1c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d1e:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002d20:	bc30      	pop	{r4, r5}
 8002d22:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d24:	6813      	ldr	r3, [r2, #0]
 8002d26:	0699      	lsls	r1, r3, #26
 8002d28:	d548      	bpl.n	8002dbc <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d2a:	6813      	ldr	r3, [r2, #0]
 8002d2c:	4a3b      	ldr	r2, [pc, #236]	; (8002e1c <HAL_RCC_GetHCLKFreq+0x13c>)
 8002d2e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002d32:	fa22 f303 	lsr.w	r3, r2, r3
 8002d36:	e7de      	b.n	8002cf6 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d38:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002d3a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002d3e:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002d42:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0d6      	beq.n	8002cf6 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002d48:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d4c:	f001 0101 	and.w	r1, r1, #1
 8002d50:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d54:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002d58:	fb01 f304 	mul.w	r3, r1, r4
 8002d5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 8002d60:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8002d6a:	d002      	beq.n	8002d72 <HAL_RCC_GetHCLKFreq+0x92>
 8002d6c:	d32b      	bcc.n	8002dc6 <HAL_RCC_GetHCLKFreq+0xe6>
 8002d6e:	2802      	cmp	r0, #2
 8002d70:	d026      	beq.n	8002dc0 <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d72:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002e20 <HAL_RCC_GetHCLKFreq+0x140>
 8002d76:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8002d7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d80:	ee07 3a10 	vmov	s14, r3
 8002d84:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002d88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d8c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d94:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x128>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002da0:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002da2:	ee07 3a10 	vmov	s14, r3
 8002da6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002daa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002dae:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002db2:	ee17 3a90 	vmov	r3, s15
 8002db6:	e79e      	b.n	8002cf6 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8002db8:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_RCC_GetHCLKFreq+0x144>)
 8002dba:	e79c      	b.n	8002cf6 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002dbc:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <HAL_RCC_GetHCLKFreq+0x13c>)
 8002dbe:	e79a      	b.n	8002cf6 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dc0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002e28 <HAL_RCC_GetHCLKFreq+0x148>
 8002dc4:	e7d7      	b.n	8002d76 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dc6:	6813      	ldr	r3, [r2, #0]
 8002dc8:	069b      	lsls	r3, r3, #26
 8002dca:	d51a      	bpl.n	8002e02 <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dcc:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dce:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dd2:	4912      	ldr	r1, [pc, #72]	; (8002e1c <HAL_RCC_GetHCLKFreq+0x13c>)
 8002dd4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dda:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de0:	ee07 1a10 	vmov	s14, r1
 8002de4:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002de8:	ee07 3a10 	vmov	s14, r3
 8002dec:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8002df0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002df4:	ee76 6a05 	vadd.f32	s13, s12, s10
 8002df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e00:	e7ca      	b.n	8002d98 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e02:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002e2c <HAL_RCC_GetHCLKFreq+0x14c>
 8002e06:	e7b6      	b.n	8002d76 <HAL_RCC_GetHCLKFreq+0x96>
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	003d0900 	.word	0x003d0900
 8002e10:	0800c6a4 	.word	0x0800c6a4
 8002e14:	200003a8 	.word	0x200003a8
 8002e18:	200003a4 	.word	0x200003a4
 8002e1c:	03d09000 	.word	0x03d09000
 8002e20:	4a742400 	.word	0x4a742400
 8002e24:	017d7840 	.word	0x017d7840
 8002e28:	4bbebc20 	.word	0x4bbebc20
 8002e2c:	4c742400 	.word	0x4c742400

08002e30 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002e30:	4a3b      	ldr	r2, [pc, #236]	; (8002f20 <RCCEx_PLL2_Config+0xf0>)
{
 8002e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002e34:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d067      	beq.n	8002f0e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	460f      	mov	r7, r1
 8002e42:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002e44:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8002e46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e4a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002e4c:	f7fd faa8 	bl	80003a0 <HAL_GetTick>
 8002e50:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002e52:	e004      	b.n	8002e5e <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002e54:	f7fd faa4 	bl	80003a0 <HAL_GetTick>
 8002e58:	1b80      	subs	r0, r0, r6
 8002e5a:	2802      	cmp	r0, #2
 8002e5c:	d859      	bhi.n	8002f12 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	011a      	lsls	r2, r3, #4
 8002e62:	d4f7      	bmi.n	8002e54 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002e64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e66:	682a      	ldr	r2, [r5, #0]
 8002e68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002e6c:	492d      	ldr	r1, [pc, #180]	; (8002f24 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002e6e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002e72:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e74:	686e      	ldr	r6, [r5, #4]
 8002e76:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8002e7a:	3e01      	subs	r6, #1
 8002e7c:	1e50      	subs	r0, r2, #1
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	692a      	ldr	r2, [r5, #16]
 8002e82:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8002e86:	025b      	lsls	r3, r3, #9
 8002e88:	0400      	lsls	r0, r0, #16
 8002e8a:	3a01      	subs	r2, #1
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8002e92:	0612      	lsls	r2, r2, #24
 8002e94:	4303      	orrs	r3, r0
 8002e96:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002e9a:	4333      	orrs	r3, r6
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002ea0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ea2:	696a      	ldr	r2, [r5, #20]
 8002ea4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002eac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002eae:	69aa      	ldr	r2, [r5, #24]
 8002eb0:	f023 0320 	bic.w	r3, r3, #32
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002eb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002eba:	f023 0310 	bic.w	r3, r3, #16
 8002ebe:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002ec0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ec2:	69eb      	ldr	r3, [r5, #28]
 8002ec4:	4011      	ands	r1, r2
 8002ec6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002eca:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002ecc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ece:	f043 0310 	orr.w	r3, r3, #16
 8002ed2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002ed4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002ed6:	b1f7      	cbz	r7, 8002f16 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002ed8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002eda:	bf0c      	ite	eq
 8002edc:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002ee0:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8002ee4:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <RCCEx_PLL2_Config+0xf0>)
 8002ee8:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002eea:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 8002eec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ef0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002ef2:	f7fd fa55 	bl	80003a0 <HAL_GetTick>
 8002ef6:	4605      	mov	r5, r0
 8002ef8:	e004      	b.n	8002f04 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002efa:	f7fd fa51 	bl	80003a0 <HAL_GetTick>
 8002efe:	1b40      	subs	r0, r0, r5
 8002f00:	2802      	cmp	r0, #2
 8002f02:	d806      	bhi.n	8002f12 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	d5f7      	bpl.n	8002efa <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8002f0a:	2000      	movs	r0, #0
}
 8002f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002f0e:	2001      	movs	r0, #1
}
 8002f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002f12:	2003      	movs	r0, #3
}
 8002f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002f16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f1c:	e7e3      	b.n	8002ee6 <RCCEx_PLL2_Config+0xb6>
 8002f1e:	bf00      	nop
 8002f20:	58024400 	.word	0x58024400
 8002f24:	ffff0007 	.word	0xffff0007

08002f28 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002f28:	4a3b      	ldr	r2, [pc, #236]	; (8003018 <RCCEx_PLL3_Config+0xf0>)
{
 8002f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002f2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d067      	beq.n	8003006 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002f36:	6813      	ldr	r3, [r2, #0]
 8002f38:	460f      	mov	r7, r1
 8002f3a:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002f3c:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f42:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f44:	f7fd fa2c 	bl	80003a0 <HAL_GetTick>
 8002f48:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002f4a:	e004      	b.n	8002f56 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002f4c:	f7fd fa28 	bl	80003a0 <HAL_GetTick>
 8002f50:	1b80      	subs	r0, r0, r6
 8002f52:	2802      	cmp	r0, #2
 8002f54:	d859      	bhi.n	800300a <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	009a      	lsls	r2, r3, #2
 8002f5a:	d4f7      	bmi.n	8002f4c <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002f5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f5e:	682a      	ldr	r2, [r5, #0]
 8002f60:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002f64:	492d      	ldr	r1, [pc, #180]	; (800301c <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002f66:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002f6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f6c:	686e      	ldr	r6, [r5, #4]
 8002f6e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8002f72:	3e01      	subs	r6, #1
 8002f74:	1e50      	subs	r0, r2, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	692a      	ldr	r2, [r5, #16]
 8002f7a:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8002f7e:	025b      	lsls	r3, r3, #9
 8002f80:	0400      	lsls	r0, r0, #16
 8002f82:	3a01      	subs	r2, #1
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8002f8a:	0612      	lsls	r2, r2, #24
 8002f8c:	4303      	orrs	r3, r0
 8002f8e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002f92:	4333      	orrs	r3, r6
 8002f94:	4313      	orrs	r3, r2
 8002f96:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002f98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f9a:	696a      	ldr	r2, [r5, #20]
 8002f9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002fa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fa6:	69aa      	ldr	r2, [r5, #24]
 8002fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fac:	4313      	orrs	r3, r2
 8002fae:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002fb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002fb8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002fba:	69eb      	ldr	r3, [r5, #28]
 8002fbc:	4011      	ands	r1, r2
 8002fbe:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002fc2:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002fc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fca:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002fcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002fce:	b1f7      	cbz	r7, 800300e <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002fd0:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002fd2:	bf0c      	ite	eq
 8002fd4:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002fd8:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8002fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8002fde:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <RCCEx_PLL3_Config+0xf0>)
 8002fe0:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002fe2:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8002fe4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fe8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002fea:	f7fd f9d9 	bl	80003a0 <HAL_GetTick>
 8002fee:	4605      	mov	r5, r0
 8002ff0:	e004      	b.n	8002ffc <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002ff2:	f7fd f9d5 	bl	80003a0 <HAL_GetTick>
 8002ff6:	1b40      	subs	r0, r0, r5
 8002ff8:	2802      	cmp	r0, #2
 8002ffa:	d806      	bhi.n	800300a <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	d5f7      	bpl.n	8002ff2 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8003002:	2000      	movs	r0, #0
}
 8003004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003006:	2001      	movs	r0, #1
}
 8003008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800300a:	2003      	movs	r0, #3
}
 800300c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800300e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003012:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003014:	e7e3      	b.n	8002fde <RCCEx_PLL3_Config+0xb6>
 8003016:	bf00      	nop
 8003018:	58024400 	.word	0x58024400
 800301c:	ffff0007 	.word	0xffff0007

08003020 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003024:	6803      	ldr	r3, [r0, #0]
{
 8003026:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003028:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800302c:	d016      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800302e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8003030:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003034:	f000 8450 	beq.w	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003038:	f240 851a 	bls.w	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800303c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003040:	f000 848a 	beq.w	8003958 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003044:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8003048:	f040 8538 	bne.w	8003abc <HAL_RCCEx_PeriphCLKConfig+0xa9c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800304c:	499d      	ldr	r1, [pc, #628]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800304e:	2600      	movs	r6, #0
 8003050:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8003052:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003056:	431a      	orrs	r2, r3
 8003058:	650a      	str	r2, [r1, #80]	; 0x50
 800305a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800305c:	05dd      	lsls	r5, r3, #23
 800305e:	d50a      	bpl.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003060:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003062:	2a04      	cmp	r2, #4
 8003064:	d806      	bhi.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003066:	e8df f012 	tbh	[pc, r2, lsl #1]
 800306a:	03eb      	.short	0x03eb
 800306c:	03da03f2 	.word	0x03da03f2
 8003070:	03a703a7 	.word	0x03a703a7
      ret = HAL_ERROR;
 8003074:	2601      	movs	r6, #1
 8003076:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003078:	0598      	lsls	r0, r3, #22
 800307a:	d515      	bpl.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Sai23ClockSelection)
 800307c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800307e:	2a80      	cmp	r2, #128	; 0x80
 8003080:	f000 8449 	beq.w	8003916 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8003084:	f200 84dd 	bhi.w	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003088:	2a00      	cmp	r2, #0
 800308a:	f000 8457 	beq.w	800393c <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800308e:	2a40      	cmp	r2, #64	; 0x40
 8003090:	f040 84de 	bne.w	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003094:	2100      	movs	r1, #0
 8003096:	1d20      	adds	r0, r4, #4
 8003098:	f7ff feca 	bl	8002e30 <RCCEx_PLL2_Config>
 800309c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800309e:	2d00      	cmp	r5, #0
 80030a0:	f000 8442 	beq.w	8003928 <HAL_RCCEx_PeriphCLKConfig+0x908>
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80030a8:	0559      	lsls	r1, r3, #21
 80030aa:	d518      	bpl.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai4AClockSelection)
 80030ac:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80030b0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80030b4:	f000 841b 	beq.w	80038ee <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 80030b8:	f200 84ef 	bhi.w	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80030bc:	2a00      	cmp	r2, #0
 80030be:	f000 8451 	beq.w	8003964 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80030c2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80030c6:	f040 84f0 	bne.w	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xa8a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030ca:	2100      	movs	r1, #0
 80030cc:	1d20      	adds	r0, r4, #4
 80030ce:	f7ff feaf 	bl	8002e30 <RCCEx_PLL2_Config>
 80030d2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80030d4:	2d00      	cmp	r5, #0
 80030d6:	f000 8413 	beq.w	8003900 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80030de:	051a      	lsls	r2, r3, #20
 80030e0:	d518      	bpl.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 80030e2:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80030e6:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80030ea:	f000 83ce 	beq.w	800388a <HAL_RCCEx_PeriphCLKConfig+0x86a>
 80030ee:	f200 84c8 	bhi.w	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80030f2:	2a00      	cmp	r2, #0
 80030f4:	f000 8429 	beq.w	800394a <HAL_RCCEx_PeriphCLKConfig+0x92a>
 80030f8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80030fc:	f040 84c9 	bne.w	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xa72>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003100:	2100      	movs	r1, #0
 8003102:	1d20      	adds	r0, r4, #4
 8003104:	f7ff fe94 	bl	8002e30 <RCCEx_PLL2_Config>
 8003108:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800310a:	2d00      	cmp	r5, #0
 800310c:	f000 83c6 	beq.w	800389c <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003114:	019f      	lsls	r7, r3, #6
 8003116:	d50d      	bpl.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x114>
    switch(PeriphClkInit->QspiClockSelection)
 8003118:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800311a:	2a10      	cmp	r2, #16
 800311c:	f000 8338 	beq.w	8003790 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8003120:	f240 84c7 	bls.w	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003124:	2a20      	cmp	r2, #32
 8003126:	f000 836a 	beq.w	80037fe <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800312a:	2a30      	cmp	r2, #48	; 0x30
 800312c:	f000 8335 	beq.w	800379a <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = HAL_ERROR;
 8003130:	2601      	movs	r6, #1
 8003132:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003134:	04d8      	lsls	r0, r3, #19
 8003136:	d517      	bpl.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003138:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800313a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800313e:	f000 83b9 	beq.w	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x894>
 8003142:	f200 8489 	bhi.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8003146:	2a00      	cmp	r2, #0
 8003148:	f000 8413 	beq.w	8003972 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800314c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003150:	f040 848a 	bne.w	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xa48>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003154:	2100      	movs	r1, #0
 8003156:	1d20      	adds	r0, r4, #4
 8003158:	f7ff fe6a 	bl	8002e30 <RCCEx_PLL2_Config>
 800315c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800315e:	2d00      	cmp	r5, #0
 8003160:	f000 83b1 	beq.w	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003168:	0499      	lsls	r1, r3, #18
 800316a:	d51b      	bpl.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Spi45ClockSelection)
 800316c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800316e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8003172:	f000 8331 	beq.w	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8003176:	f200 8454 	bhi.w	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xa02>
 800317a:	b142      	cbz	r2, 800318e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800317c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003180:	f040 845b 	bne.w	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003184:	2101      	movs	r1, #1
 8003186:	1d20      	adds	r0, r4, #4
 8003188:	f7ff fe52 	bl	8002e30 <RCCEx_PLL2_Config>
 800318c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800318e:	2d00      	cmp	r5, #0
 8003190:	f040 8288 	bne.w	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x684>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003194:	4a4b      	ldr	r2, [pc, #300]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003196:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003198:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800319a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800319e:	430b      	orrs	r3, r1
 80031a0:	6513      	str	r3, [r2, #80]	; 0x50
 80031a2:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80031a4:	045a      	lsls	r2, r3, #17
 80031a6:	d51d      	bpl.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Spi6ClockSelection)
 80031a8:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80031ac:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80031b0:	f000 82e4 	beq.w	800377c <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80031b4:	f200 83f9 	bhi.w	80039aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80031b8:	b142      	cbz	r2, 80031cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80031ba:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80031be:	f040 8400 	bne.w	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031c2:	2101      	movs	r1, #1
 80031c4:	1d20      	adds	r0, r4, #4
 80031c6:	f7ff fe33 	bl	8002e30 <RCCEx_PLL2_Config>
 80031ca:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80031cc:	2d00      	cmp	r5, #0
 80031ce:	f040 8266 	bne.w	800369e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80031d2:	4a3c      	ldr	r2, [pc, #240]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80031d4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80031d8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80031da:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80031de:	430b      	orrs	r3, r1
 80031e0:	6593      	str	r3, [r2, #88]	; 0x58
 80031e2:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031e4:	041f      	lsls	r7, r3, #16
 80031e6:	d50d      	bpl.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->FdcanClockSelection)
 80031e8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80031ea:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80031ee:	f000 82fd 	beq.w	80037ec <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80031f2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80031f6:	f000 8202 	beq.w	80035fe <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	f000 8204 	beq.w	8003608 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      ret = HAL_ERROR;
 8003200:	2601      	movs	r6, #1
 8003202:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003204:	01d8      	lsls	r0, r3, #7
 8003206:	d50a      	bpl.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->FmcClockSelection)
 8003208:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800320a:	2a03      	cmp	r2, #3
 800320c:	d805      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800320e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003212:	018c      	.short	0x018c
 8003214:	01870276 	.word	0x01870276
 8003218:	018c      	.short	0x018c
      ret = HAL_ERROR;
 800321a:	2601      	movs	r6, #1
 800321c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800321e:	0259      	lsls	r1, r3, #9
 8003220:	f100 8191 	bmi.w	8003546 <HAL_RCCEx_PeriphCLKConfig+0x526>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003224:	07df      	lsls	r7, r3, #31
 8003226:	d52f      	bpl.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003228:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800322a:	2a28      	cmp	r2, #40	; 0x28
 800322c:	d82a      	bhi.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800322e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003232:	01db      	.short	0x01db
 8003234:	00290029 	.word	0x00290029
 8003238:	00290029 	.word	0x00290029
 800323c:	00290029 	.word	0x00290029
 8003240:	02810029 	.word	0x02810029
 8003244:	00290029 	.word	0x00290029
 8003248:	00290029 	.word	0x00290029
 800324c:	00290029 	.word	0x00290029
 8003250:	01d50029 	.word	0x01d50029
 8003254:	00290029 	.word	0x00290029
 8003258:	00290029 	.word	0x00290029
 800325c:	00290029 	.word	0x00290029
 8003260:	01db0029 	.word	0x01db0029
 8003264:	00290029 	.word	0x00290029
 8003268:	00290029 	.word	0x00290029
 800326c:	00290029 	.word	0x00290029
 8003270:	01db0029 	.word	0x01db0029
 8003274:	00290029 	.word	0x00290029
 8003278:	00290029 	.word	0x00290029
 800327c:	00290029 	.word	0x00290029
 8003280:	01db0029 	.word	0x01db0029
      ret = HAL_ERROR;
 8003284:	2601      	movs	r6, #1
 8003286:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003288:	0798      	lsls	r0, r3, #30
 800328a:	d50c      	bpl.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800328c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800328e:	2a05      	cmp	r2, #5
 8003290:	d807      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8003292:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003296:	0139      	.short	0x0139
 8003298:	01330246 	.word	0x01330246
 800329c:	01390139 	.word	0x01390139
 80032a0:	0139      	.short	0x0139
      ret = HAL_ERROR;
 80032a2:	2601      	movs	r6, #1
 80032a4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032a6:	0759      	lsls	r1, r3, #29
 80032a8:	d510      	bpl.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80032aa:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80032ae:	2a05      	cmp	r2, #5
 80032b0:	d80a      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032b2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80032b6:	0116      	.short	0x0116
 80032b8:	0110022d 	.word	0x0110022d
 80032bc:	01160116 	.word	0x01160116
 80032c0:	0116      	.short	0x0116
 80032c2:	bf00      	nop
 80032c4:	58024400 	.word	0x58024400
      ret = HAL_ERROR;
 80032c8:	2601      	movs	r6, #1
 80032ca:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032cc:	069a      	lsls	r2, r3, #26
 80032ce:	d51d      	bpl.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80032d0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80032d4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80032d8:	f000 8264 	beq.w	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x784>
 80032dc:	f200 8383 	bhi.w	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 80032e0:	b142      	cbz	r2, 80032f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80032e2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80032e6:	f040 838a 	bne.w	80039fe <HAL_RCCEx_PeriphCLKConfig+0x9de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032ea:	2100      	movs	r1, #0
 80032ec:	1d20      	adds	r0, r4, #4
 80032ee:	f7ff fd9f 	bl	8002e30 <RCCEx_PLL2_Config>
 80032f2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80032f4:	2d00      	cmp	r5, #0
 80032f6:	f040 81cf 	bne.w	8003698 <HAL_RCCEx_PeriphCLKConfig+0x678>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032fa:	4ab6      	ldr	r2, [pc, #728]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80032fc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003300:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003302:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003306:	430b      	orrs	r3, r1
 8003308:	6553      	str	r3, [r2, #84]	; 0x54
 800330a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800330c:	065f      	lsls	r7, r3, #25
 800330e:	d51d      	bpl.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003310:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8003314:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003318:	f000 8254 	beq.w	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 800331c:	f200 8372 	bhi.w	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
 8003320:	b142      	cbz	r2, 8003334 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003322:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003326:	f040 8379 	bne.w	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800332a:	2100      	movs	r1, #0
 800332c:	1d20      	adds	r0, r4, #4
 800332e:	f7ff fd7f 	bl	8002e30 <RCCEx_PLL2_Config>
 8003332:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003334:	2d00      	cmp	r5, #0
 8003336:	f040 81bb 	bne.w	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800333a:	4aa6      	ldr	r2, [pc, #664]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800333c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003340:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003342:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003346:	430b      	orrs	r3, r1
 8003348:	6593      	str	r3, [r2, #88]	; 0x58
 800334a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800334c:	0618      	lsls	r0, r3, #24
 800334e:	d51d      	bpl.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003350:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8003354:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003358:	f000 8206 	beq.w	8003768 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800335c:	f200 8334 	bhi.w	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8003360:	b142      	cbz	r2, 8003374 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003362:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003366:	f040 833b 	bne.w	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800336a:	2100      	movs	r1, #0
 800336c:	1d20      	adds	r0, r4, #4
 800336e:	f7ff fd5f 	bl	8002e30 <RCCEx_PLL2_Config>
 8003372:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003374:	2d00      	cmp	r5, #0
 8003376:	f040 819e 	bne.w	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x696>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800337a:	4a96      	ldr	r2, [pc, #600]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800337c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8003380:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003382:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003386:	430b      	orrs	r3, r1
 8003388:	6593      	str	r3, [r2, #88]	; 0x58
 800338a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800338c:	0719      	lsls	r1, r3, #28
 800338e:	d50c      	bpl.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x38a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003390:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003394:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003398:	f000 825f 	beq.w	800385a <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800339c:	498d      	ldr	r1, [pc, #564]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800339e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80033a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033a4:	4313      	orrs	r3, r2
 80033a6:	654b      	str	r3, [r1, #84]	; 0x54
 80033a8:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033aa:	06da      	lsls	r2, r3, #27
 80033ac:	d50c      	bpl.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80033ae:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80033b2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80033b6:	f000 825c 	beq.w	8003872 <HAL_RCCEx_PeriphCLKConfig+0x852>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ba:	4986      	ldr	r1, [pc, #536]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033bc:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80033be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c2:	4313      	orrs	r3, r2
 80033c4:	658b      	str	r3, [r1, #88]	; 0x58
 80033c6:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033c8:	031f      	lsls	r7, r3, #12
 80033ca:	d50e      	bpl.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    switch(PeriphClkInit->AdcClockSelection)
 80033cc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80033d0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80033d4:	f000 8123 	beq.w	800361e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 80033d8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80033dc:	f000 8125 	beq.w	800362a <HAL_RCCEx_PeriphCLKConfig+0x60a>
 80033e0:	2900      	cmp	r1, #0
 80033e2:	f000 82cd 	beq.w	8003980 <HAL_RCCEx_PeriphCLKConfig+0x960>
      ret = HAL_ERROR;
 80033e6:	2601      	movs	r6, #1
 80033e8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033ea:	0358      	lsls	r0, r3, #13
 80033ec:	d50f      	bpl.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    switch(PeriphClkInit->UsbClockSelection)
 80033ee:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80033f2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80033f6:	f000 8124 	beq.w	8003642 <HAL_RCCEx_PeriphCLKConfig+0x622>
 80033fa:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80033fe:	f000 8126 	beq.w	800364e <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8003402:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003406:	f000 82c3 	beq.w	8003990 <HAL_RCCEx_PeriphCLKConfig+0x970>
      ret = HAL_ERROR;
 800340a:	2601      	movs	r6, #1
 800340c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800340e:	03d9      	lsls	r1, r3, #15
 8003410:	d511      	bpl.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch(PeriphClkInit->SdmmcClockSelection)
 8003412:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003414:	2a00      	cmp	r2, #0
 8003416:	f000 8161 	beq.w	80036dc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800341a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800341e:	f040 8150 	bne.w	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003422:	2102      	movs	r1, #2
 8003424:	1d20      	adds	r0, r4, #4
 8003426:	f7ff fd03 	bl	8002e30 <RCCEx_PLL2_Config>
 800342a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800342c:	2d00      	cmp	r5, #0
 800342e:	f000 815d 	beq.w	80036ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003436:	009a      	lsls	r2, r3, #2
 8003438:	f100 8114 	bmi.w	8003664 <HAL_RCCEx_PeriphCLKConfig+0x644>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800343c:	039f      	lsls	r7, r3, #14
 800343e:	d439      	bmi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003440:	1c30      	adds	r0, r6, #0
 8003442:	bf18      	it	ne
 8003444:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003446:	02de      	lsls	r6, r3, #11
 8003448:	d507      	bpl.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800344a:	4a62      	ldr	r2, [pc, #392]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800344c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800344e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003454:	430b      	orrs	r3, r1
 8003456:	6513      	str	r3, [r2, #80]	; 0x50
 8003458:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800345a:	00dd      	lsls	r5, r3, #3
 800345c:	d508      	bpl.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x450>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800345e:	4a5d      	ldr	r2, [pc, #372]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003460:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8003464:	6913      	ldr	r3, [r2, #16]
 8003466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800346a:	430b      	orrs	r3, r1
 800346c:	6113      	str	r3, [r2, #16]
 800346e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003470:	0299      	lsls	r1, r3, #10
 8003472:	d507      	bpl.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x464>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003474:	4a57      	ldr	r2, [pc, #348]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003476:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003478:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800347a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800347e:	430b      	orrs	r3, r1
 8003480:	6513      	str	r3, [r2, #80]	; 0x50
 8003482:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003484:	005a      	lsls	r2, r3, #1
 8003486:	d50a      	bpl.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x47e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003488:	4b52      	ldr	r3, [pc, #328]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003490:	611a      	str	r2, [r3, #16]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8003498:	430a      	orrs	r2, r1
 800349a:	611a      	str	r2, [r3, #16]
 800349c:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800349e:	2b00      	cmp	r3, #0
 80034a0:	da06      	bge.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x490>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80034a2:	4a4c      	ldr	r2, [pc, #304]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034a4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80034a6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80034a8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80034ac:	430b      	orrs	r3, r1
 80034ae:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80034b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80034b4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80034b6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80034ba:	f000 8105 	beq.w	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80034be:	f240 8142 	bls.w	8003746 <HAL_RCCEx_PeriphCLKConfig+0x726>
 80034c2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80034c6:	f000 8104 	beq.w	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80034ca:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80034ce:	f000 8100 	beq.w	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80034d2:	2001      	movs	r0, #1
 80034d4:	e7b7      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034d6:	2101      	movs	r1, #1
 80034d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034dc:	f7ff fd24 	bl	8002f28 <RCCEx_PLL3_Config>
 80034e0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80034e2:	2d00      	cmp	r5, #0
 80034e4:	f040 80d5 	bne.w	8003692 <HAL_RCCEx_PeriphCLKConfig+0x672>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034e8:	4a3a      	ldr	r2, [pc, #232]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034ea:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80034ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80034f0:	f023 0307 	bic.w	r3, r3, #7
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6593      	str	r3, [r2, #88]	; 0x58
 80034f8:	6823      	ldr	r3, [r4, #0]
 80034fa:	e6e7      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034fc:	2101      	movs	r1, #1
 80034fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003502:	f7ff fd11 	bl	8002f28 <RCCEx_PLL3_Config>
 8003506:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003508:	2d00      	cmp	r5, #0
 800350a:	f040 80bf 	bne.w	800368c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800350e:	4a31      	ldr	r2, [pc, #196]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003510:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003512:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003514:	f023 0307 	bic.w	r3, r3, #7
 8003518:	430b      	orrs	r3, r1
 800351a:	6553      	str	r3, [r2, #84]	; 0x54
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	e6c2      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003520:	2102      	movs	r1, #2
 8003522:	1d20      	adds	r0, r4, #4
 8003524:	f7ff fc84 	bl	8002e30 <RCCEx_PLL2_Config>
 8003528:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800352a:	2d00      	cmp	r5, #0
 800352c:	f040 80ab 	bne.w	8003686 <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003530:	4a28      	ldr	r2, [pc, #160]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003532:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003534:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003536:	f023 0303 	bic.w	r3, r3, #3
 800353a:	430b      	orrs	r3, r1
 800353c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800353e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003540:	0259      	lsls	r1, r3, #9
 8003542:	f57f ae6f 	bpl.w	8003224 <HAL_RCCEx_PeriphCLKConfig+0x204>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>)
 8003548:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800354a:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800354c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003550:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003552:	f7fc ff25 	bl	80003a0 <HAL_GetTick>
 8003556:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003558:	e006      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x548>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355a:	f7fc ff21 	bl	80003a0 <HAL_GetTick>
 800355e:	eba0 0008 	sub.w	r0, r0, r8
 8003562:	2864      	cmp	r0, #100	; 0x64
 8003564:	f200 821d 	bhi.w	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x982>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	05da      	lsls	r2, r3, #23
 800356c:	d5f5      	bpl.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x53a>
    if(ret == HAL_OK)
 800356e:	2d00      	cmp	r5, #0
 8003570:	f040 82c5 	bne.w	8003afe <HAL_RCCEx_PeriphCLKConfig+0xade>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003576:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800357a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800357c:	4051      	eors	r1, r2
 800357e:	f411 7f40 	tst.w	r1, #768	; 0x300
 8003582:	d00d      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003584:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8003586:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003588:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800358c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003590:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003592:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003594:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003598:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800359a:	671a      	str	r2, [r3, #112]	; 0x70
 800359c:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80035a0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80035a4:	f000 828d 	beq.w	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035a8:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80035ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b0:	f000 829b 	beq.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80035b4:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035b6:	6913      	ldr	r3, [r2, #16]
 80035b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035bc:	6113      	str	r3, [r2, #16]
 80035be:	4a05      	ldr	r2, [pc, #20]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80035c0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80035c4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80035c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ca:	430b      	orrs	r3, r1
 80035cc:	6713      	str	r3, [r2, #112]	; 0x70
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	e628      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80035d2:	bf00      	nop
 80035d4:	58024400 	.word	0x58024400
 80035d8:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035dc:	2101      	movs	r1, #1
 80035de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80035e2:	f7ff fca1 	bl	8002f28 <RCCEx_PLL3_Config>
 80035e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80035e8:	2d00      	cmp	r5, #0
 80035ea:	d149      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x660>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035ec:	4ab0      	ldr	r2, [pc, #704]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80035ee:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80035f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80035f2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80035f6:	430b      	orrs	r3, r1
 80035f8:	6553      	str	r3, [r2, #84]	; 0x54
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	e644      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x268>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035fe:	2101      	movs	r1, #1
 8003600:	1d20      	adds	r0, r4, #4
 8003602:	f7ff fc15 	bl	8002e30 <RCCEx_PLL2_Config>
 8003606:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003608:	2d00      	cmp	r5, #0
 800360a:	d14e      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x68a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800360c:	4aa8      	ldr	r2, [pc, #672]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800360e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003610:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003612:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003616:	430b      	orrs	r3, r1
 8003618:	6513      	str	r3, [r2, #80]	; 0x50
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	e5f2      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800361e:	2102      	movs	r1, #2
 8003620:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003624:	f7ff fc80 	bl	8002f28 <RCCEx_PLL3_Config>
 8003628:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800362a:	2d00      	cmp	r5, #0
 800362c:	d146      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800362e:	4aa0      	ldr	r2, [pc, #640]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003630:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003634:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003636:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800363a:	430b      	orrs	r3, r1
 800363c:	6593      	str	r3, [r2, #88]	; 0x58
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	e6d3      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003642:	2101      	movs	r1, #1
 8003644:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003648:	f7ff fc6e 	bl	8002f28 <RCCEx_PLL3_Config>
 800364c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800364e:	b9a5      	cbnz	r5, 800367a <HAL_RCCEx_PeriphCLKConfig+0x65a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003650:	4a97      	ldr	r2, [pc, #604]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003652:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003656:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003658:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800365c:	430b      	orrs	r3, r1
 800365e:	6553      	str	r3, [r2, #84]	; 0x54
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	e6d4      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003664:	2102      	movs	r1, #2
 8003666:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800366a:	f7ff fc5d 	bl	8002f28 <RCCEx_PLL3_Config>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	2800      	cmp	r0, #0
 8003672:	f43f aee3 	beq.w	800343c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      status=HAL_ERROR;
 8003676:	2601      	movs	r6, #1
 8003678:	e6e0      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800367a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800367c:	462e      	mov	r6, r5
 800367e:	e6c6      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8003680:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003682:	462e      	mov	r6, r5
 8003684:	e600      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003686:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003688:	462e      	mov	r6, r5
 800368a:	e5c8      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800368c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800368e:	462e      	mov	r6, r5
 8003690:	e609      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003692:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003694:	462e      	mov	r6, r5
 8003696:	e619      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003698:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800369a:	462e      	mov	r6, r5
 800369c:	e636      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 800369e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80036a0:	462e      	mov	r6, r5
 80036a2:	e59f      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80036a4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80036a6:	462e      	mov	r6, r5
 80036a8:	e57c      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x184>
 80036aa:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80036ac:	462e      	mov	r6, r5
 80036ae:	e5a9      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80036b0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80036b2:	462e      	mov	r6, r5
 80036b4:	e64a      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80036b6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80036b8:	462e      	mov	r6, r5
 80036ba:	e667      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80036bc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80036be:	462e      	mov	r6, r5
 80036c0:	e693      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = HAL_ERROR;
 80036c2:	2601      	movs	r6, #1
 80036c4:	4635      	mov	r5, r6
 80036c6:	e6b6      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c8:	4a79      	ldr	r2, [pc, #484]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80036ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d03c      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x730>
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	2001      	movs	r0, #1
 80036da:	e6b4      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x426>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036dc:	4a74      	ldr	r2, [pc, #464]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80036de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80036e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80036e6:	2d00      	cmp	r5, #0
 80036e8:	f47f aea3 	bne.w	8003432 <HAL_RCCEx_PeriphCLKConfig+0x412>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80036ec:	4a70      	ldr	r2, [pc, #448]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80036ee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80036f0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f6:	430b      	orrs	r3, r1
 80036f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	e69b      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036fe:	4a6c      	ldr	r2, [pc, #432]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003700:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003706:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003708:	2d00      	cmp	r5, #0
 800370a:	f43f af11 	beq.w	8003530 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800370e:	e7ba      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x666>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003710:	2101      	movs	r1, #1
 8003712:	1d20      	adds	r0, r4, #4
 8003714:	f7ff fb8c 	bl	8002e30 <RCCEx_PLL2_Config>
 8003718:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800371a:	2d00      	cmp	r5, #0
 800371c:	f43f aee4 	beq.w	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8003720:	e7b7      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x672>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003722:	2101      	movs	r1, #1
 8003724:	1d20      	adds	r0, r4, #4
 8003726:	f7ff fb83 	bl	8002e30 <RCCEx_PLL2_Config>
 800372a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800372c:	2d00      	cmp	r5, #0
 800372e:	f43f aeee 	beq.w	800350e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003732:	e7ab      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003734:	2101      	movs	r1, #1
 8003736:	1d20      	adds	r0, r4, #4
 8003738:	f7ff fb7a 	bl	8002e30 <RCCEx_PLL2_Config>
 800373c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800373e:	2d00      	cmp	r5, #0
 8003740:	f43f af54 	beq.w	80035ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003744:	e79c      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x660>
    switch(PeriphClkInit->RngClockSelection)
 8003746:	2a00      	cmp	r2, #0
 8003748:	f47f aec3 	bne.w	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
    if(ret == HAL_OK)
 800374c:	2d00      	cmp	r5, #0
 800374e:	d1c2      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003750:	4a57      	ldr	r2, [pc, #348]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003752:	1c30      	adds	r0, r6, #0
 8003754:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003756:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003758:	bf18      	it	ne
 800375a:	2001      	movne	r0, #1
 800375c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003760:	430b      	orrs	r3, r1
 8003762:	6553      	str	r3, [r2, #84]	; 0x54
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	e66e      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003768:	2102      	movs	r1, #2
 800376a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800376e:	f7ff fbdb 	bl	8002f28 <RCCEx_PLL3_Config>
 8003772:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003774:	2d00      	cmp	r5, #0
 8003776:	f43f ae00 	beq.w	800337a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800377a:	e79c      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x696>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800377c:	2101      	movs	r1, #1
 800377e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003782:	f7ff fbd1 	bl	8002f28 <RCCEx_PLL3_Config>
 8003786:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003788:	2d00      	cmp	r5, #0
 800378a:	f43f ad22 	beq.w	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800378e:	e786      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003790:	4a47      	ldr	r2, [pc, #284]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003792:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003798:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800379a:	2d00      	cmp	r5, #0
 800379c:	d036      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	462e      	mov	r6, r5
 80037a2:	e4c7      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037a4:	2102      	movs	r1, #2
 80037a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80037aa:	f7ff fbbd 	bl	8002f28 <RCCEx_PLL3_Config>
 80037ae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80037b0:	2d00      	cmp	r5, #0
 80037b2:	f43f ada2 	beq.w	80032fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80037b6:	e76f      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Sai1ClockSelection)
 80037b8:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 80037ba:	2d00      	cmp	r5, #0
 80037bc:	d037      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	462e      	mov	r6, r5
 80037c2:	e459      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x58>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037c4:	2102      	movs	r1, #2
 80037c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80037ca:	f7ff fbad 	bl	8002f28 <RCCEx_PLL3_Config>
 80037ce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80037d0:	2d00      	cmp	r5, #0
 80037d2:	f43f adb2 	beq.w	800333a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 80037d6:	e76b      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037d8:	2101      	movs	r1, #1
 80037da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80037de:	f7ff fba3 	bl	8002f28 <RCCEx_PLL3_Config>
 80037e2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80037e4:	2d00      	cmp	r5, #0
 80037e6:	f43f acd5 	beq.w	8003194 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80037ea:	e75b      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x684>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ec:	4a30      	ldr	r2, [pc, #192]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80037ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80037f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80037f6:	2d00      	cmp	r5, #0
 80037f8:	f43f af08 	beq.w	800360c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 80037fc:	e755      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x68a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037fe:	2102      	movs	r1, #2
 8003800:	1d20      	adds	r0, r4, #4
 8003802:	f7ff fb15 	bl	8002e30 <RCCEx_PLL2_Config>
 8003806:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003808:	2d00      	cmp	r5, #0
 800380a:	d1c8      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800380c:	4a28      	ldr	r2, [pc, #160]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800380e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003810:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003812:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003816:	430b      	orrs	r3, r1
 8003818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	e48a      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800381e:	2100      	movs	r1, #0
 8003820:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003824:	f7ff fb80 	bl	8002f28 <RCCEx_PLL3_Config>
 8003828:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800382a:	2d00      	cmp	r5, #0
 800382c:	d1c7      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800382e:	4a20      	ldr	r2, [pc, #128]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003830:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003832:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003834:	f023 0307 	bic.w	r3, r3, #7
 8003838:	430b      	orrs	r3, r1
 800383a:	6513      	str	r3, [r2, #80]	; 0x50
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	e41b      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003840:	4a1b      	ldr	r2, [pc, #108]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
      break;
 8003842:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003844:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800384a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800384c:	e7b5      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x79a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800384e:	2100      	movs	r1, #0
 8003850:	1d20      	adds	r0, r4, #4
 8003852:	f7ff faed 	bl	8002e30 <RCCEx_PLL2_Config>
 8003856:	4605      	mov	r5, r0
      break;
 8003858:	e7af      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x79a>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800385a:	2102      	movs	r1, #2
 800385c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003860:	f7ff fb62 	bl	8002f28 <RCCEx_PLL3_Config>
 8003864:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003868:	2800      	cmp	r0, #0
 800386a:	f43f ad97 	beq.w	800339c <HAL_RCCEx_PeriphCLKConfig+0x37c>
          status = HAL_ERROR;
 800386e:	2601      	movs	r6, #1
 8003870:	e594      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x37c>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003872:	2102      	movs	r1, #2
 8003874:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003878:	f7ff fb56 	bl	8002f28 <RCCEx_PLL3_Config>
 800387c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8003880:	2800      	cmp	r0, #0
 8003882:	f43f ad9a 	beq.w	80033ba <HAL_RCCEx_PeriphCLKConfig+0x39a>
        status = HAL_ERROR;
 8003886:	2601      	movs	r6, #1
 8003888:	e597      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x39a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800388a:	2100      	movs	r1, #0
 800388c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003890:	f7ff fb4a 	bl	8002f28 <RCCEx_PLL3_Config>
 8003894:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003896:	2d00      	cmp	r5, #0
 8003898:	f47f ac3a 	bne.w	8003110 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800389c:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800389e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80038a2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80038a4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6593      	str	r3, [r2, #88]	; 0x58
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	e431      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038b0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038b4:	2100      	movs	r1, #0
 80038b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80038ba:	f7ff fb35 	bl	8002f28 <RCCEx_PLL3_Config>
 80038be:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80038c0:	2d00      	cmp	r5, #0
 80038c2:	f47f ac4f 	bne.w	8003164 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038c6:	4a90      	ldr	r2, [pc, #576]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 80038c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80038ca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80038cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6513      	str	r3, [r2, #80]	; 0x50
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	e447      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x148>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038d8:	2102      	movs	r1, #2
 80038da:	3004      	adds	r0, #4
 80038dc:	f7ff faa8 	bl	8002e30 <RCCEx_PLL2_Config>
 80038e0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80038e2:	2e00      	cmp	r6, #0
 80038e4:	f47f abb9 	bne.w	800305a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80038e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038ea:	f7ff bbaf 	b.w	800304c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038ee:	2100      	movs	r1, #0
 80038f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80038f4:	f7ff fb18 	bl	8002f28 <RCCEx_PLL3_Config>
 80038f8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80038fa:	2d00      	cmp	r5, #0
 80038fc:	f47f abed 	bne.w	80030da <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003900:	4a81      	ldr	r2, [pc, #516]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8003902:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8003906:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003908:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800390c:	430b      	orrs	r3, r1
 800390e:	6593      	str	r3, [r2, #88]	; 0x58
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	f7ff bbe4 	b.w	80030de <HAL_RCCEx_PeriphCLKConfig+0xbe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003916:	2100      	movs	r1, #0
 8003918:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800391c:	f7ff fb04 	bl	8002f28 <RCCEx_PLL3_Config>
 8003920:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003922:	2d00      	cmp	r5, #0
 8003924:	f47f abbe 	bne.w	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003928:	4a77      	ldr	r2, [pc, #476]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 800392a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800392c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800392e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8003932:	430b      	orrs	r3, r1
 8003934:	6513      	str	r3, [r2, #80]	; 0x50
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	f7ff bbb6 	b.w	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800393c:	4a72      	ldr	r2, [pc, #456]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 800393e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003944:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003946:	f7ff bbaa 	b.w	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800394a:	4a6f      	ldr	r2, [pc, #444]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 800394c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800394e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003952:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003954:	f7ff bbd9 	b.w	800310a <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003958:	2102      	movs	r1, #2
 800395a:	3024      	adds	r0, #36	; 0x24
 800395c:	f7ff fae4 	bl	8002f28 <RCCEx_PLL3_Config>
 8003960:	4606      	mov	r6, r0
      break;
 8003962:	e7be      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003964:	4a68      	ldr	r2, [pc, #416]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8003966:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800396e:	f7ff bbb1 	b.w	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003972:	4a65      	ldr	r2, [pc, #404]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8003974:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800397c:	f7ff bbef 	b.w	800315e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003980:	1d20      	adds	r0, r4, #4
 8003982:	f7ff fa55 	bl	8002e30 <RCCEx_PLL2_Config>
 8003986:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003988:	2d00      	cmp	r5, #0
 800398a:	f43f ae50 	beq.w	800362e <HAL_RCCEx_PeriphCLKConfig+0x60e>
 800398e:	e695      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003990:	4a5d      	ldr	r2, [pc, #372]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8003992:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003998:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800399a:	2d00      	cmp	r5, #0
 800399c:	f43f ae58 	beq.w	8003650 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80039a0:	e66b      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x65a>
            ret = HAL_TIMEOUT;
 80039a2:	2603      	movs	r6, #3
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	4635      	mov	r5, r6
 80039a8:	e43c      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x204>
    switch(PeriphClkInit->Spi6ClockSelection)
 80039aa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80039ae:	f43f ac0d 	beq.w	80031cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80039b2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80039b6:	f43f ac09 	beq.w	80031cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80039ba:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80039be:	f43f ac05 	beq.w	80031cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      ret = HAL_ERROR;
 80039c2:	2601      	movs	r6, #1
 80039c4:	4635      	mov	r5, r6
 80039c6:	e40d      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80039c8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80039cc:	f43f acd2 	beq.w	8003374 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80039d0:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 80039d4:	f43f acce 	beq.w	8003374 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80039d8:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80039dc:	f43f acca 	beq.w	8003374 <HAL_RCCEx_PeriphCLKConfig+0x354>
      ret = HAL_ERROR;
 80039e0:	2601      	movs	r6, #1
 80039e2:	4635      	mov	r5, r6
 80039e4:	e4d2      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80039e6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80039ea:	f43f ac83 	beq.w	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80039ee:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80039f2:	f43f ac7f 	beq.w	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80039f6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80039fa:	f43f ac7b 	beq.w	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      ret = HAL_ERROR;
 80039fe:	2601      	movs	r6, #1
 8003a00:	4635      	mov	r5, r6
 8003a02:	e483      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003a04:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003a08:	f43f ac94 	beq.w	8003334 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003a0c:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8003a10:	f43f ac90 	beq.w	8003334 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003a14:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003a18:	f43f ac8c 	beq.w	8003334 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = HAL_ERROR;
 8003a1c:	2601      	movs	r6, #1
 8003a1e:	4635      	mov	r5, r6
 8003a20:	e494      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003a22:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8003a26:	f43f abb2 	beq.w	800318e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003a2a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003a2e:	f43f abae 	beq.w	800318e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003a32:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8003a36:	f43f abaa 	beq.w	800318e <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = HAL_ERROR;
 8003a3a:	2601      	movs	r6, #1
 8003a3c:	4635      	mov	r5, r6
 8003a3e:	f7ff bbb1 	b.w	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003a42:	2ac0      	cmp	r2, #192	; 0xc0
 8003a44:	f43f ab2b 	beq.w	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003a48:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003a4c:	f43f ab27 	beq.w	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 8003a50:	2601      	movs	r6, #1
 8003a52:	4635      	mov	r5, r6
 8003a54:	f7ff bb28 	b.w	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003a58:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003a5c:	f43f ab7f 	beq.w	800315e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8003a60:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003a64:	f43f ab7b 	beq.w	800315e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = HAL_ERROR;
 8003a68:	2601      	movs	r6, #1
 8003a6a:	4635      	mov	r5, r6
 8003a6c:	f7ff bb7c 	b.w	8003168 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003a70:	bb22      	cbnz	r2, 8003abc <HAL_RCCEx_PeriphCLKConfig+0xa9c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a72:	4a25      	ldr	r2, [pc, #148]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8003a74:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a7c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8003a7e:	f7ff bae5 	b.w	800304c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a82:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8003a86:	f43f ab40 	beq.w	800310a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003a8a:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8003a8e:	f43f ab3c 	beq.w	800310a <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = HAL_ERROR;
 8003a92:	2601      	movs	r6, #1
 8003a94:	4635      	mov	r5, r6
 8003a96:	f7ff bb3d 	b.w	8003114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003a9a:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8003a9e:	f43f ab19 	beq.w	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003aa2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003aa6:	f43f ab15 	beq.w	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = HAL_ERROR;
 8003aaa:	2601      	movs	r6, #1
 8003aac:	4635      	mov	r5, r6
 8003aae:	f7ff bb16 	b.w	80030de <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->QspiClockSelection)
 8003ab2:	2a00      	cmp	r2, #0
 8003ab4:	f43f ae71 	beq.w	800379a <HAL_RCCEx_PeriphCLKConfig+0x77a>
 8003ab8:	f7ff bb3a 	b.w	8003130 <HAL_RCCEx_PeriphCLKConfig+0x110>
      ret = HAL_ERROR;
 8003abc:	2601      	movs	r6, #1
 8003abe:	f7ff bacd 	b.w	800305c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        tickstart = HAL_GetTick();
 8003ac2:	f7fc fc6d 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ac6:	4f10      	ldr	r7, [pc, #64]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
        tickstart = HAL_GetTick();
 8003ac8:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ace:	e006      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xabe>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fc fc66 	bl	80003a0 <HAL_GetTick>
 8003ad4:	eba0 0009 	sub.w	r0, r0, r9
 8003ad8:	4540      	cmp	r0, r8
 8003ada:	f63f af62 	bhi.w	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x982>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ae0:	079b      	lsls	r3, r3, #30
 8003ae2:	d5f5      	bpl.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003ae4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003ae8:	e55e      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aea:	4807      	ldr	r0, [pc, #28]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8003aec:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 8003aee:	6901      	ldr	r1, [r0, #16]
 8003af0:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8003af4:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 8003af8:	4313      	orrs	r3, r2
 8003afa:	6103      	str	r3, [r0, #16]
 8003afc:	e55f      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003afe:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003b00:	462e      	mov	r6, r5
 8003b02:	f7ff bb8f 	b.w	8003224 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003b06:	bf00      	nop
 8003b08:	58024400 	.word	0x58024400
 8003b0c:	00ffffcf 	.word	0x00ffffcf

08003b10 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b10:	4a46      	ldr	r2, [pc, #280]	; (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 8003b12:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b14:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003b16:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003b1a:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003b1e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d059      	beq.n	8003bd8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003b24:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b28:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b2c:	f004 0403 	and.w	r4, r4, #3
 8003b30:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003b34:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8003b38:	2c01      	cmp	r4, #1
 8003b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b3e:	ee06 1a90 	vmov	s13, r1
 8003b42:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8003b46:	d002      	beq.n	8003b4e <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8003b48:	d34e      	bcc.n	8003be8 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8003b4a:	2c02      	cmp	r4, #2
 8003b4c:	d049      	beq.n	8003be2 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b4e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 8003b52:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8003b56:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	ee07 3a10 	vmov	s14, r3
 8003b60:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003b64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003b68:	ee37 7a25 	vadd.f32	s14, s14, s11
 8003b6c:	ee77 7a26 	vadd.f32	s15, s14, s13
 8003b70:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003b74:	4a2d      	ldr	r2, [pc, #180]	; (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 8003b76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003b7a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003b7c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003b80:	ee06 3a90 	vmov	s13, r3
 8003b84:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8003b88:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003b8a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003b8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b92:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003b96:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003b9a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003b9c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003ba0:	ee06 3a90 	vmov	s13, r3
 8003ba4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003ba8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003bac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003bb0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003bb4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003bb8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003bba:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003bbe:	ee07 3a10 	vmov	s14, r3
 8003bc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003bc6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003bca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003bce:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003bd2:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8003bd6:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003bd8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003bdc:	6083      	str	r3, [r0, #8]
}
 8003bde:	bc30      	pop	{r4, r5}
 8003be0:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003be2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8003be6:	e7b4      	b.n	8003b52 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003be8:	6813      	ldr	r3, [r2, #0]
 8003bea:	069b      	lsls	r3, r3, #26
 8003bec:	d51a      	bpl.n	8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bee:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003bf0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bf4:	4910      	ldr	r1, [pc, #64]	; (8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8003bf6:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003bfa:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bfc:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c02:	ee07 1a10 	vmov	s14, r1
 8003c06:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8003c0a:	ee07 3a10 	vmov	s14, r3
 8003c0e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8003c12:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8003c16:	ee76 7a05 	vadd.f32	s15, s12, s10
 8003c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	e7a7      	b.n	8003b74 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c24:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8003c28:	e793      	b.n	8003b52 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8003c2a:	bf00      	nop
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	4a742400 	.word	0x4a742400
 8003c34:	4bbebc20 	.word	0x4bbebc20
 8003c38:	03d09000 	.word	0x03d09000
 8003c3c:	4c742400 	.word	0x4c742400

08003c40 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c40:	4a46      	ldr	r2, [pc, #280]	; (8003d5c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 8003c42:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c44:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003c46:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003c4a:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003c4e:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d059      	beq.n	8003d08 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003c54:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c58:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c5c:	f004 0403 	and.w	r4, r4, #3
 8003c60:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003c64:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8003c68:	2c01      	cmp	r4, #1
 8003c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c6e:	ee06 1a90 	vmov	s13, r1
 8003c72:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8003c76:	d002      	beq.n	8003c7e <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 8003c78:	d34e      	bcc.n	8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8003c7a:	2c02      	cmp	r4, #2
 8003c7c:	d049      	beq.n	8003d12 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c7e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003d60 <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 8003c82:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8003c86:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8c:	ee07 3a10 	vmov	s14, r3
 8003c90:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003c94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003c98:	ee37 7a25 	vadd.f32	s14, s14, s11
 8003c9c:	ee77 7a26 	vadd.f32	s15, s14, s13
 8003ca0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003ca4:	4a2d      	ldr	r2, [pc, #180]	; (8003d5c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 8003ca6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003caa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003cac:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003cb0:	ee06 3a90 	vmov	s13, r3
 8003cb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8003cb8:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003cba:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003cbe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003cc2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003cc6:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003cca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003ccc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003cd0:	ee06 3a90 	vmov	s13, r3
 8003cd4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003cd8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003cdc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ce0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003ce4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003ce8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003cea:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003cee:	ee07 3a10 	vmov	s14, r3
 8003cf2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003cf6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003cfa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003cfe:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003d02:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8003d06:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d08:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d0c:	6083      	str	r3, [r0, #8]
}
 8003d0e:	bc30      	pop	{r4, r5}
 8003d10:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d12:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003d64 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8003d16:	e7b4      	b.n	8003c82 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d18:	6813      	ldr	r3, [r2, #0]
 8003d1a:	069b      	lsls	r3, r3, #26
 8003d1c:	d51a      	bpl.n	8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d1e:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d20:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d24:	4910      	ldr	r1, [pc, #64]	; (8003d68 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8003d26:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d2c:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d32:	ee07 1a10 	vmov	s14, r1
 8003d36:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8003d3a:	ee07 3a10 	vmov	s14, r3
 8003d3e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8003d42:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8003d46:	ee76 7a05 	vadd.f32	s15, s12, s10
 8003d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d52:	e7a7      	b.n	8003ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d54:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8003d58:	e793      	b.n	8003c82 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8003d5a:	bf00      	nop
 8003d5c:	58024400 	.word	0x58024400
 8003d60:	4a742400 	.word	0x4a742400
 8003d64:	4bbebc20 	.word	0x4bbebc20
 8003d68:	03d09000 	.word	0x03d09000
 8003d6c:	4c742400 	.word	0x4c742400

08003d70 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d70:	4a46      	ldr	r2, [pc, #280]	; (8003e8c <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 8003d72:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d74:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8003d76:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003d78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8003d7a:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d7e:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d059      	beq.n	8003e38 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d84:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003d88:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d8c:	f004 0403 	and.w	r4, r4, #3
 8003d90:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d94:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8003d98:	2c01      	cmp	r4, #1
 8003d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d9e:	ee06 1a90 	vmov	s13, r1
 8003da2:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8003da6:	d002      	beq.n	8003dae <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 8003da8:	d34e      	bcc.n	8003e48 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8003daa:	2c02      	cmp	r4, #2
 8003dac:	d049      	beq.n	8003e42 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003dae:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003e90 <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 8003db2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8003db6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbc:	ee07 3a10 	vmov	s14, r3
 8003dc0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003dc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003dc8:	ee37 7a25 	vadd.f32	s14, s14, s11
 8003dcc:	ee77 7a26 	vadd.f32	s15, s14, s13
 8003dd0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8003dd4:	4a2d      	ldr	r2, [pc, #180]	; (8003e8c <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 8003dd6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003dda:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003ddc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003de0:	ee06 3a90 	vmov	s13, r3
 8003de4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8003de8:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8003dea:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003dee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003df2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003df6:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8003dfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003dfc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003e00:	ee06 3a90 	vmov	s13, r3
 8003e04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003e08:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003e0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e10:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003e14:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8003e18:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003e1a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003e1e:	ee07 3a10 	vmov	s14, r3
 8003e22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003e26:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003e2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e2e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003e32:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8003e36:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003e38:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e3c:	6083      	str	r3, [r0, #8]
}
 8003e3e:	bc30      	pop	{r4, r5}
 8003e40:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e42:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003e94 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8003e46:	e7b4      	b.n	8003db2 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e48:	6813      	ldr	r3, [r2, #0]
 8003e4a:	069b      	lsls	r3, r3, #26
 8003e4c:	d51a      	bpl.n	8003e84 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e4e:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e50:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e54:	4910      	ldr	r1, [pc, #64]	; (8003e98 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8003e56:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e5c:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e62:	ee07 1a10 	vmov	s14, r1
 8003e66:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8003e6a:	ee07 3a10 	vmov	s14, r3
 8003e6e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8003e72:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8003e76:	ee76 7a05 	vadd.f32	s15, s12, s10
 8003e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e82:	e7a7      	b.n	8003dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e84:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003e9c <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8003e88:	e793      	b.n	8003db2 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 8003e8a:	bf00      	nop
 8003e8c:	58024400 	.word	0x58024400
 8003e90:	4a742400 	.word	0x4a742400
 8003e94:	4bbebc20 	.word	0x4bbebc20
 8003e98:	03d09000 	.word	0x03d09000
 8003e9c:	4c742400 	.word	0x4c742400

08003ea0 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003ea0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8003ea4:	b500      	push	{lr}
 8003ea6:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003ea8:	d02d      	beq.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003eaa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003eae:	d018      	beq.n	8003ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003eb0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003eb4:	d04e      	beq.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003eb6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8003eba:	d037      	beq.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003ebc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8003ec0:	f000 808b 	beq.w	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003ec4:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8003ec8:	f000 80ac 	beq.w	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003ecc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003ed0:	f000 80b6 	beq.w	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8003ed4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8003ed8:	d062      	beq.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 8003eda:	2000      	movs	r0, #0
}
 8003edc:	b005      	add	sp, #20
 8003ede:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8003ee2:	4a70      	ldr	r2, [pc, #448]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8003ee4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003ee6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8003eea:	2b80      	cmp	r3, #128	; 0x80
 8003eec:	d043      	beq.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003eee:	d86a      	bhi.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d039      	beq.n	8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ef8:	a801      	add	r0, sp, #4
 8003efa:	f7ff fe09 	bl	8003b10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003efe:	9801      	ldr	r0, [sp, #4]
}
 8003f00:	b005      	add	sp, #20
 8003f02:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8003f06:	4b67      	ldr	r3, [pc, #412]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8003f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0a:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d8e3      	bhi.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003f12:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 8003f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f18:	08003f69 	.word	0x08003f69
 8003f1c:	08003ef9 	.word	0x08003ef9
 8003f20:	08003f77 	.word	0x08003f77
 8003f24:	08003f4d 	.word	0x08003f4d
 8003f28:	08003f85 	.word	0x08003f85
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003f2c:	4a5d      	ldr	r2, [pc, #372]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8003f2e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003f30:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8003f34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f38:	d01d      	beq.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003f3a:	d85c      	bhi.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8003f3c:	b1a3      	cbz	r3, 8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8003f3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f42:	d0d9      	beq.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8003f44:	e7c9      	b.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8003f46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f4a:	d15b      	bne.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f4c:	4856      	ldr	r0, [pc, #344]	; (80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 8003f4e:	b005      	add	sp, #20
 8003f50:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8003f54:	4a53      	ldr	r2, [pc, #332]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8003f56:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003f58:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8003f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f60:	d009      	beq.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003f62:	d8f0      	bhi.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d151      	bne.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003f68:	a801      	add	r0, sp, #4
 8003f6a:	f7ff ff01 	bl	8003d70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003f6e:	9802      	ldr	r0, [sp, #8]
}
 8003f70:	b005      	add	sp, #20
 8003f72:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f76:	a801      	add	r0, sp, #4
 8003f78:	f7ff fe62 	bl	8003c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003f7c:	9801      	ldr	r0, [sp, #4]
}
 8003f7e:	b005      	add	sp, #20
 8003f80:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003f84:	4b47      	ldr	r3, [pc, #284]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8003f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003f88:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8003f8c:	d019      	beq.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f92:	d062      	beq.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 8003f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f98:	4844      	ldr	r0, [pc, #272]	; (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8003f9a:	bf18      	it	ne
 8003f9c:	2000      	movne	r0, #0
 8003f9e:	e79d      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8003fa0:	4b40      	ldr	r3, [pc, #256]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8003fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fac:	d068      	beq.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8003fae:	d95b      	bls.n	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d051      	beq.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8003fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fba:	d05f      	beq.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8003fbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fc0:	d18b      	bne.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 8003fc2:	483b      	ldr	r0, [pc, #236]	; (80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 8003fc4:	e78a      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 8003fc6:	2bc0      	cmp	r3, #192	; 0xc0
 8003fc8:	d0c0      	beq.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8003fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fce:	d184      	bne.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003fd0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003fd2:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8003fd6:	d1da      	bne.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8003fd8:	e7f3      	b.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003fda:	4a32      	ldr	r2, [pc, #200]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8003fdc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003fde:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8003fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe6:	d0c6      	beq.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003fe8:	d815      	bhi.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0bc      	beq.n	8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff2:	d081      	beq.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8003ff4:	e771      	b.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8003ff6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ffa:	d0a7      	beq.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8003ffc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004000:	d0e6      	beq.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8004002:	e76a      	b.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8004004:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004008:	d0e2      	beq.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800400a:	e766      	b.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800400c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004010:	f43f af72 	beq.w	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8004014:	e761      	b.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 8004016:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800401a:	d097      	beq.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800401c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004020:	d0d6      	beq.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8004022:	e75a      	b.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004024:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004026:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d015      	beq.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004032:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004036:	d0cb      	beq.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8004038:	2b00      	cmp	r3, #0
 800403a:	f47f af4e 	bne.w	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800403e:	e75b      	b.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004040:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8004044:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004048:	d08e      	beq.n	8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800404a:	2b00      	cmp	r3, #0
 800404c:	f43f af45 	beq.w	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004050:	a801      	add	r0, sp, #4
 8004052:	f7ff fd5d 	bl	8003b10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004056:	9803      	ldr	r0, [sp, #12]
          break;
 8004058:	e740      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 800405a:	4816      	ldr	r0, [pc, #88]	; (80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 800405c:	e73e      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800405e:	a801      	add	r0, sp, #4
 8004060:	f7ff fdee 	bl	8003c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004064:	9803      	ldr	r0, [sp, #12]
          break;
 8004066:	e739      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8004068:	b17b      	cbz	r3, 800408a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800406a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800406e:	f47f af34 	bne.w	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004072:	a801      	add	r0, sp, #4
 8004074:	f7ff fd4c 	bl	8003b10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004078:	9802      	ldr	r0, [sp, #8]
          break;
 800407a:	e72f      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 800407c:	480b      	ldr	r0, [pc, #44]	; (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 800407e:	e72d      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004080:	a801      	add	r0, sp, #4
 8004082:	f7ff fddd 	bl	8003c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004086:	9802      	ldr	r0, [sp, #8]
          break;
 8004088:	e728      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800408a:	f7fe fe29 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004090:	4a09      	ldr	r2, [pc, #36]	; (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004098:	5cd3      	ldrb	r3, [r2, r3]
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	40d8      	lsrs	r0, r3
          break;
 80040a0:	e71c      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80040a2:	bf00      	nop
 80040a4:	58024400 	.word	0x58024400
 80040a8:	00bb8000 	.word	0x00bb8000
 80040ac:	017d7840 	.word	0x017d7840
 80040b0:	03d09000 	.word	0x03d09000
 80040b4:	003d0900 	.word	0x003d0900
 80040b8:	0800c6a4 	.word	0x0800c6a4

080040bc <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80040bc:	b390      	cbz	r0, 8004124 <HAL_RNG_Init+0x68>
{
 80040be:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80040c0:	7a43      	ldrb	r3, [r0, #9]
 80040c2:	4604      	mov	r4, r0
 80040c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040c8:	b343      	cbz	r3, 800411c <HAL_RNG_Init+0x60>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80040ca:	2302      	movs	r3, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80040cc:	e9d4 2100 	ldrd	r2, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 80040d0:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80040d2:	6813      	ldr	r3, [r2, #0]
 80040d4:	f023 0320 	bic.w	r3, r3, #32
 80040d8:	430b      	orrs	r3, r1
 80040da:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80040dc:	6822      	ldr	r2, [r4, #0]
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	065b      	lsls	r3, r3, #25
 80040ec:	d503      	bpl.n	80040f6 <HAL_RNG_Init+0x3a>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80040ee:	2304      	movs	r3, #4
    return HAL_ERROR;
 80040f0:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 80040f2:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 80040f4:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 80040f6:	f7fc f953 	bl	80003a0 <HAL_GetTick>
 80040fa:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80040fc:	e004      	b.n	8004108 <HAL_RNG_Init+0x4c>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80040fe:	f7fc f94f 	bl	80003a0 <HAL_GetTick>
 8004102:	1b40      	subs	r0, r0, r5
 8004104:	2802      	cmp	r0, #2
 8004106:	d80f      	bhi.n	8004128 <HAL_RNG_Init+0x6c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f013 0304 	ands.w	r3, r3, #4
 8004110:	d1f5      	bne.n	80040fe <HAL_RNG_Init+0x42>
  hrng->State = HAL_RNG_STATE_READY;
 8004112:	2201      	movs	r2, #1
  return HAL_OK;
 8004114:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8004116:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004118:	60e3      	str	r3, [r4, #12]
}
 800411a:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800411c:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800411e:	f004 fb57 	bl	80087d0 <HAL_RNG_MspInit>
 8004122:	e7d2      	b.n	80040ca <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 8004124:	2001      	movs	r0, #1
}
 8004126:	4770      	bx	lr
      hrng->State = HAL_RNG_STATE_ERROR;
 8004128:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800412a:	2302      	movs	r3, #2
      return HAL_ERROR;
 800412c:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 800412e:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004130:	60e3      	str	r3, [r4, #12]
}
 8004132:	bd38      	pop	{r3, r4, r5, pc}

08004134 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004136:	7a03      	ldrb	r3, [r0, #8]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d00b      	beq.n	8004154 <HAL_RNG_GenerateRandomNumber+0x20>
 800413c:	4604      	mov	r4, r0
 800413e:	2001      	movs	r0, #1
 8004140:	460e      	mov	r6, r1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004142:	7a63      	ldrb	r3, [r4, #9]
  __HAL_LOCK(hrng);
 8004144:	7220      	strb	r0, [r4, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8004146:	4283      	cmp	r3, r0
 8004148:	d006      	beq.n	8004158 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800414a:	2304      	movs	r3, #4
 800414c:	60e3      	str	r3, [r4, #12]
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800414e:	2300      	movs	r3, #0
 8004150:	7223      	strb	r3, [r4, #8]

  return status;
}
 8004152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng);
 8004154:	2002      	movs	r0, #2
}
 8004156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8004158:	2302      	movs	r3, #2
 800415a:	7263      	strb	r3, [r4, #9]
    tickstart = HAL_GetTick();
 800415c:	f7fc f920 	bl	80003a0 <HAL_GetTick>
 8004160:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004162:	e004      	b.n	800416e <HAL_RNG_GenerateRandomNumber+0x3a>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004164:	f7fc f91c 	bl	80003a0 <HAL_GetTick>
 8004168:	1bc0      	subs	r0, r0, r7
 800416a:	2802      	cmp	r0, #2
 800416c:	d80b      	bhi.n	8004186 <HAL_RNG_GenerateRandomNumber+0x52>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800416e:	6822      	ldr	r2, [r4, #0]
 8004170:	6855      	ldr	r5, [r2, #4]
 8004172:	f015 0501 	ands.w	r5, r5, #1
 8004176:	d0f5      	beq.n	8004164 <HAL_RNG_GenerateRandomNumber+0x30>
    hrng->RandomNumber = hrng->Instance->DR;
 8004178:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 800417a:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 800417c:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 800417e:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8004180:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8004182:	7262      	strb	r2, [r4, #9]
 8004184:	e7e3      	b.n	800414e <HAL_RNG_GenerateRandomNumber+0x1a>
        hrng->State = HAL_RNG_STATE_READY;
 8004186:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004188:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 800418a:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 800418c:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800418e:	60e3      	str	r3, [r4, #12]
}
 8004190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004192:	bf00      	nop

08004194 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004196:	2904      	cmp	r1, #4
 8004198:	d813      	bhi.n	80041c2 <HAL_SAI_InitProtocol+0x2e>
 800419a:	e8df f001 	tbb	[pc, r1]
 800419e:	3535      	.short	0x3535
 80041a0:	1435      	.short	0x1435
 80041a2:	14          	.byte	0x14
 80041a3:	00          	.byte	0x00
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80041a4:	4a8b      	ldr	r2, [pc, #556]	; (80043d4 <HAL_SAI_InitProtocol+0x240>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d005      	beq.n	80041b6 <HAL_SAI_InitProtocol+0x22>
 80041aa:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80041ae:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d105      	bne.n	80041c2 <HAL_SAI_InitProtocol+0x2e>
 80041b6:	6862      	ldr	r2, [r4, #4]
 80041b8:	2a01      	cmp	r2, #1
 80041ba:	d102      	bne.n	80041c2 <HAL_SAI_InitProtocol+0x2e>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80041bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80041be:	2a00      	cmp	r2, #0
 80041c0:	d053      	beq.n	800426a <HAL_SAI_InitProtocol+0xd6>
  hsai->SlotInit.SlotNumber      = nbslot;

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
  {
    return HAL_ERROR;
 80041c2:	2001      	movs	r0, #1
}
 80041c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80041c6:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80041c8:	2400      	movs	r4, #0
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80041ca:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
  hsai->SlotInit.FirstBitOffset  = 0;
  hsai->SlotInit.SlotNumber      = nbslot;
 80041ce:	6703      	str	r3, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80041d0:	f035 0502 	bics.w	r5, r5, #2
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80041d4:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80041d8:	6444      	str	r4, [r0, #68]	; 0x44
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80041da:	bf0c      	ite	eq
 80041dc:	2701      	moveq	r7, #1
 80041de:	4627      	movne	r7, r4
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;

  if (protocol == SAI_PCM_SHORT)
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 80041e0:	2904      	cmp	r1, #4
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80041e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041e6:	6507      	str	r7, [r0, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 1;
 80041e8:	bf14      	ite	ne
 80041ea:	270d      	movne	r7, #13
 80041ec:	2701      	moveq	r7, #1
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80041ee:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80041f0:	65c4      	str	r4, [r0, #92]	; 0x5c
 80041f2:	6587      	str	r7, [r0, #88]	; 0x58
  hsai->SlotInit.FirstBitOffset  = 0;
 80041f4:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80041f6:	6741      	str	r1, [r0, #116]	; 0x74
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80041f8:	e9c0 6518 	strd	r6, r5, [r0, #96]	; 0x60
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
  }

  switch (datasize)
 80041fc:	2a03      	cmp	r2, #3
 80041fe:	d8e0      	bhi.n	80041c2 <HAL_SAI_InitProtocol+0x2e>
 8004200:	e8df f002 	tbb	[pc, r2]
 8004204:	259e9197 	.word	0x259e9197
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004208:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800420a:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800420c:	6703      	str	r3, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800420e:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004212:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004214:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004216:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800421a:	bf08      	it	eq
 800421c:	4626      	moveq	r6, r4
  hsai->SlotInit.FirstBitOffset  = 0;
 800421e:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004220:	f64f 74ff 	movw	r4, #65535	; 0xffff
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004224:	bf18      	it	ne
 8004226:	2601      	movne	r6, #1
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004228:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800422a:	6744      	str	r4, [r0, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 800422c:	f013 0401 	ands.w	r4, r3, #1
 8004230:	6506      	str	r6, [r0, #80]	; 0x50
 8004232:	d1c6      	bne.n	80041c2 <HAL_SAI_InitProtocol+0x2e>
  if (protocol == SAI_I2S_STANDARD)
 8004234:	2900      	cmp	r1, #0
 8004236:	f000 808a 	beq.w	800434e <HAL_SAI_InitProtocol+0x1ba>
 800423a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800423e:	e9c0 5418 	strd	r5, r4, [r0, #96]	; 0x60
  switch (datasize)
 8004242:	2a03      	cmp	r2, #3
 8004244:	d8bd      	bhi.n	80041c2 <HAL_SAI_InitProtocol+0x2e>
 8004246:	e8df f002 	tbb	[pc, r2]
 800424a:	a0b0      	.short	0xa0b0
 800424c:	ba8f      	.short	0xba8f
      hsai->FrameInit.FrameLength = 32U * nbslot;
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
      break;
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800424e:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004250:	21e0      	movs	r1, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004252:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004254:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004256:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004258:	66c2      	str	r2, [r0, #108]	; 0x6c
 800425a:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800425c:	f7fc f8b8 	bl	80003d0 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004260:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004264:	2b01      	cmp	r3, #1
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8004266:	6823      	ldr	r3, [r4, #0]
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004268:	d09c      	beq.n	80041a4 <HAL_SAI_InitProtocol+0x10>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800426a:	4a5a      	ldr	r2, [pc, #360]	; (80043d4 <HAL_SAI_InitProtocol+0x240>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d079      	beq.n	8004364 <HAL_SAI_InitProtocol+0x1d0>
 8004270:	3220      	adds	r2, #32
 8004272:	4293      	cmp	r3, r2
 8004274:	d076      	beq.n	8004364 <HAL_SAI_InitProtocol+0x1d0>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004276:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800427a:	4293      	cmp	r3, r2
 800427c:	f000 819b 	beq.w	80045b6 <HAL_SAI_InitProtocol+0x422>
 8004280:	3220      	adds	r2, #32
 8004282:	4293      	cmp	r3, r2
 8004284:	f000 8197 	beq.w	80045b6 <HAL_SAI_InitProtocol+0x422>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004288:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800428c:	4293      	cmp	r3, r2
 800428e:	f000 81c3 	beq.w	8004618 <HAL_SAI_InitProtocol+0x484>
 8004292:	3220      	adds	r2, #32
 8004294:	4293      	cmp	r3, r2
 8004296:	f000 81bf 	beq.w	8004618 <HAL_SAI_InitProtocol+0x484>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800429a:	4a4f      	ldr	r2, [pc, #316]	; (80043d8 <HAL_SAI_InitProtocol+0x244>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d002      	beq.n	80042a6 <HAL_SAI_InitProtocol+0x112>
 80042a0:	3220      	adds	r2, #32
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d18d      	bne.n	80041c2 <HAL_SAI_InitProtocol+0x2e>
    SaiBaseAddress = SAI4;
 80042a6:	4d4d      	ldr	r5, [pc, #308]	; (80043dc <HAL_SAI_InitProtocol+0x248>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 80042a8:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
 80042ac:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80042b0:	2a00      	cmp	r2, #0
 80042b2:	f000 8179 	beq.w	80045a8 <HAL_SAI_InitProtocol+0x414>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80042b6:	4a4a      	ldr	r2, [pc, #296]	; (80043e0 <HAL_SAI_InitProtocol+0x24c>)
 80042b8:	484a      	ldr	r0, [pc, #296]	; (80043e4 <HAL_SAI_InitProtocol+0x250>)
 80042ba:	6812      	ldr	r2, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80042bc:	6819      	ldr	r1, [r3, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80042be:	fba0 0202 	umull	r0, r2, r0, r2
  __HAL_SAI_DISABLE(hsai);
 80042c2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80042c6:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 80042c8:	6019      	str	r1, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80042ca:	0093      	lsls	r3, r2, #2
 80042cc:	2a00      	cmp	r2, #0
 80042ce:	f000 8163 	beq.w	8004598 <HAL_SAI_InitProtocol+0x404>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80042d2:	6821      	ldr	r1, [r4, #0]
    count--;
 80042d4:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80042d6:	680a      	ldr	r2, [r1, #0]
 80042d8:	03d7      	lsls	r7, r2, #15
 80042da:	d506      	bpl.n	80042ea <HAL_SAI_InitProtocol+0x156>
    if (count == 0U)
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 815b 	beq.w	8004598 <HAL_SAI_InitProtocol+0x404>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80042e2:	680a      	ldr	r2, [r1, #0]
    count--;
 80042e4:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80042e6:	03d2      	lsls	r2, r2, #15
 80042e8:	d4f8      	bmi.n	80042dc <HAL_SAI_InitProtocol+0x148>
  switch (hsai->Init.SynchroExt)
 80042ea:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 80042ec:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 80042ee:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 80042f0:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 80042f4:	f000 818b 	beq.w	800460e <HAL_SAI_InitProtocol+0x47a>
 80042f8:	4293      	cmp	r3, r2
 80042fa:	bf15      	itete	ne
 80042fc:	4610      	movne	r0, r2
 80042fe:	2123      	moveq	r1, #35	; 0x23
 8004300:	2103      	movne	r1, #3
 8004302:	2022      	moveq	r0, #34	; 0x22
 8004304:	bf0b      	itete	eq
 8004306:	2621      	moveq	r6, #33	; 0x21
 8004308:	2601      	movne	r6, #1
 800430a:	2220      	moveq	r2, #32
 800430c:	2200      	movne	r2, #0
  switch (hsai->Init.Synchro)
 800430e:	68a3      	ldr	r3, [r4, #8]
 8004310:	3b01      	subs	r3, #1
 8004312:	2b04      	cmp	r3, #4
 8004314:	f200 813e 	bhi.w	8004594 <HAL_SAI_InitProtocol+0x400>
 8004318:	e8df f013 	tbh	[pc, r3, lsl #1]
 800431c:	00690135 	.word	0x00690135
 8004320:	00680138 	.word	0x00680138
 8004324:	018e      	.short	0x018e
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004326:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004328:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800432a:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800432c:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800432e:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004330:	e793      	b.n	800425a <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004332:	011b      	lsls	r3, r3, #4
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004334:	2180      	movs	r1, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004336:	2240      	movs	r2, #64	; 0x40
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004338:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800433a:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800433c:	66c2      	str	r2, [r0, #108]	; 0x6c
 800433e:	e78c      	b.n	800425a <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004340:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004342:	21c0      	movs	r1, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004344:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004346:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004348:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800434a:	66c2      	str	r2, [r0, #108]	; 0x6c
 800434c:	e785      	b.n	800425a <HAL_SAI_InitProtocol+0xc6>
 800434e:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004352:	e9c0 1418 	strd	r1, r4, [r0, #96]	; 0x60
  switch (datasize)
 8004356:	2a03      	cmp	r2, #3
 8004358:	f63f af33 	bhi.w	80041c2 <HAL_SAI_InitProtocol+0x2e>
 800435c:	e8df f002 	tbb	[pc, r2]
 8004360:	2f041525 	.word	0x2f041525
    SaiBaseAddress = SAI1;
 8004364:	4d20      	ldr	r5, [pc, #128]	; (80043e8 <HAL_SAI_InitProtocol+0x254>)
 8004366:	e79f      	b.n	80042a8 <HAL_SAI_InitProtocol+0x114>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004368:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800436a:	25c0      	movs	r5, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800436c:	2480      	movs	r4, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800436e:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004370:	ea4f 1283 	mov.w	r2, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004374:	6485      	str	r5, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004376:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800437a:	66c4      	str	r4, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800437c:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004380:	f47f af6b 	bne.w	800425a <HAL_SAI_InitProtocol+0xc6>
      hsai->SlotInit.FirstBitOffset = 8;
 8004384:	2308      	movs	r3, #8
 8004386:	6683      	str	r3, [r0, #104]	; 0x68
 8004388:	e767      	b.n	800425a <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800438a:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800438c:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800438e:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004390:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004394:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004396:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800439a:	66c2      	str	r2, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800439c:	e9c0 4315 	strd	r4, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80043a0:	f47f af5b 	bne.w	800425a <HAL_SAI_InitProtocol+0xc6>
      hsai->SlotInit.FirstBitOffset = 16;
 80043a4:	2310      	movs	r3, #16
 80043a6:	6683      	str	r3, [r0, #104]	; 0x68
 80043a8:	e757      	b.n	800425a <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80043aa:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80043ac:	2480      	movs	r4, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80043ae:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80043b0:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80043b2:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80043b4:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80043b6:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80043b8:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
 80043bc:	e74d      	b.n	800425a <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80043be:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80043c0:	24e0      	movs	r4, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80043c2:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80043c4:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80043c6:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80043c8:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80043ca:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80043cc:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
 80043d0:	e743      	b.n	800425a <HAL_SAI_InitProtocol+0xc6>
 80043d2:	bf00      	nop
 80043d4:	40015804 	.word	0x40015804
 80043d8:	58005404 	.word	0x58005404
 80043dc:	58005400 	.word	0x58005400
 80043e0:	200003a4 	.word	0x200003a4
 80043e4:	95cbec1b 	.word	0x95cbec1b
 80043e8:	40015800 	.word	0x40015800
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80043ec:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80043ee:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 80043f2:	602a      	str	r2, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80043f4:	6a23      	ldr	r3, [r4, #32]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d04b      	beq.n	8004492 <HAL_SAI_InitProtocol+0x2fe>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	4aa1      	ldr	r2, [pc, #644]	; (8004684 <HAL_SAI_InitProtocol+0x4f0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	f000 812a 	beq.w	8004658 <HAL_SAI_InitProtocol+0x4c4>
 8004404:	48a0      	ldr	r0, [pc, #640]	; (8004688 <HAL_SAI_InitProtocol+0x4f4>)
 8004406:	1a18      	subs	r0, r3, r0
 8004408:	fab0 f080 	clz	r0, r0
 800440c:	0940      	lsrs	r0, r0, #5
 800440e:	2800      	cmp	r0, #0
 8004410:	f040 8122 	bne.w	8004658 <HAL_SAI_InitProtocol+0x4c4>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004414:	4a9d      	ldr	r2, [pc, #628]	; (800468c <HAL_SAI_InitProtocol+0x4f8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	f000 8118 	beq.w	800464c <HAL_SAI_InitProtocol+0x4b8>
 800441c:	3220      	adds	r2, #32
 800441e:	4293      	cmp	r3, r2
 8004420:	f000 8114 	beq.w	800464c <HAL_SAI_InitProtocol+0x4b8>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004424:	4a9a      	ldr	r2, [pc, #616]	; (8004690 <HAL_SAI_InitProtocol+0x4fc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	f000 810a 	beq.w	8004640 <HAL_SAI_InitProtocol+0x4ac>
 800442c:	3220      	adds	r2, #32
 800442e:	4293      	cmp	r3, r2
 8004430:	f000 8106 	beq.w	8004640 <HAL_SAI_InitProtocol+0x4ac>
    if (hsai->Instance == SAI4_Block_A)
 8004434:	4a97      	ldr	r2, [pc, #604]	; (8004694 <HAL_SAI_InitProtocol+0x500>)
 8004436:	4293      	cmp	r3, r2
 8004438:	f000 8119 	beq.w	800466e <HAL_SAI_InitProtocol+0x4da>
    if (hsai->Instance == SAI4_Block_B)
 800443c:	4a96      	ldr	r2, [pc, #600]	; (8004698 <HAL_SAI_InitProtocol+0x504>)
 800443e:	4293      	cmp	r3, r2
 8004440:	f000 8110 	beq.w	8004664 <HAL_SAI_InitProtocol+0x4d0>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004444:	69a3      	ldr	r3, [r4, #24]
 8004446:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004448:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800444c:	f000 80e6 	beq.w	800461c <HAL_SAI_InitProtocol+0x488>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004450:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004452:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004456:	6a22      	ldr	r2, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004458:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800445c:	ea4f 0340 	mov.w	r3, r0, lsl #1
 8004460:	ea4f 2002 	mov.w	r0, r2, lsl #8
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004464:	bf14      	ite	ne
 8004466:	2201      	movne	r2, #1
 8004468:	2202      	moveq	r2, #2
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800446a:	fb02 f200 	mul.w	r2, r2, r0
 800446e:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 8004472:	4a8a      	ldr	r2, [pc, #552]	; (800469c <HAL_SAI_InitProtocol+0x508>)
 8004474:	fba2 0203 	umull	r0, r2, r2, r3
 8004478:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 800447a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800447e:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8004482:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 8004484:	bf08      	it	eq
 8004486:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004488:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 800448a:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800448c:	d101      	bne.n	8004492 <HAL_SAI_InitProtocol+0x2fe>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800448e:	0852      	lsrs	r2, r2, #1
 8004490:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004492:	6863      	ldr	r3, [r4, #4]
 8004494:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004496:	f033 0702 	bics.w	r7, r3, #2
 800449a:	f040 80b2 	bne.w	8004602 <HAL_SAI_InitProtocol+0x46e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800449e:	2a01      	cmp	r2, #1
 80044a0:	bf18      	it	ne
 80044a2:	f44f 7700 	movne.w	r7, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80044a6:	f7fb ff93 	bl	80003d0 <HAL_GetREVID>
 80044aa:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80044ae:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80044b0:	f0c0 8096 	bcc.w	80045e0 <HAL_SAI_InitProtocol+0x44c>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80044b4:	6811      	ldr	r1, [r2, #0]
 80044b6:	4b7a      	ldr	r3, [pc, #488]	; (80046a0 <HAL_SAI_InitProtocol+0x50c>)
 80044b8:	400b      	ands	r3, r1
 80044ba:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80044bc:	6863      	ldr	r3, [r4, #4]
 80044be:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80044c0:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80044c8:	4313      	orrs	r3, r2
 80044ca:	6962      	ldr	r2, [r4, #20]
 80044cc:	4303      	orrs	r3, r0
 80044ce:	69a0      	ldr	r0, [r4, #24]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80044d4:	4313      	orrs	r3, r2
 80044d6:	6922      	ldr	r2, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80044d8:	4303      	orrs	r3, r0
 80044da:	6820      	ldr	r0, [r4, #0]
 80044dc:	430b      	orrs	r3, r1
 80044de:	6801      	ldr	r1, [r0, #0]
 80044e0:	4313      	orrs	r3, r2
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80044e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80044e4:	430b      	orrs	r3, r1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80044e6:	f24f 0120 	movw	r1, #61472	; 0xf020
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80044ea:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80044ee:	4333      	orrs	r3, r6
 80044f0:	433b      	orrs	r3, r7
 80044f2:	6003      	str	r3, [r0, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80044f4:	6826      	ldr	r6, [r4, #0]
 80044f6:	4b6b      	ldr	r3, [pc, #428]	; (80046a4 <HAL_SAI_InitProtocol+0x510>)
 80044f8:	6872      	ldr	r2, [r6, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80044fa:	486b      	ldr	r0, [pc, #428]	; (80046a8 <HAL_SAI_InitProtocol+0x514>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80044fc:	4013      	ands	r3, r2
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80044fe:	4a61      	ldr	r2, [pc, #388]	; (8004684 <HAL_SAI_InitProtocol+0x4f0>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004500:	6073      	str	r3, [r6, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004502:	69e3      	ldr	r3, [r4, #28]
 8004504:	e9d4 760c 	ldrd	r7, r6, [r4, #48]	; 0x30
 8004508:	433b      	orrs	r3, r7
 800450a:	6827      	ldr	r7, [r4, #0]
 800450c:	4333      	orrs	r3, r6
 800450e:	687e      	ldr	r6, [r7, #4]
 8004510:	4333      	orrs	r3, r6
 8004512:	607b      	str	r3, [r7, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	689e      	ldr	r6, [r3, #8]
 8004518:	4030      	ands	r0, r6
 800451a:	6098      	str	r0, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800451c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800451e:	6827      	ldr	r7, [r4, #0]
 8004520:	e9d4 6017 	ldrd	r6, r0, [r4, #92]	; 0x5c
 8004524:	4333      	orrs	r3, r6
 8004526:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8004528:	4303      	orrs	r3, r0
 800452a:	68b8      	ldr	r0, [r7, #8]
 800452c:	3e01      	subs	r6, #1
 800452e:	4303      	orrs	r3, r0
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004530:	6da0      	ldr	r0, [r4, #88]	; 0x58
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004532:	4333      	orrs	r3, r6
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004534:	3801      	subs	r0, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004536:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800453a:	60bb      	str	r3, [r7, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800453c:	6820      	ldr	r0, [r4, #0]
 800453e:	68c3      	ldr	r3, [r0, #12]
 8004540:	400b      	ands	r3, r1
 8004542:	60c3      	str	r3, [r0, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004544:	6820      	ldr	r0, [r4, #0]
 8004546:	e9d4 361a 	ldrd	r3, r6, [r4, #104]	; 0x68
 800454a:	68c1      	ldr	r1, [r0, #12]
 800454c:	4333      	orrs	r3, r6
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800454e:	6f66      	ldr	r6, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004550:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004552:	6f21      	ldr	r1, [r4, #112]	; 0x70
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004554:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004558:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800455a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800455e:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	4293      	cmp	r3, r2
 8004564:	d029      	beq.n	80045ba <HAL_SAI_InitProtocol+0x426>
 8004566:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800456a:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800456e:	4293      	cmp	r3, r2
 8004570:	d023      	beq.n	80045ba <HAL_SAI_InitProtocol+0x426>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004572:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8004574:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004576:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 800457a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hsai);
 800457c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 8004580:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
}
 8004584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004586:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800458a:	e732      	b.n	80043f2 <HAL_SAI_InitProtocol+0x25e>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800458c:	4632      	mov	r2, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800458e:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8004592:	e72e      	b.n	80043f2 <HAL_SAI_InitProtocol+0x25e>
      syncen_bits = 0;
 8004594:	2600      	movs	r6, #0
 8004596:	e72c      	b.n	80043f2 <HAL_SAI_InitProtocol+0x25e>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004598:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 800459c:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800459e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 80045a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hsai->Lock = HAL_UNLOCKED;
 80045a8:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 80045ac:	4620      	mov	r0, r4
 80045ae:	f004 f967 	bl	8008880 <HAL_SAI_MspInit>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	e67f      	b.n	80042b6 <HAL_SAI_InitProtocol+0x122>
    SaiBaseAddress = SAI2;
 80045b6:	4d3d      	ldr	r5, [pc, #244]	; (80046ac <HAL_SAI_InitProtocol+0x518>)
 80045b8:	e676      	b.n	80042a8 <HAL_SAI_InitProtocol+0x114>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80045ba:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80045c2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d1d3      	bne.n	8004572 <HAL_SAI_InitProtocol+0x3de>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80045ca:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80045ce:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80045d0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80045d4:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80045d6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	646b      	str	r3, [r5, #68]	; 0x44
 80045de:	e7c8      	b.n	8004572 <HAL_SAI_InitProtocol+0x3de>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80045e0:	6811      	ldr	r1, [r2, #0]
 80045e2:	4b33      	ldr	r3, [pc, #204]	; (80046b0 <HAL_SAI_InitProtocol+0x51c>)
 80045e4:	400b      	ands	r3, r1
 80045e6:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80045e8:	6863      	ldr	r3, [r4, #4]
 80045ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80045ec:	e9d4 2011 	ldrd	r2, r0, [r4, #68]	; 0x44
 80045f0:	4313      	orrs	r3, r2
 80045f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80045f4:	4303      	orrs	r3, r0
 80045f6:	6960      	ldr	r0, [r4, #20]
 80045f8:	430b      	orrs	r3, r1
 80045fa:	69a1      	ldr	r1, [r4, #24]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004600:	e76a      	b.n	80044d8 <HAL_SAI_InitProtocol+0x344>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004602:	2a01      	cmp	r2, #1
 8004604:	bf14      	ite	ne
 8004606:	2700      	movne	r7, #0
 8004608:	f44f 7700 	moveq.w	r7, #512	; 0x200
 800460c:	e74b      	b.n	80044a6 <HAL_SAI_InitProtocol+0x312>
  switch (hsai->Init.SynchroExt)
 800460e:	2113      	movs	r1, #19
 8004610:	2012      	movs	r0, #18
 8004612:	2611      	movs	r6, #17
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004614:	2210      	movs	r2, #16
 8004616:	e67a      	b.n	800430e <HAL_SAI_InitProtocol+0x17a>
    SaiBaseAddress = SAI3;
 8004618:	4d26      	ldr	r5, [pc, #152]	; (80046b4 <HAL_SAI_InitProtocol+0x520>)
 800461a:	e645      	b.n	80042a8 <HAL_SAI_InitProtocol+0x114>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800461c:	2904      	cmp	r1, #4
 800461e:	d02c      	beq.n	800467a <HAL_SAI_InitProtocol+0x4e6>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004620:	2908      	cmp	r1, #8
 8004622:	d02c      	beq.n	800467e <HAL_SAI_InitProtocol+0x4ea>
        tmpframelength = hsai->FrameInit.FrameLength;
 8004624:	6d67      	ldr	r7, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004626:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800462a:	6a22      	ldr	r2, [r4, #32]
 800462c:	0043      	lsls	r3, r0, #1
 800462e:	fb02 f207 	mul.w	r2, r2, r7
 8004632:	fbb3 f3f2 	udiv	r3, r3, r2
 8004636:	e71c      	b.n	8004472 <HAL_SAI_InitProtocol+0x2de>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8004638:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800463a:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800463e:	e6d8      	b.n	80043f2 <HAL_SAI_InitProtocol+0x25e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8004640:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004644:	f7ff fc2c 	bl	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	e6f3      	b.n	8004434 <HAL_SAI_InitProtocol+0x2a0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800464c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004650:	f7ff fc26 	bl	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	e6e5      	b.n	8004424 <HAL_SAI_InitProtocol+0x290>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004658:	f44f 7080 	mov.w	r0, #256	; 0x100
 800465c:	f7ff fc20 	bl	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	e6d7      	b.n	8004414 <HAL_SAI_InitProtocol+0x280>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8004664:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004668:	f7ff fc1a 	bl	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq>
 800466c:	e6ea      	b.n	8004444 <HAL_SAI_InitProtocol+0x2b0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800466e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004672:	f7ff fc15 	bl	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	e6e0      	b.n	800443c <HAL_SAI_InitProtocol+0x2a8>
        tmpframelength = 64U;
 800467a:	2740      	movs	r7, #64	; 0x40
 800467c:	e7d3      	b.n	8004626 <HAL_SAI_InitProtocol+0x492>
        tmpframelength = 256U;
 800467e:	f44f 7780 	mov.w	r7, #256	; 0x100
 8004682:	e7d0      	b.n	8004626 <HAL_SAI_InitProtocol+0x492>
 8004684:	40015804 	.word	0x40015804
 8004688:	40015824 	.word	0x40015824
 800468c:	40015c04 	.word	0x40015c04
 8004690:	40016004 	.word	0x40016004
 8004694:	58005404 	.word	0x58005404
 8004698:	58005424 	.word	0x58005424
 800469c:	cccccccd 	.word	0xcccccccd
 80046a0:	f005c010 	.word	0xf005c010
 80046a4:	ffff1ff0 	.word	0xffff1ff0
 80046a8:	fff88000 	.word	0xfff88000
 80046ac:	40015c00 	.word	0x40015c00
 80046b0:	f805c010 	.word	0xf805c010
 80046b4:	40016000 	.word	0x40016000

080046b8 <HAL_SAI_Transmit_DMA>:
{
 80046b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046bc:	460f      	mov	r7, r1
 80046be:	4604      	mov	r4, r0
 80046c0:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80046c2:	f7fb fe6d 	bl	80003a0 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 80046c6:	2f00      	cmp	r7, #0
 80046c8:	d064      	beq.n	8004794 <HAL_SAI_Transmit_DMA+0xdc>
 80046ca:	fab8 f588 	clz	r5, r8
 80046ce:	096d      	lsrs	r5, r5, #5
 80046d0:	2d00      	cmp	r5, #0
 80046d2:	d15f      	bne.n	8004794 <HAL_SAI_Transmit_DMA+0xdc>
  if (hsai->State == HAL_SAI_STATE_READY)
 80046d4:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 80046d8:	b2f6      	uxtb	r6, r6
 80046da:	2e01      	cmp	r6, #1
 80046dc:	d156      	bne.n	800478c <HAL_SAI_Transmit_DMA+0xd4>
    __HAL_LOCK(hsai);
 80046de:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d052      	beq.n	800478c <HAL_SAI_Transmit_DMA+0xd4>
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80046e6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80046ea:	2112      	movs	r1, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80046ec:	4a37      	ldr	r2, [pc, #220]	; (80047cc <HAL_SAI_Transmit_DMA+0x114>)
 80046ee:	4681      	mov	r9, r0
    hsai->pBuffPtr = pData;
 80046f0:	67a7      	str	r7, [r4, #120]	; 0x78
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80046f2:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferSize = Size;
 80046f6:	f8a4 807c 	strh.w	r8, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80046fa:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    __HAL_LOCK(hsai);
 80046fe:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->XferCount = Size;
 8004702:	f8a4 807e 	strh.w	r8, [r4, #126]	; 0x7e
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004706:	4932      	ldr	r1, [pc, #200]	; (80047d0 <HAL_SAI_Transmit_DMA+0x118>)
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800470a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800470e:	4a31      	ldr	r2, [pc, #196]	; (80047d4 <HAL_SAI_Transmit_DMA+0x11c>)
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004710:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004712:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004716:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8004718:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800471c:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8004724:	321c      	adds	r2, #28
 8004726:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004728:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800472c:	f7fc fa6e 	bl	8000c0c <HAL_DMA_Start_IT>
 8004730:	4607      	mov	r7, r0
 8004732:	2800      	cmp	r0, #0
 8004734:	d132      	bne.n	800479c <HAL_SAI_Transmit_DMA+0xe4>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004736:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004738:	6863      	ldr	r3, [r4, #4]
 800473a:	2a08      	cmp	r2, #8
 800473c:	d03c      	beq.n	80047b8 <HAL_SAI_Transmit_DMA+0x100>
 800473e:	2005      	movs	r0, #5
 8004740:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004742:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004744:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8004746:	2b01      	cmp	r3, #1
 8004748:	bf88      	it	hi
 800474a:	4602      	movhi	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800474c:	690b      	ldr	r3, [r1, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004752:	6822      	ldr	r2, [r4, #0]
 8004754:	6813      	ldr	r3, [r2, #0]
 8004756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800475a:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800475c:	e006      	b.n	800476c <HAL_SAI_Transmit_DMA+0xb4>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800475e:	f7fb fe1f 	bl	80003a0 <HAL_GetTick>
 8004762:	eba0 0009 	sub.w	r0, r0, r9
 8004766:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800476a:	d81b      	bhi.n	80047a4 <HAL_SAI_Transmit_DMA+0xec>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800476c:	6822      	ldr	r2, [r4, #0]
 800476e:	6955      	ldr	r5, [r2, #20]
 8004770:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8004774:	d0f3      	beq.n	800475e <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	03db      	lsls	r3, r3, #15
 800477a:	d403      	bmi.n	8004784 <HAL_SAI_Transmit_DMA+0xcc>
      __HAL_SAI_ENABLE(hsai);
 800477c:	6813      	ldr	r3, [r2, #0]
 800477e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004782:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8004784:	2300      	movs	r3, #0
 8004786:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 800478a:	e000      	b.n	800478e <HAL_SAI_Transmit_DMA+0xd6>
    return HAL_BUSY;
 800478c:	2702      	movs	r7, #2
}
 800478e:	4638      	mov	r0, r7
 8004790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 8004794:	2701      	movs	r7, #1
}
 8004796:	4638      	mov	r0, r7
 8004798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_UNLOCK(hsai);
 800479c:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 80047a0:	4637      	mov	r7, r6
 80047a2:	e7f4      	b.n	800478e <HAL_SAI_Transmit_DMA+0xd6>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80047a4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 80047a8:	2703      	movs	r7, #3
        __HAL_UNLOCK(hsai);
 80047aa:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80047ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 80047b6:	e7ea      	b.n	800478e <HAL_SAI_Transmit_DMA+0xd6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80047b8:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80047bc:	2a01      	cmp	r2, #1
 80047be:	bf0b      	itete	eq
 80047c0:	2015      	moveq	r0, #21
 80047c2:	2005      	movne	r0, #5
 80047c4:	2271      	moveq	r2, #113	; 0x71
 80047c6:	2261      	movne	r2, #97	; 0x61
 80047c8:	e7bb      	b.n	8004742 <HAL_SAI_Transmit_DMA+0x8a>
 80047ca:	bf00      	nop
 80047cc:	0800491d 	.word	0x0800491d
 80047d0:	080048b9 	.word	0x080048b9
 80047d4:	08004999 	.word	0x08004999

080047d8 <HAL_SAI_Receive_DMA>:
  if ((pData == NULL) || (Size == 0U))
 80047d8:	2900      	cmp	r1, #0
 80047da:	d057      	beq.n	800488c <HAL_SAI_Receive_DMA+0xb4>
{
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0U))
 80047de:	fab2 f582 	clz	r5, r2
 80047e2:	096d      	lsrs	r5, r5, #5
 80047e4:	2d00      	cmp	r5, #0
 80047e6:	d14f      	bne.n	8004888 <HAL_SAI_Receive_DMA+0xb0>
  if (hsai->State == HAL_SAI_STATE_READY)
 80047e8:	f890 6091 	ldrb.w	r6, [r0, #145]	; 0x91
 80047ec:	b2f6      	uxtb	r6, r6
 80047ee:	2e01      	cmp	r6, #1
 80047f0:	d148      	bne.n	8004884 <HAL_SAI_Receive_DMA+0xac>
    __HAL_LOCK(hsai);
 80047f2:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d044      	beq.n	8004884 <HAL_SAI_Receive_DMA+0xac>
 80047fa:	4604      	mov	r4, r0
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80047fc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004800:	2722      	movs	r7, #34	; 0x22
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004802:	482a      	ldr	r0, [pc, #168]	; (80048ac <HAL_SAI_Receive_DMA+0xd4>)
    hsai->pBuffPtr = pData;
 8004804:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8004806:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800480a:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferCount = Size;
 800480e:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
    __HAL_LOCK(hsai);
 8004812:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004816:	f884 7091 	strb.w	r7, [r4, #145]	; 0x91
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800481a:	4925      	ldr	r1, [pc, #148]	; (80048b0 <HAL_SAI_Receive_DMA+0xd8>)
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800481c:	6418      	str	r0, [r3, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800481e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004822:	4a24      	ldr	r2, [pc, #144]	; (80048b4 <HAL_SAI_Receive_DMA+0xdc>)
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004824:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004826:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800482a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 800482c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004830:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004832:	6821      	ldr	r1, [r4, #0]
 8004834:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8004838:	311c      	adds	r1, #28
 800483a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800483c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004840:	f7fc f9e4 	bl	8000c0c <HAL_DMA_Start_IT>
 8004844:	bb20      	cbnz	r0, 8004890 <HAL_SAI_Receive_DMA+0xb8>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004846:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004848:	6863      	ldr	r3, [r4, #4]
 800484a:	2a08      	cmp	r2, #8
 800484c:	d024      	beq.n	8004898 <HAL_SAI_Receive_DMA+0xc0>
 800484e:	2505      	movs	r5, #5
 8004850:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004852:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004854:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8004856:	2b01      	cmp	r3, #1
 8004858:	bf88      	it	hi
 800485a:	462a      	movhi	r2, r5
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800485c:	690b      	ldr	r3, [r1, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	6813      	ldr	r3, [r2, #0]
 8004866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486a:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	03d2      	lsls	r2, r2, #15
 8004872:	d403      	bmi.n	800487c <HAL_SAI_Receive_DMA+0xa4>
      __HAL_SAI_ENABLE(hsai);
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800487a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800487c:	2300      	movs	r3, #0
 800487e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8004882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004884:	2002      	movs	r0, #2
}
 8004886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8004888:	2001      	movs	r0, #1
}
 800488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 800488c:	2001      	movs	r0, #1
}
 800488e:	4770      	bx	lr
      __HAL_UNLOCK(hsai);
 8004890:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8004894:	4630      	mov	r0, r6
}
 8004896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004898:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800489c:	2a01      	cmp	r2, #1
 800489e:	bf0b      	itete	eq
 80048a0:	2515      	moveq	r5, #21
 80048a2:	2505      	movne	r5, #5
 80048a4:	2271      	moveq	r2, #113	; 0x71
 80048a6:	2261      	movne	r2, #97	; 0x61
 80048a8:	e7d3      	b.n	8004852 <HAL_SAI_Receive_DMA+0x7a>
 80048aa:	bf00      	nop
 80048ac:	0800498d 	.word	0x0800498d
 80048b0:	08004929 	.word	0x08004929
 80048b4:	08004999 	.word	0x08004999

080048b8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80048b8:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80048ba:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048bc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80048be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c2:	d01a      	beq.n	80048fa <SAI_DMATxCplt+0x42>
  {
    hsai->XferCount = 0;
 80048c4:	2300      	movs	r3, #0

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80048c6:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 80048c8:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80048cc:	6813      	ldr	r3, [r2, #0]
 80048ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048d2:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80048d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048d6:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80048d8:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80048da:	d011      	beq.n	8004900 <SAI_DMATxCplt+0x48>
 80048dc:	f06f 0261 	mvn.w	r2, #97	; 0x61
 80048e0:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80048e4:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80048e6:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 80048e8:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80048ea:	42a3      	cmp	r3, r4
 80048ec:	bf88      	it	hi
 80048ee:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80048f0:	690b      	ldr	r3, [r1, #16]
 80048f2:	4013      	ands	r3, r2
 80048f4:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 80048f6:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80048fa:	f003 fa1f 	bl	8007d3c <HAL_SAI_TxCpltCallback>
#endif
}
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004900:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004904:	2a01      	cmp	r2, #1
 8004906:	bf0b      	itete	eq
 8004908:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 800490c:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 8004910:	f06f 0515 	mvneq.w	r5, #21
 8004914:	f06f 0505 	mvnne.w	r5, #5
 8004918:	e7e4      	b.n	80048e4 <SAI_DMATxCplt+0x2c>
 800491a:	bf00      	nop

0800491c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800491c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800491e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004920:	f003 fa0e 	bl	8007d40 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8004924:	bd08      	pop	{r3, pc}
 8004926:	bf00      	nop

08004928 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004928:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800492a:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800492c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800492e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004932:	d01a      	beq.n	800496a <SAI_DMARxCplt+0x42>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004934:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8004936:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004938:	6813      	ldr	r3, [r2, #0]
 800493a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800493e:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004940:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
 8004942:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004946:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004948:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800494a:	d011      	beq.n	8004970 <SAI_DMARxCplt+0x48>
 800494c:	f06f 0261 	mvn.w	r2, #97	; 0x61
 8004950:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004954:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004956:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 8004958:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800495a:	42a3      	cmp	r3, r4
 800495c:	bf88      	it	hi
 800495e:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004960:	690b      	ldr	r3, [r1, #16]
 8004962:	4013      	ands	r3, r2
 8004964:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8004966:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800496a:	f003 f9eb 	bl	8007d44 <HAL_SAI_RxCpltCallback>
#endif
}
 800496e:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004970:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004974:	2a01      	cmp	r2, #1
 8004976:	bf0b      	itete	eq
 8004978:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 800497c:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 8004980:	f06f 0515 	mvneq.w	r5, #21
 8004984:	f06f 0505 	mvnne.w	r5, #5
 8004988:	e7e4      	b.n	8004954 <SAI_DMARxCplt+0x2c>
 800498a:	bf00      	nop

0800498c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800498c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800498e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004990:	f003 f9dc 	bl	8007d4c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8004994:	bd08      	pop	{r3, pc}
 8004996:	bf00      	nop

08004998 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004998:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800499a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800499c:	f7fd f95c 	bl	8001c58 <HAL_DMA_GetError>
 80049a0:	2802      	cmp	r0, #2
 80049a2:	d02a      	beq.n	80049fa <SAI_DMAError+0x62>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80049a4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80049a8:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80049aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80049ae:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <SAI_DMAError+0x74>)
 80049b0:	4d17      	ldr	r5, [pc, #92]	; (8004a10 <SAI_DMAError+0x78>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80049b2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80049b6:	680b      	ldr	r3, [r1, #0]
 80049b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049bc:	600b      	str	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80049be:	6812      	ldr	r2, [r2, #0]
  __HAL_SAI_DISABLE(hsai);
 80049c0:	6820      	ldr	r0, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80049c2:	fba5 3202 	umull	r3, r2, r5, r2
  __HAL_SAI_DISABLE(hsai);
 80049c6:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80049c8:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 80049ca:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    if (count == 0U)
 80049ce:	0093      	lsls	r3, r2, #2
  __HAL_SAI_DISABLE(hsai);
 80049d0:	6001      	str	r1, [r0, #0]
    if (count == 0U)
 80049d2:	b19a      	cbz	r2, 80049fc <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80049d4:	6821      	ldr	r1, [r4, #0]
    count--;
 80049d6:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80049d8:	680a      	ldr	r2, [r1, #0]
 80049da:	03d0      	lsls	r0, r2, #15
 80049dc:	d504      	bpl.n	80049e8 <SAI_DMAError+0x50>
    if (count == 0U)
 80049de:	b16b      	cbz	r3, 80049fc <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80049e0:	680a      	ldr	r2, [r1, #0]
    count--;
 80049e2:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80049e4:	03d2      	lsls	r2, r2, #15
 80049e6:	d4fa      	bmi.n	80049de <SAI_DMAError+0x46>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80049e8:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80049ea:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80049ec:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 80049ee:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 80049f2:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 80049f6:	f003 f99f 	bl	8007d38 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80049fc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a04:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8004a08:	e7ee      	b.n	80049e8 <SAI_DMAError+0x50>
 8004a0a:	bf00      	nop
 8004a0c:	200003a4 	.word	0x200003a4
 8004a10:	95cbec1b 	.word	0x95cbec1b

08004a14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a18:	4605      	mov	r5, r0
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004a1e:	f7fb fcbf 	bl	80003a0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004a22:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8004a24:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004a26:	6828      	ldr	r0, [r5, #0]
 8004a28:	f001 fd42 	bl	80064b0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	b118      	cbz	r0, 8004a38 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8004a30:	4620      	mov	r0, r4
 8004a32:	b007      	add	sp, #28
 8004a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004a38:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8004a3a:	6828      	ldr	r0, [r5, #0]
 8004a3c:	0409      	lsls	r1, r1, #16
 8004a3e:	f001 ffa3 	bl	8006988 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a42:	4604      	mov	r4, r0
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d1f3      	bne.n	8004a30 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 8U;
 8004a4c:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004a4e:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004a50:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a52:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004a54:	2202      	movs	r2, #2
  config.DataLength    = 8U;
 8004a56:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004a58:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004a5a:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004a5c:	4669      	mov	r1, sp
 8004a5e:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004a60:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004a62:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004a64:	f001 fd0e 	bl	8006484 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004a68:	6828      	ldr	r0, [r5, #0]
 8004a6a:	f002 f849 	bl	8006b00 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a6e:	4604      	mov	r4, r0
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d1dd      	bne.n	8004a30 <SD_FindSCR+0x1c>
  uint32_t index = 0U;
 8004a74:	4681      	mov	r9, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004a76:	4683      	mov	fp, r0
 8004a78:	4682      	mov	sl, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004a7a:	f240 582a 	movw	r8, #1322	; 0x52a
 8004a7e:	e004      	b.n	8004a8a <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004a80:	f7fb fc8e 	bl	80003a0 <HAL_GetTick>
 8004a84:	1b80      	subs	r0, r0, r6
 8004a86:	3001      	adds	r0, #1
 8004a88:	d025      	beq.n	8004ad6 <SD_FindSCR+0xc2>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004a8a:	6828      	ldr	r0, [r5, #0]
 8004a8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a8e:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8004a92:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004a94:	d10e      	bne.n	8004ab4 <SD_FindSCR+0xa0>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8004a96:	031b      	lsls	r3, r3, #12
 8004a98:	d4f2      	bmi.n	8004a80 <SD_FindSCR+0x6c>
 8004a9a:	f1b9 0f00 	cmp.w	r9, #0
 8004a9e:	d1ef      	bne.n	8004a80 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004aa0:	f001 fcd6 	bl	8006450 <SDMMC_ReadFIFO>
 8004aa4:	4682      	mov	sl, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004aa6:	6828      	ldr	r0, [r5, #0]
      index++;
 8004aa8:	f04f 0901 	mov.w	r9, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004aac:	f001 fcd0 	bl	8006450 <SDMMC_ReadFIFO>
 8004ab0:	4683      	mov	fp, r0
 8004ab2:	e7e5      	b.n	8004a80 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004ab4:	0719      	lsls	r1, r3, #28
 8004ab6:	d411      	bmi.n	8004adc <SD_FindSCR+0xc8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004ab8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004aba:	079a      	lsls	r2, r3, #30
 8004abc:	d411      	bmi.n	8004ae2 <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004abe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ac0:	069b      	lsls	r3, r3, #26
 8004ac2:	d411      	bmi.n	8004ae8 <SD_FindSCR+0xd4>
 8004ac4:	fa9b f28b 	rev.w	r2, fp
 8004ac8:	fa9a f38a 	rev.w	r3, sl
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004acc:	4908      	ldr	r1, [pc, #32]	; (8004af0 <SD_FindSCR+0xdc>)
 8004ace:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ad0:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8004ad4:	e7ac      	b.n	8004a30 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8004ad6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004ada:	e7a9      	b.n	8004a30 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004adc:	2408      	movs	r4, #8
 8004ade:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004ae0:	e7a6      	b.n	8004a30 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004ae2:	2402      	movs	r4, #2
 8004ae4:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ae6:	e7a3      	b.n	8004a30 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004ae8:	2420      	movs	r4, #32
 8004aea:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8004aec:	e7a0      	b.n	8004a30 <SD_FindSCR+0x1c>
 8004aee:	bf00      	nop
 8004af0:	18000f3a 	.word	0x18000f3a

08004af4 <HAL_SD_ReadBlocks>:
{
 8004af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af8:	460d      	mov	r5, r1
 8004afa:	b086      	sub	sp, #24
 8004afc:	4604      	mov	r4, r0
 8004afe:	4690      	mov	r8, r2
 8004b00:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8004b02:	f7fb fc4d 	bl	80003a0 <HAL_GetTick>
  if(NULL == pData)
 8004b06:	2d00      	cmp	r5, #0
 8004b08:	d070      	beq.n	8004bec <HAL_SD_ReadBlocks+0xf8>
 8004b0a:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8004b0c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8004b10:	b2c0      	uxtb	r0, r0
 8004b12:	2801      	cmp	r0, #1
 8004b14:	d007      	beq.n	8004b26 <HAL_SD_ReadBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8004b18:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004b1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b1e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004b20:	b006      	add	sp, #24
 8004b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004b26:	eb08 0306 	add.w	r3, r8, r6
 8004b2a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b2c:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004b2e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b30:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004b32:	d863      	bhi.n	8004bfc <HAL_SD_ReadBlocks+0x108>
    hsd->Instance->DCTRL = 0U;
 8004b34:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8004b36:	2203      	movs	r2, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004b38:	f04f 0902 	mov.w	r9, #2
    hsd->State = HAL_SD_STATE_BUSY;
 8004b3c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004b40:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 8004b42:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004b44:	0271      	lsls	r1, r6, #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004b46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004b48:	9101      	str	r1, [sp, #4]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004b4a:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004b4c:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004b52:	6820      	ldr	r0, [r4, #0]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b54:	9300      	str	r3, [sp, #0]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004b56:	f04f 0300 	mov.w	r3, #0
      add *= 512U;
 8004b5a:	bf18      	it	ne
 8004b5c:	ea4f 2848 	movne.w	r8, r8, lsl #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004b60:	9202      	str	r2, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004b62:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004b64:	e9cd 9303 	strd	r9, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004b68:	f001 fc8c 	bl	8006484 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004b6c:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 8004b6e:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004b70:	68d3      	ldr	r3, [r2, #12]
 8004b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b76:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8004b78:	d953      	bls.n	8004c22 <HAL_SD_ReadBlocks+0x12e>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004b7a:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004b7e:	4641      	mov	r1, r8
 8004b80:	6820      	ldr	r0, [r4, #0]
 8004b82:	f001 fd1d 	bl	80065c0 <SDMMC_CmdReadMultiBlock>
 8004b86:	4603      	mov	r3, r0
 8004b88:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d13d      	bne.n	8004c0a <HAL_SD_ReadBlocks+0x116>
    dataremaining = config.DataLength;
 8004b8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004b92:	e006      	b.n	8004ba2 <HAL_SD_ReadBlocks+0xae>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004b94:	f7fb fc04 	bl	80003a0 <HAL_GetTick>
 8004b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b9a:	1bc0      	subs	r0, r0, r7
 8004b9c:	4298      	cmp	r0, r3
 8004b9e:	d274      	bcs.n	8004c8a <HAL_SD_ReadBlocks+0x196>
 8004ba0:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004ba2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ba4:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8004ba8:	d143      	bne.n	8004c32 <HAL_SD_ReadBlocks+0x13e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8004baa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bac:	0419      	lsls	r1, r3, #16
 8004bae:	d5f1      	bpl.n	8004b94 <HAL_SD_ReadBlocks+0xa0>
 8004bb0:	f1b9 0f1f 	cmp.w	r9, #31
 8004bb4:	d9ee      	bls.n	8004b94 <HAL_SD_ReadBlocks+0xa0>
 8004bb6:	f105 0a04 	add.w	sl, r5, #4
 8004bba:	f105 0824 	add.w	r8, r5, #36	; 0x24
 8004bbe:	e000      	b.n	8004bc2 <HAL_SD_ReadBlocks+0xce>
 8004bc0:	6820      	ldr	r0, [r4, #0]
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004bc2:	f001 fc45 	bl	8006450 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004bc6:	f80a 0c04 	strb.w	r0, [sl, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004bca:	0a02      	lsrs	r2, r0, #8
 8004bcc:	f10a 0a04 	add.w	sl, sl, #4
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004bd0:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004bd2:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004bd4:	f80a 2c07 	strb.w	r2, [sl, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004bd8:	f80a 3c06 	strb.w	r3, [sl, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004bdc:	f80a 0c05 	strb.w	r0, [sl, #-5]
        for(count = 0U; count < 8U; count++)
 8004be0:	45c2      	cmp	sl, r8
 8004be2:	d1ed      	bne.n	8004bc0 <HAL_SD_ReadBlocks+0xcc>
 8004be4:	3520      	adds	r5, #32
        dataremaining -= 32U;
 8004be6:	f1a9 0920 	sub.w	r9, r9, #32
 8004bea:	e7d3      	b.n	8004b94 <HAL_SD_ReadBlocks+0xa0>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004bec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8004bee:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004bf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bf4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004bf6:	b006      	add	sp, #24
 8004bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004bfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c02:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004c04:	b006      	add	sp, #24
 8004c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c0a:	4a39      	ldr	r2, [pc, #228]	; (8004cf0 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 8004c0c:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8004c0e:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c10:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004c12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 8004c14:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 8004c16:	4313      	orrs	r3, r2
 8004c18:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004c1a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004c1e:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 8004c20:	e77e      	b.n	8004b20 <HAL_SD_ReadBlocks+0x2c>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004c22:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004c24:	4641      	mov	r1, r8
 8004c26:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004c28:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004c2a:	f001 fc85 	bl	8006538 <SDMMC_CmdReadSingleBlock>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	e7aa      	b.n	8004b88 <HAL_SD_ReadBlocks+0x94>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8004c32:	68c3      	ldr	r3, [r0, #12]
 8004c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c38:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3e:	05d2      	lsls	r2, r2, #23
 8004c40:	d50b      	bpl.n	8004c5a <HAL_SD_ReadBlocks+0x166>
 8004c42:	2e01      	cmp	r6, #1
 8004c44:	d909      	bls.n	8004c5a <HAL_SD_ReadBlocks+0x166>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004c46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c48:	2a03      	cmp	r2, #3
 8004c4a:	d006      	beq.n	8004c5a <HAL_SD_ReadBlocks+0x166>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f001 fd83 	bl	8006758 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c52:	4603      	mov	r3, r0
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d145      	bne.n	8004ce4 <HAL_SD_ReadBlocks+0x1f0>
 8004c58:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c5c:	f012 0208 	ands.w	r2, r2, #8
 8004c60:	d121      	bne.n	8004ca6 <HAL_SD_ReadBlocks+0x1b2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004c62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c64:	f011 0102 	ands.w	r1, r1, #2
 8004c68:	d12a      	bne.n	8004cc0 <HAL_SD_ReadBlocks+0x1cc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004c6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004c6c:	f010 0020 	ands.w	r0, r0, #32
 8004c70:	d032      	beq.n	8004cd8 <HAL_SD_ReadBlocks+0x1e4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c72:	481f      	ldr	r0, [pc, #124]	; (8004cf0 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 8004c74:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c76:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004c78:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004c7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c7c:	f043 0320 	orr.w	r3, r3, #32
 8004c80:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c82:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c86:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004c88:	e74a      	b.n	8004b20 <HAL_SD_ReadBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c8a:	6823      	ldr	r3, [r4, #0]
        hsd->State= HAL_SD_STATE_READY;
 8004c8c:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c8e:	4d18      	ldr	r5, [pc, #96]	; (8004cf0 <HAL_SD_ReadBlocks+0x1fc>)
        hsd->Context = SD_CONTEXT_NONE;
 8004c90:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8004c92:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c94:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004c96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c9c:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004c9e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004ca2:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8004ca4:	e73c      	b.n	8004b20 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ca6:	4812      	ldr	r0, [pc, #72]	; (8004cf0 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 8004ca8:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8004caa:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cac:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004cae:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004cb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004cb2:	f043 0308 	orr.w	r3, r3, #8
 8004cb6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cb8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004cbc:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004cbe:	e72f      	b.n	8004b20 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cc0:	480b      	ldr	r0, [pc, #44]	; (8004cf0 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 8004cc2:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cc4:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004cc6:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004cc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004cca:	f043 0302 	orr.w	r3, r3, #2
 8004cce:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cd0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004cd4:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004cd6:	e723      	b.n	8004b20 <HAL_SD_ReadBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004cd8:	4906      	ldr	r1, [pc, #24]	; (8004cf4 <HAL_SD_ReadBlocks+0x200>)
    hsd->State = HAL_SD_STATE_READY;
 8004cda:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004cdc:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004cde:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8004ce2:	e71d      	b.n	8004b20 <HAL_SD_ReadBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ce4:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 8004ce6:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ce8:	4801      	ldr	r0, [pc, #4]	; (8004cf0 <HAL_SD_ReadBlocks+0x1fc>)
          hsd->Context = SD_CONTEXT_NONE;
 8004cea:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cec:	6390      	str	r0, [r2, #56]	; 0x38
 8004cee:	e790      	b.n	8004c12 <HAL_SD_ReadBlocks+0x11e>
 8004cf0:	1fe00fff 	.word	0x1fe00fff
 8004cf4:	18000f3a 	.word	0x18000f3a

08004cf8 <HAL_SD_WriteBlocks>:
{
 8004cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cfc:	460d      	mov	r5, r1
 8004cfe:	b089      	sub	sp, #36	; 0x24
 8004d00:	4604      	mov	r4, r0
 8004d02:	4616      	mov	r6, r2
 8004d04:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8004d06:	f7fb fb4b 	bl	80003a0 <HAL_GetTick>
  if(NULL == pData)
 8004d0a:	2d00      	cmp	r5, #0
 8004d0c:	d05d      	beq.n	8004dca <HAL_SD_WriteBlocks+0xd2>
 8004d0e:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8004d10:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8004d14:	b2c0      	uxtb	r0, r0
 8004d16:	2801      	cmp	r0, #1
 8004d18:	d007      	beq.n	8004d2a <HAL_SD_WriteBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004d1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8004d1c:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004d1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d22:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004d24:	b009      	add	sp, #36	; 0x24
 8004d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d2a:	19f3      	adds	r3, r6, r7
 8004d2c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d2e:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d30:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d32:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d34:	d851      	bhi.n	8004dda <HAL_SD_WriteBlocks+0xe2>
    hsd->Instance->DCTRL = 0U;
 8004d36:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8004d38:	2203      	movs	r2, #3
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004d3a:	0278      	lsls	r0, r7, #9
    hsd->State = HAL_SD_STATE_BUSY;
 8004d3c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004d40:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 8004d42:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d4a:	9102      	str	r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004d4c:	a902      	add	r1, sp, #8
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d4e:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004d50:	f04f 0300 	mov.w	r3, #0
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004d54:	e9cd 0203 	strd	r0, r2, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004d58:	6820      	ldr	r0, [r4, #0]
      add *= 512U;
 8004d5a:	bf18      	it	ne
 8004d5c:	0276      	lslne	r6, r6, #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004d5e:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004d60:	e9cd 3305 	strd	r3, r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004d64:	f001 fb8e 	bl	8006484 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004d68:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 8004d6a:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004d6c:	68d3      	ldr	r3, [r2, #12]
 8004d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d72:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8004d74:	d944      	bls.n	8004e00 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004d76:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004d78:	4631      	mov	r1, r6
 8004d7a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004d7c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004d7e:	f001 fca7 	bl	80066d0 <SDMMC_CmdWriteMultiBlock>
 8004d82:	4603      	mov	r3, r0
 8004d84:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d86:	bb7b      	cbnz	r3, 8004de8 <HAL_SD_WriteBlocks+0xf0>
    dataremaining = config.DataLength;
 8004d88:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004d8a:	e007      	b.n	8004d9c <HAL_SD_WriteBlocks+0xa4>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004d8c:	f7fb fb08 	bl	80003a0 <HAL_GetTick>
 8004d90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d92:	eba0 0008 	sub.w	r0, r0, r8
 8004d96:	4298      	cmp	r0, r3
 8004d98:	d266      	bcs.n	8004e68 <HAL_SD_WriteBlocks+0x170>
 8004d9a:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004d9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d9e:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 8004da2:	d135      	bne.n	8004e10 <HAL_SD_WriteBlocks+0x118>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8004da4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004da6:	0459      	lsls	r1, r3, #17
 8004da8:	d5f0      	bpl.n	8004d8c <HAL_SD_WriteBlocks+0x94>
 8004daa:	2e1f      	cmp	r6, #31
 8004dac:	d9ee      	bls.n	8004d8c <HAL_SD_WriteBlocks+0x94>
 8004dae:	f105 0920 	add.w	r9, r5, #32
 8004db2:	e000      	b.n	8004db6 <HAL_SD_WriteBlocks+0xbe>
 8004db4:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004db6:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004dba:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004dbc:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004dbe:	f001 fb4b 	bl	8006458 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004dc2:	454d      	cmp	r5, r9
 8004dc4:	d1f6      	bne.n	8004db4 <HAL_SD_WriteBlocks+0xbc>
        dataremaining -= 32U;
 8004dc6:	3e20      	subs	r6, #32
 8004dc8:	e7e0      	b.n	8004d8c <HAL_SD_WriteBlocks+0x94>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8004dcc:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004dce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dd2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004dd4:	b009      	add	sp, #36	; 0x24
 8004dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004dda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ddc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004de0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004de2:	b009      	add	sp, #36	; 0x24
 8004de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004de8:	4a38      	ldr	r2, [pc, #224]	; (8004ecc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8004dea:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8004dec:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004dee:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004df0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 8004df2:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 8004df4:	4313      	orrs	r3, r2
 8004df6:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004df8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004dfc:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 8004dfe:	e791      	b.n	8004d24 <HAL_SD_WriteBlocks+0x2c>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004e00:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004e02:	4631      	mov	r1, r6
 8004e04:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004e06:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004e08:	f001 fc1e 	bl	8006648 <SDMMC_CmdWriteSingleBlock>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	e7b9      	b.n	8004d84 <HAL_SD_WriteBlocks+0x8c>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8004e10:	68c3      	ldr	r3, [r0, #12]
 8004e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e16:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e1c:	05d2      	lsls	r2, r2, #23
 8004e1e:	d50b      	bpl.n	8004e38 <HAL_SD_WriteBlocks+0x140>
 8004e20:	2f01      	cmp	r7, #1
 8004e22:	d909      	bls.n	8004e38 <HAL_SD_WriteBlocks+0x140>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004e24:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004e26:	2a03      	cmp	r2, #3
 8004e28:	d006      	beq.n	8004e38 <HAL_SD_WriteBlocks+0x140>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 fc94 	bl	8006758 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004e30:	4603      	mov	r3, r0
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d143      	bne.n	8004ebe <HAL_SD_WriteBlocks+0x1c6>
 8004e36:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e3a:	f012 0208 	ands.w	r2, r2, #8
 8004e3e:	d11f      	bne.n	8004e80 <HAL_SD_WriteBlocks+0x188>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004e40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e42:	f011 0102 	ands.w	r1, r1, #2
 8004e46:	d128      	bne.n	8004e9a <HAL_SD_WriteBlocks+0x1a2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8004e48:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004e4a:	f010 0010 	ands.w	r0, r0, #16
 8004e4e:	d030      	beq.n	8004eb2 <HAL_SD_WriteBlocks+0x1ba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e50:	481e      	ldr	r0, [pc, #120]	; (8004ecc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8004e52:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e54:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004e56:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004e58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e5a:	f043 0310 	orr.w	r3, r3, #16
 8004e5e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e60:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e64:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004e66:	e75d      	b.n	8004d24 <HAL_SD_WriteBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e68:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8004e6a:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e6c:	4d17      	ldr	r5, [pc, #92]	; (8004ecc <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 8004e6e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004e70:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e72:	638d      	str	r5, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004e74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e76:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004e78:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004e7c:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8004e7e:	e751      	b.n	8004d24 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e80:	4812      	ldr	r0, [pc, #72]	; (8004ecc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8004e82:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8004e84:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e86:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004e88:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004e8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e8c:	f043 0308 	orr.w	r3, r3, #8
 8004e90:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e92:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e96:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004e98:	e744      	b.n	8004d24 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e9a:	480c      	ldr	r0, [pc, #48]	; (8004ecc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8004e9c:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e9e:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004ea0:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ea2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ea4:	f043 0302 	orr.w	r3, r3, #2
 8004ea8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004eaa:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004eae:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004eb0:	e738      	b.n	8004d24 <HAL_SD_WriteBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004eb2:	4907      	ldr	r1, [pc, #28]	; (8004ed0 <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 8004eb4:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004eb6:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004eb8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8004ebc:	e732      	b.n	8004d24 <HAL_SD_WriteBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ebe:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 8004ec0:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ec2:	4802      	ldr	r0, [pc, #8]	; (8004ecc <HAL_SD_WriteBlocks+0x1d4>)
          hsd->Context = SD_CONTEXT_NONE;
 8004ec4:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ec6:	6390      	str	r0, [r2, #56]	; 0x38
 8004ec8:	e792      	b.n	8004df0 <HAL_SD_WriteBlocks+0xf8>
 8004eca:	bf00      	nop
 8004ecc:	1fe00fff 	.word	0x1fe00fff
 8004ed0:	18000f3a 	.word	0x18000f3a

08004ed4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop

08004ed8 <HAL_SD_GetCardCSD>:
{
 8004ed8:	4603      	mov	r3, r0
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004eda:	2000      	movs	r0, #0
{
 8004edc:	b430      	push	{r4, r5}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004ede:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ee0:	0f92      	lsrs	r2, r2, #30
 8004ee2:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004ee4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ee6:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8004eea:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004eec:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 8004ef0:	f002 0203 	and.w	r2, r2, #3
 8004ef4:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004ef6:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8004efa:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004efc:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8004f00:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004f02:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8004f06:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004f08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f0a:	0d12      	lsrs	r2, r2, #20
 8004f0c:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004f0e:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8004f12:	f002 020f 	and.w	r2, r2, #15
 8004f16:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004f18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f1a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8004f1e:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004f20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f22:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8004f26:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004f28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f2a:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8004f2e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004f30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f32:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8004f36:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004f38:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f3c:	2a00      	cmp	r2, #0
 8004f3e:	f040 8086 	bne.w	800504e <HAL_SD_GetCardCSD+0x176>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004f42:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004f44:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004f48:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004f4a:	2401      	movs	r4, #1
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004f4c:	ea02 0285 	and.w	r2, r2, r5, lsl #2
    hsd->SdCard.LogBlockSize = 512U;
 8004f50:	f44f 7500 	mov.w	r5, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004f54:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8004f58:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004f5a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f5c:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8004f60:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004f62:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 8004f66:	f002 0207 	and.w	r2, r2, #7
 8004f6a:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004f6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f6e:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8004f72:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004f74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f76:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8004f7a:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004f7c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f7e:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8004f82:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004f84:	690a      	ldr	r2, [r1, #16]
 8004f86:	4422      	add	r2, r4
 8004f88:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004f8a:	7e08      	ldrb	r0, [r1, #24]
 8004f8c:	f000 0007 	and.w	r0, r0, #7
 8004f90:	3002      	adds	r0, #2
 8004f92:	4082      	lsls	r2, r0
 8004f94:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004f96:	7a08      	ldrb	r0, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 8004f98:	659d      	str	r5, [r3, #88]	; 0x58
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004f9a:	f000 000f 	and.w	r0, r0, #15
 8004f9e:	fa04 f000 	lsl.w	r0, r4, r0
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004fa2:	0a44      	lsrs	r4, r0, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004fa4:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004fa6:	fb02 f204 	mul.w	r2, r2, r4
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004fac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  pCSD->Reserved3 = 0;
 8004fae:	2500      	movs	r5, #0
  pCSD->Reserved4 = 1;
 8004fb0:	2401      	movs	r4, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004fb2:	f3c2 3280 	ubfx	r2, r2, #14, #1
  return HAL_OK;
 8004fb6:	4628      	mov	r0, r5
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004fb8:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004fba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004fbc:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8004fc0:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004fc2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004fc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fc8:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004fca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004fcc:	0fd2      	lsrs	r2, r2, #31
 8004fce:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004fd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004fd2:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8004fd6:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004fd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004fda:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8004fde:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004fe0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004fe2:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8004fe6:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004fe8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004fea:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8004fee:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8004ff2:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004ff6:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8004ffa:	4022      	ands	r2, r4
 8004ffc:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005000:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005002:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005006:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800500a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800500c:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8005010:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005014:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005016:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800501a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800501e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005020:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8005024:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005028:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800502a:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800502e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005032:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005034:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8005038:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800503c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503e:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8005042:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8005046:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
}
 800504a:	bc30      	pop	{r4, r5}
 800504c:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800504e:	2a01      	cmp	r2, #1
 8005050:	d00c      	beq.n	800506c <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005052:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8005054:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005056:	4c0e      	ldr	r4, [pc, #56]	; (8005090 <HAL_SD_GetCardCSD+0x1b8>)
    return HAL_ERROR;
 8005058:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800505a:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800505c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800505e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005062:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005064:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 8005068:	bc30      	pop	{r4, r5}
 800506a:	4770      	bx	lr
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800506c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.BlockSize = 512U;
 800506e:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005072:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 8005076:	0412      	lsls	r2, r2, #16
 8005078:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800507c:	4322      	orrs	r2, r4
 800507e:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005080:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8005082:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005084:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005086:	6598      	str	r0, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005088:	0292      	lsls	r2, r2, #10
 800508a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800508c:	655a      	str	r2, [r3, #84]	; 0x54
 800508e:	e78d      	b.n	8004fac <HAL_SD_GetCardCSD+0xd4>
 8005090:	1fe00fff 	.word	0x1fe00fff

08005094 <HAL_SD_InitCard>:
{
 8005094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005098:	2300      	movs	r3, #0
{
 800509a:	b098      	sub	sp, #96	; 0x60
 800509c:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800509e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80050a2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80050a6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80050aa:	f7fe fef9 	bl	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq>
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80050ae:	4aad      	ldr	r2, [pc, #692]	; (8005364 <HAL_SD_InitCard+0x2d0>)
 80050b0:	0a05      	lsrs	r5, r0, #8
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80050b2:	69a3      	ldr	r3, [r4, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80050b4:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80050b6:	fba2 2505 	umull	r2, r5, r2, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80050ba:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80050bc:	ea4f 1515 	mov.w	r5, r5, lsr #4
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80050c0:	d104      	bne.n	80050cc <HAL_SD_InitCard+0x38>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	6813      	ldr	r3, [r2, #0]
 80050c6:	f043 0310 	orr.w	r3, r3, #16
 80050ca:	6013      	str	r3, [r2, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 80050cc:	aa0a      	add	r2, sp, #40	; 0x28
 80050ce:	950b      	str	r5, [sp, #44]	; 0x2c
 80050d0:	6827      	ldr	r7, [r4, #0]
 80050d2:	ab07      	add	r3, sp, #28
 80050d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80050d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80050da:	4638      	mov	r0, r7
 80050dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050de:	f001 f99d 	bl	800641c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80050e2:	6820      	ldr	r0, [r4, #0]
 80050e4:	f001 f9be 	bl	8006464 <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80050e8:	0068      	lsls	r0, r5, #1
 80050ea:	fbb6 f0f0 	udiv	r0, r6, r0
  if(sdmmc_clk != 0U)
 80050ee:	b1c8      	cbz	r0, 8005124 <HAL_SD_InitCard+0x90>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80050f0:	4d9d      	ldr	r5, [pc, #628]	; (8005368 <HAL_SD_InitCard+0x2d4>)
 80050f2:	fbb5 f0f0 	udiv	r0, r5, r0
 80050f6:	3001      	adds	r0, #1
 80050f8:	f7fb f958 	bl	80003ac <HAL_Delay>
  __IO uint32_t count = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 8005100:	f7fb f94e 	bl	80003a0 <HAL_GetTick>
 8005104:	4680      	mov	r8, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005106:	6820      	ldr	r0, [r4, #0]
 8005108:	f001 fbd0 	bl	80068ac <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800510c:	4605      	mov	r5, r0
 800510e:	b168      	cbz	r0, 800512c <HAL_SD_InitCard+0x98>
    hsd->State = HAL_SD_STATE_READY;
 8005110:	2601      	movs	r6, #1
 8005112:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005118:	431d      	orrs	r5, r3
 800511a:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800511c:	4630      	mov	r0, r6
 800511e:	b018      	add	sp, #96	; 0x60
 8005120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 8005124:	2002      	movs	r0, #2
 8005126:	f7fb f941 	bl	80003ac <HAL_Delay>
 800512a:	e7e7      	b.n	80050fc <HAL_SD_InitCard+0x68>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800512c:	6820      	ldr	r0, [r4, #0]
 800512e:	f001 fbeb 	bl	8006908 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005132:	2800      	cmp	r0, #0
 8005134:	d179      	bne.n	800522a <HAL_SD_InitCard+0x196>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005136:	2301      	movs	r3, #1
 8005138:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800513a:	2100      	movs	r1, #0
 800513c:	6820      	ldr	r0, [r4, #0]
 800513e:	f001 fc23 	bl	8006988 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005142:	bb08      	cbnz	r0, 8005188 <HAL_SD_InitCard+0xf4>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005144:	9b06      	ldr	r3, [sp, #24]
 8005146:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800514a:	42b3      	cmp	r3, r6
 800514c:	f200 8112 	bhi.w	8005374 <HAL_SD_InitCard+0x2e0>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005150:	4f86      	ldr	r7, [pc, #536]	; (800536c <HAL_SD_InitCard+0x2d8>)
 8005152:	e00c      	b.n	800516e <HAL_SD_InitCard+0xda>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005154:	4601      	mov	r1, r0
 8005156:	6820      	ldr	r0, [r4, #0]
 8005158:	f001 f990 	bl	800647c <SDMMC_GetResponse>
    count++;
 800515c:	9b06      	ldr	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800515e:	1e02      	subs	r2, r0, #0
    count++;
 8005160:	f103 0301 	add.w	r3, r3, #1
 8005164:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005166:	9b06      	ldr	r3, [sp, #24]
 8005168:	db11      	blt.n	800518e <HAL_SD_InitCard+0xfa>
 800516a:	42b3      	cmp	r3, r6
 800516c:	d80f      	bhi.n	800518e <HAL_SD_InitCard+0xfa>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800516e:	2100      	movs	r1, #0
 8005170:	6820      	ldr	r0, [r4, #0]
 8005172:	f001 fc09 	bl	8006988 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005176:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 8005178:	4605      	mov	r5, r0
 800517a:	2800      	cmp	r0, #0
 800517c:	d1c8      	bne.n	8005110 <HAL_SD_InitCard+0x7c>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	f001 fc46 	bl	8006a10 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005184:	2800      	cmp	r0, #0
 8005186:	d0e5      	beq.n	8005154 <HAL_SD_InitCard+0xc0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005188:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800518c:	e7c0      	b.n	8005110 <HAL_SD_InitCard+0x7c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800518e:	9906      	ldr	r1, [sp, #24]
 8005190:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005194:	4299      	cmp	r1, r3
 8005196:	f200 809e 	bhi.w	80052d6 <HAL_SD_InitCard+0x242>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800519a:	0057      	lsls	r7, r2, #1
 800519c:	6820      	ldr	r0, [r4, #0]
 800519e:	d504      	bpl.n	80051aa <HAL_SD_InitCard+0x116>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80051a0:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80051a2:	2101      	movs	r1, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80051a4:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80051a6:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80051a8:	d051      	beq.n	800524e <HAL_SD_InitCard+0x1ba>
  uint16_t sd_rca = 1U;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80051b0:	f001 f960 	bl	8006474 <SDMMC_GetPowerState>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d044      	beq.n	8005242 <HAL_SD_InitCard+0x1ae>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80051b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	2a03      	cmp	r2, #3
 80051be:	d125      	bne.n	800520c <HAL_SD_InitCard+0x178>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80051c0:	4618      	mov	r0, r3
 80051c2:	2104      	movs	r1, #4
 80051c4:	f001 f95a 	bl	800647c <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80051c8:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80051ca:	0d03      	lsrs	r3, r0, #20
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80051cc:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80051ce:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80051d0:	f7ff fe82 	bl	8004ed8 <HAL_SD_GetCardCSD>
 80051d4:	4606      	mov	r6, r0
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d136      	bne.n	8005248 <HAL_SD_InitCard+0x1b4>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80051da:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80051dc:	4603      	mov	r3, r0
 80051de:	6820      	ldr	r0, [r4, #0]
 80051e0:	0412      	lsls	r2, r2, #16
 80051e2:	f001 fb1f 	bl	8006824 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80051e6:	b9b0      	cbnz	r0, 8005216 <HAL_SD_InitCard+0x182>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80051e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051ec:	6820      	ldr	r0, [r4, #0]
 80051ee:	f001 f95f 	bl	80064b0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d092      	beq.n	800511c <HAL_SD_InitCard+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051f6:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 80051f8:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051fa:	495d      	ldr	r1, [pc, #372]	; (8005370 <HAL_SD_InitCard+0x2dc>)
    return HAL_ERROR;
 80051fc:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051fe:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005200:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005202:	4318      	orrs	r0, r3
 8005204:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005206:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 800520a:	e787      	b.n	800511c <HAL_SD_InitCard+0x88>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800520c:	4618      	mov	r0, r3
 800520e:	f001 fcbd 	bl	8006b8c <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005212:	2800      	cmp	r0, #0
 8005214:	d062      	beq.n	80052dc <HAL_SD_InitCard+0x248>
    hsd->State = HAL_SD_STATE_READY;
 8005216:	2601      	movs	r6, #1
 8005218:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800521c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800521e:	4308      	orrs	r0, r1
 8005220:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005222:	4630      	mov	r0, r6
 8005224:	b018      	add	sp, #96	; 0x60
 8005226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V1_X;
 800522a:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800522c:	6820      	ldr	r0, [r4, #0]
 800522e:	f001 fb3d 	bl	80068ac <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005232:	4605      	mov	r5, r0
 8005234:	2800      	cmp	r0, #0
 8005236:	f47f af6b 	bne.w	8005110 <HAL_SD_InitCard+0x7c>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800523a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800523c:	2b01      	cmp	r3, #1
 800523e:	d181      	bne.n	8005144 <HAL_SD_InitCard+0xb0>
 8005240:	e77b      	b.n	800513a <HAL_SD_InitCard+0xa6>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005242:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005246:	e7e6      	b.n	8005216 <HAL_SD_InitCard+0x182>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005248:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800524c:	e7e3      	b.n	8005216 <HAL_SD_InitCard+0x182>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800524e:	01d6      	lsls	r6, r2, #7
 8005250:	d5ab      	bpl.n	80051aa <HAL_SD_InitCard+0x116>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005252:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005256:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005258:	6803      	ldr	r3, [r0, #0]
 800525a:	f043 0308 	orr.w	r3, r3, #8
 800525e:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005260:	6820      	ldr	r0, [r4, #0]
 8005262:	f001 fde9 	bl	8006e38 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005266:	4605      	mov	r5, r0
 8005268:	b138      	cbz	r0, 800527a <HAL_SD_InitCard+0x1e6>
 800526a:	e751      	b.n	8005110 <HAL_SD_InitCard+0x7c>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800526c:	f7fb f898 	bl	80003a0 <HAL_GetTick>
 8005270:	eba0 0008 	sub.w	r0, r0, r8
 8005274:	3001      	adds	r0, #1
 8005276:	f000 8082 	beq.w	800537e <HAL_SD_InitCard+0x2ea>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800527e:	0155      	lsls	r5, r2, #5
 8005280:	d5f4      	bpl.n	800526c <HAL_SD_InitCard+0x1d8>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005282:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005286:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528c:	02d8      	lsls	r0, r3, #11
 800528e:	f57f af7b 	bpl.w	8005188 <HAL_SD_InitCard+0xf4>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8005292:	2001      	movs	r0, #1
 8005294:	f7ff fe1e 	bl	8004ed4 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005298:	6822      	ldr	r2, [r4, #0]
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	f043 0304 	orr.w	r3, r3, #4
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e005      	b.n	80052b0 <HAL_SD_InitCard+0x21c>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80052a4:	f7fb f87c 	bl	80003a0 <HAL_GetTick>
 80052a8:	eba0 0008 	sub.w	r0, r0, r8
 80052ac:	3001      	adds	r0, #1
 80052ae:	d066      	beq.n	800537e <HAL_SD_InitCard+0x2ea>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b4:	0191      	lsls	r1, r2, #6
 80052b6:	d5f5      	bpl.n	80052a4 <HAL_SD_InitCard+0x210>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80052b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c2:	02d2      	lsls	r2, r2, #11
 80052c4:	d407      	bmi.n	80052d6 <HAL_SD_InitCard+0x242>
          hsd->Instance->POWER = 0x13U;
 80052c6:	2113      	movs	r1, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80052c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
          hsd->Instance->POWER = 0x13U;
 80052cc:	6019      	str	r1, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	639a      	str	r2, [r3, #56]	; 0x38
 80052d2:	6820      	ldr	r0, [r4, #0]
 80052d4:	e769      	b.n	80051aa <HAL_SD_InitCard+0x116>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80052d6:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80052da:	e719      	b.n	8005110 <HAL_SD_InitCard+0x7c>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80052dc:	4601      	mov	r1, r0
 80052de:	6820      	ldr	r0, [r4, #0]
 80052e0:	f001 f8cc 	bl	800647c <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80052e4:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80052e6:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80052e8:	6820      	ldr	r0, [r4, #0]
 80052ea:	f001 f8c7 	bl	800647c <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80052ee:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80052f0:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80052f2:	6820      	ldr	r0, [r4, #0]
 80052f4:	f001 f8c2 	bl	800647c <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80052f8:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80052fa:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80052fc:	6820      	ldr	r0, [r4, #0]
 80052fe:	f001 f8bd 	bl	800647c <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005302:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005304:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005306:	2b03      	cmp	r3, #3
 8005308:	d03c      	beq.n	8005384 <HAL_SD_InitCard+0x2f0>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800530a:	f10d 0116 	add.w	r1, sp, #22
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	f001 fcb4 	bl	8006c7c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005314:	2800      	cmp	r0, #0
 8005316:	f47f af7e 	bne.w	8005216 <HAL_SD_InitCard+0x182>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800531a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	2a03      	cmp	r2, #3
 8005320:	f43f af4e 	beq.w	80051c0 <HAL_SD_InitCard+0x12c>
    hsd->SdCard.RelCardAdd = sd_rca;
 8005324:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005328:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 800532a:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800532c:	0409      	lsls	r1, r1, #16
 800532e:	f001 fc69 	bl	8006c04 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005332:	2800      	cmp	r0, #0
 8005334:	f47f af6f 	bne.w	8005216 <HAL_SD_InitCard+0x182>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005338:	4601      	mov	r1, r0
 800533a:	6820      	ldr	r0, [r4, #0]
 800533c:	f001 f89e 	bl	800647c <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005340:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005342:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005344:	6820      	ldr	r0, [r4, #0]
 8005346:	f001 f899 	bl	800647c <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800534a:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800534c:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800534e:	6820      	ldr	r0, [r4, #0]
 8005350:	f001 f894 	bl	800647c <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005354:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005356:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005358:	6820      	ldr	r0, [r4, #0]
 800535a:	f001 f88f 	bl	800647c <SDMMC_GetResponse>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	66e0      	str	r0, [r4, #108]	; 0x6c
 8005362:	e72d      	b.n	80051c0 <HAL_SD_InitCard+0x12c>
 8005364:	014f8b59 	.word	0x014f8b59
 8005368:	00012110 	.word	0x00012110
 800536c:	c1100000 	.word	0xc1100000
 8005370:	1fe00fff 	.word	0x1fe00fff
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005374:	9b06      	ldr	r3, [sp, #24]
 8005376:	42b3      	cmp	r3, r6
 8005378:	d8ad      	bhi.n	80052d6 <HAL_SD_InitCard+0x242>
 800537a:	6820      	ldr	r0, [r4, #0]
 800537c:	e715      	b.n	80051aa <HAL_SD_InitCard+0x116>
            return HAL_SD_ERROR_TIMEOUT;
 800537e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005382:	e6c5      	b.n	8005110 <HAL_SD_InitCard+0x7c>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	e71b      	b.n	80051c0 <HAL_SD_InitCard+0x12c>

08005388 <HAL_SD_GetCardStatus>:
{
 8005388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800538c:	4604      	mov	r4, r0
 800538e:	b097      	sub	sp, #92	; 0x5c
 8005390:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8005392:	f7fb f805 	bl	80003a0 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005396:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8005398:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800539a:	6820      	ldr	r0, [r4, #0]
 800539c:	f001 f86e 	bl	800647c <SDMMC_GetResponse>
 80053a0:	0187      	lsls	r7, r0, #6
 80053a2:	d422      	bmi.n	80053ea <HAL_SD_GetCardStatus+0x62>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80053a4:	2140      	movs	r1, #64	; 0x40
 80053a6:	6820      	ldr	r0, [r4, #0]
 80053a8:	f001 f882 	bl	80064b0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80053ac:	b308      	cbz	r0, 80053f2 <HAL_SD_GetCardStatus+0x6a>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80053ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80053b2:	6823      	ldr	r3, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053b4:	495b      	ldr	r1, [pc, #364]	; (8005524 <HAL_SD_GetCardStatus+0x19c>)
    hsd->State = HAL_SD_STATE_READY;
 80053b6:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053b8:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80053ba:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 80053bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053be:	4318      	orrs	r0, r3
 80053c0:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053c2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80053c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053ca:	6820      	ldr	r0, [r4, #0]
 80053cc:	f001 f870 	bl	80064b0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80053d0:	b138      	cbz	r0, 80053e2 <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 80053d2:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053d4:	6822      	ldr	r2, [r4, #0]
 80053d6:	4953      	ldr	r1, [pc, #332]	; (8005524 <HAL_SD_GetCardStatus+0x19c>)
    status = HAL_ERROR;
 80053d8:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053da:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80053dc:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80053e2:	4630      	mov	r0, r6
 80053e4:	b017      	add	sp, #92	; 0x5c
 80053e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053ea:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80053ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80053f0:	e7e0      	b.n	80053b4 <HAL_SD_GetCardStatus+0x2c>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053f2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80053f4:	6820      	ldr	r0, [r4, #0]
 80053f6:	0409      	lsls	r1, r1, #16
 80053f8:	f001 fac6 	bl	8006988 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d1d6      	bne.n	80053ae <HAL_SD_GetCardStatus+0x26>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 64U;
 8005404:	2340      	movs	r3, #64	; 0x40
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005406:	2160      	movs	r1, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005408:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800540a:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800540c:	2202      	movs	r2, #2
  config.DataLength    = 64U;
 800540e:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005410:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005412:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005414:	4669      	mov	r1, sp
 8005416:	6820      	ldr	r0, [r4, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005418:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800541a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800541c:	f001 f832 	bl	8006484 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	f001 fcc3 	bl	8006dac <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005426:	2800      	cmp	r0, #0
 8005428:	d1c1      	bne.n	80053ae <HAL_SD_GetCardStatus+0x26>
  uint32_t *pData = pSDstatus;
 800542a:	af06      	add	r7, sp, #24
 800542c:	e005      	b.n	800543a <HAL_SD_GetCardStatus+0xb2>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800542e:	f7fa ffb7 	bl	80003a0 <HAL_GetTick>
 8005432:	eba0 0008 	sub.w	r0, r0, r8
 8005436:	3001      	adds	r0, #1
 8005438:	d013      	beq.n	8005462 <HAL_SD_GetCardStatus+0xda>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800543e:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005444:	d110      	bne.n	8005468 <HAL_SD_GetCardStatus+0xe0>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005446:	0416      	lsls	r6, r2, #16
 8005448:	d5f1      	bpl.n	800542e <HAL_SD_GetCardStatus+0xa6>
 800544a:	f107 0620 	add.w	r6, r7, #32
 800544e:	e000      	b.n	8005452 <HAL_SD_GetCardStatus+0xca>
 8005450:	6823      	ldr	r3, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fffc 	bl	8006450 <SDMMC_ReadFIFO>
 8005458:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 800545c:	42b7      	cmp	r7, r6
 800545e:	d1f7      	bne.n	8005450 <HAL_SD_GetCardStatus+0xc8>
 8005460:	e7e5      	b.n	800542e <HAL_SD_GetCardStatus+0xa6>
      return HAL_SD_ERROR_TIMEOUT;
 8005462:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005466:	e7a4      	b.n	80053b2 <HAL_SD_GetCardStatus+0x2a>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005468:	0710      	lsls	r0, r2, #28
 800546a:	d455      	bmi.n	8005518 <HAL_SD_GetCardStatus+0x190>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800546c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546e:	0791      	lsls	r1, r2, #30
 8005470:	d454      	bmi.n	800551c <HAL_SD_GetCardStatus+0x194>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005474:	0692      	lsls	r2, r2, #26
 8005476:	d50b      	bpl.n	8005490 <HAL_SD_GetCardStatus+0x108>
 8005478:	e052      	b.n	8005520 <HAL_SD_GetCardStatus+0x198>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800547a:	f000 ffe9 	bl	8006450 <SDMMC_ReadFIFO>
 800547e:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005482:	f7fa ff8d 	bl	80003a0 <HAL_GetTick>
 8005486:	eba0 0008 	sub.w	r0, r0, r8
 800548a:	3001      	adds	r0, #1
 800548c:	d0e9      	beq.n	8005462 <HAL_SD_GetCardStatus+0xda>
 800548e:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005490:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005492:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005494:	f416 5680 	ands.w	r6, r6, #4096	; 0x1000
 8005498:	d1ef      	bne.n	800547a <HAL_SD_GetCardStatus+0xf2>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800549a:	9f06      	ldr	r7, [sp, #24]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800549c:	9808      	ldr	r0, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800549e:	0a39      	lsrs	r1, r7, #8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80054a0:	f3c7 1e81 	ubfx	lr, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80054a4:	ea4f 4810 	mov.w	r8, r0, lsr #16
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80054a8:	f3c7 1c40 	ubfx	ip, r7, #5, #1
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80054ac:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80054b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80054b2:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80054b6:	f028 07ff 	bic.w	r7, r8, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80054ba:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8005528 <HAL_SD_GetCardStatus+0x1a0>
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80054be:	fa5f f982 	uxtb.w	r9, r2
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80054c2:	b289      	uxth	r1, r1
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80054c4:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80054c8:	fa5f f880 	uxtb.w	r8, r0
 80054cc:	9b07      	ldr	r3, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80054ce:	ea47 0709 	orr.w	r7, r7, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80054d2:	f885 e000 	strb.w	lr, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80054d6:	f885 c001 	strb.w	ip, [r5, #1]
 80054da:	fa93 fe83 	rev.w	lr, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80054de:	8069      	strh	r1, [r5, #2]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80054e0:	f3c0 5303 	ubfx	r3, r0, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80054e4:	f3c0 2107 	ubfx	r1, r0, #8, #8
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80054e8:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80054ec:	f3c2 2c85 	ubfx	ip, r2, #10, #6
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80054f0:	f885 8008 	strb.w	r8, [r5, #8]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80054f4:	f3c2 2001 	ubfx	r0, r2, #8, #2
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80054f8:	7269      	strb	r1, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80054fa:	72ab      	strb	r3, [r5, #10]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80054fc:	f3c2 1103 	ubfx	r1, r2, #4, #4
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005500:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005504:	f002 020f 	and.w	r2, r2, #15
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005508:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800550a:	f885 c00e 	strb.w	ip, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800550e:	73e8      	strb	r0, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005510:	7429      	strb	r1, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005512:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005514:	74ab      	strb	r3, [r5, #18]
 8005516:	e756      	b.n	80053c6 <HAL_SD_GetCardStatus+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005518:	2008      	movs	r0, #8
 800551a:	e74b      	b.n	80053b4 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800551c:	2002      	movs	r0, #2
 800551e:	e749      	b.n	80053b4 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 8005520:	2020      	movs	r0, #32
 8005522:	e747      	b.n	80053b4 <HAL_SD_GetCardStatus+0x2c>
 8005524:	1fe00fff 	.word	0x1fe00fff
 8005528:	18000f3a 	.word	0x18000f3a

0800552c <HAL_SD_GetCardInfo>:
{
 800552c:	4603      	mov	r3, r0
}
 800552e:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005532:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005536:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800553a:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800553c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800553e:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005540:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005542:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005544:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005546:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800554a:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800554c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554e:	61cb      	str	r3, [r1, #28]
}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop

08005554 <HAL_SD_ConfigWideBusOperation>:
{
 8005554:	b570      	push	{r4, r5, r6, lr}
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005556:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 8005558:	2303      	movs	r3, #3
{
 800555a:	b08a      	sub	sp, #40	; 0x28
 800555c:	4604      	mov	r4, r0
  if(hsd->SdCard.CardType != CARD_SECURED)
 800555e:	2a03      	cmp	r2, #3
  hsd->State = HAL_SD_STATE_BUSY;
 8005560:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8005564:	460d      	mov	r5, r1
 8005566:	6803      	ldr	r3, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005568:	d025      	beq.n	80055b6 <HAL_SD_ConfigWideBusOperation+0x62>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800556a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800556e:	d022      	beq.n	80055b6 <HAL_SD_ConfigWideBusOperation+0x62>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005570:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005574:	d064      	beq.n	8005640 <HAL_SD_ConfigWideBusOperation+0xec>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005576:	2900      	cmp	r1, #0
 8005578:	d043      	beq.n	8005602 <HAL_SD_ConfigWideBusOperation+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800557a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800557c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005580:	6382      	str	r2, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005582:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005584:	b9f2      	cbnz	r2, 80055c4 <HAL_SD_ConfigWideBusOperation+0x70>
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8005586:	6962      	ldr	r2, [r4, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005588:	6921      	ldr	r1, [r4, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800558a:	2a03      	cmp	r2, #3
    Init.BusWide             = WideMode;
 800558c:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800558e:	9107      	str	r1, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005590:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8005594:	e9cd 6004 	strd	r6, r0, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8005598:	d92a      	bls.n	80055f0 <HAL_SD_ConfigWideBusOperation+0x9c>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800559a:	9208      	str	r2, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800559c:	aa0a      	add	r2, sp, #40	; 0x28
 800559e:	ae04      	add	r6, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 80055a0:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 80055a2:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 80055a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80055aa:	4618      	mov	r0, r3
 80055ac:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80055b0:	f000 ff34 	bl	800641c <SDMMC_Init>
 80055b4:	e009      	b.n	80055ca <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80055b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80055bc:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80055be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80055c0:	2a00      	cmp	r2, #0
 80055c2:	d0e0      	beq.n	8005586 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055c4:	4a33      	ldr	r2, [pc, #204]	; (8005694 <HAL_SD_ConfigWideBusOperation+0x140>)
    status = HAL_ERROR;
 80055c6:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055c8:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80055ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055ce:	6820      	ldr	r0, [r4, #0]
 80055d0:	f000 ff6e 	bl	80064b0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80055d4:	b130      	cbz	r0, 80055e4 <HAL_SD_ConfigWideBusOperation+0x90>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055d6:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 80055d8:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055da:	4a2e      	ldr	r2, [pc, #184]	; (8005694 <HAL_SD_ConfigWideBusOperation+0x140>)
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80055de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055e0:	4318      	orrs	r0, r3
 80055e2:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80055e4:	2301      	movs	r3, #1
}
 80055e6:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80055e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80055ec:	b00a      	add	sp, #40	; 0x28
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80055f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80055f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80055f6:	d0d0      	beq.n	800559a <HAL_SD_ConfigWideBusOperation+0x46>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80055f8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80055fc:	d02d      	beq.n	800565a <HAL_SD_ConfigWideBusOperation+0x106>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80055fe:	2204      	movs	r2, #4
 8005600:	e7cb      	b.n	800559a <HAL_SD_ConfigWideBusOperation+0x46>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005602:	4618      	mov	r0, r3
  uint32_t scr[2U] = {0UL, 0UL};
 8005604:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005608:	f000 ff38 	bl	800647c <SDMMC_GetResponse>
 800560c:	0181      	lsls	r1, r0, #6
 800560e:	d420      	bmi.n	8005652 <HAL_SD_ConfigWideBusOperation+0xfe>
  errorstate = SD_FindSCR(hsd, scr);
 8005610:	a904      	add	r1, sp, #16
 8005612:	4620      	mov	r0, r4
 8005614:	f7ff f9fe 	bl	8004a14 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005618:	b968      	cbnz	r0, 8005636 <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800561a:	9a05      	ldr	r2, [sp, #20]
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	03d2      	lsls	r2, r2, #15
 8005620:	d534      	bpl.n	800568c <HAL_SD_ConfigWideBusOperation+0x138>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005622:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005624:	4618      	mov	r0, r3
 8005626:	0409      	lsls	r1, r1, #16
 8005628:	f001 f9ae 	bl	8006988 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800562c:	b918      	cbnz	r0, 8005636 <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800562e:	4601      	mov	r1, r0
 8005630:	6820      	ldr	r0, [r4, #0]
 8005632:	f001 fa21 	bl	8006a78 <SDMMC_CmdBusWidth>
 8005636:	6823      	ldr	r3, [r4, #0]
      hsd->ErrorCode |= errorstate;
 8005638:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800563a:	4310      	orrs	r0, r2
 800563c:	63a0      	str	r0, [r4, #56]	; 0x38
 800563e:	e7be      	b.n	80055be <HAL_SD_ConfigWideBusOperation+0x6a>
  uint32_t scr[2U] = {0UL, 0UL};
 8005640:	2200      	movs	r2, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005642:	4618      	mov	r0, r3
 8005644:	4611      	mov	r1, r2
  uint32_t scr[2U] = {0UL, 0UL};
 8005646:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800564a:	f000 ff17 	bl	800647c <SDMMC_GetResponse>
 800564e:	0186      	lsls	r6, r0, #6
 8005650:	d506      	bpl.n	8005660 <HAL_SD_ConfigWideBusOperation+0x10c>
 8005652:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005654:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005658:	e7ee      	b.n	8005638 <HAL_SD_ConfigWideBusOperation+0xe4>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800565a:	2202      	movs	r2, #2
 800565c:	9208      	str	r2, [sp, #32]
 800565e:	e79d      	b.n	800559c <HAL_SD_ConfigWideBusOperation+0x48>
  errorstate = SD_FindSCR(hsd, scr);
 8005660:	a904      	add	r1, sp, #16
 8005662:	4620      	mov	r0, r4
 8005664:	f7ff f9d6 	bl	8004a14 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005668:	2800      	cmp	r0, #0
 800566a:	d1e4      	bne.n	8005636 <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800566c:	9a05      	ldr	r2, [sp, #20]
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	0350      	lsls	r0, r2, #13
 8005672:	d50b      	bpl.n	800568c <HAL_SD_ConfigWideBusOperation+0x138>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005674:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005676:	4618      	mov	r0, r3
 8005678:	0409      	lsls	r1, r1, #16
 800567a:	f001 f985 	bl	8006988 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800567e:	2800      	cmp	r0, #0
 8005680:	d1d9      	bne.n	8005636 <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005682:	2102      	movs	r1, #2
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	f001 f9f7 	bl	8006a78 <SDMMC_CmdBusWidth>
 800568a:	e7d4      	b.n	8005636 <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800568c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005690:	e7d2      	b.n	8005638 <HAL_SD_ConfigWideBusOperation+0xe4>
 8005692:	bf00      	nop
 8005694:	1fe00fff 	.word	0x1fe00fff

08005698 <HAL_SD_Init>:
{
 8005698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800569a:	b087      	sub	sp, #28
  if(hsd == NULL)
 800569c:	b1a0      	cbz	r0, 80056c8 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 800569e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80056a2:	4604      	mov	r4, r0
 80056a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80056a8:	b93b      	cbnz	r3, 80056ba <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80056aa:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 80056ac:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80056ae:	b90b      	cbnz	r3, 80056b4 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80056b0:	2302      	movs	r3, #2
 80056b2:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 80056b4:	4620      	mov	r0, r4
 80056b6:	f003 fa25 	bl	8008b04 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80056ba:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80056bc:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 80056be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80056c2:	f7ff fce7 	bl	8005094 <HAL_SD_InitCard>
 80056c6:	b118      	cbz	r0, 80056d0 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 80056c8:	2501      	movs	r5, #1
}
 80056ca:	4628      	mov	r0, r5
 80056cc:	b007      	add	sp, #28
 80056ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80056d0:	a901      	add	r1, sp, #4
 80056d2:	4620      	mov	r0, r4
 80056d4:	f7ff fe58 	bl	8005388 <HAL_SD_GetCardStatus>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d1f5      	bne.n	80056c8 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80056dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 80056de:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80056e2:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 80056e4:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 80056e8:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 80056ea:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80056ec:	d029      	beq.n	8005742 <HAL_SD_Init+0xaa>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80056ee:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80056f0:	68e1      	ldr	r1, [r4, #12]
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7ff ff2e 	bl	8005554 <HAL_SD_ConfigWideBusOperation>
 80056f8:	4605      	mov	r5, r0
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d1e4      	bne.n	80056c8 <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 80056fe:	f7fa fe4f 	bl	80003a0 <HAL_GetTick>
 8005702:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005704:	e007      	b.n	8005716 <HAL_SD_Init+0x7e>
    hsd->ErrorCode |= errorstate;
 8005706:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005708:	431e      	orrs	r6, r3
 800570a:	63a6      	str	r6, [r4, #56]	; 0x38
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800570c:	f7fa fe48 	bl	80003a0 <HAL_GetTick>
 8005710:	1bc0      	subs	r0, r0, r7
 8005712:	3001      	adds	r0, #1
 8005714:	d01d      	beq.n	8005752 <HAL_SD_Init+0xba>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005716:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005718:	6820      	ldr	r0, [r4, #0]
 800571a:	0409      	lsls	r1, r1, #16
 800571c:	f001 fb02 	bl	8006d24 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005720:	4606      	mov	r6, r0
 8005722:	2800      	cmp	r0, #0
 8005724:	d1ef      	bne.n	8005706 <HAL_SD_Init+0x6e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005726:	4601      	mov	r1, r0
 8005728:	6820      	ldr	r0, [r4, #0]
 800572a:	f000 fea7 	bl	800647c <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800572e:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005732:	2804      	cmp	r0, #4
 8005734:	d1ea      	bne.n	800570c <HAL_SD_Init+0x74>
  hsd->State = HAL_SD_STATE_READY;
 8005736:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005738:	63a6      	str	r6, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800573a:	6326      	str	r6, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800573c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005740:	e7c3      	b.n	80056ca <HAL_SD_Init+0x32>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005742:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005744:	bf14      	ite	ne
 8005746:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800574a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800574e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005750:	e7ce      	b.n	80056f0 <HAL_SD_Init+0x58>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005752:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 8005756:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8005758:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800575a:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800575c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8005760:	e7b3      	b.n	80056ca <HAL_SD_Init+0x32>
 8005762:	bf00      	nop

08005764 <HAL_SD_GetCardState>:
{
 8005764:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005766:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8005768:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800576a:	6800      	ldr	r0, [r0, #0]
 800576c:	0409      	lsls	r1, r1, #16
 800576e:	f001 fad9 	bl	8006d24 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005772:	4601      	mov	r1, r0
 8005774:	b120      	cbz	r0, 8005780 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8005776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005778:	2000      	movs	r0, #0
 800577a:	4319      	orrs	r1, r3
 800577c:	63a1      	str	r1, [r4, #56]	; 0x38
}
 800577e:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005780:	6820      	ldr	r0, [r4, #0]
 8005782:	f000 fe7b 	bl	800647c <SDMMC_GetResponse>
 8005786:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800578a:	bd10      	pop	{r4, pc}

0800578c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800578c:	b310      	cbz	r0, 80057d4 <HAL_SDRAM_Init+0x48>
{
 800578e:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005790:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005794:	4604      	mov	r4, r0
 8005796:	460d      	mov	r5, r1
 8005798:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800579c:	b1ab      	cbz	r3, 80057ca <HAL_SDRAM_Init+0x3e>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800579e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80057a0:	1d21      	adds	r1, r4, #4
 80057a2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80057a8:	f000 fd36 	bl	8006218 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80057ac:	4629      	mov	r1, r5
 80057ae:	e9d4 0200 	ldrd	r0, r2, [r4]
 80057b2:	f000 fd69 	bl	8006288 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80057b6:	4a08      	ldr	r2, [pc, #32]	; (80057d8 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80057b8:	2101      	movs	r1, #1

  return HAL_OK;
 80057ba:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80057bc:	6813      	ldr	r3, [r2, #0]
 80057be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057c2:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80057c4:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 80057c8:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80057ca:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80057ce:	f002 fc47 	bl	8008060 <HAL_SDRAM_MspInit>
 80057d2:	e7e4      	b.n	800579e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 80057d4:	2001      	movs	r0, #1
}
 80057d6:	4770      	bx	lr
 80057d8:	52004000 	.word	0x52004000

080057dc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80057dc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80057e0:	b2db      	uxtb	r3, r3
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d015      	beq.n	8005812 <HAL_SDRAM_SendCommand+0x36>
{
 80057e6:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80057e8:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
 80057ec:	2c01      	cmp	r4, #1
 80057ee:	d001      	beq.n	80057f4 <HAL_SDRAM_SendCommand+0x18>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 80057f0:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80057f2:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057f4:	2302      	movs	r3, #2
 80057f6:	4605      	mov	r5, r0
 80057f8:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80057fa:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057fc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005800:	f000 fd88 	bl	8006314 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005804:	6833      	ldr	r3, [r6, #0]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d005      	beq.n	8005816 <HAL_SDRAM_SendCommand+0x3a>
      hsdram->State = HAL_SDRAM_STATE_READY;
 800580a:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  return HAL_OK;
 800580e:	2000      	movs	r0, #0
}
 8005810:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8005812:	4618      	mov	r0, r3
}
 8005814:	4770      	bx	lr
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005816:	2305      	movs	r3, #5
  return HAL_OK;
 8005818:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800581a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 800581e:	bd70      	pop	{r4, r5, r6, pc}

08005820 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005820:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005822:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d006      	beq.n	800583a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800582c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8005830:	b2ed      	uxtb	r5, r5
 8005832:	2d01      	cmp	r5, #1
 8005834:	d003      	beq.n	800583e <HAL_SDRAM_ProgramRefreshRate+0x1e>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8005836:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8005838:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800583a:	4618      	mov	r0, r3
}
 800583c:	bd38      	pop	{r3, r4, r5, pc}
 800583e:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005840:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005842:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005844:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005848:	f000 fd76 	bl	8006338 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 800584c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  return HAL_OK;
 8005850:	2000      	movs	r0, #0
}
 8005852:	bd38      	pop	{r3, r4, r5, pc}

08005854 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8005854:	6801      	ldr	r1, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005856:	4a30      	ldr	r2, [pc, #192]	; (8005918 <SPI_CloseTransfer+0xc4>)
{
 8005858:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800585a:	694b      	ldr	r3, [r1, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800585c:	698c      	ldr	r4, [r1, #24]
 800585e:	f044 0408 	orr.w	r4, r4, #8
 8005862:	618c      	str	r4, [r1, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005864:	6804      	ldr	r4, [r0, #0]
 8005866:	69a1      	ldr	r1, [r4, #24]
 8005868:	f041 0110 	orr.w	r1, r1, #16
 800586c:	61a1      	str	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800586e:	6804      	ldr	r4, [r0, #0]
 8005870:	6821      	ldr	r1, [r4, #0]
 8005872:	f021 0101 	bic.w	r1, r1, #1
 8005876:	6021      	str	r1, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005878:	6801      	ldr	r1, [r0, #0]
 800587a:	690c      	ldr	r4, [r1, #16]
 800587c:	4022      	ands	r2, r4
 800587e:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005880:	6801      	ldr	r1, [r0, #0]
 8005882:	688a      	ldr	r2, [r1, #8]
 8005884:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005888:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800588a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800588e:	2a04      	cmp	r2, #4
 8005890:	d001      	beq.n	8005896 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005892:	069c      	lsls	r4, r3, #26
 8005894:	d433      	bmi.n	80058fe <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005896:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800589a:	2a03      	cmp	r2, #3
 800589c:	d001      	beq.n	80058a2 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800589e:	0659      	lsls	r1, r3, #25
 80058a0:	d421      	bmi.n	80058e6 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80058a2:	059a      	lsls	r2, r3, #22
 80058a4:	d50a      	bpl.n	80058bc <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80058a6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80058aa:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80058ac:	f042 0201 	orr.w	r2, r2, #1
 80058b0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80058b4:	698a      	ldr	r2, [r1, #24]
 80058b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ba:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80058bc:	05db      	lsls	r3, r3, #23
 80058be:	d50a      	bpl.n	80058d6 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80058c0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80058c4:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80058c6:	f043 0308 	orr.w	r3, r3, #8
 80058ca:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80058ce:	6993      	ldr	r3, [r2, #24]
 80058d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d4:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80058d6:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 80058d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 80058dc:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80058e0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 80058e4:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80058e6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058ea:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80058ec:	f042 0204 	orr.w	r2, r2, #4
 80058f0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058f4:	698a      	ldr	r2, [r1, #24]
 80058f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058fa:	618a      	str	r2, [r1, #24]
 80058fc:	e7d1      	b.n	80058a2 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80058fe:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005902:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005904:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005908:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800590c:	698a      	ldr	r2, [r1, #24]
 800590e:	f042 0220 	orr.w	r2, r2, #32
 8005912:	618a      	str	r2, [r1, #24]
 8005914:	e7bf      	b.n	8005896 <SPI_CloseTransfer+0x42>
 8005916:	bf00      	nop
 8005918:	fffffc90 	.word	0xfffffc90

0800591c <HAL_SPI_Init>:
  if (hspi == NULL)
 800591c:	2800      	cmp	r0, #0
 800591e:	f000 809b 	beq.w	8005a58 <HAL_SPI_Init+0x13c>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005922:	4955      	ldr	r1, [pc, #340]	; (8005a78 <HAL_SPI_Init+0x15c>)
{
 8005924:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005926:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005928:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800592a:	428a      	cmp	r2, r1
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800592c:	6283      	str	r3, [r0, #40]	; 0x28
 800592e:	68c3      	ldr	r3, [r0, #12]
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005930:	d013      	beq.n	800595a <HAL_SPI_Init+0x3e>
 8005932:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 8005936:	428a      	cmp	r2, r1
 8005938:	d00f      	beq.n	800595a <HAL_SPI_Init+0x3e>
 800593a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800593e:	428a      	cmp	r2, r1
 8005940:	d075      	beq.n	8005a2e <HAL_SPI_Init+0x112>
 8005942:	2b0f      	cmp	r3, #15
 8005944:	d807      	bhi.n	8005956 <HAL_SPI_Init+0x3a>
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005946:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005948:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800594a:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800594c:	0949      	lsrs	r1, r1, #5

  return data_size * fifo_threashold;
 800594e:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005952:	2b08      	cmp	r3, #8
 8005954:	d907      	bls.n	8005966 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8005956:	2001      	movs	r0, #1
}
 8005958:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 800595a:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800595c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800595e:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005960:	0949      	lsrs	r1, r1, #5
  return data_size * fifo_threashold;
 8005962:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005966:	4c44      	ldr	r4, [pc, #272]	; (8005a78 <HAL_SPI_Init+0x15c>)
 8005968:	4944      	ldr	r1, [pc, #272]	; (8005a7c <HAL_SPI_Init+0x160>)
 800596a:	428a      	cmp	r2, r1
 800596c:	bf18      	it	ne
 800596e:	42a2      	cmpne	r2, r4
 8005970:	d063      	beq.n	8005a3a <HAL_SPI_Init+0x11e>
 8005972:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005976:	428a      	cmp	r2, r1
 8005978:	d05f      	beq.n	8005a3a <HAL_SPI_Init+0x11e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800597a:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800597e:	4604      	mov	r4, r0
 8005980:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8005984:	2b00      	cmp	r3, #0
 8005986:	d061      	beq.n	8005a4c <HAL_SPI_Init+0x130>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005988:	2302      	movs	r3, #2
 800598a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800598e:	6813      	ldr	r3, [r2, #0]
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005996:	69a3      	ldr	r3, [r4, #24]
 8005998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800599c:	d05e      	beq.n	8005a5c <HAL_SPI_Init+0x140>
 800599e:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80059a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80059a2:	69e3      	ldr	r3, [r4, #28]
 80059a4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80059a6:	430b      	orrs	r3, r1
 80059a8:	68e1      	ldr	r1, [r4, #12]
 80059aa:	4303      	orrs	r3, r0
 80059ac:	430b      	orrs	r3, r1
 80059ae:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80059b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80059b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80059b6:	4313      	orrs	r3, r2
 80059b8:	69a1      	ldr	r1, [r4, #24]
 80059ba:	6922      	ldr	r2, [r4, #16]
 80059bc:	4303      	orrs	r3, r0
 80059be:	6965      	ldr	r5, [r4, #20]
 80059c0:	6a20      	ldr	r0, [r4, #32]
 80059c2:	430b      	orrs	r3, r1
 80059c4:	6861      	ldr	r1, [r4, #4]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80059ca:	432b      	orrs	r3, r5
 80059cc:	68a5      	ldr	r5, [r4, #8]
 80059ce:	4303      	orrs	r3, r0
 80059d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80059d2:	430b      	orrs	r3, r1
 80059d4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80059d6:	4313      	orrs	r3, r2
 80059d8:	6822      	ldr	r2, [r4, #0]
 80059da:	432b      	orrs	r3, r5
 80059dc:	4303      	orrs	r3, r0
 80059de:	430b      	orrs	r3, r1
 80059e0:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80059e2:	6863      	ldr	r3, [r4, #4]
 80059e4:	b96b      	cbnz	r3, 8005a02 <HAL_SPI_Init+0xe6>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	6893      	ldr	r3, [r2, #8]
 80059ea:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80059ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059f2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	6893      	ldr	r3, [r2, #8]
 80059f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a00:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a02:	6822      	ldr	r2, [r4, #0]
 8005a04:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005a06:	f023 0301 	bic.w	r3, r3, #1
 8005a0a:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005a0c:	6863      	ldr	r3, [r4, #4]
 8005a0e:	025b      	lsls	r3, r3, #9
 8005a10:	d506      	bpl.n	8005a20 <HAL_SPI_Init+0x104>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005a16:	68d3      	ldr	r3, [r2, #12]
 8005a18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a20:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005a22:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a24:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005a28:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8005a2c:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 8005a2e:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005a30:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8005a32:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005a34:	0949      	lsrs	r1, r1, #5
  return data_size * fifo_threashold;
 8005a36:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d88b      	bhi.n	8005956 <HAL_SPI_Init+0x3a>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a3e:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8005a42:	4604      	mov	r4, r0
 8005a44:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d19d      	bne.n	8005988 <HAL_SPI_Init+0x6c>
    hspi->Lock = HAL_UNLOCKED;
 8005a4c:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8005a50:	f003 f92a 	bl	8008ca8 <HAL_SPI_MspInit>
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	e797      	b.n	8005988 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 8005a58:	2001      	movs	r0, #1
}
 8005a5a:	4770      	bx	lr
 8005a5c:	e9d4 2300 	ldrd	r2, r3, [r4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a64:	d19c      	bne.n	80059a0 <HAL_SPI_Init+0x84>
 8005a66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d199      	bne.n	80059a0 <HAL_SPI_Init+0x84>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005a6c:	6813      	ldr	r3, [r2, #0]
 8005a6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e793      	b.n	800599e <HAL_SPI_Init+0x82>
 8005a76:	bf00      	nop
 8005a78:	40013000 	.word	0x40013000
 8005a7c:	40003800 	.word	0x40003800

08005a80 <HAL_SPI_TransmitReceive_DMA>:
{
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005a84:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 8005a88:	2801      	cmp	r0, #1
 8005a8a:	d068      	beq.n	8005b5e <HAL_SPI_TransmitReceive_DMA+0xde>
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8005a8c:	6865      	ldr	r5, [r4, #4]
  __HAL_LOCK(hspi);
 8005a8e:	2601      	movs	r6, #1
  tmp_state   = hspi->State;
 8005a90:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8005a94:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
  __HAL_LOCK(hspi);
 8005a98:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
  tmp_state   = hspi->State;
 8005a9c:	b2c0      	uxtb	r0, r0
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8005a9e:	d010      	beq.n	8005ac2 <HAL_SPI_TransmitReceive_DMA+0x42>
 8005aa0:	2801      	cmp	r0, #1
 8005aa2:	d109      	bne.n	8005ab8 <HAL_SPI_TransmitReceive_DMA+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bf18      	it	ne
 8005aa8:	2a00      	cmpne	r2, #0
 8005aaa:	d000      	beq.n	8005aae <HAL_SPI_TransmitReceive_DMA+0x2e>
 8005aac:	b979      	cbnz	r1, 8005ace <HAL_SPI_TransmitReceive_DMA+0x4e>
    __HAL_UNLOCK(hspi);
 8005aae:	2300      	movs	r3, #0
    return errorcode;
 8005ab0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8005ab2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 8005ab8:	2300      	movs	r3, #0
    return errorcode;
 8005aba:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 8005abc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005ac0:	bd70      	pop	{r4, r5, r6, pc}
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8005ac2:	68a5      	ldr	r5, [r4, #8]
 8005ac4:	2d00      	cmp	r5, #0
 8005ac6:	d1eb      	bne.n	8005aa0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005ac8:	2804      	cmp	r0, #4
 8005aca:	d1e9      	bne.n	8005aa0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005acc:	e7ea      	b.n	8005aa4 <HAL_SPI_TransmitReceive_DMA+0x24>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ace:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
 8005ad2:	2804      	cmp	r0, #4
 8005ad4:	d002      	beq.n	8005adc <HAL_SPI_TransmitReceive_DMA+0x5c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ad6:	2005      	movs	r0, #5
 8005ad8:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005adc:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005ade:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ae0:	65e1      	str	r1, [r4, #92]	; 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->TxXferSize  = Size;
 8005ae6:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005aea:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005aee:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005af0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005af4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005af8:	e9c4 001c 	strd	r0, r0, [r4, #112]	; 0x70
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005afc:	68aa      	ldr	r2, [r5, #8]
 8005afe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005b02:	60aa      	str	r2, [r5, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005b04:	68e1      	ldr	r1, [r4, #12]
 8005b06:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005b08:	290f      	cmp	r1, #15
 8005b0a:	d92a      	bls.n	8005b62 <HAL_SPI_TransmitReceive_DMA+0xe2>
 8005b0c:	6991      	ldr	r1, [r2, #24]
 8005b0e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005b12:	d1cc      	bne.n	8005aae <HAL_SPI_TransmitReceive_DMA+0x2e>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005b14:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8005b18:	2904      	cmp	r1, #4
 8005b1a:	d04e      	beq.n	8005bba <HAL_SPI_TransmitReceive_DMA+0x13a>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005b1c:	4858      	ldr	r0, [pc, #352]	; (8005c80 <HAL_SPI_TransmitReceive_DMA+0x200>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005b1e:	4959      	ldr	r1, [pc, #356]	; (8005c84 <HAL_SPI_TransmitReceive_DMA+0x204>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005b20:	6410      	str	r0, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005b22:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005b24:	63d1      	str	r1, [r2, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005b26:	4958      	ldr	r1, [pc, #352]	; (8005c88 <HAL_SPI_TransmitReceive_DMA+0x208>)
 8005b28:	461d      	mov	r5, r3
 8005b2a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  hspi->hdmarx->XferAbortCallback = NULL;
 8005b2c:	2200      	movs	r2, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005b2e:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8005b30:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005b32:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005b34:	6821      	ldr	r1, [r4, #0]
 8005b36:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b3c:	3130      	adds	r1, #48	; 0x30
 8005b3e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005b40:	f7fb f864 	bl	8000c0c <HAL_DMA_Start_IT>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d05c      	beq.n	8005c02 <HAL_SPI_TransmitReceive_DMA+0x182>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b48:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8005b4c:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b4e:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 8005b52:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b54:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8005b58:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 8005b5c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hspi);
 8005b5e:	2002      	movs	r0, #2
}
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005b62:	2907      	cmp	r1, #7
 8005b64:	d82f      	bhi.n	8005bc6 <HAL_SPI_TransmitReceive_DMA+0x146>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b66:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005b68:	6981      	ldr	r1, [r0, #24]
 8005b6a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005b6e:	d106      	bne.n	8005b7e <HAL_SPI_TransmitReceive_DMA+0xfe>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8005b70:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8005b74:	3101      	adds	r1, #1
 8005b76:	0849      	lsrs	r1, r1, #1
 8005b78:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
 8005b7c:	6981      	ldr	r1, [r0, #24]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005b7e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005b82:	d105      	bne.n	8005b90 <HAL_SPI_TransmitReceive_DMA+0x110>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8005b84:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8005b88:	3103      	adds	r1, #3
 8005b8a:	0889      	lsrs	r1, r1, #2
 8005b8c:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b90:	6991      	ldr	r1, [r2, #24]
 8005b92:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005b96:	d106      	bne.n	8005ba6 <HAL_SPI_TransmitReceive_DMA+0x126>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8005b98:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8005b9c:	3101      	adds	r1, #1
 8005b9e:	0849      	lsrs	r1, r1, #1
 8005ba0:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8005ba4:	6991      	ldr	r1, [r2, #24]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005ba6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005baa:	d1b3      	bne.n	8005b14 <HAL_SPI_TransmitReceive_DMA+0x94>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8005bac:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8005bb0:	3103      	adds	r1, #3
 8005bb2:	0889      	lsrs	r1, r1, #2
 8005bb4:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8005bb8:	e7ac      	b.n	8005b14 <HAL_SPI_TransmitReceive_DMA+0x94>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005bba:	4834      	ldr	r0, [pc, #208]	; (8005c8c <HAL_SPI_TransmitReceive_DMA+0x20c>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005bbc:	4934      	ldr	r1, [pc, #208]	; (8005c90 <HAL_SPI_TransmitReceive_DMA+0x210>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005bbe:	6410      	str	r0, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005bc0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005bc2:	63d1      	str	r1, [r2, #60]	; 0x3c
 8005bc4:	e7af      	b.n	8005b26 <HAL_SPI_TransmitReceive_DMA+0xa6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8005bc6:	6991      	ldr	r1, [r2, #24]
 8005bc8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005bcc:	d003      	beq.n	8005bd6 <HAL_SPI_TransmitReceive_DMA+0x156>
 8005bce:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005bd2:	f47f af6c 	bne.w	8005aae <HAL_SPI_TransmitReceive_DMA+0x2e>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005bd6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005bd8:	6980      	ldr	r0, [r0, #24]
 8005bda:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8005bde:	d106      	bne.n	8005bee <HAL_SPI_TransmitReceive_DMA+0x16e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8005be0:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8005be4:	3101      	adds	r1, #1
 8005be6:	0849      	lsrs	r1, r1, #1
 8005be8:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
 8005bec:	6991      	ldr	r1, [r2, #24]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005bee:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005bf2:	d18f      	bne.n	8005b14 <HAL_SPI_TransmitReceive_DMA+0x94>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8005bf4:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8005bf8:	3101      	adds	r1, #1
 8005bfa:	0849      	lsrs	r1, r1, #1
 8005bfc:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8005c00:	e788      	b.n	8005b14 <HAL_SPI_TransmitReceive_DMA+0x94>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8005c02:	6822      	ldr	r2, [r4, #0]
 8005c04:	6893      	ldr	r3, [r2, #8]
 8005c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c0a:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005c0c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005c0e:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005c10:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005c12:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005c14:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005c16:	64d8      	str	r0, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005c18:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005c1a:	6518      	str	r0, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8005c1c:	6822      	ldr	r2, [r4, #0]
 8005c1e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005c22:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005c24:	3220      	adds	r2, #32
 8005c26:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005c28:	f7fa fff0 	bl	8000c0c <HAL_DMA_Start_IT>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	d18b      	bne.n	8005b48 <HAL_SPI_TransmitReceive_DMA+0xc8>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8005c30:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005c36:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8005c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005c3c:	4b15      	ldr	r3, [pc, #84]	; (8005c94 <HAL_SPI_TransmitReceive_DMA+0x214>)
 8005c3e:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005c42:	bf18      	it	ne
 8005c44:	432b      	orrne	r3, r5
 8005c46:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005c48:	6822      	ldr	r2, [r4, #0]
 8005c4a:	6893      	ldr	r3, [r2, #8]
 8005c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c50:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8005c52:	6822      	ldr	r2, [r4, #0]
 8005c54:	6913      	ldr	r3, [r2, #16]
 8005c56:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 8005c5a:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8005c5c:	6822      	ldr	r2, [r4, #0]
 8005c5e:	6813      	ldr	r3, [r2, #0]
 8005c60:	f043 0301 	orr.w	r3, r3, #1
 8005c64:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c66:	6863      	ldr	r3, [r4, #4]
 8005c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c6c:	d104      	bne.n	8005c78 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005c6e:	6822      	ldr	r2, [r4, #0]
 8005c70:	6813      	ldr	r3, [r2, #0]
 8005c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c76:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
 8005c80:	08005ebd 	.word	0x08005ebd
 8005c84:	08005e85 	.word	0x08005e85
 8005c88:	08005ecd 	.word	0x08005ecd
 8005c8c:	08005ead 	.word	0x08005ead
 8005c90:	08005e59 	.word	0x08005e59
 8005c94:	ffff0000 	.word	0xffff0000

08005c98 <HAL_SPI_Receive_DMA>:
{
 8005c98:	b570      	push	{r4, r5, r6, lr}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005c9a:	6885      	ldr	r5, [r0, #8]
{
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	460e      	mov	r6, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005ca0:	b925      	cbnz	r5, 8005cac <HAL_SPI_Receive_DMA+0x14>
 8005ca2:	6843      	ldr	r3, [r0, #4]
 8005ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca8:	f000 808d 	beq.w	8005dc6 <HAL_SPI_Receive_DMA+0x12e>
  __HAL_LOCK(hspi);
 8005cac:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	f000 8097 	beq.w	8005de4 <HAL_SPI_Receive_DMA+0x14c>
 8005cb6:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 8005cb8:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8005cbc:	428b      	cmp	r3, r1
  __HAL_LOCK(hspi);
 8005cbe:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 8005cc2:	d168      	bne.n	8005d96 <HAL_SPI_Receive_DMA+0xfe>
  if ((pData == NULL) || (Size == 0UL))
 8005cc4:	2e00      	cmp	r6, #0
 8005cc6:	d073      	beq.n	8005db0 <HAL_SPI_Receive_DMA+0x118>
 8005cc8:	fab2 f182 	clz	r1, r2
 8005ccc:	0949      	lsrs	r1, r1, #5
 8005cce:	2900      	cmp	r1, #0
 8005cd0:	d16e      	bne.n	8005db0 <HAL_SPI_Receive_DMA+0x118>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cd2:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd4:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cd8:	6666      	str	r6, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cda:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->RxXferSize  = Size;
 8005cde:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ce2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005ce6:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8005cea:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8005cee:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 8005cf2:	e9c4 111c 	strd	r1, r1, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cf6:	d06f      	beq.n	8005dd8 <HAL_SPI_Receive_DMA+0x140>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005cf8:	68e3      	ldr	r3, [r4, #12]
 8005cfa:	2b0f      	cmp	r3, #15
 8005cfc:	d85d      	bhi.n	8005dba <HAL_SPI_Receive_DMA+0x122>
 8005cfe:	2b07      	cmp	r3, #7
 8005d00:	d84e      	bhi.n	8005da0 <HAL_SPI_Receive_DMA+0x108>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8005d02:	6821      	ldr	r1, [r4, #0]
 8005d04:	688b      	ldr	r3, [r1, #8]
 8005d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d0a:	608b      	str	r3, [r1, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005d0c:	68e1      	ldr	r1, [r4, #12]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d0e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005d10:	2907      	cmp	r1, #7
 8005d12:	d869      	bhi.n	8005de8 <HAL_SPI_Receive_DMA+0x150>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d14:	6999      	ldr	r1, [r3, #24]
 8005d16:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005d1a:	f000 808a 	beq.w	8005e32 <HAL_SPI_Receive_DMA+0x19a>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005d1e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005d22:	d07f      	beq.n	8005e24 <HAL_SPI_Receive_DMA+0x18c>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005d24:	4947      	ldr	r1, [pc, #284]	; (8005e44 <HAL_SPI_Receive_DMA+0x1ac>)
 8005d26:	4615      	mov	r5, r2
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005d28:	4847      	ldr	r0, [pc, #284]	; (8005e48 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 8005d2a:	2200      	movs	r2, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005d2c:	6419      	str	r1, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005d2e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005d30:	4946      	ldr	r1, [pc, #280]	; (8005e4c <HAL_SPI_Receive_DMA+0x1b4>)
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005d32:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005d34:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005d36:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8005d38:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005d3a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005d3c:	6821      	ldr	r1, [r4, #0]
 8005d3e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005d42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d44:	3130      	adds	r1, #48	; 0x30
 8005d46:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005d48:	f7fa ff60 	bl	8000c0c <HAL_DMA_Start_IT>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d158      	bne.n	8005e02 <HAL_SPI_Receive_DMA+0x16a>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005d50:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005d52:	6822      	ldr	r2, [r4, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005d56:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005d5c:	4b3c      	ldr	r3, [pc, #240]	; (8005e50 <HAL_SPI_Receive_DMA+0x1b8>)
 8005d5e:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005d62:	bf18      	it	ne
 8005d64:	432b      	orrne	r3, r5
 8005d66:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8005d68:	6822      	ldr	r2, [r4, #0]
 8005d6a:	6893      	ldr	r3, [r2, #8]
 8005d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d70:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005d72:	6822      	ldr	r2, [r4, #0]
 8005d74:	6913      	ldr	r3, [r2, #16]
 8005d76:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 8005d7a:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8005d7c:	6822      	ldr	r2, [r4, #0]
 8005d7e:	6813      	ldr	r3, [r2, #0]
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d86:	6863      	ldr	r3, [r4, #4]
 8005d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d8c:	d044      	beq.n	8005e18 <HAL_SPI_Receive_DMA+0x180>
  __HAL_UNLOCK(hspi);
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005d94:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 8005d96:	2300      	movs	r3, #0
    return errorcode;
 8005d98:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 8005d9a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8005da0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da8:	d0ab      	beq.n	8005d02 <HAL_SPI_Receive_DMA+0x6a>
 8005daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dae:	d0a8      	beq.n	8005d02 <HAL_SPI_Receive_DMA+0x6a>
    __HAL_UNLOCK(hspi);
 8005db0:	2300      	movs	r3, #0
    return errorcode;
 8005db2:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8005db4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005db8:	bd70      	pop	{r4, r5, r6, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005dba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dc2:	d1f5      	bne.n	8005db0 <HAL_SPI_Receive_DMA+0x118>
 8005dc4:	e79d      	b.n	8005d02 <HAL_SPI_Receive_DMA+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005dc6:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005dc8:	4613      	mov	r3, r2
 8005dca:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005dcc:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
}
 8005dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005dd4:	f7ff be54 	b.w	8005a80 <HAL_SPI_TransmitReceive_DMA>
    SPI_1LINE_RX(hspi);
 8005dd8:	6821      	ldr	r1, [r4, #0]
 8005dda:	680b      	ldr	r3, [r1, #0]
 8005ddc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005de0:	600b      	str	r3, [r1, #0]
 8005de2:	e789      	b.n	8005cf8 <HAL_SPI_Receive_DMA+0x60>
  __HAL_LOCK(hspi);
 8005de4:	2002      	movs	r0, #2
}
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8005de8:	290f      	cmp	r1, #15
 8005dea:	d89b      	bhi.n	8005d24 <HAL_SPI_Receive_DMA+0x8c>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005dec:	6999      	ldr	r1, [r3, #24]
 8005dee:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005df2:	d197      	bne.n	8005d24 <HAL_SPI_Receive_DMA+0x8c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8005df4:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8005df8:	3101      	adds	r1, #1
 8005dfa:	0849      	lsrs	r1, r1, #1
 8005dfc:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8005e00:	e790      	b.n	8005d24 <HAL_SPI_Receive_DMA+0x8c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e02:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8005e06:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e08:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 8005e0c:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e0e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8005e12:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 8005e16:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005e18:	6822      	ldr	r2, [r4, #0]
 8005e1a:	6813      	ldr	r3, [r2, #0]
 8005e1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e7b4      	b.n	8005d8e <HAL_SPI_Receive_DMA+0xf6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8005e24:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8005e28:	3103      	adds	r1, #3
 8005e2a:	0889      	lsrs	r1, r1, #2
 8005e2c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8005e30:	e778      	b.n	8005d24 <HAL_SPI_Receive_DMA+0x8c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8005e32:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8005e36:	3101      	adds	r1, #1
 8005e38:	0849      	lsrs	r1, r1, #1
 8005e3a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8005e3e:	6999      	ldr	r1, [r3, #24]
 8005e40:	e76d      	b.n	8005d1e <HAL_SPI_Receive_DMA+0x86>
 8005e42:	bf00      	nop
 8005e44:	08005ead 	.word	0x08005ead
 8005e48:	08005e59 	.word	0x08005e59
 8005e4c:	08005ecd 	.word	0x08005ecd
 8005e50:	ffff0000 	.word	0xffff0000

08005e54 <HAL_SPI_TxCpltCallback>:
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop

08005e58 <SPI_DMAReceiveCplt>:
{
 8005e58:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e5a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8005e5c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8005e60:	2b07      	cmp	r3, #7
 8005e62:	d009      	beq.n	8005e78 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005e64:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6c:	d005      	beq.n	8005e7a <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8005e6e:	6802      	ldr	r2, [r0, #0]
 8005e70:	6913      	ldr	r3, [r2, #16]
 8005e72:	f043 0308 	orr.w	r3, r3, #8
 8005e76:	6113      	str	r3, [r2, #16]
}
 8005e78:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8005e7a:	f001 fe95 	bl	8007ba8 <HAL_SPI_RxCpltCallback>
}
 8005e7e:	bd08      	pop	{r3, pc}

08005e80 <HAL_SPI_TxRxCpltCallback>:
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop

08005e84 <SPI_DMATransmitReceiveCplt>:
{
 8005e84:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e86:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8005e88:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8005e8c:	2b07      	cmp	r3, #7
 8005e8e:	d009      	beq.n	8005ea4 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8005e90:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e98:	d005      	beq.n	8005ea6 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8005e9a:	6802      	ldr	r2, [r0, #0]
 8005e9c:	6913      	ldr	r3, [r2, #16]
 8005e9e:	f043 0308 	orr.w	r3, r3, #8
 8005ea2:	6113      	str	r3, [r2, #16]
}
 8005ea4:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 8005ea6:	f7ff ffeb 	bl	8005e80 <HAL_SPI_TxRxCpltCallback>
}
 8005eaa:	bd08      	pop	{r3, pc}

08005eac <SPI_DMAHalfReceiveCplt>:
{
 8005eac:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005eae:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005eb0:	f001 fee2 	bl	8007c78 <HAL_SPI_RxHalfCpltCallback>
}
 8005eb4:	bd08      	pop	{r3, pc}
 8005eb6:	bf00      	nop

08005eb8 <HAL_SPI_TxRxHalfCpltCallback>:
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop

08005ebc <SPI_DMAHalfTransmitReceiveCplt>:
{
 8005ebc:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005ebe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005ec0:	f7ff fffa 	bl	8005eb8 <HAL_SPI_TxRxHalfCpltCallback>
}
 8005ec4:	bd08      	pop	{r3, pc}
 8005ec6:	bf00      	nop

08005ec8 <HAL_SPI_ErrorCallback>:
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop

08005ecc <SPI_DMAError>:
{
 8005ecc:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ece:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005ed0:	f7fb fec2 	bl	8001c58 <HAL_DMA_GetError>
 8005ed4:	2802      	cmp	r0, #2
 8005ed6:	d066      	beq.n	8005fa6 <SPI_DMAError+0xda>
  uint32_t itflag = hspi->Instance->SR;
 8005ed8:	6821      	ldr	r1, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005eda:	4a33      	ldr	r2, [pc, #204]	; (8005fa8 <SPI_DMAError+0xdc>)
  uint32_t itflag = hspi->Instance->SR;
 8005edc:	694b      	ldr	r3, [r1, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005ede:	6988      	ldr	r0, [r1, #24]
 8005ee0:	f040 0008 	orr.w	r0, r0, #8
 8005ee4:	6188      	str	r0, [r1, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005ee6:	6820      	ldr	r0, [r4, #0]
 8005ee8:	6981      	ldr	r1, [r0, #24]
 8005eea:	f041 0110 	orr.w	r1, r1, #16
 8005eee:	6181      	str	r1, [r0, #24]
  __HAL_SPI_DISABLE(hspi);
 8005ef0:	6820      	ldr	r0, [r4, #0]
 8005ef2:	6801      	ldr	r1, [r0, #0]
 8005ef4:	f021 0101 	bic.w	r1, r1, #1
 8005ef8:	6001      	str	r1, [r0, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005efa:	6821      	ldr	r1, [r4, #0]
 8005efc:	6908      	ldr	r0, [r1, #16]
 8005efe:	4002      	ands	r2, r0
 8005f00:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005f02:	6821      	ldr	r1, [r4, #0]
 8005f04:	688a      	ldr	r2, [r1, #8]
 8005f06:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005f0a:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f0c:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8005f10:	2a04      	cmp	r2, #4
 8005f12:	d00c      	beq.n	8005f2e <SPI_DMAError+0x62>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005f14:	0698      	lsls	r0, r3, #26
 8005f16:	d50a      	bpl.n	8005f2e <SPI_DMAError+0x62>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005f18:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005f1c:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005f1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f22:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005f26:	698a      	ldr	r2, [r1, #24]
 8005f28:	f042 0220 	orr.w	r2, r2, #32
 8005f2c:	618a      	str	r2, [r1, #24]
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f2e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8005f32:	2a03      	cmp	r2, #3
 8005f34:	d00c      	beq.n	8005f50 <SPI_DMAError+0x84>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005f36:	0659      	lsls	r1, r3, #25
 8005f38:	d50a      	bpl.n	8005f50 <SPI_DMAError+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f3a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f3e:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f40:	f042 0204 	orr.w	r2, r2, #4
 8005f44:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f48:	698a      	ldr	r2, [r1, #24]
 8005f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f4e:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005f50:	059a      	lsls	r2, r3, #22
 8005f52:	d50a      	bpl.n	8005f6a <SPI_DMAError+0x9e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f54:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f58:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f62:	698a      	ldr	r2, [r1, #24]
 8005f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f68:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005f6a:	05db      	lsls	r3, r3, #23
 8005f6c:	d50a      	bpl.n	8005f84 <SPI_DMAError+0xb8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f6e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f72:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f74:	f043 0308 	orr.w	r3, r3, #8
 8005f78:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f7c:	6993      	ldr	r3, [r2, #24]
 8005f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f82:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 8005f84:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 8005f86:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 8005f88:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 8005f8a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005f8e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f92:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005f96:	f043 0310 	orr.w	r3, r3, #16
 8005f9a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8005f9e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8005fa2:	f7ff ff91 	bl	8005ec8 <HAL_SPI_ErrorCallback>
}
 8005fa6:	bd10      	pop	{r4, pc}
 8005fa8:	fffffc90 	.word	0xfffffc90

08005fac <HAL_SPI_IRQHandler>:
{
 8005fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 8005fb0:	6803      	ldr	r3, [r0, #0]
{
 8005fb2:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8005fb4:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8005fb6:	695a      	ldr	r2, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005fb8:	f8d3 c008 	ldr.w	ip, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 8005fbc:	ea01 0502 	and.w	r5, r1, r2
  HAL_SPI_StateTypeDef State = hspi->State;
 8005fc0:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005fc4:	f005 0664 	and.w	r6, r5, #100	; 0x64
 8005fc8:	2e04      	cmp	r6, #4
 8005fca:	f040 8086 	bne.w	80060da <HAL_SPI_IRQHandler+0x12e>
    hspi->TxISR(hspi);
 8005fce:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005fd0:	f005 0626 	and.w	r6, r5, #38	; 0x26
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005fd4:	f005 0545 	and.w	r5, r5, #69	; 0x45
    hspi->TxISR(hspi);
 8005fd8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005fda:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005fdc:	4620      	mov	r0, r4
 8005fde:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005fe0:	2d01      	cmp	r5, #1
 8005fe2:	d102      	bne.n	8005fea <HAL_SPI_IRQHandler+0x3e>
    hspi->RxISR(hspi);
 8005fe4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005fea:	2e02      	cmp	r6, #2
 8005fec:	d173      	bne.n	80060d6 <HAL_SPI_IRQHandler+0x12a>
    hspi->TxISR(hspi);
 8005fee:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005ff0:	4620      	mov	r0, r4
}
 8005ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8005ff6:	4718      	bx	r3
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005ff8:	0517      	lsls	r7, r2, #20
 8005ffa:	f100 80d9 	bmi.w	80061b0 <HAL_SPI_IRQHandler+0x204>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005ffe:	f415 7f58 	tst.w	r5, #864	; 0x360
 8006002:	d068      	beq.n	80060d6 <HAL_SPI_IRQHandler+0x12a>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006004:	0668      	lsls	r0, r5, #25
 8006006:	d509      	bpl.n	800601c <HAL_SPI_IRQHandler+0x70>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006008:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800600c:	f042 0204 	orr.w	r2, r2, #4
 8006010:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800601a:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800601c:	05a9      	lsls	r1, r5, #22
 800601e:	d50a      	bpl.n	8006036 <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006020:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006024:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800602e:	6993      	ldr	r3, [r2, #24]
 8006030:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006034:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006036:	05ea      	lsls	r2, r5, #23
 8006038:	d50a      	bpl.n	8006050 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800603a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800603e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006040:	f043 0308 	orr.w	r3, r3, #8
 8006044:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006048:	6993      	ldr	r3, [r2, #24]
 800604a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800604e:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006050:	06ab      	lsls	r3, r5, #26
 8006052:	d50a      	bpl.n	800606a <HAL_SPI_IRQHandler+0xbe>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006054:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006058:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800605a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006062:	6993      	ldr	r3, [r2, #24]
 8006064:	f043 0320 	orr.w	r3, r3, #32
 8006068:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800606a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800606e:	2b00      	cmp	r3, #0
 8006070:	d031      	beq.n	80060d6 <HAL_SPI_IRQHandler+0x12a>
      __HAL_SPI_DISABLE(hspi);
 8006072:	6821      	ldr	r1, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006074:	f40c 4c40 	and.w	ip, ip, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8006078:	4b5e      	ldr	r3, [pc, #376]	; (80061f4 <HAL_SPI_IRQHandler+0x248>)
      __HAL_SPI_DISABLE(hspi);
 800607a:	680a      	ldr	r2, [r1, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800607c:	f5bc 4f40 	cmp.w	ip, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8006080:	f022 0201 	bic.w	r2, r2, #1
 8006084:	600a      	str	r2, [r1, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8006086:	6822      	ldr	r2, [r4, #0]
 8006088:	6911      	ldr	r1, [r2, #16]
 800608a:	ea03 0301 	and.w	r3, r3, r1
 800608e:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006090:	f040 80a9 	bne.w	80061e6 <HAL_SPI_IRQHandler+0x23a>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006094:	6822      	ldr	r2, [r4, #0]
 8006096:	6893      	ldr	r3, [r2, #8]
 8006098:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800609c:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800609e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80060a0:	b15b      	cbz	r3, 80060ba <HAL_SPI_IRQHandler+0x10e>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80060a2:	4a55      	ldr	r2, [pc, #340]	; (80061f8 <HAL_SPI_IRQHandler+0x24c>)
 80060a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80060a6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80060a8:	f7fb f87e 	bl	80011a8 <HAL_DMA_Abort_IT>
 80060ac:	b128      	cbz	r0, 80060ba <HAL_SPI_IRQHandler+0x10e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060ae:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80060b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060b6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 80060ba:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80060bc:	b15b      	cbz	r3, 80060d6 <HAL_SPI_IRQHandler+0x12a>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80060be:	4a4e      	ldr	r2, [pc, #312]	; (80061f8 <HAL_SPI_IRQHandler+0x24c>)
 80060c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80060c2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80060c4:	f7fb f870 	bl	80011a8 <HAL_DMA_Abort_IT>
 80060c8:	b128      	cbz	r0, 80060d6 <HAL_SPI_IRQHandler+0x12a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060ca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80060ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 80060d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80060da:	f005 0045 	and.w	r0, r5, #69	; 0x45
 80060de:	f005 0626 	and.w	r6, r5, #38	; 0x26
 80060e2:	2801      	cmp	r0, #1
 80060e4:	f43f af7e 	beq.w	8005fe4 <HAL_SPI_IRQHandler+0x38>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80060e8:	2e02      	cmp	r6, #2
 80060ea:	d080      	beq.n	8005fee <HAL_SPI_IRQHandler+0x42>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80060ec:	0728      	lsls	r0, r5, #28
 80060ee:	d583      	bpl.n	8005ff8 <HAL_SPI_IRQHandler+0x4c>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80060f0:	699a      	ldr	r2, [r3, #24]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80060f2:	f41c 4f40 	tst.w	ip, #49152	; 0xc000
 80060f6:	b2ff      	uxtb	r7, r7
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80060f8:	f042 0208 	orr.w	r2, r2, #8
 80060fc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80060fe:	6821      	ldr	r1, [r4, #0]
 8006100:	698a      	ldr	r2, [r1, #24]
 8006102:	f042 0210 	orr.w	r2, r2, #16
 8006106:	618a      	str	r2, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006108:	6821      	ldr	r1, [r4, #0]
 800610a:	698a      	ldr	r2, [r1, #24]
 800610c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006110:	618a      	str	r2, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006112:	6821      	ldr	r1, [r4, #0]
 8006114:	690a      	ldr	r2, [r1, #16]
 8006116:	f022 0208 	bic.w	r2, r2, #8
 800611a:	610a      	str	r2, [r1, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800611c:	d00f      	beq.n	800613e <HAL_SPI_IRQHandler+0x192>
 800611e:	2f04      	cmp	r7, #4
 8006120:	d059      	beq.n	80061d6 <HAL_SPI_IRQHandler+0x22a>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8006122:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006124:	69d2      	ldr	r2, [r2, #28]
 8006126:	b152      	cbz	r2, 800613e <HAL_SPI_IRQHandler+0x192>
 8006128:	2f03      	cmp	r7, #3
 800612a:	d03d      	beq.n	80061a8 <HAL_SPI_IRQHandler+0x1fc>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800612c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800612e:	69d2      	ldr	r2, [r2, #28]
 8006130:	b12a      	cbz	r2, 800613e <HAL_SPI_IRQHandler+0x192>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006132:	2f05      	cmp	r7, #5
 8006134:	d1cf      	bne.n	80060d6 <HAL_SPI_IRQHandler+0x12a>
      HAL_SPI_TxRxCpltCallback(hspi);
 8006136:	4620      	mov	r0, r4
 8006138:	f7ff fea2 	bl	8005e80 <HAL_SPI_TxRxCpltCallback>
 800613c:	e7cb      	b.n	80060d6 <HAL_SPI_IRQHandler+0x12a>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800613e:	6822      	ldr	r2, [r4, #0]
 8006140:	6892      	ldr	r2, [r2, #8]
 8006142:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8006146:	d120      	bne.n	800618a <HAL_SPI_IRQHandler+0x1de>
        while (hspi->RxXferCount != 0UL)
 8006148:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800614c:	b292      	uxth	r2, r2
 800614e:	b1e2      	cbz	r2, 800618a <HAL_SPI_IRQHandler+0x1de>
 8006150:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006152:	e00f      	b.n	8006174 <HAL_SPI_IRQHandler+0x1c8>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006154:	6822      	ldr	r2, [r4, #0]
 8006156:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006158:	600a      	str	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800615a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800615c:	3104      	adds	r1, #4
 800615e:	6661      	str	r1, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8006160:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006164:	3a01      	subs	r2, #1
 8006166:	b292      	uxth	r2, r2
 8006168:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800616c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006170:	b292      	uxth	r2, r2
 8006172:	b152      	cbz	r2, 800618a <HAL_SPI_IRQHandler+0x1de>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006174:	68e2      	ldr	r2, [r4, #12]
 8006176:	2a0f      	cmp	r2, #15
 8006178:	d8ec      	bhi.n	8006154 <HAL_SPI_IRQHandler+0x1a8>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800617a:	2a07      	cmp	r2, #7
 800617c:	d923      	bls.n	80061c6 <HAL_SPI_IRQHandler+0x21a>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800617e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8006180:	800a      	strh	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8006182:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006184:	3102      	adds	r1, #2
 8006186:	6661      	str	r1, [r4, #100]	; 0x64
 8006188:	e7ea      	b.n	8006160 <HAL_SPI_IRQHandler+0x1b4>
      SPI_CloseTransfer(hspi);
 800618a:	4620      	mov	r0, r4
 800618c:	f7ff fb62 	bl	8005854 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8006190:	2301      	movs	r3, #1
 8006192:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006196:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800619a:	b98b      	cbnz	r3, 80061c0 <HAL_SPI_IRQHandler+0x214>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800619c:	2f05      	cmp	r7, #5
 800619e:	d0ca      	beq.n	8006136 <HAL_SPI_IRQHandler+0x18a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80061a0:	2f04      	cmp	r7, #4
 80061a2:	d01c      	beq.n	80061de <HAL_SPI_IRQHandler+0x232>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80061a4:	2f03      	cmp	r7, #3
 80061a6:	d196      	bne.n	80060d6 <HAL_SPI_IRQHandler+0x12a>
      HAL_SPI_TxCpltCallback(hspi);
 80061a8:	4620      	mov	r0, r4
 80061aa:	f7ff fe53 	bl	8005e54 <HAL_SPI_TxCpltCallback>
 80061ae:	e792      	b.n	80060d6 <HAL_SPI_IRQHandler+0x12a>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80061b0:	070e      	lsls	r6, r1, #28
 80061b2:	f57f af24 	bpl.w	8005ffe <HAL_SPI_IRQHandler+0x52>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061bc:	619a      	str	r2, [r3, #24]
    return;
 80061be:	e78a      	b.n	80060d6 <HAL_SPI_IRQHandler+0x12a>
        HAL_SPI_ErrorCallback(hspi);
 80061c0:	f7ff fe82 	bl	8005ec8 <HAL_SPI_ErrorCallback>
        return;
 80061c4:	e787      	b.n	80060d6 <HAL_SPI_IRQHandler+0x12a>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80061c6:	6822      	ldr	r2, [r4, #0]
 80061c8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80061cc:	700a      	strb	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80061ce:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80061d0:	3101      	adds	r1, #1
 80061d2:	6661      	str	r1, [r4, #100]	; 0x64
 80061d4:	e7c4      	b.n	8006160 <HAL_SPI_IRQHandler+0x1b4>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80061d6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80061d8:	69d2      	ldr	r2, [r2, #28]
 80061da:	2a00      	cmp	r2, #0
 80061dc:	d0af      	beq.n	800613e <HAL_SPI_IRQHandler+0x192>
      HAL_SPI_RxCpltCallback(hspi);
 80061de:	4620      	mov	r0, r4
 80061e0:	f001 fce2 	bl	8007ba8 <HAL_SPI_RxCpltCallback>
 80061e4:	e777      	b.n	80060d6 <HAL_SPI_IRQHandler+0x12a>
        hspi->State = HAL_SPI_STATE_READY;
 80061e6:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 80061e8:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 80061ea:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80061ee:	f7ff fe6b 	bl	8005ec8 <HAL_SPI_ErrorCallback>
 80061f2:	e770      	b.n	80060d6 <HAL_SPI_IRQHandler+0x12a>
 80061f4:	fffffc94 	.word	0xfffffc94
 80061f8:	080061fd 	.word	0x080061fd

080061fc <SPI_DMAAbortOnError>:
{
 80061fc:	b508      	push	{r3, lr}
  hspi->RxXferCount = (uint16_t) 0UL;
 80061fe:	2200      	movs	r2, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006200:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_READY;
 8006202:	2101      	movs	r1, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 8006204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  HAL_SPI_ErrorCallback(hspi);
 8006208:	4618      	mov	r0, r3
  hspi->TxXferCount = (uint16_t) 0UL;
 800620a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800620e:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006212:	f7ff fe59 	bl	8005ec8 <HAL_SPI_ErrorCallback>
}
 8006216:	bd08      	pop	{r3, pc}

08006218 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006218:	b470      	push	{r4, r5, r6}
 800621a:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800621e:	680c      	ldr	r4, [r1, #0]
 8006220:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006222:	4313      	orrs	r3, r2
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006224:	b1c4      	cbz	r4, 8006258 <FMC_SDRAM_Init+0x40>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006226:	6804      	ldr	r4, [r0, #0]
 8006228:	432b      	orrs	r3, r5
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800622a:	4a16      	ldr	r2, [pc, #88]	; (8006284 <FMC_SDRAM_Init+0x6c>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800622c:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8006230:	4323      	orrs	r3, r4
 8006232:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006234:	6843      	ldr	r3, [r0, #4]
 8006236:	684c      	ldr	r4, [r1, #4]
 8006238:	401a      	ands	r2, r3
 800623a:	690d      	ldr	r5, [r1, #16]
 800623c:	e9d1 3602 	ldrd	r3, r6, [r1, #8]
 8006240:	4322      	orrs	r2, r4
 8006242:	4313      	orrs	r3, r2
 8006244:	4333      	orrs	r3, r6
 8006246:	e9d1 4105 	ldrd	r4, r1, [r1, #20]
 800624a:	432b      	orrs	r3, r5
 800624c:	4323      	orrs	r3, r4
 800624e:	430b      	orrs	r3, r1
 8006250:	6043      	str	r3, [r0, #4]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006252:	2000      	movs	r0, #0
 8006254:	bc70      	pop	{r4, r5, r6}
 8006256:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006258:	6804      	ldr	r4, [r0, #0]
 800625a:	432b      	orrs	r3, r5
 800625c:	4a09      	ldr	r2, [pc, #36]	; (8006284 <FMC_SDRAM_Init+0x6c>)
 800625e:	684d      	ldr	r5, [r1, #4]
 8006260:	4022      	ands	r2, r4
 8006262:	688c      	ldr	r4, [r1, #8]
 8006264:	68ce      	ldr	r6, [r1, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	432b      	orrs	r3, r5
 800626a:	690d      	ldr	r5, [r1, #16]
 800626c:	4323      	orrs	r3, r4
 800626e:	4333      	orrs	r3, r6
 8006270:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 8006274:	432b      	orrs	r3, r5
 8006276:	4323      	orrs	r3, r4
 8006278:	4313      	orrs	r3, r2
 800627a:	6003      	str	r3, [r0, #0]
}
 800627c:	2000      	movs	r0, #0
 800627e:	bc70      	pop	{r4, r5, r6}
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	ffff8000 	.word	0xffff8000

08006288 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006288:	b4f0      	push	{r4, r5, r6, r7}
 800628a:	68cb      	ldr	r3, [r1, #12]
 800628c:	694c      	ldr	r4, [r1, #20]
 800628e:	3b01      	subs	r3, #1
 8006290:	3c01      	subs	r4, #1
 8006292:	031b      	lsls	r3, r3, #12
 8006294:	0524      	lsls	r4, r4, #20
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006296:	b1fa      	cbz	r2, 80062d8 <FMC_SDRAM_Timing_Init+0x50>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006298:	6885      	ldr	r5, [r0, #8]
 800629a:	4323      	orrs	r3, r4
 800629c:	4a1c      	ldr	r2, [pc, #112]	; (8006310 <FMC_SDRAM_Timing_Init+0x88>)
 800629e:	402a      	ands	r2, r5
 80062a0:	4313      	orrs	r3, r2
 80062a2:	6083      	str	r3, [r0, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80062a4:	684c      	ldr	r4, [r1, #4]
 80062a6:	68c2      	ldr	r2, [r0, #12]
 80062a8:	680d      	ldr	r5, [r1, #0]
 80062aa:	1e63      	subs	r3, r4, #1
 80062ac:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80062b0:	688c      	ldr	r4, [r1, #8]
 80062b2:	1e6e      	subs	r6, r5, #1
 80062b4:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80062b8:	1e65      	subs	r5, r4, #1
 80062ba:	690c      	ldr	r4, [r1, #16]
 80062bc:	4333      	orrs	r3, r6
 80062be:	698a      	ldr	r2, [r1, #24]
 80062c0:	1e61      	subs	r1, r4, #1
 80062c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80062c6:	3a01      	subs	r2, #1
 80062c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80062cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80062d0:	60c3      	str	r3, [r0, #12]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80062d2:	2000      	movs	r0, #0
 80062d4:	bcf0      	pop	{r4, r5, r6, r7}
 80062d6:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80062d8:	680a      	ldr	r2, [r1, #0]
 80062da:	4323      	orrs	r3, r4
 80062dc:	6887      	ldr	r7, [r0, #8]
 80062de:	3a01      	subs	r2, #1
 80062e0:	684c      	ldr	r4, [r1, #4]
 80062e2:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
 80062e6:	688d      	ldr	r5, [r1, #8]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	1e66      	subs	r6, r4, #1
 80062ec:	3d01      	subs	r5, #1
 80062ee:	690c      	ldr	r4, [r1, #16]
 80062f0:	433b      	orrs	r3, r7
 80062f2:	698a      	ldr	r2, [r1, #24]
 80062f4:	1e61      	subs	r1, r4, #1
 80062f6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 80062fa:	3a01      	subs	r2, #1
 80062fc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006304:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006308:	6083      	str	r3, [r0, #8]
}
 800630a:	2000      	movs	r0, #0
 800630c:	bcf0      	pop	{r4, r5, r6, r7}
 800630e:	4770      	bx	lr
 8006310:	ff0f0fff 	.word	0xff0f0fff

08006314 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006314:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 8006316:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 800631a:	4604      	mov	r4, r0
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800631c:	2000      	movs	r0, #0
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 800631e:	4313      	orrs	r3, r2
 8006320:	6926      	ldr	r6, [r4, #16]
 8006322:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006326:	4333      	orrs	r3, r6
 8006328:	3a01      	subs	r2, #1
 800632a:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
 800632e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006332:	6123      	str	r3, [r4, #16]
}
 8006334:	bc70      	pop	{r4, r5, r6}
 8006336:	4770      	bx	lr

08006338 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006338:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800633a:	4b05      	ldr	r3, [pc, #20]	; (8006350 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800633c:	2000      	movs	r0, #0
{
 800633e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006340:	6954      	ldr	r4, [r2, #20]
 8006342:	4023      	ands	r3, r4
 8006344:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006348:	6151      	str	r1, [r2, #20]
}
 800634a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	ffffc001 	.word	0xffffc001

08006354 <SDMMC_GetCmdResp1.part.2>:
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006354:	4b30      	ldr	r3, [pc, #192]	; (8006418 <SDMMC_GetCmdResp1.part.2+0xc4>)
  return (*(__IO uint32_t *) tmp);
 8006356:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006358:	4013      	ands	r3, r2
 800635a:	b34b      	cbz	r3, 80063b0 <SDMMC_GetCmdResp1.part.2+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800635c:	2a00      	cmp	r2, #0
 800635e:	db29      	blt.n	80063b4 <SDMMC_GetCmdResp1.part.2+0x60>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006360:	0051      	lsls	r1, r2, #1
 8006362:	d42d      	bmi.n	80063c0 <SDMMC_GetCmdResp1.part.2+0x6c>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006364:	0093      	lsls	r3, r2, #2
 8006366:	d42d      	bmi.n	80063c4 <SDMMC_GetCmdResp1.part.2+0x70>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006368:	00d1      	lsls	r1, r2, #3
 800636a:	d426      	bmi.n	80063ba <SDMMC_GetCmdResp1.part.2+0x66>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800636c:	0113      	lsls	r3, r2, #4
 800636e:	d42e      	bmi.n	80063ce <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	d42f      	bmi.n	80063d4 <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006374:	01d3      	lsls	r3, r2, #7
 8006376:	d427      	bmi.n	80063c8 <SDMMC_GetCmdResp1.part.2+0x74>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006378:	0211      	lsls	r1, r2, #8
 800637a:	d42e      	bmi.n	80063da <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800637c:	0253      	lsls	r3, r2, #9
 800637e:	d42f      	bmi.n	80063e0 <SDMMC_GetCmdResp1.part.2+0x8c>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006380:	0291      	lsls	r1, r2, #10
 8006382:	d430      	bmi.n	80063e6 <SDMMC_GetCmdResp1.part.2+0x92>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006384:	02d3      	lsls	r3, r2, #11
 8006386:	d431      	bmi.n	80063ec <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006388:	0351      	lsls	r1, r2, #13
 800638a:	d432      	bmi.n	80063f2 <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800638c:	0393      	lsls	r3, r2, #14
 800638e:	d433      	bmi.n	80063f8 <SDMMC_GetCmdResp1.part.2+0xa4>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006390:	03d1      	lsls	r1, r2, #15
 8006392:	d434      	bmi.n	80063fe <SDMMC_GetCmdResp1.part.2+0xaa>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006394:	0413      	lsls	r3, r2, #16
 8006396:	d435      	bmi.n	8006404 <SDMMC_GetCmdResp1.part.2+0xb0>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006398:	0451      	lsls	r1, r2, #17
 800639a:	d436      	bmi.n	800640a <SDMMC_GetCmdResp1.part.2+0xb6>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800639c:	0493      	lsls	r3, r2, #18
 800639e:	d437      	bmi.n	8006410 <SDMMC_GetCmdResp1.part.2+0xbc>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80063a0:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80063a4:	bf14      	ite	ne
 80063a6:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80063aa:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80063ae:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 80063b0:	4618      	mov	r0, r3
 80063b2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80063b4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80063b8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80063ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80063be:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80063c0:	2040      	movs	r0, #64	; 0x40
 80063c2:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80063c4:	2080      	movs	r0, #128	; 0x80
 80063c6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80063c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80063cc:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80063ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80063d2:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80063d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80063d8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80063da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80063de:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80063e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80063e4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80063e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80063ea:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80063ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80063f0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80063f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80063f6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80063f8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80063fc:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80063fe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006402:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006404:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006408:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800640a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800640e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8006410:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	fdffe008 	.word	0xfdffe008

0800641c <SDMMC_Init>:
{
 800641c:	b084      	sub	sp, #16
 800641e:	b470      	push	{r4, r5, r6}
 8006420:	ad04      	add	r5, sp, #16
 8006422:	4606      	mov	r6, r0
             Init.BusWide             |\
 8006424:	9c07      	ldr	r4, [sp, #28]
}
 8006426:	2000      	movs	r0, #0
{
 8006428:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800642c:	460b      	mov	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800642e:	6875      	ldr	r5, [r6, #4]
             Init.ClockPowerSave      |\
 8006430:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 8006434:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8006436:	9908      	ldr	r1, [sp, #32]
             Init.ClockPowerSave      |\
 8006438:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800643a:	4a04      	ldr	r2, [pc, #16]	; (800644c <SDMMC_Init+0x30>)
             Init.BusWide             |\
 800643c:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800643e:	402a      	ands	r2, r5
             Init.HardwareFlowControl |\
 8006440:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006442:	4313      	orrs	r3, r2
 8006444:	6073      	str	r3, [r6, #4]
}
 8006446:	bc70      	pop	{r4, r5, r6}
 8006448:	b004      	add	sp, #16
 800644a:	4770      	bx	lr
 800644c:	ffc02c00 	.word	0xffc02c00

08006450 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8006450:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop

08006458 <SDMMC_WriteFIFO>:
{
 8006458:	4603      	mov	r3, r0
  SDMMCx->FIFO = *pWriteData;
 800645a:	680a      	ldr	r2, [r1, #0]
}
 800645c:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800645e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8006462:	4770      	bx	lr

08006464 <SDMMC_PowerState_ON>:
{
 8006464:	4602      	mov	r2, r0
}
 8006466:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006468:	6813      	ldr	r3, [r2, #0]
 800646a:	f043 0303 	orr.w	r3, r3, #3
 800646e:	6013      	str	r3, [r2, #0]
}
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop

08006474 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006474:	6800      	ldr	r0, [r0, #0]
}
 8006476:	f000 0003 	and.w	r0, r0, #3
 800647a:	4770      	bx	lr

0800647c <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800647c:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800647e:	5840      	ldr	r0, [r0, r1]
}
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop

08006484 <SDMMC_ConfigData>:
{
 8006484:	b430      	push	{r4, r5}
 8006486:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006488:	680b      	ldr	r3, [r1, #0]
}
 800648a:	2000      	movs	r0, #0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800648c:	6253      	str	r3, [r2, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800648e:	684b      	ldr	r3, [r1, #4]
 8006490:	6293      	str	r3, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 8006492:	690d      	ldr	r5, [r1, #16]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006494:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 8006498:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800649a:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800649c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferDir   |\
 800649e:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80064a0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
                       Data->TransferMode  |\
 80064a4:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80064a6:	430b      	orrs	r3, r1
 80064a8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80064aa:	bc30      	pop	{r4, r5}
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop

080064b0 <SDMMC_CmdBlockLength>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80064b0:	4a1c      	ldr	r2, [pc, #112]	; (8006524 <SDMMC_CmdBlockLength+0x74>)
 80064b2:	4b1d      	ldr	r3, [pc, #116]	; (8006528 <SDMMC_CmdBlockLength+0x78>)
{
 80064b4:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80064b6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80064b8:	f241 1410 	movw	r4, #4368	; 0x1110
  SDMMCx->ARG = Command->Argument;
 80064bc:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80064be:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80064c2:	68c1      	ldr	r1, [r0, #12]
 80064c4:	4d19      	ldr	r5, [pc, #100]	; (800652c <SDMMC_CmdBlockLength+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80064c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80064ca:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80064cc:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80064ce:	4918      	ldr	r1, [pc, #96]	; (8006530 <SDMMC_CmdBlockLength+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80064d0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80064d4:	432c      	orrs	r4, r5
 80064d6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80064d8:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80064dc:	d312      	bcc.n	8006504 <SDMMC_CmdBlockLength+0x54>
    sta_reg = SDMMCx->STA;
 80064de:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80064e0:	420a      	tst	r2, r1
 80064e2:	d0f9      	beq.n	80064d8 <SDMMC_CmdBlockLength+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80064e4:	0494      	lsls	r4, r2, #18
 80064e6:	d4f7      	bmi.n	80064d8 <SDMMC_CmdBlockLength+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80064e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80064ea:	075a      	lsls	r2, r3, #29
 80064ec:	d413      	bmi.n	8006516 <SDMMC_CmdBlockLength+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80064ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80064f0:	07db      	lsls	r3, r3, #31
 80064f2:	d40b      	bmi.n	800650c <SDMMC_CmdBlockLength+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80064f4:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <SDMMC_CmdBlockLength+0x84>)
 80064f6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80064f8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b10      	cmp	r3, #16
 80064fe:	d00e      	beq.n	800651e <SDMMC_CmdBlockLength+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006500:	2001      	movs	r0, #1
  return errorstate;
 8006502:	e001      	b.n	8006508 <SDMMC_CmdBlockLength+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8006504:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006508:	bc30      	pop	{r4, r5}
 800650a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800650c:	2301      	movs	r3, #1
 800650e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006510:	4618      	mov	r0, r3
}
 8006512:	bc30      	pop	{r4, r5}
 8006514:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006516:	2304      	movs	r3, #4
 8006518:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800651a:	4618      	mov	r0, r3
 800651c:	e7f4      	b.n	8006508 <SDMMC_CmdBlockLength+0x58>
}
 800651e:	bc30      	pop	{r4, r5}
 8006520:	f7ff bf18 	b.w	8006354 <SDMMC_GetCmdResp1.part.2>
 8006524:	200003a4 	.word	0x200003a4
 8006528:	10624dd3 	.word	0x10624dd3
 800652c:	fffee0c0 	.word	0xfffee0c0
 8006530:	00200045 	.word	0x00200045
 8006534:	002000c5 	.word	0x002000c5

08006538 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006538:	4a1c      	ldr	r2, [pc, #112]	; (80065ac <SDMMC_CmdReadSingleBlock+0x74>)
 800653a:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <SDMMC_CmdReadSingleBlock+0x78>)
{
 800653c:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800653e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006540:	f241 1411 	movw	r4, #4369	; 0x1111
  SDMMCx->ARG = Command->Argument;
 8006544:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006546:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800654a:	68c1      	ldr	r1, [r0, #12]
 800654c:	4d19      	ldr	r5, [pc, #100]	; (80065b4 <SDMMC_CmdReadSingleBlock+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800654e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006552:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006554:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006556:	4918      	ldr	r1, [pc, #96]	; (80065b8 <SDMMC_CmdReadSingleBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006558:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800655c:	432c      	orrs	r4, r5
 800655e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006560:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006564:	d312      	bcc.n	800658c <SDMMC_CmdReadSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 8006566:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006568:	420a      	tst	r2, r1
 800656a:	d0f9      	beq.n	8006560 <SDMMC_CmdReadSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800656c:	0494      	lsls	r4, r2, #18
 800656e:	d4f7      	bmi.n	8006560 <SDMMC_CmdReadSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006570:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006572:	075a      	lsls	r2, r3, #29
 8006574:	d413      	bmi.n	800659e <SDMMC_CmdReadSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006576:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006578:	07db      	lsls	r3, r3, #31
 800657a:	d40b      	bmi.n	8006594 <SDMMC_CmdReadSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800657c:	4b0f      	ldr	r3, [pc, #60]	; (80065bc <SDMMC_CmdReadSingleBlock+0x84>)
 800657e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006580:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b11      	cmp	r3, #17
 8006586:	d00e      	beq.n	80065a6 <SDMMC_CmdReadSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006588:	2001      	movs	r0, #1
  return errorstate;
 800658a:	e001      	b.n	8006590 <SDMMC_CmdReadSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800658c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006590:	bc30      	pop	{r4, r5}
 8006592:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006594:	2301      	movs	r3, #1
 8006596:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006598:	4618      	mov	r0, r3
}
 800659a:	bc30      	pop	{r4, r5}
 800659c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800659e:	2304      	movs	r3, #4
 80065a0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065a2:	4618      	mov	r0, r3
 80065a4:	e7f4      	b.n	8006590 <SDMMC_CmdReadSingleBlock+0x58>
}
 80065a6:	bc30      	pop	{r4, r5}
 80065a8:	f7ff bed4 	b.w	8006354 <SDMMC_GetCmdResp1.part.2>
 80065ac:	200003a4 	.word	0x200003a4
 80065b0:	10624dd3 	.word	0x10624dd3
 80065b4:	fffee0c0 	.word	0xfffee0c0
 80065b8:	00200045 	.word	0x00200045
 80065bc:	002000c5 	.word	0x002000c5

080065c0 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80065c0:	4a1c      	ldr	r2, [pc, #112]	; (8006634 <SDMMC_CmdReadMultiBlock+0x74>)
 80065c2:	4b1d      	ldr	r3, [pc, #116]	; (8006638 <SDMMC_CmdReadMultiBlock+0x78>)
{
 80065c4:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80065c6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80065c8:	f241 1412 	movw	r4, #4370	; 0x1112
  SDMMCx->ARG = Command->Argument;
 80065cc:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80065ce:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80065d2:	68c1      	ldr	r1, [r0, #12]
 80065d4:	4d19      	ldr	r5, [pc, #100]	; (800663c <SDMMC_CmdReadMultiBlock+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80065d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80065da:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80065dc:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80065de:	4918      	ldr	r1, [pc, #96]	; (8006640 <SDMMC_CmdReadMultiBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80065e0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80065e4:	432c      	orrs	r4, r5
 80065e6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80065e8:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80065ec:	d312      	bcc.n	8006614 <SDMMC_CmdReadMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 80065ee:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80065f0:	420a      	tst	r2, r1
 80065f2:	d0f9      	beq.n	80065e8 <SDMMC_CmdReadMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80065f4:	0494      	lsls	r4, r2, #18
 80065f6:	d4f7      	bmi.n	80065e8 <SDMMC_CmdReadMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80065f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80065fa:	075a      	lsls	r2, r3, #29
 80065fc:	d413      	bmi.n	8006626 <SDMMC_CmdReadMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80065fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006600:	07db      	lsls	r3, r3, #31
 8006602:	d40b      	bmi.n	800661c <SDMMC_CmdReadMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006604:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <SDMMC_CmdReadMultiBlock+0x84>)
 8006606:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006608:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b12      	cmp	r3, #18
 800660e:	d00e      	beq.n	800662e <SDMMC_CmdReadMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006610:	2001      	movs	r0, #1
  return errorstate;
 8006612:	e001      	b.n	8006618 <SDMMC_CmdReadMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8006614:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006618:	bc30      	pop	{r4, r5}
 800661a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800661c:	2301      	movs	r3, #1
 800661e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006620:	4618      	mov	r0, r3
}
 8006622:	bc30      	pop	{r4, r5}
 8006624:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006626:	2304      	movs	r3, #4
 8006628:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800662a:	4618      	mov	r0, r3
 800662c:	e7f4      	b.n	8006618 <SDMMC_CmdReadMultiBlock+0x58>
}
 800662e:	bc30      	pop	{r4, r5}
 8006630:	f7ff be90 	b.w	8006354 <SDMMC_GetCmdResp1.part.2>
 8006634:	200003a4 	.word	0x200003a4
 8006638:	10624dd3 	.word	0x10624dd3
 800663c:	fffee0c0 	.word	0xfffee0c0
 8006640:	00200045 	.word	0x00200045
 8006644:	002000c5 	.word	0x002000c5

08006648 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006648:	4a1c      	ldr	r2, [pc, #112]	; (80066bc <SDMMC_CmdWriteSingleBlock+0x74>)
 800664a:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <SDMMC_CmdWriteSingleBlock+0x78>)
{
 800664c:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800664e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006650:	f241 1418 	movw	r4, #4376	; 0x1118
  SDMMCx->ARG = Command->Argument;
 8006654:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006656:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800665a:	68c1      	ldr	r1, [r0, #12]
 800665c:	4d19      	ldr	r5, [pc, #100]	; (80066c4 <SDMMC_CmdWriteSingleBlock+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800665e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006662:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006664:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006666:	4918      	ldr	r1, [pc, #96]	; (80066c8 <SDMMC_CmdWriteSingleBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006668:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800666c:	432c      	orrs	r4, r5
 800666e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006670:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006674:	d312      	bcc.n	800669c <SDMMC_CmdWriteSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 8006676:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006678:	420a      	tst	r2, r1
 800667a:	d0f9      	beq.n	8006670 <SDMMC_CmdWriteSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800667c:	0494      	lsls	r4, r2, #18
 800667e:	d4f7      	bmi.n	8006670 <SDMMC_CmdWriteSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006680:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006682:	075a      	lsls	r2, r3, #29
 8006684:	d413      	bmi.n	80066ae <SDMMC_CmdWriteSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006686:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006688:	07db      	lsls	r3, r3, #31
 800668a:	d40b      	bmi.n	80066a4 <SDMMC_CmdWriteSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800668c:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <SDMMC_CmdWriteSingleBlock+0x84>)
 800668e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006690:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b18      	cmp	r3, #24
 8006696:	d00e      	beq.n	80066b6 <SDMMC_CmdWriteSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006698:	2001      	movs	r0, #1
  return errorstate;
 800669a:	e001      	b.n	80066a0 <SDMMC_CmdWriteSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800669c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80066a0:	bc30      	pop	{r4, r5}
 80066a2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80066a4:	2301      	movs	r3, #1
 80066a6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066a8:	4618      	mov	r0, r3
}
 80066aa:	bc30      	pop	{r4, r5}
 80066ac:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80066ae:	2304      	movs	r3, #4
 80066b0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066b2:	4618      	mov	r0, r3
 80066b4:	e7f4      	b.n	80066a0 <SDMMC_CmdWriteSingleBlock+0x58>
}
 80066b6:	bc30      	pop	{r4, r5}
 80066b8:	f7ff be4c 	b.w	8006354 <SDMMC_GetCmdResp1.part.2>
 80066bc:	200003a4 	.word	0x200003a4
 80066c0:	10624dd3 	.word	0x10624dd3
 80066c4:	fffee0c0 	.word	0xfffee0c0
 80066c8:	00200045 	.word	0x00200045
 80066cc:	002000c5 	.word	0x002000c5

080066d0 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80066d0:	4a1c      	ldr	r2, [pc, #112]	; (8006744 <SDMMC_CmdWriteMultiBlock+0x74>)
 80066d2:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <SDMMC_CmdWriteMultiBlock+0x78>)
{
 80066d4:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80066d6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80066d8:	f241 1419 	movw	r4, #4377	; 0x1119
  SDMMCx->ARG = Command->Argument;
 80066dc:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80066de:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80066e2:	68c1      	ldr	r1, [r0, #12]
 80066e4:	4d19      	ldr	r5, [pc, #100]	; (800674c <SDMMC_CmdWriteMultiBlock+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80066e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80066ea:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80066ec:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80066ee:	4918      	ldr	r1, [pc, #96]	; (8006750 <SDMMC_CmdWriteMultiBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80066f0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80066f4:	432c      	orrs	r4, r5
 80066f6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80066f8:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80066fc:	d312      	bcc.n	8006724 <SDMMC_CmdWriteMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 80066fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006700:	420a      	tst	r2, r1
 8006702:	d0f9      	beq.n	80066f8 <SDMMC_CmdWriteMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006704:	0494      	lsls	r4, r2, #18
 8006706:	d4f7      	bmi.n	80066f8 <SDMMC_CmdWriteMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006708:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800670a:	075a      	lsls	r2, r3, #29
 800670c:	d413      	bmi.n	8006736 <SDMMC_CmdWriteMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800670e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006710:	07db      	lsls	r3, r3, #31
 8006712:	d40b      	bmi.n	800672c <SDMMC_CmdWriteMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006714:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <SDMMC_CmdWriteMultiBlock+0x84>)
 8006716:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006718:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b19      	cmp	r3, #25
 800671e:	d00e      	beq.n	800673e <SDMMC_CmdWriteMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006720:	2001      	movs	r0, #1
  return errorstate;
 8006722:	e001      	b.n	8006728 <SDMMC_CmdWriteMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8006724:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006728:	bc30      	pop	{r4, r5}
 800672a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800672c:	2301      	movs	r3, #1
 800672e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006730:	4618      	mov	r0, r3
}
 8006732:	bc30      	pop	{r4, r5}
 8006734:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006736:	2304      	movs	r3, #4
 8006738:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800673a:	4618      	mov	r0, r3
 800673c:	e7f4      	b.n	8006728 <SDMMC_CmdWriteMultiBlock+0x58>
}
 800673e:	bc30      	pop	{r4, r5}
 8006740:	f7ff be08 	b.w	8006354 <SDMMC_GetCmdResp1.part.2>
 8006744:	200003a4 	.word	0x200003a4
 8006748:	10624dd3 	.word	0x10624dd3
 800674c:	fffee0c0 	.word	0xfffee0c0
 8006750:	00200045 	.word	0x00200045
 8006754:	002000c5 	.word	0x002000c5

08006758 <SDMMC_CmdStopTransfer>:
{
 8006758:	b570      	push	{r4, r5, r6, lr}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800675a:	68c3      	ldr	r3, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800675c:	2600      	movs	r6, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800675e:	4a2b      	ldr	r2, [pc, #172]	; (800680c <SDMMC_CmdStopTransfer+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006760:	f241 140c 	movw	r4, #4364	; 0x110c
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006768:	4d29      	ldr	r5, [pc, #164]	; (8006810 <SDMMC_CmdStopTransfer+0xb8>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800676a:	6812      	ldr	r2, [r2, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800676c:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800676e:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006770:	4b28      	ldr	r3, [pc, #160]	; (8006814 <SDMMC_CmdStopTransfer+0xbc>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006772:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006776:	fba3 3202 	umull	r3, r2, r3, r2
 800677a:	4b27      	ldr	r3, [pc, #156]	; (8006818 <SDMMC_CmdStopTransfer+0xc0>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800677c:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800677e:	6086      	str	r6, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006780:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006782:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006784:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006788:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800678a:	4924      	ldr	r1, [pc, #144]	; (800681c <SDMMC_CmdStopTransfer+0xc4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800678c:	432c      	orrs	r4, r5
 800678e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006790:	b1c3      	cbz	r3, 80067c4 <SDMMC_CmdStopTransfer+0x6c>
    sta_reg = SDMMCx->STA;
 8006792:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006794:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006796:	420a      	tst	r2, r1
 8006798:	d0fa      	beq.n	8006790 <SDMMC_CmdStopTransfer+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800679a:	0492      	lsls	r2, r2, #18
 800679c:	d4f8      	bmi.n	8006790 <SDMMC_CmdStopTransfer+0x38>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800679e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80067a0:	075b      	lsls	r3, r3, #29
 80067a2:	d41f      	bmi.n	80067e4 <SDMMC_CmdStopTransfer+0x8c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80067a4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80067a6:	f014 0401 	ands.w	r4, r4, #1
 80067aa:	d113      	bne.n	80067d4 <SDMMC_CmdStopTransfer+0x7c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80067ac:	4b1c      	ldr	r3, [pc, #112]	; (8006820 <SDMMC_CmdStopTransfer+0xc8>)
 80067ae:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80067b0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b0c      	cmp	r3, #12
 80067b6:	d01c      	beq.n	80067f2 <SDMMC_CmdStopTransfer+0x9a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80067b8:	68c3      	ldr	r3, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067ba:	2401      	movs	r4, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80067bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067c0:	60c3      	str	r3, [r0, #12]
 80067c2:	e005      	b.n	80067d0 <SDMMC_CmdStopTransfer+0x78>
 80067c4:	68c3      	ldr	r3, [r0, #12]
      return SDMMC_ERROR_TIMEOUT;
 80067c6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80067ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ce:	60c3      	str	r3, [r0, #12]
}
 80067d0:	4620      	mov	r0, r4
 80067d2:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80067d4:	2401      	movs	r4, #1
 80067d6:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80067d8:	68c3      	ldr	r3, [r0, #12]
 80067da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067de:	60c3      	str	r3, [r0, #12]
}
 80067e0:	4620      	mov	r0, r4
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80067e4:	2404      	movs	r4, #4
 80067e6:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80067e8:	68c3      	ldr	r3, [r0, #12]
 80067ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ee:	60c3      	str	r3, [r0, #12]
 80067f0:	e7ee      	b.n	80067d0 <SDMMC_CmdStopTransfer+0x78>
 80067f2:	4605      	mov	r5, r0
 80067f4:	f7ff fdae 	bl	8006354 <SDMMC_GetCmdResp1.part.2>
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80067f8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80067fc:	bf18      	it	ne
 80067fe:	4604      	movne	r4, r0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006800:	68eb      	ldr	r3, [r5, #12]
 8006802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006806:	60eb      	str	r3, [r5, #12]
 8006808:	e7e2      	b.n	80067d0 <SDMMC_CmdStopTransfer+0x78>
 800680a:	bf00      	nop
 800680c:	200003a4 	.word	0x200003a4
 8006810:	fffee0c0 	.word	0xfffee0c0
 8006814:	10624dd3 	.word	0x10624dd3
 8006818:	05f5e100 	.word	0x05f5e100
 800681c:	00200045 	.word	0x00200045
 8006820:	002000c5 	.word	0x002000c5

08006824 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006824:	4b1c      	ldr	r3, [pc, #112]	; (8006898 <SDMMC_CmdSelDesel+0x74>)
 8006826:	491d      	ldr	r1, [pc, #116]	; (800689c <SDMMC_CmdSelDesel+0x78>)
{
 8006828:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800682a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800682c:	f241 1407 	movw	r4, #4359	; 0x1107
  SDMMCx->ARG = Command->Argument;
 8006830:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006832:	4d1b      	ldr	r5, [pc, #108]	; (80068a0 <SDMMC_CmdSelDesel+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006834:	fba1 3203 	umull	r3, r2, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006838:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800683a:	f241 3388 	movw	r3, #5000	; 0x1388
 800683e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006840:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006842:	4918      	ldr	r1, [pc, #96]	; (80068a4 <SDMMC_CmdSelDesel+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006844:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006848:	432c      	orrs	r4, r5
 800684a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800684c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006850:	d312      	bcc.n	8006878 <SDMMC_CmdSelDesel+0x54>
    sta_reg = SDMMCx->STA;
 8006852:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006854:	420a      	tst	r2, r1
 8006856:	d0f9      	beq.n	800684c <SDMMC_CmdSelDesel+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006858:	0494      	lsls	r4, r2, #18
 800685a:	d4f7      	bmi.n	800684c <SDMMC_CmdSelDesel+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800685c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800685e:	075a      	lsls	r2, r3, #29
 8006860:	d413      	bmi.n	800688a <SDMMC_CmdSelDesel+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006862:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006864:	07db      	lsls	r3, r3, #31
 8006866:	d40b      	bmi.n	8006880 <SDMMC_CmdSelDesel+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006868:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <SDMMC_CmdSelDesel+0x84>)
 800686a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800686c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b07      	cmp	r3, #7
 8006872:	d00e      	beq.n	8006892 <SDMMC_CmdSelDesel+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006874:	2001      	movs	r0, #1
  return errorstate;
 8006876:	e001      	b.n	800687c <SDMMC_CmdSelDesel+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8006878:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800687c:	bc30      	pop	{r4, r5}
 800687e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006880:	2301      	movs	r3, #1
 8006882:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006884:	4618      	mov	r0, r3
}
 8006886:	bc30      	pop	{r4, r5}
 8006888:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800688a:	2304      	movs	r3, #4
 800688c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800688e:	4618      	mov	r0, r3
 8006890:	e7f4      	b.n	800687c <SDMMC_CmdSelDesel+0x58>
}
 8006892:	bc30      	pop	{r4, r5}
 8006894:	f7ff bd5e 	b.w	8006354 <SDMMC_GetCmdResp1.part.2>
 8006898:	200003a4 	.word	0x200003a4
 800689c:	10624dd3 	.word	0x10624dd3
 80068a0:	fffee0c0 	.word	0xfffee0c0
 80068a4:	00200045 	.word	0x00200045
 80068a8:	002000c5 	.word	0x002000c5

080068ac <SDMMC_CmdGoIdleState>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068ac:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <SDMMC_CmdGoIdleState+0x4c>)
{
 80068ae:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 80068b0:	2200      	movs	r2, #0
{
 80068b2:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068b4:	4c11      	ldr	r4, [pc, #68]	; (80068fc <SDMMC_CmdGoIdleState+0x50>)
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80068bc:	608a      	str	r2, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068be:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80068c2:	4a0f      	ldr	r2, [pc, #60]	; (8006900 <SDMMC_CmdGoIdleState+0x54>)
 80068c4:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068c6:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80068c8:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068ca:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80068ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068d2:	60ca      	str	r2, [r1, #12]
 80068d4:	e002      	b.n	80068dc <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80068d6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80068d8:	0612      	lsls	r2, r2, #24
 80068da:	d407      	bmi.n	80068ec <SDMMC_CmdGoIdleState+0x40>
    if (count-- == 0U)
 80068dc:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80068e0:	d2f9      	bcs.n	80068d6 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80068e2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80068e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ea:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80068ec:	4b05      	ldr	r3, [pc, #20]	; (8006904 <SDMMC_CmdGoIdleState+0x58>)
  return SDMMC_ERROR_NONE;
 80068ee:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80068f0:	638b      	str	r3, [r1, #56]	; 0x38
}
 80068f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	200003a4 	.word	0x200003a4
 80068fc:	10624dd3 	.word	0x10624dd3
 8006900:	fffee0c0 	.word	0xfffee0c0
 8006904:	002000c5 	.word	0x002000c5

08006908 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006908:	4a1c      	ldr	r2, [pc, #112]	; (800697c <SDMMC_CmdOperCond+0x74>)
{
 800690a:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800690c:	4b1c      	ldr	r3, [pc, #112]	; (8006980 <SDMMC_CmdOperCond+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800690e:	f241 1008 	movw	r0, #4360	; 0x1108
{
 8006912:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8006914:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006918:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800691a:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800691c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006920:	68cd      	ldr	r5, [r1, #12]
 8006922:	4c18      	ldr	r4, [pc, #96]	; (8006984 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006924:	f241 3388 	movw	r3, #5000	; 0x1388
 8006928:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800692a:	402c      	ands	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800692c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006930:	4320      	orrs	r0, r4
 8006932:	60c8      	str	r0, [r1, #12]

  do
  {
    if (count-- == 0U)
 8006934:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006938:	d313      	bcc.n	8006962 <SDMMC_CmdOperCond+0x5a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800693a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800693c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006940:	d0f8      	beq.n	8006934 <SDMMC_CmdOperCond+0x2c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006942:	0492      	lsls	r2, r2, #18
 8006944:	d4f6      	bmi.n	8006934 <SDMMC_CmdOperCond+0x2c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006946:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006948:	075b      	lsls	r3, r3, #29
 800694a:	d412      	bmi.n	8006972 <SDMMC_CmdOperCond+0x6a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800694c:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800694e:	f010 0001 	ands.w	r0, r0, #1
 8006952:	d10a      	bne.n	800696a <SDMMC_CmdOperCond+0x62>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006954:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006956:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800695a:	d00d      	beq.n	8006978 <SDMMC_CmdOperCond+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800695c:	2340      	movs	r3, #64	; 0x40
 800695e:	638b      	str	r3, [r1, #56]	; 0x38
 8006960:	e001      	b.n	8006966 <SDMMC_CmdOperCond+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8006962:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006966:	bc30      	pop	{r4, r5}
 8006968:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800696a:	2001      	movs	r0, #1
 800696c:	6388      	str	r0, [r1, #56]	; 0x38
}
 800696e:	bc30      	pop	{r4, r5}
 8006970:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006972:	2004      	movs	r0, #4
 8006974:	6388      	str	r0, [r1, #56]	; 0x38
 8006976:	e7f6      	b.n	8006966 <SDMMC_CmdOperCond+0x5e>
  }

  return SDMMC_ERROR_NONE;
 8006978:	4618      	mov	r0, r3
  return errorstate;
 800697a:	e7f4      	b.n	8006966 <SDMMC_CmdOperCond+0x5e>
 800697c:	200003a4 	.word	0x200003a4
 8006980:	10624dd3 	.word	0x10624dd3
 8006984:	fffee0c0 	.word	0xfffee0c0

08006988 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006988:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <SDMMC_CmdAppCommand+0x74>)
 800698a:	4b1d      	ldr	r3, [pc, #116]	; (8006a00 <SDMMC_CmdAppCommand+0x78>)
{
 800698c:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800698e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006990:	f241 1437 	movw	r4, #4407	; 0x1137
  SDMMCx->ARG = Command->Argument;
 8006994:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006996:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800699a:	68c1      	ldr	r1, [r0, #12]
 800699c:	4d19      	ldr	r5, [pc, #100]	; (8006a04 <SDMMC_CmdAppCommand+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800699e:	f241 3388 	movw	r3, #5000	; 0x1388
 80069a2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80069a4:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80069a6:	4918      	ldr	r1, [pc, #96]	; (8006a08 <SDMMC_CmdAppCommand+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80069a8:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80069ac:	432c      	orrs	r4, r5
 80069ae:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80069b0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80069b4:	d312      	bcc.n	80069dc <SDMMC_CmdAppCommand+0x54>
    sta_reg = SDMMCx->STA;
 80069b6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80069b8:	420a      	tst	r2, r1
 80069ba:	d0f9      	beq.n	80069b0 <SDMMC_CmdAppCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80069bc:	0494      	lsls	r4, r2, #18
 80069be:	d4f7      	bmi.n	80069b0 <SDMMC_CmdAppCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80069c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069c2:	075a      	lsls	r2, r3, #29
 80069c4:	d413      	bmi.n	80069ee <SDMMC_CmdAppCommand+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80069c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069c8:	07db      	lsls	r3, r3, #31
 80069ca:	d40b      	bmi.n	80069e4 <SDMMC_CmdAppCommand+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80069cc:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <SDMMC_CmdAppCommand+0x84>)
 80069ce:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80069d0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b37      	cmp	r3, #55	; 0x37
 80069d6:	d00e      	beq.n	80069f6 <SDMMC_CmdAppCommand+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069d8:	2001      	movs	r0, #1
  return errorstate;
 80069da:	e001      	b.n	80069e0 <SDMMC_CmdAppCommand+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80069dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80069e0:	bc30      	pop	{r4, r5}
 80069e2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80069e4:	2301      	movs	r3, #1
 80069e6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069e8:	4618      	mov	r0, r3
}
 80069ea:	bc30      	pop	{r4, r5}
 80069ec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80069ee:	2304      	movs	r3, #4
 80069f0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80069f2:	4618      	mov	r0, r3
 80069f4:	e7f4      	b.n	80069e0 <SDMMC_CmdAppCommand+0x58>
}
 80069f6:	bc30      	pop	{r4, r5}
 80069f8:	f7ff bcac 	b.w	8006354 <SDMMC_GetCmdResp1.part.2>
 80069fc:	200003a4 	.word	0x200003a4
 8006a00:	10624dd3 	.word	0x10624dd3
 8006a04:	fffee0c0 	.word	0xfffee0c0
 8006a08:	00200045 	.word	0x00200045
 8006a0c:	002000c5 	.word	0x002000c5

08006a10 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a10:	4a15      	ldr	r2, [pc, #84]	; (8006a68 <SDMMC_CmdAppOperCommand+0x58>)
 8006a12:	4b16      	ldr	r3, [pc, #88]	; (8006a6c <SDMMC_CmdAppOperCommand+0x5c>)
{
 8006a14:	b430      	push	{r4, r5}
 8006a16:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a18:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a1a:	f241 1029 	movw	r0, #4393	; 0x1129
  SDMMCx->ARG = Command->Argument;
 8006a1e:	60a1      	str	r1, [r4, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a20:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a24:	68e5      	ldr	r5, [r4, #12]
 8006a26:	4912      	ldr	r1, [pc, #72]	; (8006a70 <SDMMC_CmdAppOperCommand+0x60>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a28:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a2c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a2e:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a30:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a34:	4308      	orrs	r0, r1
 8006a36:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 8006a38:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006a3c:	d30d      	bcc.n	8006a5a <SDMMC_CmdAppOperCommand+0x4a>
    sta_reg = SDMMCx->STA;
 8006a3e:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006a40:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006a44:	d0f8      	beq.n	8006a38 <SDMMC_CmdAppOperCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006a46:	0492      	lsls	r2, r2, #18
 8006a48:	d4f6      	bmi.n	8006a38 <SDMMC_CmdAppOperCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006a4a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006a4c:	f010 0004 	ands.w	r0, r0, #4
 8006a50:	d107      	bne.n	8006a62 <SDMMC_CmdAppOperCommand+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006a52:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <SDMMC_CmdAppOperCommand+0x64>)
 8006a54:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006a56:	bc30      	pop	{r4, r5}
 8006a58:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006a5a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006a5e:	bc30      	pop	{r4, r5}
 8006a60:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006a62:	2004      	movs	r0, #4
 8006a64:	63a0      	str	r0, [r4, #56]	; 0x38
 8006a66:	e7fa      	b.n	8006a5e <SDMMC_CmdAppOperCommand+0x4e>
 8006a68:	200003a4 	.word	0x200003a4
 8006a6c:	10624dd3 	.word	0x10624dd3
 8006a70:	fffee0c0 	.word	0xfffee0c0
 8006a74:	002000c5 	.word	0x002000c5

08006a78 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a78:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <SDMMC_CmdBusWidth+0x74>)
 8006a7a:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <SDMMC_CmdBusWidth+0x78>)
{
 8006a7c:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a7e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a80:	f241 1406 	movw	r4, #4358	; 0x1106
  SDMMCx->ARG = Command->Argument;
 8006a84:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a86:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a8a:	68c1      	ldr	r1, [r0, #12]
 8006a8c:	4d19      	ldr	r5, [pc, #100]	; (8006af4 <SDMMC_CmdBusWidth+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a92:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a94:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006a96:	4918      	ldr	r1, [pc, #96]	; (8006af8 <SDMMC_CmdBusWidth+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a98:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a9c:	432c      	orrs	r4, r5
 8006a9e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006aa0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006aa4:	d312      	bcc.n	8006acc <SDMMC_CmdBusWidth+0x54>
    sta_reg = SDMMCx->STA;
 8006aa6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006aa8:	420a      	tst	r2, r1
 8006aaa:	d0f9      	beq.n	8006aa0 <SDMMC_CmdBusWidth+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006aac:	0494      	lsls	r4, r2, #18
 8006aae:	d4f7      	bmi.n	8006aa0 <SDMMC_CmdBusWidth+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ab0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ab2:	075a      	lsls	r2, r3, #29
 8006ab4:	d413      	bmi.n	8006ade <SDMMC_CmdBusWidth+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006ab6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ab8:	07db      	lsls	r3, r3, #31
 8006aba:	d40b      	bmi.n	8006ad4 <SDMMC_CmdBusWidth+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006abc:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <SDMMC_CmdBusWidth+0x84>)
 8006abe:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006ac0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b06      	cmp	r3, #6
 8006ac6:	d00e      	beq.n	8006ae6 <SDMMC_CmdBusWidth+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ac8:	2001      	movs	r0, #1
  return errorstate;
 8006aca:	e001      	b.n	8006ad0 <SDMMC_CmdBusWidth+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8006acc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006ad0:	bc30      	pop	{r4, r5}
 8006ad2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ad8:	4618      	mov	r0, r3
}
 8006ada:	bc30      	pop	{r4, r5}
 8006adc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ade:	2304      	movs	r3, #4
 8006ae0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	e7f4      	b.n	8006ad0 <SDMMC_CmdBusWidth+0x58>
}
 8006ae6:	bc30      	pop	{r4, r5}
 8006ae8:	f7ff bc34 	b.w	8006354 <SDMMC_GetCmdResp1.part.2>
 8006aec:	200003a4 	.word	0x200003a4
 8006af0:	10624dd3 	.word	0x10624dd3
 8006af4:	fffee0c0 	.word	0xfffee0c0
 8006af8:	00200045 	.word	0x00200045
 8006afc:	002000c5 	.word	0x002000c5

08006b00 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b00:	4a1d      	ldr	r2, [pc, #116]	; (8006b78 <SDMMC_CmdSendSCR+0x78>)
  SDMMCx->ARG = Command->Argument;
 8006b02:	2100      	movs	r1, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b04:	4b1d      	ldr	r3, [pc, #116]	; (8006b7c <SDMMC_CmdSendSCR+0x7c>)
{
 8006b06:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b08:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b0a:	f241 1433 	movw	r4, #4403	; 0x1133
  SDMMCx->ARG = Command->Argument;
 8006b0e:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b10:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b14:	68c1      	ldr	r1, [r0, #12]
 8006b16:	4d1a      	ldr	r5, [pc, #104]	; (8006b80 <SDMMC_CmdSendSCR+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b18:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b1c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b1e:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006b20:	4918      	ldr	r1, [pc, #96]	; (8006b84 <SDMMC_CmdSendSCR+0x84>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b22:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b26:	432c      	orrs	r4, r5
 8006b28:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006b2a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006b2e:	d312      	bcc.n	8006b56 <SDMMC_CmdSendSCR+0x56>
    sta_reg = SDMMCx->STA;
 8006b30:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006b32:	420a      	tst	r2, r1
 8006b34:	d0f9      	beq.n	8006b2a <SDMMC_CmdSendSCR+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006b36:	0494      	lsls	r4, r2, #18
 8006b38:	d4f7      	bmi.n	8006b2a <SDMMC_CmdSendSCR+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006b3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b3c:	075a      	lsls	r2, r3, #29
 8006b3e:	d413      	bmi.n	8006b68 <SDMMC_CmdSendSCR+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006b40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b42:	07db      	lsls	r3, r3, #31
 8006b44:	d40b      	bmi.n	8006b5e <SDMMC_CmdSendSCR+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006b46:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <SDMMC_CmdSendSCR+0x88>)
 8006b48:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006b4a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b33      	cmp	r3, #51	; 0x33
 8006b50:	d00e      	beq.n	8006b70 <SDMMC_CmdSendSCR+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b52:	2001      	movs	r0, #1
  return errorstate;
 8006b54:	e001      	b.n	8006b5a <SDMMC_CmdSendSCR+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8006b56:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006b5a:	bc30      	pop	{r4, r5}
 8006b5c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006b5e:	2301      	movs	r3, #1
 8006b60:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b62:	4618      	mov	r0, r3
}
 8006b64:	bc30      	pop	{r4, r5}
 8006b66:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006b68:	2304      	movs	r3, #4
 8006b6a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	e7f4      	b.n	8006b5a <SDMMC_CmdSendSCR+0x5a>
}
 8006b70:	bc30      	pop	{r4, r5}
 8006b72:	f7ff bbef 	b.w	8006354 <SDMMC_GetCmdResp1.part.2>
 8006b76:	bf00      	nop
 8006b78:	200003a4 	.word	0x200003a4
 8006b7c:	10624dd3 	.word	0x10624dd3
 8006b80:	fffee0c0 	.word	0xfffee0c0
 8006b84:	00200045 	.word	0x00200045
 8006b88:	002000c5 	.word	0x002000c5

08006b8c <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b8c:	4a19      	ldr	r2, [pc, #100]	; (8006bf4 <SDMMC_CmdSendCID+0x68>)
{
 8006b8e:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b90:	4b19      	ldr	r3, [pc, #100]	; (8006bf8 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b92:	f241 3002 	movw	r0, #4866	; 0x1302
{
 8006b96:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8006b98:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b9a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8006b9c:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b9e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006ba2:	68cd      	ldr	r5, [r1, #12]
 8006ba4:	4c15      	ldr	r4, [pc, #84]	; (8006bfc <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ba6:	f241 3388 	movw	r3, #5000	; 0x1388
 8006baa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006bac:	402c      	ands	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006bae:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006bb2:	4320      	orrs	r0, r4
 8006bb4:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 8006bb6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006bba:	d310      	bcc.n	8006bde <SDMMC_CmdSendCID+0x52>
    sta_reg = SDMMCx->STA;
 8006bbc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006bbe:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006bc2:	d0f8      	beq.n	8006bb6 <SDMMC_CmdSendCID+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006bc4:	0492      	lsls	r2, r2, #18
 8006bc6:	d4f6      	bmi.n	8006bb6 <SDMMC_CmdSendCID+0x2a>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006bc8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006bca:	075b      	lsls	r3, r3, #29
 8006bcc:	d40f      	bmi.n	8006bee <SDMMC_CmdSendCID+0x62>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006bce:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8006bd0:	f010 0001 	ands.w	r0, r0, #1
 8006bd4:	d107      	bne.n	8006be6 <SDMMC_CmdSendCID+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <SDMMC_CmdSendCID+0x74>)
 8006bd8:	638b      	str	r3, [r1, #56]	; 0x38
}
 8006bda:	bc30      	pop	{r4, r5}
 8006bdc:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006bde:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006be2:	bc30      	pop	{r4, r5}
 8006be4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006be6:	2001      	movs	r0, #1
 8006be8:	6388      	str	r0, [r1, #56]	; 0x38
}
 8006bea:	bc30      	pop	{r4, r5}
 8006bec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006bee:	2004      	movs	r0, #4
 8006bf0:	6388      	str	r0, [r1, #56]	; 0x38
 8006bf2:	e7f6      	b.n	8006be2 <SDMMC_CmdSendCID+0x56>
 8006bf4:	200003a4 	.word	0x200003a4
 8006bf8:	10624dd3 	.word	0x10624dd3
 8006bfc:	fffee0c0 	.word	0xfffee0c0
 8006c00:	002000c5 	.word	0x002000c5

08006c04 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c04:	4a19      	ldr	r2, [pc, #100]	; (8006c6c <SDMMC_CmdSendCSD+0x68>)
 8006c06:	4b1a      	ldr	r3, [pc, #104]	; (8006c70 <SDMMC_CmdSendCSD+0x6c>)
{
 8006c08:	b430      	push	{r4, r5}
 8006c0a:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c0c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c0e:	f241 3009 	movw	r0, #4873	; 0x1309
  SDMMCx->ARG = Command->Argument;
 8006c12:	60a1      	str	r1, [r4, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c14:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c18:	68e5      	ldr	r5, [r4, #12]
 8006c1a:	4916      	ldr	r1, [pc, #88]	; (8006c74 <SDMMC_CmdSendCSD+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c20:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c22:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c24:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c28:	4308      	orrs	r0, r1
 8006c2a:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 8006c2c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006c30:	d310      	bcc.n	8006c54 <SDMMC_CmdSendCSD+0x50>
    sta_reg = SDMMCx->STA;
 8006c32:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006c34:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006c38:	d0f8      	beq.n	8006c2c <SDMMC_CmdSendCSD+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c3a:	0492      	lsls	r2, r2, #18
 8006c3c:	d4f6      	bmi.n	8006c2c <SDMMC_CmdSendCSD+0x28>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006c3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c40:	075b      	lsls	r3, r3, #29
 8006c42:	d40f      	bmi.n	8006c64 <SDMMC_CmdSendCSD+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006c44:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006c46:	f010 0001 	ands.w	r0, r0, #1
 8006c4a:	d107      	bne.n	8006c5c <SDMMC_CmdSendCSD+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <SDMMC_CmdSendCSD+0x74>)
 8006c4e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006c50:	bc30      	pop	{r4, r5}
 8006c52:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006c54:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006c58:	bc30      	pop	{r4, r5}
 8006c5a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006c5c:	2001      	movs	r0, #1
 8006c5e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8006c60:	bc30      	pop	{r4, r5}
 8006c62:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006c64:	2004      	movs	r0, #4
 8006c66:	63a0      	str	r0, [r4, #56]	; 0x38
 8006c68:	e7f6      	b.n	8006c58 <SDMMC_CmdSendCSD+0x54>
 8006c6a:	bf00      	nop
 8006c6c:	200003a4 	.word	0x200003a4
 8006c70:	10624dd3 	.word	0x10624dd3
 8006c74:	fffee0c0 	.word	0xfffee0c0
 8006c78:	002000c5 	.word	0x002000c5

08006c7c <SDMMC_CmdSetRelAdd>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c7c:	4b25      	ldr	r3, [pc, #148]	; (8006d14 <SDMMC_CmdSetRelAdd+0x98>)
 8006c7e:	4a26      	ldr	r2, [pc, #152]	; (8006d18 <SDMMC_CmdSetRelAdd+0x9c>)
{
 8006c80:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 8006c82:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c84:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c86:	4d25      	ldr	r5, [pc, #148]	; (8006d1c <SDMMC_CmdSetRelAdd+0xa0>)
  SDMMCx->ARG = Command->Argument;
 8006c88:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c8a:	f241 1403 	movw	r4, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c8e:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c92:	68c6      	ldr	r6, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c94:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c96:	4035      	ands	r5, r6
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c98:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c9c:	432c      	orrs	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c9e:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006ca2:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006ca4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006ca8:	d311      	bcc.n	8006cce <SDMMC_CmdSetRelAdd+0x52>
    sta_reg = SDMMCx->STA;
 8006caa:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006cac:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006cb0:	d0f8      	beq.n	8006ca4 <SDMMC_CmdSetRelAdd+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006cb2:	0496      	lsls	r6, r2, #18
 8006cb4:	d4f6      	bmi.n	8006ca4 <SDMMC_CmdSetRelAdd+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006cb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006cb8:	075d      	lsls	r5, r3, #29
 8006cba:	d411      	bmi.n	8006ce0 <SDMMC_CmdSetRelAdd+0x64>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006cbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006cbe:	07dc      	lsls	r4, r3, #31
 8006cc0:	d409      	bmi.n	8006cd6 <SDMMC_CmdSetRelAdd+0x5a>
  return (uint8_t)(SDMMCx->RESPCMD);
 8006cc2:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d00e      	beq.n	8006ce8 <SDMMC_CmdSetRelAdd+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cca:	2001      	movs	r0, #1
 8006ccc:	e001      	b.n	8006cd2 <SDMMC_CmdSetRelAdd+0x56>
      return SDMMC_ERROR_TIMEOUT;
 8006cce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006cd2:	bc70      	pop	{r4, r5, r6}
 8006cd4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cda:	4618      	mov	r0, r3
}
 8006cdc:	bc70      	pop	{r4, r5, r6}
 8006cde:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	e7f4      	b.n	8006cd2 <SDMMC_CmdSetRelAdd+0x56>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006ce8:	4b0d      	ldr	r3, [pc, #52]	; (8006d20 <SDMMC_CmdSetRelAdd+0xa4>)
 8006cea:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8006cec:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006cee:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8006cf2:	d009      	beq.n	8006d08 <SDMMC_CmdSetRelAdd+0x8c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006cf4:	045a      	lsls	r2, r3, #17
 8006cf6:	d40a      	bmi.n	8006d0e <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006cf8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006cfc:	bf0c      	ite	eq
 8006cfe:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8006d02:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8006d06:	e7e4      	b.n	8006cd2 <SDMMC_CmdSetRelAdd+0x56>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006d08:	0c1b      	lsrs	r3, r3, #16
 8006d0a:	800b      	strh	r3, [r1, #0]
 8006d0c:	e7e1      	b.n	8006cd2 <SDMMC_CmdSetRelAdd+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006d0e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006d12:	e7de      	b.n	8006cd2 <SDMMC_CmdSetRelAdd+0x56>
 8006d14:	200003a4 	.word	0x200003a4
 8006d18:	10624dd3 	.word	0x10624dd3
 8006d1c:	fffee0c0 	.word	0xfffee0c0
 8006d20:	002000c5 	.word	0x002000c5

08006d24 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006d24:	4a1c      	ldr	r2, [pc, #112]	; (8006d98 <SDMMC_CmdSendStatus+0x74>)
 8006d26:	4b1d      	ldr	r3, [pc, #116]	; (8006d9c <SDMMC_CmdSendStatus+0x78>)
{
 8006d28:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006d2a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d2c:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 8006d30:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006d32:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d36:	68c1      	ldr	r1, [r0, #12]
 8006d38:	4d19      	ldr	r5, [pc, #100]	; (8006da0 <SDMMC_CmdSendStatus+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006d3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d3e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d40:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006d42:	4918      	ldr	r1, [pc, #96]	; (8006da4 <SDMMC_CmdSendStatus+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006d44:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d48:	432c      	orrs	r4, r5
 8006d4a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006d4c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006d50:	d312      	bcc.n	8006d78 <SDMMC_CmdSendStatus+0x54>
    sta_reg = SDMMCx->STA;
 8006d52:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006d54:	420a      	tst	r2, r1
 8006d56:	d0f9      	beq.n	8006d4c <SDMMC_CmdSendStatus+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006d58:	0494      	lsls	r4, r2, #18
 8006d5a:	d4f7      	bmi.n	8006d4c <SDMMC_CmdSendStatus+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006d5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006d5e:	075a      	lsls	r2, r3, #29
 8006d60:	d413      	bmi.n	8006d8a <SDMMC_CmdSendStatus+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006d62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006d64:	07db      	lsls	r3, r3, #31
 8006d66:	d40b      	bmi.n	8006d80 <SDMMC_CmdSendStatus+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006d68:	4b0f      	ldr	r3, [pc, #60]	; (8006da8 <SDMMC_CmdSendStatus+0x84>)
 8006d6a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006d6c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b0d      	cmp	r3, #13
 8006d72:	d00e      	beq.n	8006d92 <SDMMC_CmdSendStatus+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d74:	2001      	movs	r0, #1
  return errorstate;
 8006d76:	e001      	b.n	8006d7c <SDMMC_CmdSendStatus+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8006d78:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006d7c:	bc30      	pop	{r4, r5}
 8006d7e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006d80:	2301      	movs	r3, #1
 8006d82:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d84:	4618      	mov	r0, r3
}
 8006d86:	bc30      	pop	{r4, r5}
 8006d88:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006d8a:	2304      	movs	r3, #4
 8006d8c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d8e:	4618      	mov	r0, r3
 8006d90:	e7f4      	b.n	8006d7c <SDMMC_CmdSendStatus+0x58>
}
 8006d92:	bc30      	pop	{r4, r5}
 8006d94:	f7ff bade 	b.w	8006354 <SDMMC_GetCmdResp1.part.2>
 8006d98:	200003a4 	.word	0x200003a4
 8006d9c:	10624dd3 	.word	0x10624dd3
 8006da0:	fffee0c0 	.word	0xfffee0c0
 8006da4:	00200045 	.word	0x00200045
 8006da8:	002000c5 	.word	0x002000c5

08006dac <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006dac:	4a1d      	ldr	r2, [pc, #116]	; (8006e24 <SDMMC_CmdStatusRegister+0x78>)
  SDMMCx->ARG = Command->Argument;
 8006dae:	2100      	movs	r1, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006db0:	4b1d      	ldr	r3, [pc, #116]	; (8006e28 <SDMMC_CmdStatusRegister+0x7c>)
{
 8006db2:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006db4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006db6:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 8006dba:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006dbc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006dc0:	68c1      	ldr	r1, [r0, #12]
 8006dc2:	4d1a      	ldr	r5, [pc, #104]	; (8006e2c <SDMMC_CmdStatusRegister+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006dc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8006dc8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006dca:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006dcc:	4918      	ldr	r1, [pc, #96]	; (8006e30 <SDMMC_CmdStatusRegister+0x84>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006dce:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006dd2:	432c      	orrs	r4, r5
 8006dd4:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006dd6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006dda:	d312      	bcc.n	8006e02 <SDMMC_CmdStatusRegister+0x56>
    sta_reg = SDMMCx->STA;
 8006ddc:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006dde:	420a      	tst	r2, r1
 8006de0:	d0f9      	beq.n	8006dd6 <SDMMC_CmdStatusRegister+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006de2:	0494      	lsls	r4, r2, #18
 8006de4:	d4f7      	bmi.n	8006dd6 <SDMMC_CmdStatusRegister+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006de6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006de8:	075a      	lsls	r2, r3, #29
 8006dea:	d413      	bmi.n	8006e14 <SDMMC_CmdStatusRegister+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006dec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006dee:	07db      	lsls	r3, r3, #31
 8006df0:	d40b      	bmi.n	8006e0a <SDMMC_CmdStatusRegister+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006df2:	4b10      	ldr	r3, [pc, #64]	; (8006e34 <SDMMC_CmdStatusRegister+0x88>)
 8006df4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006df6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b0d      	cmp	r3, #13
 8006dfc:	d00e      	beq.n	8006e1c <SDMMC_CmdStatusRegister+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006dfe:	2001      	movs	r0, #1
  return errorstate;
 8006e00:	e001      	b.n	8006e06 <SDMMC_CmdStatusRegister+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8006e02:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006e06:	bc30      	pop	{r4, r5}
 8006e08:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e0e:	4618      	mov	r0, r3
}
 8006e10:	bc30      	pop	{r4, r5}
 8006e12:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006e14:	2304      	movs	r3, #4
 8006e16:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e18:	4618      	mov	r0, r3
 8006e1a:	e7f4      	b.n	8006e06 <SDMMC_CmdStatusRegister+0x5a>
}
 8006e1c:	bc30      	pop	{r4, r5}
 8006e1e:	f7ff ba99 	b.w	8006354 <SDMMC_GetCmdResp1.part.2>
 8006e22:	bf00      	nop
 8006e24:	200003a4 	.word	0x200003a4
 8006e28:	10624dd3 	.word	0x10624dd3
 8006e2c:	fffee0c0 	.word	0xfffee0c0
 8006e30:	00200045 	.word	0x00200045
 8006e34:	002000c5 	.word	0x002000c5

08006e38 <SDMMC_CmdVoltageSwitch>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006e38:	4a1d      	ldr	r2, [pc, #116]	; (8006eb0 <SDMMC_CmdVoltageSwitch+0x78>)
  SDMMCx->ARG = Command->Argument;
 8006e3a:	2100      	movs	r1, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006e3c:	4b1d      	ldr	r3, [pc, #116]	; (8006eb4 <SDMMC_CmdVoltageSwitch+0x7c>)
{
 8006e3e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006e40:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e42:	f241 140b 	movw	r4, #4363	; 0x110b
  SDMMCx->ARG = Command->Argument;
 8006e46:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006e48:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e4c:	68c1      	ldr	r1, [r0, #12]
 8006e4e:	4d1a      	ldr	r5, [pc, #104]	; (8006eb8 <SDMMC_CmdVoltageSwitch+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006e50:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e54:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e56:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006e58:	4918      	ldr	r1, [pc, #96]	; (8006ebc <SDMMC_CmdVoltageSwitch+0x84>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006e5a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e5e:	432c      	orrs	r4, r5
 8006e60:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006e62:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006e66:	d312      	bcc.n	8006e8e <SDMMC_CmdVoltageSwitch+0x56>
    sta_reg = SDMMCx->STA;
 8006e68:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006e6a:	420a      	tst	r2, r1
 8006e6c:	d0f9      	beq.n	8006e62 <SDMMC_CmdVoltageSwitch+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006e6e:	0494      	lsls	r4, r2, #18
 8006e70:	d4f7      	bmi.n	8006e62 <SDMMC_CmdVoltageSwitch+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006e72:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006e74:	075a      	lsls	r2, r3, #29
 8006e76:	d413      	bmi.n	8006ea0 <SDMMC_CmdVoltageSwitch+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006e78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006e7a:	07db      	lsls	r3, r3, #31
 8006e7c:	d40b      	bmi.n	8006e96 <SDMMC_CmdVoltageSwitch+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006e7e:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <SDMMC_CmdVoltageSwitch+0x88>)
 8006e80:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006e82:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b0b      	cmp	r3, #11
 8006e88:	d00e      	beq.n	8006ea8 <SDMMC_CmdVoltageSwitch+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e8a:	2001      	movs	r0, #1
  return errorstate;
 8006e8c:	e001      	b.n	8006e92 <SDMMC_CmdVoltageSwitch+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8006e8e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006e92:	bc30      	pop	{r4, r5}
 8006e94:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006e96:	2301      	movs	r3, #1
 8006e98:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e9a:	4618      	mov	r0, r3
}
 8006e9c:	bc30      	pop	{r4, r5}
 8006e9e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	e7f4      	b.n	8006e92 <SDMMC_CmdVoltageSwitch+0x5a>
}
 8006ea8:	bc30      	pop	{r4, r5}
 8006eaa:	f7ff ba53 	b.w	8006354 <SDMMC_GetCmdResp1.part.2>
 8006eae:	bf00      	nop
 8006eb0:	200003a4 	.word	0x200003a4
 8006eb4:	10624dd3 	.word	0x10624dd3
 8006eb8:	fffee0c0 	.word	0xfffee0c0
 8006ebc:	00200045 	.word	0x00200045
 8006ec0:	002000c5 	.word	0x002000c5

08006ec4 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8006ec4:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <FATFS_LinkDriver+0x48>)
 8006ec6:	7a5a      	ldrb	r2, [r3, #9]
 8006ec8:	b10a      	cbz	r2, 8006ece <FATFS_LinkDriver+0xa>
  uint8_t ret = 1;
 8006eca:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8006ecc:	4770      	bx	lr
{
 8006ece:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ed0:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 8006ed4:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8006ed8:	7a5e      	ldrb	r6, [r3, #9]
    path[1] = ':';
 8006eda:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 8006ede:	7a5d      	ldrb	r5, [r3, #9]
    path[2] = '/';
 8006ee0:	272f      	movs	r7, #47	; 0x2f
    DiskNum = disk.nbr++;
 8006ee2:	7a5a      	ldrb	r2, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8006ee4:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 8006ee8:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 8006eea:	f803 400e 	strb.w	r4, [r3, lr]
    DiskNum = disk.nbr++;
 8006eee:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 8006ef0:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 8006ef2:	722c      	strb	r4, [r5, #8]
    DiskNum = disk.nbr++;
 8006ef4:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8006ef6:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8006ef8:	b2c0      	uxtb	r0, r0
 8006efa:	7258      	strb	r0, [r3, #9]
    path[3] = 0;
 8006efc:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 8006efe:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 8006f00:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 8006f02:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 8006f06:	708f      	strb	r7, [r1, #2]
}
 8006f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20000430 	.word	0x20000430

08006f10 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8006f14:	4eb0      	ldr	r6, [pc, #704]	; (80071d8 <audioInit+0x2c8>)
 8006f16:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80071dc <audioInit+0x2cc>
 8006f1a:	4bb1      	ldr	r3, [pc, #708]	; (80071e0 <audioInit+0x2d0>)
{
 8006f1c:	ed2d 8b08 	vpush	{d8-d11}
 8006f20:	b087      	sub	sp, #28
 8006f22:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8006f26:	9205      	str	r2, [sp, #20]
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8006f28:	4630      	mov	r0, r6
 8006f2a:	4aae      	ldr	r2, [pc, #696]	; (80071e4 <audioInit+0x2d4>)
 8006f2c:	49ae      	ldr	r1, [pc, #696]	; (80071e8 <audioInit+0x2d8>)
 8006f2e:	f003 fb33 	bl	800a598 <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8006f32:	4633      	mov	r3, r6
 8006f34:	4aad      	ldr	r2, [pc, #692]	; (80071ec <audioInit+0x2dc>)
 8006f36:	49ae      	ldr	r1, [pc, #696]	; (80071f0 <audioInit+0x2e0>)
 8006f38:	48ae      	ldr	r0, [pc, #696]	; (80071f4 <audioInit+0x2e4>)
 8006f3a:	f003 f859 	bl	8009ff0 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 8006f3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f42:	4633      	mov	r3, r6
 8006f44:	49ac      	ldr	r1, [pc, #688]	; (80071f8 <audioInit+0x2e8>)
 8006f46:	48ad      	ldr	r0, [pc, #692]	; (80071fc <audioInit+0x2ec>)
 8006f48:	f003 f852 	bl	8009ff0 <tMempool_init>

	leaf.clearOnAllocation = 1;
 8006f4c:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8006f4e:	eddf 1aac 	vldr	s3, [pc, #688]	; 8007200 <audioInit+0x2f0>
 8006f52:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006f56:	eddf 0ad7 	vldr	s1, [pc, #860]	; 80072b4 <audioInit+0x3a4>
 8006f5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f5e:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8007204 <audioInit+0x2f4>
 8006f62:	48a9      	ldr	r0, [pc, #676]	; (8007208 <audioInit+0x2f8>)
	leaf.clearOnAllocation = 1;
 8006f64:	6173      	str	r3, [r6, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8006f66:	f002 ff11 	bl	8009d8c <LEAF_generate_exp>

	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8006f6a:	2102      	movs	r1, #2
 8006f6c:	48a7      	ldr	r0, [pc, #668]	; (800720c <audioInit+0x2fc>)
 8006f6e:	f7fa ff99 	bl	8001ea4 <HAL_GPIO_ReadPin>
 8006f72:	4604      	mov	r4, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8006f74:	2120      	movs	r1, #32
 8006f76:	48a6      	ldr	r0, [pc, #664]	; (8007210 <audioInit+0x300>)
 8006f78:	f7fa ff94 	bl	8001ea4 <HAL_GPIO_ReadPin>

	firstString = (bit0+(bit1 << 1)) * NUM_STRINGS_PER_BOARD;
	lastString = (bit0+(bit1 << 1)) * NUM_STRINGS_PER_BOARD + (NUM_STRINGS_PER_BOARD - 1);
 8006f7c:	49a5      	ldr	r1, [pc, #660]	; (8007214 <audioInit+0x304>)
	firstString = (bit0+(bit1 << 1)) * NUM_STRINGS_PER_BOARD;
 8006f7e:	eb04 0340 	add.w	r3, r4, r0, lsl #1
 8006f82:	4aa5      	ldr	r2, [pc, #660]	; (8007218 <audioInit+0x308>)
 8006f84:	009b      	lsls	r3, r3, #2
	lastString = (bit0+(bit1 << 1)) * NUM_STRINGS_PER_BOARD + (NUM_STRINGS_PER_BOARD - 1);
 8006f86:	1cd8      	adds	r0, r3, #3
	firstString = (bit0+(bit1 << 1)) * NUM_STRINGS_PER_BOARD;
 8006f88:	6013      	str	r3, [r2, #0]
	lastString = (bit0+(bit1 << 1)) * NUM_STRINGS_PER_BOARD + (NUM_STRINGS_PER_BOARD - 1);
 8006f8a:	6008      	str	r0, [r1, #0]
	lastStringPlusOne = lastString + 1;
 8006f8c:	680b      	ldr	r3, [r1, #0]
 8006f8e:	49a3      	ldr	r1, [pc, #652]	; (800721c <audioInit+0x30c>)
 8006f90:	3301      	adds	r3, #1
 8006f92:	600b      	str	r3, [r1, #0]
	for (int i = firstString; i < lastStringPlusOne; i++)
 8006f94:	f8d2 b000 	ldr.w	fp, [r2]
 8006f98:	680b      	ldr	r3, [r1, #0]
 8006f9a:	459b      	cmp	fp, r3
 8006f9c:	f280 80e9 	bge.w	8007172 <audioInit+0x262>
 8006fa0:	499f      	ldr	r1, [pc, #636]	; (8007220 <audioInit+0x310>)
 8006fa2:	ea4f 058b 	mov.w	r5, fp, lsl #2
 8006fa6:	4b9f      	ldr	r3, [pc, #636]	; (8007224 <audioInit+0x314>)
 8006fa8:	eb0b 044b 	add.w	r4, fp, fp, lsl #1
 8006fac:	4a9e      	ldr	r2, [pc, #632]	; (8007228 <audioInit+0x318>)
 8006fae:	eb01 09cb 	add.w	r9, r1, fp, lsl #3
 8006fb2:	442b      	add	r3, r5
	{
		tADSRT_init(&envelopes[i], 4.0f, 500.0f, .9f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8006fb4:	ed9f ba9d 	vldr	s22, [pc, #628]	; 800722c <audioInit+0x31c>
 8006fb8:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
		tADSRT_setLeakFactor(&envelopes[i], 0.999999f);
		tRosenbergGlottalPulse_init(&pulse[i], &leaf);
		tEfficientSVF_init(&filts2[i], SVFTypeLowpass, 4000, 0.5f, &leaf);
		tRosenbergGlottalPulse_setOpenLengthAndPulseLength(&pulse[i], 0.5f, 0.4f);
		tSawtooth_initToPool(&saws[i], &mediumPool);
 8006fbc:	4f8d      	ldr	r7, [pc, #564]	; (80071f4 <audioInit+0x2e4>)
			tSawtooth_initToPool(&Ssaws[i][j], &mediumPool);
		}
		tCycle_initToPool(&sines[i], &mediumPool);
		tTriangle_initToPool(&tris[i], &mediumPool);
		tSawtooth_setFreq(&saws[i], 110.0f * ((float)i+1.0f));
		tSimpleLivingString2_initToPool(&stringsS[i], 100.0f, .9f, 0.9999f, .0f, 0.01f, 0.01f, 0, &largePool);
 8006fbe:	ed9f 8abd 	vldr	s16, [pc, #756]	; 80072b4 <audioInit+0x3a4>
 8006fc2:	eddf aa9b 	vldr	s21, [pc, #620]	; 8007230 <audioInit+0x320>
		//tLivingString2_setPickPos(&strings[i], .5f);
		//tLivingString2_setPrepPos(&strings[i], .4f);
		//tLivingString2_setPrepIndex(&strings[i], 0.0f);
		//tLivingString2_setPickupPos(&strings[i], 1.0f);
		tExpSmooth_init(&smoother[i],0.0f, 0.002f, &leaf);
		tVZFilter_init(&filts[i], Lowpass, 8000.0f, 6.1f, &leaf);
 8006fc6:	ed9f aa9b 	vldr	s20, [pc, #620]	; 8007234 <audioInit+0x324>
 8006fca:	9301      	str	r3, [sp, #4]
 8006fcc:	f8cd b000 	str.w	fp, [sp]
 8006fd0:	9402      	str	r4, [sp, #8]
 8006fd2:	4b99      	ldr	r3, [pc, #612]	; (8007238 <audioInit+0x328>)
		tADSRT_init(&envelopes[i], 4.0f, 500.0f, .9f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8006fd4:	eeb0 1a4b 	vmov.f32	s2, s22
 8006fd8:	4c98      	ldr	r4, [pc, #608]	; (800723c <audioInit+0x32c>)
 8006fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fde:	eb03 0805 	add.w	r8, r3, r5
 8006fe2:	eddf 1a97 	vldr	s3, [pc, #604]	; 8007240 <audioInit+0x330>
 8006fe6:	eddf 0a97 	vldr	s1, [pc, #604]	; 8007244 <audioInit+0x334>
 8006fea:	4633      	mov	r3, r6
 8006fec:	4986      	ldr	r1, [pc, #536]	; (8007208 <audioInit+0x2f8>)
 8006fee:	4640      	mov	r0, r8
 8006ff0:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8006ff4:	eb04 0a05 	add.w	sl, r4, r5
 8006ff8:	f002 f938 	bl	800926c <tADSRT_init>
 8006ffc:	4b92      	ldr	r3, [pc, #584]	; (8007248 <audioInit+0x338>)
		tADSRT_setLeakFactor(&envelopes[i], 0.999999f);
 8006ffe:	4640      	mov	r0, r8
 8007000:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800724c <audioInit+0x33c>
 8007004:	eb03 0b05 	add.w	fp, r3, r5
 8007008:	f002 f9a4 	bl	8009354 <tADSRT_setLeakFactor>
		tRosenbergGlottalPulse_init(&pulse[i], &leaf);
 800700c:	4650      	mov	r0, sl
 800700e:	4631      	mov	r1, r6
 8007010:	f002 f90a 	bl	8009228 <tRosenbergGlottalPulse_init>
		tEfficientSVF_init(&filts2[i], SVFTypeLowpass, 4000, 0.5f, &leaf);
 8007014:	488e      	ldr	r0, [pc, #568]	; (8007250 <audioInit+0x340>)
 8007016:	2101      	movs	r1, #1
 8007018:	4633      	mov	r3, r6
 800701a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800701e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8007022:	4428      	add	r0, r5
 8007024:	f002 fba8 	bl	8009778 <tEfficientSVF_init>
 8007028:	9c02      	ldr	r4, [sp, #8]
		tRosenbergGlottalPulse_setOpenLengthAndPulseLength(&pulse[i], 0.5f, 0.4f);
 800702a:	4650      	mov	r0, sl
 800702c:	eddf 0a89 	vldr	s1, [pc, #548]	; 8007254 <audioInit+0x344>
 8007030:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8007034:	f104 0818 	add.w	r8, r4, #24
 8007038:	f002 f90a 	bl	8009250 <tRosenbergGlottalPulse_setOpenLengthAndPulseLength>
		tSawtooth_initToPool(&saws[i], &mediumPool);
 800703c:	4658      	mov	r0, fp
 800703e:	4639      	mov	r1, r7
 8007040:	f003 f912 	bl	800a268 <tSawtooth_initToPool>
			tSawtooth_initToPool(&Ssaws[i][j], &mediumPool);
 8007044:	4620      	mov	r0, r4
 8007046:	3404      	adds	r4, #4
 8007048:	4639      	mov	r1, r7
 800704a:	f003 f90d 	bl	800a268 <tSawtooth_initToPool>
		for (int j = 0; j < NUM_OSCS; j++)
 800704e:	45a0      	cmp	r8, r4
 8007050:	d1f8      	bne.n	8007044 <audioInit+0x134>
		tCycle_initToPool(&sines[i], &mediumPool);
 8007052:	4b81      	ldr	r3, [pc, #516]	; (8007258 <audioInit+0x348>)
 8007054:	4639      	mov	r1, r7
 8007056:	9402      	str	r4, [sp, #8]
		tSawtooth_setFreq(&saws[i], 110.0f * ((float)i+1.0f));
 8007058:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
		tCycle_initToPool(&sines[i], &mediumPool);
 800705c:	1958      	adds	r0, r3, r5
		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);

		for (int j = 0; j < 2; j++)
		{
			tCycle_init(&mySine[i][j], &leaf);
			tCycle_setFreq(&mySine[i][j], (randomNumber() * 0.1f) + 0.001f);
 800705e:	eddf 8a69 	vldr	s17, [pc, #420]	; 8007204 <audioInit+0x2f4>
		tCycle_initToPool(&sines[i], &mediumPool);
 8007062:	f003 f857 	bl	800a114 <tCycle_initToPool>
		tTriangle_initToPool(&tris[i], &mediumPool);
 8007066:	4b7d      	ldr	r3, [pc, #500]	; (800725c <audioInit+0x34c>)
 8007068:	4639      	mov	r1, r7
			tCycle_setFreq(&mySine[i][j], (randomNumber() * 0.1f) + 0.001f);
 800706a:	ed9f 9a7d 	vldr	s18, [pc, #500]	; 8007260 <audioInit+0x350>
		tTriangle_initToPool(&tris[i], &mediumPool);
 800706e:	1958      	adds	r0, r3, r5
 8007070:	f109 0804 	add.w	r8, r9, #4
 8007074:	f003 f8ae 	bl	800a1d4 <tTriangle_initToPool>
		tSawtooth_setFreq(&saws[i], 110.0f * ((float)i+1.0f));
 8007078:	eddd 7a00 	vldr	s15, [sp]
	for (int i = firstString; i < lastStringPlusOne; i++)
 800707c:	9b00      	ldr	r3, [sp, #0]
		tSawtooth_setFreq(&saws[i], 110.0f * ((float)i+1.0f));
 800707e:	4658      	mov	r0, fp
 8007080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007084:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8007264 <audioInit+0x354>
	for (int i = firstString; i < lastStringPlusOne; i++)
 8007088:	3301      	adds	r3, #1
		tSawtooth_setFreq(&saws[i], 110.0f * ((float)i+1.0f));
 800708a:	ee77 7aa9 	vadd.f32	s15, s15, s19
	for (int i = firstString; i < lastStringPlusOne; i++)
 800708e:	461c      	mov	r4, r3
 8007090:	9300      	str	r3, [sp, #0]
		tSawtooth_setFreq(&saws[i], 110.0f * ((float)i+1.0f));
 8007092:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007096:	f003 f931 	bl	800a2fc <tSawtooth_setFreq>
		tSimpleLivingString2_initToPool(&stringsS[i], 100.0f, .9f, 0.9999f, .0f, 0.01f, 0.01f, 0, &largePool);
 800709a:	eddf 2a73 	vldr	s5, [pc, #460]	; 8007268 <audioInit+0x358>
 800709e:	4873      	ldr	r0, [pc, #460]	; (800726c <audioInit+0x35c>)
 80070a0:	eef0 1a48 	vmov.f32	s3, s16
 80070a4:	eeb0 2a62 	vmov.f32	s4, s5
 80070a8:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8007270 <audioInit+0x360>
 80070ac:	4428      	add	r0, r5
 80070ae:	4a53      	ldr	r2, [pc, #332]	; (80071fc <audioInit+0x2ec>)
 80070b0:	2100      	movs	r1, #0
 80070b2:	eef0 0a4b 	vmov.f32	s1, s22
 80070b6:	eeb0 0a6a 	vmov.f32	s0, s21
 80070ba:	f003 f9e1 	bl	800a480 <tSimpleLivingString2_initToPool>
		tExpSmooth_init(&smoother[i],0.0f, 0.002f, &leaf);
 80070be:	4a6d      	ldr	r2, [pc, #436]	; (8007274 <audioInit+0x364>)
 80070c0:	4631      	mov	r1, r6
 80070c2:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8007278 <audioInit+0x368>
 80070c6:	1950      	adds	r0, r2, r5
 80070c8:	eeb0 0a48 	vmov.f32	s0, s16
 80070cc:	f002 facc 	bl	8009668 <tExpSmooth_init>
		tVZFilter_init(&filts[i], Lowpass, 8000.0f, 6.1f, &leaf);
 80070d0:	486a      	ldr	r0, [pc, #424]	; (800727c <audioInit+0x36c>)
 80070d2:	4632      	mov	r2, r6
 80070d4:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8007280 <audioInit+0x370>
 80070d8:	4428      	add	r0, r5
 80070da:	eeb0 0a4a 	vmov.f32	s0, s20
 80070de:	2101      	movs	r1, #1
 80070e0:	f002 fc18 	bl	8009914 <tVZFilter_init>
		tADSRT_init(&fenvelopes[i], 5.0f,  8000.0f, 0.0f, 100.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80070e4:	4867      	ldr	r0, [pc, #412]	; (8007284 <audioInit+0x374>)
 80070e6:	4633      	mov	r3, r6
 80070e8:	eef0 1a6a 	vmov.f32	s3, s21
 80070ec:	eeb0 1a48 	vmov.f32	s2, s16
 80070f0:	4428      	add	r0, r5
 80070f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070f6:	4944      	ldr	r1, [pc, #272]	; (8007208 <audioInit+0x2f8>)
 80070f8:	eef0 0a4a 	vmov.f32	s1, s20
 80070fc:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8007100:	f002 f8b4 	bl	800926c <tADSRT_init>
		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
 8007104:	4a60      	ldr	r2, [pc, #384]	; (8007288 <audioInit+0x378>)
 8007106:	eddf 0a61 	vldr	s1, [pc, #388]	; 800728c <audioInit+0x37c>
 800710a:	eeb0 0a69 	vmov.f32	s0, s19
 800710e:	1950      	adds	r0, r2, r5
 8007110:	4631      	mov	r1, r6
 8007112:	f002 faa9 	bl	8009668 <tExpSmooth_init>
			tCycle_init(&mySine[i][j], &leaf);
 8007116:	4631      	mov	r1, r6
 8007118:	4648      	mov	r0, r9
 800711a:	f002 ffeb 	bl	800a0f4 <tCycle_init>
			tCycle_setFreq(&mySine[i][j], (randomNumber() * 0.1f) + 0.001f);
 800711e:	f001 fa6f 	bl	8008600 <randomNumber>
 8007122:	eef0 7a68 	vmov.f32	s15, s17
 8007126:	4648      	mov	r0, r9
			tCycle_init(&mySine[i][j], &leaf);
 8007128:	f109 0908 	add.w	r9, r9, #8
			tCycle_setFreq(&mySine[i][j], (randomNumber() * 0.1f) + 0.001f);
 800712c:	eee0 7a09 	vfma.f32	s15, s0, s18
 8007130:	eeb0 0a67 	vmov.f32	s0, s15
 8007134:	f002 fffe 	bl	800a134 <tCycle_setFreq>
			tCycle_init(&mySine[i][j], &leaf);
 8007138:	4631      	mov	r1, r6
 800713a:	4640      	mov	r0, r8
 800713c:	f002 ffda 	bl	800a0f4 <tCycle_init>
			tCycle_setFreq(&mySine[i][j], (randomNumber() * 0.1f) + 0.001f);
 8007140:	f001 fa5e 	bl	8008600 <randomNumber>
 8007144:	eee0 8a09 	vfma.f32	s17, s0, s18
 8007148:	4640      	mov	r0, r8
 800714a:	eeb0 0a68 	vmov.f32	s0, s17
 800714e:	f002 fff1 	bl	800a134 <tCycle_setFreq>
		}
		openStringFrequencies[i] = mtof(openStringMidinotes[i]);
 8007152:	9a01      	ldr	r2, [sp, #4]
 8007154:	ecb2 0a01 	vldmia	r2!, {s0}
 8007158:	9201      	str	r2, [sp, #4]
 800715a:	f002 fe53 	bl	8009e04 <mtof>
 800715e:	4a4c      	ldr	r2, [pc, #304]	; (8007290 <audioInit+0x380>)
 8007160:	1953      	adds	r3, r2, r5
	for (int i = firstString; i < lastStringPlusOne; i++)
 8007162:	4a2e      	ldr	r2, [pc, #184]	; (800721c <audioInit+0x30c>)
		openStringFrequencies[i] = mtof(openStringMidinotes[i]);
 8007164:	3504      	adds	r5, #4
	for (int i = firstString; i < lastStringPlusOne; i++)
 8007166:	6812      	ldr	r2, [r2, #0]
		openStringFrequencies[i] = mtof(openStringMidinotes[i]);
 8007168:	ed83 0a00 	vstr	s0, [r3]
	for (int i = firstString; i < lastStringPlusOne; i++)
 800716c:	42a2      	cmp	r2, r4
 800716e:	f73f af30 	bgt.w	8006fd2 <audioInit+0xc2>
	}
	tVZFilter_init(&noiseFilt, BandpassPeak, 2000.0f, 1.5f, &leaf);
	tVZFilter_init(&noiseFilt2, Lowpass, 200.0f, 0.9f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.02f, &leaf);
 8007172:	4d19      	ldr	r5, [pc, #100]	; (80071d8 <audioInit+0x2c8>)
	tVZFilter_init(&noiseFilt, BandpassPeak, 2000.0f, 1.5f, &leaf);
 8007174:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8007178:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <audioInit+0x2c8>)
 800717a:	2103      	movs	r1, #3
 800717c:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8007294 <audioInit+0x384>
 8007180:	4845      	ldr	r0, [pc, #276]	; (8007298 <audioInit+0x388>)
 8007182:	4c46      	ldr	r4, [pc, #280]	; (800729c <audioInit+0x38c>)
 8007184:	f002 fbc6 	bl	8009914 <tVZFilter_init>
	tVZFilter_init(&noiseFilt2, Lowpass, 200.0f, 0.9f, &leaf);
 8007188:	2101      	movs	r1, #1
 800718a:	462a      	mov	r2, r5
 800718c:	eddf 0a27 	vldr	s1, [pc, #156]	; 800722c <audioInit+0x31c>
 8007190:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007194:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8007240 <audioInit+0x330>
 8007198:	4841      	ldr	r0, [pc, #260]	; (80072a0 <audioInit+0x390>)
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.02f, &leaf);
 800719a:	eddf 8a42 	vldr	s17, [pc, #264]	; 80072a4 <audioInit+0x394>
 800719e:	ed9f 8a45 	vldr	s16, [pc, #276]	; 80072b4 <audioInit+0x3a4>
	tVZFilter_init(&noiseFilt2, Lowpass, 200.0f, 0.9f, &leaf);
 80071a2:	f002 fbb7 	bl	8009914 <tVZFilter_init>
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.02f, &leaf);
 80071a6:	4620      	mov	r0, r4
 80071a8:	3404      	adds	r4, #4
 80071aa:	4629      	mov	r1, r5
 80071ac:	eef0 0a68 	vmov.f32	s1, s17
 80071b0:	eeb0 0a48 	vmov.f32	s0, s16
 80071b4:	f002 fa58 	bl	8009668 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
 80071b8:	42a6      	cmp	r6, r4
 80071ba:	d1f4      	bne.n	80071a6 <audioInit+0x296>
 80071bc:	4c3a      	ldr	r4, [pc, #232]	; (80072a8 <audioInit+0x398>)
 80071be:	4d3b      	ldr	r5, [pc, #236]	; (80072ac <audioInit+0x39c>)
 80071c0:	f504 76c0 	add.w	r6, r4, #384	; 0x180
	}
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < NUM_STRINGS; j++)
		{
			pedals[i][j] = pow(2.0, (pedalsInCents[i][j] / 1200.0));
 80071c4:	ed9f 8b02 	vldr	d8, [pc, #8]	; 80071d0 <audioInit+0x2c0>
 80071c8:	e076      	b.n	80072b8 <audioInit+0x3a8>
 80071ca:	bf00      	nop
 80071cc:	f3af 8000 	nop.w
 80071d0:	b4e81b4f 	.word	0xb4e81b4f
 80071d4:	3f4b4e81 	.word	0x3f4b4e81
 80071d8:	200004a8 	.word	0x200004a8
 80071dc:	473b8000 	.word	0x473b8000
 80071e0:	08008601 	.word	0x08008601
 80071e4:	000160d8 	.word	0x000160d8
 80071e8:	200005d8 	.word	0x200005d8
 80071ec:	0007eb58 	.word	0x0007eb58
 80071f0:	24000000 	.word	0x24000000
 80071f4:	200169bc 	.word	0x200169bc
 80071f8:	60000000 	.word	0x60000000
 80071fc:	20016938 	.word	0x20016938
 8007200:	ba51b717 	.word	0xba51b717
 8007204:	3a83126f 	.word	0x3a83126f
 8007208:	20017280 	.word	0x20017280
 800720c:	58020400 	.word	0x58020400
 8007210:	58020800 	.word	0x58020800
 8007214:	20000444 	.word	0x20000444
 8007218:	20000440 	.word	0x20000440
 800721c:	20000448 	.word	0x20000448
 8007220:	20000578 	.word	0x20000578
 8007224:	2000006c 	.word	0x2000006c
 8007228:	20016710 	.word	0x20016710
 800722c:	3f666666 	.word	0x3f666666
 8007230:	42c80000 	.word	0x42c80000
 8007234:	45fa0000 	.word	0x45fa0000
 8007238:	20017ab0 	.word	0x20017ab0
 800723c:	20016a20 	.word	0x20016a20
 8007240:	43480000 	.word	0x43480000
 8007244:	43fa0000 	.word	0x43fa0000
 8007248:	20016860 	.word	0x20016860
 800724c:	3f7fffef 	.word	0x3f7fffef
 8007250:	200166b0 	.word	0x200166b0
 8007254:	3ecccccd 	.word	0x3ecccccd
 8007258:	200166e0 	.word	0x200166e0
 800725c:	200169c0 	.word	0x200169c0
 8007260:	3dcccccd 	.word	0x3dcccccd
 8007264:	42dc0000 	.word	0x42dc0000
 8007268:	3c23d70a 	.word	0x3c23d70a
 800726c:	20017a80 	.word	0x20017a80
 8007270:	3f7ff972 	.word	0x3f7ff972
 8007274:	20016890 	.word	0x20016890
 8007278:	3b03126f 	.word	0x3b03126f
 800727c:	200004f8 	.word	0x200004f8
 8007280:	40c33333 	.word	0x40c33333
 8007284:	20017b78 	.word	0x20017b78
 8007288:	20000474 	.word	0x20000474
 800728c:	3d4ccccd 	.word	0x3d4ccccd
 8007290:	2000003c 	.word	0x2000003c
 8007294:	44fa0000 	.word	0x44fa0000
 8007298:	20000574 	.word	0x20000574
 800729c:	20016a50 	.word	0x20016a50
 80072a0:	200169ac 	.word	0x200169ac
 80072a4:	3ca3d70a 	.word	0x3ca3d70a
 80072a8:	2000021c 	.word	0x2000021c
 80072ac:	2000009c 	.word	0x2000009c
 80072b0:	3a03126f 	.word	0x3a03126f
 80072b4:	00000000 	.word	0x00000000
 80072b8:	ed94 1a00 	vldr	s2, [r4]
 80072bc:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80072c0:	3430      	adds	r4, #48	; 0x30
 80072c2:	3530      	adds	r5, #48	; 0x30
 80072c4:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 80072c8:	ee21 1b08 	vmul.f64	d1, d1, d8
 80072cc:	f003 fc48 	bl	800ab60 <pow>
 80072d0:	ed14 1a0b 	vldr	s2, [r4, #-44]	; 0xffffffd4
 80072d4:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 80072d8:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 80072dc:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80072e0:	ed45 7a0c 	vstr	s15, [r5, #-48]	; 0xffffffd0
 80072e4:	ee21 1b08 	vmul.f64	d1, d1, d8
 80072e8:	f003 fc3a 	bl	800ab60 <pow>
 80072ec:	ed14 1a0a 	vldr	s2, [r4, #-40]	; 0xffffffd8
 80072f0:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 80072f4:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 80072f8:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80072fc:	ed45 7a0b 	vstr	s15, [r5, #-44]	; 0xffffffd4
 8007300:	ee21 1b08 	vmul.f64	d1, d1, d8
 8007304:	f003 fc2c 	bl	800ab60 <pow>
 8007308:	ed14 1a09 	vldr	s2, [r4, #-36]	; 0xffffffdc
 800730c:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 8007310:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 8007314:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8007318:	ed45 7a0a 	vstr	s15, [r5, #-40]	; 0xffffffd8
 800731c:	ee21 1b08 	vmul.f64	d1, d1, d8
 8007320:	f003 fc1e 	bl	800ab60 <pow>
 8007324:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
 8007328:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 800732c:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 8007330:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8007334:	ed45 7a09 	vstr	s15, [r5, #-36]	; 0xffffffdc
 8007338:	ee21 1b08 	vmul.f64	d1, d1, d8
 800733c:	f003 fc10 	bl	800ab60 <pow>
 8007340:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8007344:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 8007348:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 800734c:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8007350:	ed45 7a08 	vstr	s15, [r5, #-32]	; 0xffffffe0
 8007354:	ee21 1b08 	vmul.f64	d1, d1, d8
 8007358:	f003 fc02 	bl	800ab60 <pow>
 800735c:	ed14 1a06 	vldr	s2, [r4, #-24]	; 0xffffffe8
 8007360:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 8007364:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 8007368:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800736c:	ed45 7a07 	vstr	s15, [r5, #-28]	; 0xffffffe4
 8007370:	ee21 1b08 	vmul.f64	d1, d1, d8
 8007374:	f003 fbf4 	bl	800ab60 <pow>
 8007378:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
 800737c:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 8007380:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 8007384:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8007388:	ed45 7a06 	vstr	s15, [r5, #-24]	; 0xffffffe8
 800738c:	ee21 1b08 	vmul.f64	d1, d1, d8
 8007390:	f003 fbe6 	bl	800ab60 <pow>
 8007394:	ed14 1a04 	vldr	s2, [r4, #-16]
 8007398:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 800739c:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 80073a0:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80073a4:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 80073a8:	ee21 1b08 	vmul.f64	d1, d1, d8
 80073ac:	f003 fbd8 	bl	800ab60 <pow>
 80073b0:	ed14 1a03 	vldr	s2, [r4, #-12]
 80073b4:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 80073b8:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 80073bc:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80073c0:	ed45 7a04 	vstr	s15, [r5, #-16]
 80073c4:	ee21 1b08 	vmul.f64	d1, d1, d8
 80073c8:	f003 fbca 	bl	800ab60 <pow>
 80073cc:	ed14 1a02 	vldr	s2, [r4, #-8]
 80073d0:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 80073d4:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 80073d8:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80073dc:	ed45 7a03 	vstr	s15, [r5, #-12]
 80073e0:	ee21 1b08 	vmul.f64	d1, d1, d8
 80073e4:	f003 fbbc 	bl	800ab60 <pow>
 80073e8:	ed14 1a01 	vldr	s2, [r4, #-4]
 80073ec:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 80073f0:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 80073f4:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80073f8:	ed45 7a02 	vstr	s15, [r5, #-8]
 80073fc:	ee21 1b08 	vmul.f64	d1, d1, d8
 8007400:	f003 fbae 	bl	800ab60 <pow>
	for (int i = 0; i < 8; i++)
 8007404:	42a6      	cmp	r6, r4
			pedals[i][j] = pow(2.0, (pedalsInCents[i][j] / 1200.0));
 8007406:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800740a:	ed05 0a01 	vstr	s0, [r5, #-4]
	for (int i = 0; i < 8; i++)
 800740e:	f47f af53 	bne.w	80072b8 <audioInit+0x3a8>
		}
	}
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 4; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8007412:	ed5f 8a59 	vldr	s17, [pc, #-356]	; 80072b0 <audioInit+0x3a0>
 8007416:	ed1f 8a59 	vldr	s16, [pc, #-356]	; 80072b4 <audioInit+0x3a4>
 800741a:	4d21      	ldr	r5, [pc, #132]	; (80074a0 <audioInit+0x590>)
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 800741c:	eef0 0a68 	vmov.f32	s1, s17
 8007420:	4c20      	ldr	r4, [pc, #128]	; (80074a4 <audioInit+0x594>)
 8007422:	eeb0 0a48 	vmov.f32	s0, s16
 8007426:	4629      	mov	r1, r5
 8007428:	481f      	ldr	r0, [pc, #124]	; (80074a8 <audioInit+0x598>)
 800742a:	f104 0610 	add.w	r6, r4, #16
 800742e:	f002 f91b 	bl	8009668 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8007432:	4620      	mov	r0, r4
 8007434:	3404      	adds	r4, #4
 8007436:	4629      	mov	r1, r5
 8007438:	eef0 0a68 	vmov.f32	s1, s17
 800743c:	eeb0 0a48 	vmov.f32	s0, s16
 8007440:	f002 f912 	bl	8009668 <tExpSmooth_init>
	for (int i = 0; i < 4; i++)
 8007444:	42a6      	cmp	r6, r4
 8007446:	d1f4      	bne.n	8007432 <audioInit+0x522>
	}
	//loadingPreset = 1;
	//previousPreset = PresetNil;
	tNoise_init(&myNoise, WhiteNoise, &leaf);
 8007448:	4a15      	ldr	r2, [pc, #84]	; (80074a0 <audioInit+0x590>)
 800744a:	2100      	movs	r1, #0
 800744c:	4817      	ldr	r0, [pc, #92]	; (80074ac <audioInit+0x59c>)
 800744e:	f003 f807 	bl	800a460 <tNoise_init>



	HAL_Delay(1000);
 8007452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007456:	f7f8 ffa9 	bl	80003ac <HAL_Delay>
 800745a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800745e:	2100      	movs	r1, #0
 8007460:	4813      	ldr	r0, [pc, #76]	; (80074b0 <audioInit+0x5a0>)
 8007462:	f003 f8f7 	bl	800a654 <memset>
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{
		audioOutBuffer[i] = 0;
	}

	HAL_Delay(1);
 8007466:	2001      	movs	r0, #1
 8007468:	f7f8 ffa0 	bl	80003ac <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800746c:	9804      	ldr	r0, [sp, #16]
 800746e:	2280      	movs	r2, #128	; 0x80
 8007470:	490f      	ldr	r1, [pc, #60]	; (80074b0 <audioInit+0x5a0>)
 8007472:	f7fd f921 	bl	80046b8 <HAL_SAI_Transmit_DMA>
 8007476:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <audioInit+0x5a4>)
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8007478:	2280      	movs	r2, #128	; 0x80
 800747a:	490f      	ldr	r1, [pc, #60]	; (80074b8 <audioInit+0x5a8>)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800747c:	7018      	strb	r0, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 800747e:	9805      	ldr	r0, [sp, #20]
 8007480:	f7fd f9aa 	bl	80047d8 <HAL_SAI_Receive_DMA>
 8007484:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <audioInit+0x5ac>)
 8007486:	7018      	strb	r0, [r3, #0]
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 8007488:	9803      	ldr	r0, [sp, #12]
 800748a:	f000 fcbf 	bl	8007e0c <AudioCodec_init>
	HAL_Delay(1);
 800748e:	2001      	movs	r0, #1

}
 8007490:	b007      	add	sp, #28
 8007492:	ecbd 8b08 	vpop	{d8-d11}
 8007496:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
 800749a:	f7f8 bf87 	b.w	80003ac <HAL_Delay>
 800749e:	bf00      	nop
 80074a0:	200004a8 	.word	0x200004a8
 80074a4:	200168c4 	.word	0x200168c4
 80074a8:	200004a4 	.word	0x200004a4
 80074ac:	200168d4 	.word	0x200168d4
 80074b0:	30000000 	.word	0x30000000
 80074b4:	200168c0 	.word	0x200168c0
 80074b8:	30000200 	.word	0x30000200
 80074bc:	200169b8 	.word	0x200169b8

080074c0 <audioTick>:




uint32_t audioTick(float* samples)
{
 80074c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	4c9f      	ldr	r4, [pc, #636]	; (8007744 <audioTick+0x284>)
 80074c6:	4683      	mov	fp, r0
 80074c8:	4d9f      	ldr	r5, [pc, #636]	; (8007748 <audioTick+0x288>)
 80074ca:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80074ce:	ed2d 8b06 	vpush	{d8-d10}
 80074d2:	b085      	sub	sp, #20
	uint32_t clips = 0;

	for (int i = 0; i < 12; i++)
	{
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
 80074d4:	4628      	mov	r0, r5
 80074d6:	3504      	adds	r5, #4
 80074d8:	f002 f922 	bl	8009720 <tExpSmooth_tick>
 80074dc:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
 80074e0:	42b4      	cmp	r4, r6
 80074e2:	d1f7      	bne.n	80074d4 <audioTick+0x14>
	}

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 80074e4:	4899      	ldr	r0, [pc, #612]	; (800774c <audioTick+0x28c>)

	for (int i = 0; i < 4; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 80074e6:	4f9a      	ldr	r7, [pc, #616]	; (8007750 <audioTick+0x290>)
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 80074e8:	f002 f91a 	bl	8009720 <tExpSmooth_tick>
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 80074ec:	4899      	ldr	r0, [pc, #612]	; (8007754 <audioTick+0x294>)
 80074ee:	f002 f917 	bl	8009720 <tExpSmooth_tick>
 80074f2:	4899      	ldr	r0, [pc, #612]	; (8007758 <audioTick+0x298>)
 80074f4:	ed87 0a00 	vstr	s0, [r7]
 80074f8:	f002 f912 	bl	8009720 <tExpSmooth_tick>
	}

	if (newPluck)
 80074fc:	4d97      	ldr	r5, [pc, #604]	; (800775c <audioTick+0x29c>)
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 80074fe:	4898      	ldr	r0, [pc, #608]	; (8007760 <audioTick+0x2a0>)
 8007500:	ed87 0a01 	vstr	s0, [r7, #4]
 8007504:	f002 f90c 	bl	8009720 <tExpSmooth_tick>
 8007508:	4896      	ldr	r0, [pc, #600]	; (8007764 <audioTick+0x2a4>)
 800750a:	ed87 0a02 	vstr	s0, [r7, #8]
 800750e:	f002 f907 	bl	8009720 <tExpSmooth_tick>
	if (newPluck)
 8007512:	682b      	ldr	r3, [r5, #0]
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8007514:	ed87 0a03 	vstr	s0, [r7, #12]
	if (newPluck)
 8007518:	2b00      	cmp	r3, #0
 800751a:	f040 808a 	bne.w	8007632 <audioTick+0x172>
 800751e:	4b92      	ldr	r3, [pc, #584]	; (8007768 <audioTick+0x2a8>)
 8007520:	4e92      	ldr	r6, [pc, #584]	; (800776c <audioTick+0x2ac>)
 8007522:	9302      	str	r3, [sp, #8]
	//tVZFilter_setFreq(&noiseFilt, knobScaled[2] * 6000.0f + 10.0f);
	//tVZFilter_setFreq(&noiseFilt2, knobScaled[3] * 6000.0f + 10.0f);

	// float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
	//filtNoise += tVZFilter_tickEfficient(&noiseFilt2, filtNoise);
	samples[0]= 0.0f;
 8007524:	eddf 8a92 	vldr	s17, [pc, #584]	; 8007770 <audioTick+0x2b0>
 8007528:	edcb 8a00 	vstr	s17, [fp]
	//filtNoise= tNoise_tick(&myNoise);

	for (int i = firstString; i < lastStringPlusOne; i++)
 800752c:	f8d6 8000 	ldr.w	r8, [r6]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4598      	cmp	r8, r3
 8007534:	f280 808f 	bge.w	8007656 <audioTick+0x196>
 8007538:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800753c:	4e8d      	ldr	r6, [pc, #564]	; (8007774 <audioTick+0x2b4>)
 800753e:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 8007542:	4b8d      	ldr	r3, [pc, #564]	; (8007778 <audioTick+0x2b8>)
 8007544:	4426      	add	r6, r4
		//tSimpleLivingString2_setFreq(&stringsS[i], stringFrequencies[i]);
		tSawtooth_setFreq(&Ssaws[i][0], stringFrequencies[i]);

		tCycle_setFreq(&sines[i], stringFrequencies[i]);
		//tTriangle_setFreq(&tris[i], stringFrequencies[i]);
		tADSRT_setDecay(&fenvelopes[i], knobScaled[2] * 22000.0f);
 8007546:	ed9f aa8d 	vldr	s20, [pc, #564]	; 800777c <audioTick+0x2bc>
 800754a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3

		tEfficientSVF_setFreq(&filts2[i], LEAF_clip(0, knobScaled[0] * 4095.0f + (theEnv * (knobScaled[1]*4095.0f)), 4095));
 800754e:	eddf 9a8c 	vldr	s19, [pc, #560]	; 8007780 <audioTick+0x2c0>
 8007552:	4b8c      	ldr	r3, [pc, #560]	; (8007784 <audioTick+0x2c4>)
	for (int i = firstString; i < lastStringPlusOne; i++)
 8007554:	f108 0801 	add.w	r8, r8, #1
 8007558:	eb03 0904 	add.w	r9, r3, r4
		stringFrequencies[i] = tExpSmooth_tick(&stringFreqSmoothers[i]);
 800755c:	4b8a      	ldr	r3, [pc, #552]	; (8007788 <audioTick+0x2c8>)
 800755e:	1918      	adds	r0, r3, r4
 8007560:	f002 f8de 	bl	8009720 <tExpSmooth_tick>
 8007564:	4b89      	ldr	r3, [pc, #548]	; (800778c <audioTick+0x2cc>)
		float theEnv = tADSRT_tick(&fenvelopes[i]);
 8007566:	4648      	mov	r0, r9
		stringFrequencies[i] = tExpSmooth_tick(&stringFreqSmoothers[i]);
 8007568:	ed86 0a00 	vstr	s0, [r6]
 800756c:	eb03 0a04 	add.w	sl, r3, r4
		float theEnv = tADSRT_tick(&fenvelopes[i]);
 8007570:	f001 ff1c 	bl	80093ac <tADSRT_tick>
		float env = tADSRT_tick(&envelopes[i]);
 8007574:	4b86      	ldr	r3, [pc, #536]	; (8007790 <audioTick+0x2d0>)
		float theEnv = tADSRT_tick(&fenvelopes[i]);
 8007576:	eeb0 8a40 	vmov.f32	s16, s0
		float env = tADSRT_tick(&envelopes[i]);
 800757a:	1918      	adds	r0, r3, r4
 800757c:	4b85      	ldr	r3, [pc, #532]	; (8007794 <audioTick+0x2d4>)
 800757e:	191a      	adds	r2, r3, r4
		tEfficientSVF_setFreq(&filts2[i], LEAF_clip(0, knobScaled[0] * 4095.0f + (theEnv * (knobScaled[1]*4095.0f)), 4095));
 8007580:	3404      	adds	r4, #4
 8007582:	9201      	str	r2, [sp, #4]
		float env = tADSRT_tick(&envelopes[i]);
 8007584:	f001 ff12 	bl	80093ac <tADSRT_tick>
 8007588:	eeb0 9a40 	vmov.f32	s18, s0
		tSawtooth_setFreq(&Ssaws[i][0], stringFrequencies[i]);
 800758c:	ecb6 0a01 	vldmia	r6!, {s0}
 8007590:	4628      	mov	r0, r5
 8007592:	f002 feb3 	bl	800a2fc <tSawtooth_setFreq>
		tCycle_setFreq(&sines[i], stringFrequencies[i]);
 8007596:	4650      	mov	r0, sl
 8007598:	ed16 0a01 	vldr	s0, [r6, #-4]
 800759c:	f002 fdca 	bl	800a134 <tCycle_setFreq>
		tADSRT_setDecay(&fenvelopes[i], knobScaled[2] * 22000.0f);
 80075a0:	ed97 0a02 	vldr	s0, [r7, #8]
 80075a4:	4648      	mov	r0, r9
 80075a6:	ee20 0a0a 	vmul.f32	s0, s0, s20
 80075aa:	f001 fec3 	bl	8009334 <tADSRT_setDecay>
		tEfficientSVF_setFreq(&filts2[i], LEAF_clip(0, knobScaled[0] * 4095.0f + (theEnv * (knobScaled[1]*4095.0f)), 4095));
 80075ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80075b2:	edd7 0a00 	vldr	s1, [r7]
 80075b6:	eeb0 0a68 	vmov.f32	s0, s17
 80075ba:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8007780 <audioTick+0x2c0>
 80075be:	eee7 0a88 	vfma.f32	s1, s15, s16
 80075c2:	ee60 0aa9 	vmul.f32	s1, s1, s19
 80075c6:	f002 fbcd 	bl	8009d64 <LEAF_clip>
 80075ca:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80075ce:	9a01      	ldr	r2, [sp, #4]
 80075d0:	ee10 3a10 	vmov	r3, s0
 80075d4:	4610      	mov	r0, r2
 80075d6:	4691      	mov	r9, r2
 80075d8:	b299      	uxth	r1, r3
 80075da:	f002 f957 	bl	800988c <tEfficientSVF_setFreq>
		float tempSamp = ((tSawtooth_tick(&Ssaws[i][0]) + (tCycle_tick(&sines[i]))) * env);//filtNoise * theEnv) * env);
 80075de:	4628      	mov	r0, r5
 80075e0:	f002 fec4 	bl	800a36c <tSawtooth_tick>
 80075e4:	eeb0 8a40 	vmov.f32	s16, s0
 80075e8:	4650      	mov	r0, sl
 80075ea:	3518      	adds	r5, #24
 80075ec:	f002 fdb2 	bl	800a154 <tCycle_tick>
		tempSamp = tEfficientSVF_tick(&filts2[i], tempSamp);
 80075f0:	4648      	mov	r0, r9
		float tempSamp = ((tSawtooth_tick(&Ssaws[i][0]) + (tCycle_tick(&sines[i]))) * env);//filtNoise * theEnv) * env);
 80075f2:	ee38 0a00 	vadd.f32	s0, s16, s0
		tempSamp = tEfficientSVF_tick(&filts2[i], tempSamp);
 80075f6:	ee20 0a09 	vmul.f32	s0, s0, s18
 80075fa:	f002 f8f7 	bl	80097ec <tEfficientSVF_tick>
		//float tempSamp = (tSimpleLivingString2_tick(&stringsS[i], 0.0f) * env);//filtNoise * theEnv) * env);
		samples[0] += tempSamp;
 80075fe:	eddb 7a00 	vldr	s15, [fp]
	for (int i = firstString; i < lastStringPlusOne; i++)
 8007602:	9b02      	ldr	r3, [sp, #8]
		samples[0] += tempSamp;
 8007604:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007608:	ed8b 0a00 	vstr	s0, [fp]
	for (int i = firstString; i < lastStringPlusOne; i++)
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	4542      	cmp	r2, r8
 8007610:	dc9f      	bgt.n	8007552 <audioTick+0x92>
 8007612:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007616:	ee20 0a27 	vmul.f32	s0, s0, s15
 800761a:	f003 fa4f 	bl	800aabc <tanhf>
*/
	//samples[0] *= .1f * volumeSmoothed;
	samples[0] = tanhf(samples[0] * 0.25f);
	samples[1] = samples[0];
	return clips;
}
 800761e:	2000      	movs	r0, #0
	samples[0] = tanhf(samples[0] * 0.25f);
 8007620:	ed8b 0a00 	vstr	s0, [fp]
	samples[1] = samples[0];
 8007624:	ed8b 0a01 	vstr	s0, [fp, #4]
}
 8007628:	b005      	add	sp, #20
 800762a:	ecbd 8b06 	vpop	{d8-d10}
 800762e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((pluck[0] == 254) && (pluck[25] == 253))
 8007632:	4c59      	ldr	r4, [pc, #356]	; (8007798 <audioTick+0x2d8>)
 8007634:	7823      	ldrb	r3, [r4, #0]
 8007636:	2bfe      	cmp	r3, #254	; 0xfe
 8007638:	d006      	beq.n	8007648 <audioTick+0x188>
 800763a:	4b4b      	ldr	r3, [pc, #300]	; (8007768 <audioTick+0x2a8>)
 800763c:	4e4b      	ldr	r6, [pc, #300]	; (800776c <audioTick+0x2ac>)
 800763e:	9302      	str	r3, [sp, #8]
		newPluck = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	602b      	str	r3, [r5, #0]
 8007644:	9b02      	ldr	r3, [sp, #8]
 8007646:	e76d      	b.n	8007524 <audioTick+0x64>
		if ((pluck[0] == 254) && (pluck[25] == 253))
 8007648:	7e63      	ldrb	r3, [r4, #25]
			for (int i = firstString; i < lastStringPlusOne; i++)
 800764a:	4e48      	ldr	r6, [pc, #288]	; (800776c <audioTick+0x2ac>)
		if ((pluck[0] == 254) && (pluck[25] == 253))
 800764c:	2bfd      	cmp	r3, #253	; 0xfd
 800764e:	d005      	beq.n	800765c <audioTick+0x19c>
 8007650:	4b45      	ldr	r3, [pc, #276]	; (8007768 <audioTick+0x2a8>)
 8007652:	9302      	str	r3, [sp, #8]
 8007654:	e7f4      	b.n	8007640 <audioTick+0x180>
	for (int i = firstString; i < lastStringPlusOne; i++)
 8007656:	eeb0 0a68 	vmov.f32	s0, s17
 800765a:	e7e0      	b.n	800761e <audioTick+0x15e>
			for (int i = firstString; i < lastStringPlusOne; i++)
 800765c:	4942      	ldr	r1, [pc, #264]	; (8007768 <audioTick+0x2a8>)
 800765e:	f8d6 9000 	ldr.w	r9, [r6]
 8007662:	680b      	ldr	r3, [r1, #0]
 8007664:	9102      	str	r1, [sp, #8]
 8007666:	4599      	cmp	r9, r3
 8007668:	daea      	bge.n	8007640 <audioTick+0x180>
 800766a:	ea4f 0889 	mov.w	r8, r9, lsl #2
 800766e:	4a4b      	ldr	r2, [pc, #300]	; (800779c <audioTick+0x2dc>)
 8007670:	4b4b      	ldr	r3, [pc, #300]	; (80077a0 <audioTick+0x2e0>)
 8007672:	eb04 0449 	add.w	r4, r4, r9, lsl #1
 8007676:	4442      	add	r2, r8
					tADSRT_off(&fenvelopes[i]);
 8007678:	f8cd b004 	str.w	fp, [sp, #4]
 800767c:	9603      	str	r6, [sp, #12]
 800767e:	eb08 0a03 	add.w	sl, r8, r3
 8007682:	4616      	mov	r6, r2
 8007684:	468b      	mov	fp, r1
 8007686:	e026      	b.n	80076d6 <audioTick+0x216>
 8007688:	461a      	mov	r2, r3
				if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
 800768a:	b1db      	cbz	r3, 80076c4 <audioTick+0x204>
					float amplitz = stringInputs[i] * invMaxVolumes[i];
 800768c:	4a45      	ldr	r2, [pc, #276]	; (80077a4 <audioTick+0x2e4>)
 800768e:	ee07 3a90 	vmov	s15, r3
					tADSRT_on(&envelopes[i], amplitz);
 8007692:	4b3f      	ldr	r3, [pc, #252]	; (8007790 <audioTick+0x2d0>)
					float amplitz = stringInputs[i] * invMaxVolumes[i];
 8007694:	eb08 0c02 	add.w	ip, r8, r2
 8007698:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
					tADSRT_on(&envelopes[i], amplitz);
 800769c:	eb03 0008 	add.w	r0, r3, r8
					float amplitz = stringInputs[i] * invMaxVolumes[i];
 80076a0:	eddc 7a00 	vldr	s15, [ip]
 80076a4:	ee28 8a27 	vmul.f32	s16, s16, s15
					tADSRT_on(&envelopes[i], amplitz);
 80076a8:	eeb0 0a48 	vmov.f32	s0, s16
 80076ac:	f001 fe64 	bl	8009378 <tADSRT_on>
					tADSRT_on(&fenvelopes[i], amplitz);
 80076b0:	4b34      	ldr	r3, [pc, #208]	; (8007784 <audioTick+0x2c4>)
 80076b2:	eeb0 0a48 	vmov.f32	s0, s16
 80076b6:	eb03 0008 	add.w	r0, r3, r8
 80076ba:	f001 fe5d 	bl	8009378 <tADSRT_on>
 80076be:	4b3a      	ldr	r3, [pc, #232]	; (80077a8 <audioTick+0x2e8>)
 80076c0:	f853 2008 	ldr.w	r2, [r3, r8]
			for (int i = firstString; i < lastStringPlusOne; i++)
 80076c4:	f8db 3000 	ldr.w	r3, [fp]
 80076c8:	3402      	adds	r4, #2
 80076ca:	f108 0804 	add.w	r8, r8, #4
				previousStringInputs[i] = stringInputs[i];
 80076ce:	f84a 2b04 	str.w	r2, [sl], #4
			for (int i = firstString; i < lastStringPlusOne; i++)
 80076d2:	4599      	cmp	r9, r3
 80076d4:	da32      	bge.n	800773c <audioTick+0x27c>
				stringInputs[i] = (pluck[(i*2)+1] << 8) + pluck[(i*2)+2];
 80076d6:	f894 c001 	ldrb.w	ip, [r4, #1]
					invMaxVolumes[i] = 1.0f / stringInputs[i];
 80076da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
				stringInputs[i] = (pluck[(i*2)+1] << 8) + pluck[(i*2)+2];
 80076de:	78a3      	ldrb	r3, [r4, #2]
 80076e0:	f109 0901 	add.w	r9, r9, #1
					invMaxVolumes[i] = 1.0f / stringInputs[i];
 80076e4:	4a2f      	ldr	r2, [pc, #188]	; (80077a4 <audioTick+0x2e4>)
				stringInputs[i] = (pluck[(i*2)+1] << 8) + pluck[(i*2)+2];
 80076e6:	eb03 230c 	add.w	r3, r3, ip, lsl #8
				if (maxVolumes[i] < stringInputs[i])
 80076ea:	f856 0f04 	ldr.w	r0, [r6, #4]!
					invMaxVolumes[i] = 1.0f / stringInputs[i];
 80076ee:	eb08 0e02 	add.w	lr, r8, r2
				stringInputs[i] = (pluck[(i*2)+1] << 8) + pluck[(i*2)+2];
 80076f2:	4a2d      	ldr	r2, [pc, #180]	; (80077a8 <audioTick+0x2e8>)
					invMaxVolumes[i] = 1.0f / stringInputs[i];
 80076f4:	ee07 3a90 	vmov	s15, r3
				if (maxVolumes[i] < stringInputs[i])
 80076f8:	4283      	cmp	r3, r0
				stringInputs[i] = (pluck[(i*2)+1] << 8) + pluck[(i*2)+2];
 80076fa:	f842 3008 	str.w	r3, [r2, r8]
 80076fe:	461a      	mov	r2, r3
					invMaxVolumes[i] = 1.0f / stringInputs[i];
 8007700:	eef8 7a67 	vcvt.f32.u32	s15, s15
				if (maxVolumes[i] < stringInputs[i])
 8007704:	d904      	bls.n	8007710 <audioTick+0x250>
					invMaxVolumes[i] = 1.0f / stringInputs[i];
 8007706:	eec7 6a27 	vdiv.f32	s13, s14, s15
					maxVolumes[i] = stringInputs[i];
 800770a:	6033      	str	r3, [r6, #0]
					invMaxVolumes[i] = 1.0f / stringInputs[i];
 800770c:	edce 6a00 	vstr	s13, [lr]
				if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
 8007710:	f8da 0000 	ldr.w	r0, [sl]
 8007714:	2800      	cmp	r0, #0
 8007716:	d0b7      	beq.n	8007688 <audioTick+0x1c8>
				else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1d3      	bne.n	80076c4 <audioTick+0x204>
 800771c:	2800      	cmp	r0, #0
					tADSRT_off(&envelopes[i]);
 800771e:	4b1c      	ldr	r3, [pc, #112]	; (8007790 <audioTick+0x2d0>)
 8007720:	eb03 0008 	add.w	r0, r3, r8
				else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
 8007724:	ddce      	ble.n	80076c4 <audioTick+0x204>
					tADSRT_off(&envelopes[i]);
 8007726:	f001 fe39 	bl	800939c <tADSRT_off>
					tADSRT_off(&fenvelopes[i]);
 800772a:	4b16      	ldr	r3, [pc, #88]	; (8007784 <audioTick+0x2c4>)
 800772c:	eb03 0008 	add.w	r0, r3, r8
 8007730:	f001 fe34 	bl	800939c <tADSRT_off>
 8007734:	4b1c      	ldr	r3, [pc, #112]	; (80077a8 <audioTick+0x2e8>)
 8007736:	f853 2008 	ldr.w	r2, [r3, r8]
 800773a:	e7c3      	b.n	80076c4 <audioTick+0x204>
 800773c:	f8dd b004 	ldr.w	fp, [sp, #4]
 8007740:	9e03      	ldr	r6, [sp, #12]
 8007742:	e77d      	b.n	8007640 <audioTick+0x180>
 8007744:	20016908 	.word	0x20016908
 8007748:	20016a50 	.word	0x20016a50
 800774c:	200004a4 	.word	0x200004a4
 8007750:	2001696c 	.word	0x2001696c
 8007754:	200168c4 	.word	0x200168c4
 8007758:	200168c8 	.word	0x200168c8
 800775c:	20000450 	.word	0x20000450
 8007760:	200168cc 	.word	0x200168cc
 8007764:	200168d0 	.word	0x200168d0
 8007768:	20000448 	.word	0x20000448
 800776c:	20000440 	.word	0x20000440
 8007770:	00000000 	.word	0x00000000
 8007774:	20017ba8 	.word	0x20017ba8
 8007778:	20016710 	.word	0x20016710
 800777c:	46abe000 	.word	0x46abe000
 8007780:	457ff000 	.word	0x457ff000
 8007784:	20017b78 	.word	0x20017b78
 8007788:	20000474 	.word	0x20000474
 800778c:	200166e0 	.word	0x200166e0
 8007790:	20017ab0 	.word	0x20017ab0
 8007794:	200166b0 	.word	0x200166b0
 8007798:	20000528 	.word	0x20000528
 800779c:	20017adc 	.word	0x20017adc
 80077a0:	200168d8 	.word	0x200168d8
 80077a4:	20000544 	.word	0x20000544
 80077a8:	200169f0 	.word	0x200169f0
 80077ac:	00000000 	.word	0x00000000

080077b0 <audioFrame>:
	if (newBar)
 80077b0:	4adf      	ldr	r2, [pc, #892]	; (8007b30 <audioFrame+0x380>)
{
 80077b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b6:	ed2d 8b08 	vpush	{d8-d11}
	if (newBar)
 80077ba:	6813      	ldr	r3, [r2, #0]
{
 80077bc:	b083      	sub	sp, #12
 80077be:	4606      	mov	r6, r0
	if (newBar)
 80077c0:	b133      	cbz	r3, 80077d0 <audioFrame+0x20>
		if ((bar[6] == 254) && (bar[7] == 253))
 80077c2:	4bdc      	ldr	r3, [pc, #880]	; (8007b34 <audioFrame+0x384>)
 80077c4:	7999      	ldrb	r1, [r3, #6]
 80077c6:	29fe      	cmp	r1, #254	; 0xfe
 80077c8:	f000 8159 	beq.w	8007a7e <audioFrame+0x2ce>
		newBar = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	6013      	str	r3, [r2, #0]
	if ((levers[currentLeverBuffer][30] == 254) && (levers[currentLeverBuffer][31] == 253))
 80077d0:	f8df 83b4 	ldr.w	r8, [pc, #948]	; 8007b88 <audioFrame+0x3d8>
 80077d4:	4fd8      	ldr	r7, [pc, #864]	; (8007b38 <audioFrame+0x388>)
 80077d6:	f898 3000 	ldrb.w	r3, [r8]
 80077da:	015b      	lsls	r3, r3, #5
 80077dc:	18fa      	adds	r2, r7, r3
 80077de:	7f91      	ldrb	r1, [r2, #30]
 80077e0:	29fe      	cmp	r1, #254	; 0xfe
 80077e2:	f000 80e0 	beq.w	80079a6 <audioFrame+0x1f6>
	for (int i = firstString; i < lastStringPlusOne; i++)
 80077e6:	4bd5      	ldr	r3, [pc, #852]	; (8007b3c <audioFrame+0x38c>)
 80077e8:	681f      	ldr	r7, [r3, #0]
 80077ea:	4bd5      	ldr	r3, [pc, #852]	; (8007b40 <audioFrame+0x390>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	429f      	cmp	r7, r3
 80077f0:	f280 8099 	bge.w	8007926 <audioFrame+0x176>
 80077f4:	ea4f 0887 	mov.w	r8, r7, lsl #2
 80077f8:	4bd2      	ldr	r3, [pc, #840]	; (8007b44 <audioFrame+0x394>)
 80077fa:	4cd3      	ldr	r4, [pc, #844]	; (8007b48 <audioFrame+0x398>)
 80077fc:	4ad3      	ldr	r2, [pc, #844]	; (8007b4c <audioFrame+0x39c>)
 80077fe:	eb03 0908 	add.w	r9, r3, r8
 8007802:	4444      	add	r4, r8
 8007804:	f8df a384 	ldr.w	sl, [pc, #900]	; 8007b8c <audioFrame+0x3dc>
 8007808:	4490      	add	r8, r2
 800780a:	f8df b384 	ldr.w	fp, [pc, #900]	; 8007b90 <audioFrame+0x3e0>
 800780e:	4dd0      	ldr	r5, [pc, #832]	; (8007b50 <audioFrame+0x3a0>)
		float myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)i) * 0.090909090909091f);
 8007810:	eddf 9ad0 	vldr	s19, [pc, #832]	; 8007b54 <audioFrame+0x3a4>
 8007814:	ee07 7a90 	vmov	s15, r7
 8007818:	edda 0a01 	vldr	s1, [sl, #4]
 800781c:	ed9a 0a00 	vldr	s0, [sl]
	for (int i = firstString; i < lastStringPlusOne; i++)
 8007820:	3701      	adds	r7, #1
		float myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)i) * 0.090909090909091f);
 8007822:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8007826:	ee21 1a29 	vmul.f32	s2, s2, s19
 800782a:	f002 fad7 	bl	8009ddc <LEAF_interpolation_linear>
					(LEAF_interpolation_linear(1.0f, pedals[0][i], pedalScaled[0])) *
 800782e:	ecf4 0a01 	vldmia	r4!, {s1}
		float myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)i) * 0.090909090909091f);
 8007832:	eeb0 aa40 	vmov.f32	s20, s0
					(LEAF_interpolation_linear(1.0f, pedals[0][i], pedalScaled[0])) *
 8007836:	ed95 1a00 	vldr	s2, [r5]
 800783a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		float tempFreq = ((1.0 / myMappedPos) * openStringFrequencies[i] *
 800783e:	ecb9 9a01 	vldmia	r9!, {s18}
					(LEAF_interpolation_linear(1.0f, pedals[0][i], pedalScaled[0])) *
 8007842:	f002 facb 	bl	8009ddc <LEAF_interpolation_linear>
 8007846:	eeb0 8a40 	vmov.f32	s16, s0
					(LEAF_interpolation_linear(1.0f, pedals[1][i], pedalScaled[1])) *
 800784a:	edd4 0a0b 	vldr	s1, [r4, #44]	; 0x2c
 800784e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007852:	ed95 1a01 	vldr	s2, [r5, #4]
		float tempFreq = ((1.0 / myMappedPos) * openStringFrequencies[i] *
 8007856:	eeb7 aaca 	vcvt.f64.f32	d10, s20
					(LEAF_interpolation_linear(1.0f, pedals[1][i], pedalScaled[1])) *
 800785a:	f002 fabf 	bl	8009ddc <LEAF_interpolation_linear>
					(LEAF_interpolation_linear(1.0f, pedals[0][i], pedalScaled[0])) *
 800785e:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
					(LEAF_interpolation_linear(1.0f, pedals[1][i], pedalScaled[1])) *
 8007862:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
					(LEAF_interpolation_linear(1.0f, pedals[2][i], pedalScaled[2])) *
 8007866:	edd4 0a17 	vldr	s1, [r4, #92]	; 0x5c
 800786a:	ed95 1a02 	vldr	s2, [r5, #8]
 800786e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007872:	ee28 8b07 	vmul.f64	d8, d8, d7
 8007876:	f002 fab1 	bl	8009ddc <LEAF_interpolation_linear>
					(LEAF_interpolation_linear(1.0f, pedals[3][i], pedalScaled[3])) *
 800787a:	edd4 0a23 	vldr	s1, [r4, #140]	; 0x8c
 800787e:	ed95 1a03 	vldr	s2, [r5, #12]
					(LEAF_interpolation_linear(1.0f, pedals[2][i], pedalScaled[2])) *
 8007882:	eeb7 bac0 	vcvt.f64.f32	d11, s0
					(LEAF_interpolation_linear(1.0f, pedals[3][i], pedalScaled[3])) *
 8007886:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800788a:	f002 faa7 	bl	8009ddc <LEAF_interpolation_linear>
					(LEAF_interpolation_linear(1.0f, pedals[4][i], pedalScaled[5])) *
 800788e:	edd4 0a2f 	vldr	s1, [r4, #188]	; 0xbc
 8007892:	ee2b 8b08 	vmul.f64	d8, d11, d8
 8007896:	ed95 1a05 	vldr	s2, [r5, #20]
					(LEAF_interpolation_linear(1.0f, pedals[3][i], pedalScaled[3])) *
 800789a:	eeb7 bac0 	vcvt.f64.f32	d11, s0
					(LEAF_interpolation_linear(1.0f, pedals[4][i], pedalScaled[5])) *
 800789e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80078a2:	f002 fa9b 	bl	8009ddc <LEAF_interpolation_linear>
					(LEAF_interpolation_linear(1.0f, pedals[5][i], pedalScaled[6])) *
 80078a6:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 80078aa:	ee2b bb08 	vmul.f64	d11, d11, d8
 80078ae:	ed95 1a06 	vldr	s2, [r5, #24]
					(LEAF_interpolation_linear(1.0f, pedals[4][i], pedalScaled[5])) *
 80078b2:	eeb7 8ac0 	vcvt.f64.f32	d8, s0
					(LEAF_interpolation_linear(1.0f, pedals[5][i], pedalScaled[6])) *
 80078b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80078ba:	f002 fa8f 	bl	8009ddc <LEAF_interpolation_linear>
					(LEAF_interpolation_linear(1.0f, pedals[6][i], pedalScaled[7])) *
 80078be:	edd4 0a47 	vldr	s1, [r4, #284]	; 0x11c
 80078c2:	ee28 bb0b 	vmul.f64	d11, d8, d11
 80078c6:	ed95 1a07 	vldr	s2, [r5, #28]
					(LEAF_interpolation_linear(1.0f, pedals[5][i], pedalScaled[6])) *
 80078ca:	eeb7 8ac0 	vcvt.f64.f32	d8, s0
					(LEAF_interpolation_linear(1.0f, pedals[6][i], pedalScaled[7])) *
 80078ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80078d2:	f002 fa83 	bl	8009ddc <LEAF_interpolation_linear>
 80078d6:	eeb7 5ac0 	vcvt.f64.f32	d5, s0
 80078da:	ee28 8b0b 	vmul.f64	d8, d8, d11
					(LEAF_interpolation_linear(1.0f, pedals[7][i], pedalScaled[8])));
 80078de:	edd4 0a53 	vldr	s1, [r4, #332]	; 0x14c
 80078e2:	ed95 1a08 	vldr	s2, [r5, #32]
 80078e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80078ea:	ee25 8b08 	vmul.f64	d8, d5, d8
 80078ee:	f002 fa75 	bl	8009ddc <LEAF_interpolation_linear>
		tExpSmooth_setDest(&stringFreqSmoothers[i], tempFreq * octave);
 80078f2:	eddb 4a00 	vldr	s9, [fp]
 80078f6:	4640      	mov	r0, r8
 80078f8:	f108 0804 	add.w	r8, r8, #4
					(LEAF_interpolation_linear(1.0f, pedals[7][i], pedalScaled[8])));
 80078fc:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
		float tempFreq = ((1.0 / myMappedPos) * openStringFrequencies[i] *
 8007900:	eeb7 7ac9 	vcvt.f64.f32	d7, s18
					(LEAF_interpolation_linear(1.0f, pedals[6][i], pedalScaled[7])) *
 8007904:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007908:	ee88 0b0a 	vdiv.f64	d0, d8, d10
 800790c:	ee20 0b07 	vmul.f64	d0, d0, d7
		float tempFreq = ((1.0 / myMappedPos) * openStringFrequencies[i] *
 8007910:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		tExpSmooth_setDest(&stringFreqSmoothers[i], tempFreq * octave);
 8007914:	ee20 0a24 	vmul.f32	s0, s0, s9
 8007918:	f001 fefe 	bl	8009718 <tExpSmooth_setDest>
	for (int i = firstString; i < lastStringPlusOne; i++)
 800791c:	4b88      	ldr	r3, [pc, #544]	; (8007b40 <audioFrame+0x390>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	42ba      	cmp	r2, r7
 8007922:	f73f af77 	bgt.w	8007814 <audioFrame+0x64>
	if (codecReady)
 8007926:	4b8c      	ldr	r3, [pc, #560]	; (8007b58 <audioFrame+0x3a8>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	b3bb      	cbz	r3, 800799c <audioFrame+0x1ec>
 800792c:	1c74      	adds	r4, r6, #1
 800792e:	f8df 8264 	ldr.w	r8, [pc, #612]	; 8007b94 <audioFrame+0x3e4>
		for (i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 8007932:	2500      	movs	r5, #0
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8007934:	ed9f 8a89 	vldr	s16, [pc, #548]	; 8007b5c <audioFrame+0x3ac>
 8007938:	00a4      	lsls	r4, r4, #2
 800793a:	f508 7900 	add.w	r9, r8, #512	; 0x200
 800793e:	19af      	adds	r7, r5, r6
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8007940:	f859 2004 	ldr.w	r2, [r9, r4]
			clipCatcher |= audioTick(theSamples);
 8007944:	4668      	mov	r0, sp
		for (i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 8007946:	3502      	adds	r5, #2
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8007948:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 800794c:	0212      	lsls	r2, r2, #8
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 800794e:	021b      	lsls	r3, r3, #8
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8007950:	ee07 2a10 	vmov	s14, r2
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8007954:	ee07 3a90 	vmov	s15, r3
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8007958:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 800795c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8007960:	ee27 7a08 	vmul.f32	s14, s14, s16
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8007964:	ee67 7a88 	vmul.f32	s15, s15, s16
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8007968:	ed8d 7a01 	vstr	s14, [sp, #4]
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 800796c:	edcd 7a00 	vstr	s15, [sp]
			clipCatcher |= audioTick(theSamples);
 8007970:	f7ff fda6 	bl	80074c0 <audioTick>
			audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_23);
 8007974:	ed9d 7a01 	vldr	s14, [sp, #4]
		for (i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 8007978:	2d40      	cmp	r5, #64	; 0x40
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_23);
 800797a:	eddd 7a00 	vldr	s15, [sp]
			audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_23);
 800797e:	eebe 7ae4 	vcvt.s32.f32	s14, s14, #23
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_23);
 8007982:	eefe 7ae4 	vcvt.s32.f32	s15, s15, #23
			audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_23);
 8007986:	ee17 3a10 	vmov	r3, s14
 800798a:	f848 3027 	str.w	r3, [r8, r7, lsl #2]
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_23);
 800798e:	ee17 3a90 	vmov	r3, s15
 8007992:	f848 3004 	str.w	r3, [r8, r4]
 8007996:	f104 0408 	add.w	r4, r4, #8
		for (i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 800799a:	d1d0      	bne.n	800793e <audioFrame+0x18e>
}
 800799c:	b003      	add	sp, #12
 800799e:	ecbd 8b08 	vpop	{d8-d11}
 80079a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((levers[currentLeverBuffer][30] == 254) && (levers[currentLeverBuffer][31] == 253))
 80079a6:	7fd2      	ldrb	r2, [r2, #31]
 80079a8:	2afd      	cmp	r2, #253	; 0xfd
 80079aa:	f47f af1c 	bne.w	80077e6 <audioFrame+0x36>
 80079ae:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8007b98 <audioFrame+0x3e8>
 80079b2:	2400      	movs	r4, #0
 80079b4:	4d6a      	ldr	r5, [pc, #424]	; (8007b60 <audioFrame+0x3b0>)
			tExpSmooth_setDest(&pedalSmoothers[i], LEAF_clip(0.0f, ((pedalValuesInt[i] * 0.0002490234375f) - 0.01f), 1.0f)); //   divided by 4096 multiplied by 1.02 and subtracting 0.01 to push it a little beyond the edges.
 80079b6:	ed9f 9a6b 	vldr	s18, [pc, #428]	; 8007b64 <audioFrame+0x3b4>
 80079ba:	eddf 8a6b 	vldr	s17, [pc, #428]	; 8007b68 <audioFrame+0x3b8>
 80079be:	ed9f 8a6b 	vldr	s16, [pc, #428]	; 8007b6c <audioFrame+0x3bc>
 80079c2:	e002      	b.n	80079ca <audioFrame+0x21a>
 80079c4:	f898 3000 	ldrb.w	r3, [r8]
 80079c8:	015b      	lsls	r3, r3, #5
			pedalValuesInt[i] = ((uint16_t)levers[currentLeverBuffer][(i * 2)] << 8) + ((uint16_t)levers[currentLeverBuffer][(i * 2) + 1] & 0xff);
 80079ca:	443b      	add	r3, r7
			tExpSmooth_setDest(&pedalSmoothers[i], LEAF_clip(0.0f, ((pedalValuesInt[i] * 0.0002490234375f) - 0.01f), 1.0f)); //   divided by 4096 multiplied by 1.02 and subtracting 0.01 to push it a little beyond the edges.
 80079cc:	eef0 0a68 	vmov.f32	s1, s17
 80079d0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			pedalValuesInt[i] = ((uint16_t)levers[currentLeverBuffer][(i * 2)] << 8) + ((uint16_t)levers[currentLeverBuffer][(i * 2) + 1] & 0xff);
 80079d4:	1919      	adds	r1, r3, r4
 80079d6:	5d1a      	ldrb	r2, [r3, r4]
			tExpSmooth_setDest(&pedalSmoothers[i], LEAF_clip(0.0f, ((pedalValuesInt[i] * 0.0002490234375f) - 0.01f), 1.0f)); //   divided by 4096 multiplied by 1.02 and subtracting 0.01 to push it a little beyond the edges.
 80079d8:	eeb0 0a48 	vmov.f32	s0, s16
 80079dc:	3402      	adds	r4, #2
			pedalValuesInt[i] = ((uint16_t)levers[currentLeverBuffer][(i * 2)] << 8) + ((uint16_t)levers[currentLeverBuffer][(i * 2) + 1] & 0xff);
 80079de:	784b      	ldrb	r3, [r1, #1]
 80079e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80079e4:	ee07 3a90 	vmov	s15, r3
 80079e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			tExpSmooth_setDest(&pedalSmoothers[i], LEAF_clip(0.0f, ((pedalValuesInt[i] * 0.0002490234375f) - 0.01f), 1.0f)); //   divided by 4096 multiplied by 1.02 and subtracting 0.01 to push it a little beyond the edges.
 80079ec:	eee7 0a89 	vfma.f32	s1, s15, s18
			pedalValuesInt[i] = ((uint16_t)levers[currentLeverBuffer][(i * 2)] << 8) + ((uint16_t)levers[currentLeverBuffer][(i * 2) + 1] & 0xff);
 80079f0:	ece9 7a01 	vstmia	r9!, {s15}
			tExpSmooth_setDest(&pedalSmoothers[i], LEAF_clip(0.0f, ((pedalValuesInt[i] * 0.0002490234375f) - 0.01f), 1.0f)); //   divided by 4096 multiplied by 1.02 and subtracting 0.01 to push it a little beyond the edges.
 80079f4:	f002 f9b6 	bl	8009d64 <LEAF_clip>
 80079f8:	4628      	mov	r0, r5
 80079fa:	f001 fe8d 	bl	8009718 <tExpSmooth_setDest>
		for (int i = 0; i < 9; i++)
 80079fe:	2c12      	cmp	r4, #18
 8007a00:	f105 0504 	add.w	r5, r5, #4
 8007a04:	d1de      	bne.n	80079c4 <audioFrame+0x214>
 8007a06:	4d5a      	ldr	r5, [pc, #360]	; (8007b70 <audioFrame+0x3c0>)
 8007a08:	2415      	movs	r4, #21
			tExpSmooth_setDest(&knobSmoothers[i], (levers[currentLeverBuffer][i+21] * 0.0078125)); //   divided by 128
 8007a0a:	ed9f 8b47 	vldr	d8, [pc, #284]	; 8007b28 <audioFrame+0x378>
 8007a0e:	f898 3000 	ldrb.w	r3, [r8]
 8007a12:	4628      	mov	r0, r5
 8007a14:	3504      	adds	r5, #4
 8007a16:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 8007a1a:	5d1b      	ldrb	r3, [r3, r4]
 8007a1c:	3401      	adds	r4, #1
 8007a1e:	ee00 3a10 	vmov	s0, r3
 8007a22:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8007a26:	ee20 0b08 	vmul.f64	d0, d0, d8
 8007a2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007a2e:	f001 fe73 	bl	8009718 <tExpSmooth_setDest>
		for (int i = 0; i < 4; i++)
 8007a32:	2c19      	cmp	r4, #25
 8007a34:	d1eb      	bne.n	8007a0e <audioFrame+0x25e>
		octave = powf(2.0f,((int32_t) levers[currentLeverBuffer][20] - 1 ));
 8007a36:	f898 3000 	ldrb.w	r3, [r8]
 8007a3a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007a3e:	f8df b150 	ldr.w	fp, [pc, #336]	; 8007b90 <audioFrame+0x3e0>
 8007a42:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 8007a46:	7d3b      	ldrb	r3, [r7, #20]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	ee00 3a90 	vmov	s1, r3
 8007a4e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8007a52:	f002 fecd 	bl	800a7f0 <powf>
		uint16_t volumePedalInt = ((uint16_t)levers[currentLeverBuffer][25] << 8) + ((uint16_t)levers[currentLeverBuffer][26] & 0xff);
 8007a56:	7e79      	ldrb	r1, [r7, #25]
 8007a58:	7ebb      	ldrb	r3, [r7, #26]
		volumePedal = volumePedalInt * 0.00006103515625f;
 8007a5a:	4a46      	ldr	r2, [pc, #280]	; (8007b74 <audioFrame+0x3c4>)
		uint16_t volumePedalInt = ((uint16_t)levers[currentLeverBuffer][25] << 8) + ((uint16_t)levers[currentLeverBuffer][26] & 0xff);
 8007a5c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		octave = powf(2.0f,((int32_t) levers[currentLeverBuffer][20] - 1 ));
 8007a60:	ed8b 0a00 	vstr	s0, [fp]
		tExpSmooth_setDest(&volumeSmoother,volumePedal);
 8007a64:	4844      	ldr	r0, [pc, #272]	; (8007b78 <audioFrame+0x3c8>)
		volumePedal = volumePedalInt * 0.00006103515625f;
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	ee07 3a90 	vmov	s15, r3
 8007a6c:	eefa 7ac9 	vcvt.f32.s32	s15, s15, #14
		tExpSmooth_setDest(&volumeSmoother,volumePedal);
 8007a70:	eeb0 0a67 	vmov.f32	s0, s15
		volumePedal = volumePedalInt * 0.00006103515625f;
 8007a74:	edc2 7a00 	vstr	s15, [r2]
		tExpSmooth_setDest(&volumeSmoother,volumePedal);
 8007a78:	f001 fe4e 	bl	8009718 <tExpSmooth_setDest>
 8007a7c:	e6b3      	b.n	80077e6 <audioFrame+0x36>
		if ((bar[6] == 254) && (bar[7] == 253))
 8007a7e:	79d9      	ldrb	r1, [r3, #7]
 8007a80:	29fd      	cmp	r1, #253	; 0xfd
 8007a82:	f47f aea3 	bne.w	80077cc <audioFrame+0x1c>
				stringPositions[j] =  ((uint16_t)bar[j * 2] << 8) + ((uint16_t)bar[(j * 2) + 1] & 0xff);
 8007a86:	781d      	ldrb	r5, [r3, #0]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8007a88:	f64f 74ff 	movw	r4, #65535	; 0xffff
				stringPositions[j] =  ((uint16_t)bar[j * 2] << 8) + ((uint16_t)bar[(j * 2) + 1] & 0xff);
 8007a8c:	7859      	ldrb	r1, [r3, #1]
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8007a8e:	483b      	ldr	r0, [pc, #236]	; (8007b7c <audioFrame+0x3cc>)
				stringPositions[j] =  ((uint16_t)bar[j * 2] << 8) + ((uint16_t)bar[(j * 2) + 1] & 0xff);
 8007a90:	eb01 2105 	add.w	r1, r1, r5, lsl #8
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8007a94:	ed90 7a00 	vldr	s14, [r0]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8007a98:	edd0 7a01 	vldr	s15, [r0, #4]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8007a9c:	42a1      	cmp	r1, r4
				stringPositions[j] =  ((uint16_t)bar[j * 2] << 8) + ((uint16_t)bar[(j * 2) + 1] & 0xff);
 8007a9e:	4838      	ldr	r0, [pc, #224]	; (8007b80 <audioFrame+0x3d0>)
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8007aa0:	ee77 6ac7 	vsub.f32	s13, s15, s14
				stringPositions[j] =  ((uint16_t)bar[j * 2] << 8) + ((uint16_t)bar[(j * 2) + 1] & 0xff);
 8007aa4:	6001      	str	r1, [r0, #0]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8007aa6:	d079      	beq.n	8007b9c <audioFrame+0x3ec>
 8007aa8:	ee07 1a90 	vmov	s15, r1
 8007aac:	4c35      	ldr	r4, [pc, #212]	; (8007b84 <audioFrame+0x3d4>)
 8007aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ab2:	ed94 6a00 	vldr	s12, [r4]
 8007ab6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007abe:	d46d      	bmi.n	8007b9c <audioFrame+0x3ec>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8007ac0:	edd4 5a02 	vldr	s11, [r4, #8]
 8007ac4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007ac8:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007acc:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8007ad0:	eef0 7a47 	vmov.f32	s15, s14
 8007ad4:	eee6 7aa5 	vfma.f32	s15, s13, s11
				stringPositions[j] =  ((uint16_t)bar[j * 2] << 8) + ((uint16_t)bar[(j * 2) + 1] & 0xff);
 8007ad8:	789d      	ldrb	r5, [r3, #2]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8007ada:	f64f 74ff 	movw	r4, #65535	; 0xffff
				stringPositions[j] =  ((uint16_t)bar[j * 2] << 8) + ((uint16_t)bar[(j * 2) + 1] & 0xff);
 8007ade:	78d9      	ldrb	r1, [r3, #3]
 8007ae0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8007b8c <audioFrame+0x3dc>
 8007ae4:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 8007ae8:	edca 7a00 	vstr	s15, [sl]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8007aec:	42a1      	cmp	r1, r4
				stringPositions[j] =  ((uint16_t)bar[j * 2] << 8) + ((uint16_t)bar[(j * 2) + 1] & 0xff);
 8007aee:	6041      	str	r1, [r0, #4]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8007af0:	d057      	beq.n	8007ba2 <audioFrame+0x3f2>
 8007af2:	ee07 1a90 	vmov	s15, r1
 8007af6:	4823      	ldr	r0, [pc, #140]	; (8007b84 <audioFrame+0x3d4>)
 8007af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007afc:	ed90 6a01 	vldr	s12, [r0, #4]
 8007b00:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b08:	d44b      	bmi.n	8007ba2 <audioFrame+0x3f2>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8007b0a:	edd0 5a03 	vldr	s11, [r0, #12]
 8007b0e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007b12:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007b16:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8007b1a:	eea6 7aa5 	vfma.f32	s14, s13, s11
 8007b1e:	ed8a 7a01 	vstr	s14, [sl, #4]
 8007b22:	e653      	b.n	80077cc <audioFrame+0x1c>
 8007b24:	f3af 8000 	nop.w
 8007b28:	00000000 	.word	0x00000000
 8007b2c:	3f800000 	.word	0x3f800000
 8007b30:	2000044c 	.word	0x2000044c
 8007b34:	20017b40 	.word	0x20017b40
 8007b38:	200180c8 	.word	0x200180c8
 8007b3c:	20000440 	.word	0x20000440
 8007b40:	20000448 	.word	0x20000448
 8007b44:	2000003c 	.word	0x2000003c
 8007b48:	2000009c 	.word	0x2000009c
 8007b4c:	20000474 	.word	0x20000474
 8007b50:	20016908 	.word	0x20016908
 8007b54:	3dba2e8c 	.word	0x3dba2e8c
 8007b58:	2000043c 	.word	0x2000043c
 8007b5c:	2ffffff6 	.word	0x2ffffff6
 8007b60:	20016a50 	.word	0x20016a50
 8007b64:	39828f5c 	.word	0x39828f5c
 8007b68:	bc23d70a 	.word	0xbc23d70a
 8007b6c:	00000000 	.word	0x00000000
 8007b70:	200168c4 	.word	0x200168c4
 8007b74:	20000454 	.word	0x20000454
 8007b78:	200004a4 	.word	0x200004a4
 8007b7c:	20000028 	.word	0x20000028
 8007b80:	2000046c 	.word	0x2000046c
 8007b84:	20000008 	.word	0x20000008
 8007b88:	20000460 	.word	0x20000460
 8007b8c:	2001697c 	.word	0x2001697c
 8007b90:	20000038 	.word	0x20000038
 8007b94:	30000000 	.word	0x30000000
 8007b98:	20017b10 	.word	0x20017b10
					stringMappedPositions[j] = 1.0f;
 8007b9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007ba0:	e79a      	b.n	8007ad8 <audioFrame+0x328>
 8007ba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ba6:	e7ba      	b.n	8007b1e <audioFrame+0x36e>

08007ba8 <HAL_SPI_RxCpltCallback>:
volatile int testInt = 0;



void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hspi == &hspi5)
 8007baa:	4b26      	ldr	r3, [pc, #152]	; (8007c44 <HAL_SPI_RxCpltCallback+0x9c>)
{
 8007bac:	4604      	mov	r4, r0
	if (hspi == &hspi5)
 8007bae:	4298      	cmp	r0, r3
 8007bb0:	d026      	beq.n	8007c00 <HAL_SPI_RxCpltCallback+0x58>
			pluck[i] = SPI_PLUCK_RX[i+26];
		}
		newPluck = 1;
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
	}
	if (hspi == &hspi2)
 8007bb2:	4b25      	ldr	r3, [pc, #148]	; (8007c48 <HAL_SPI_RxCpltCallback+0xa0>)
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	d019      	beq.n	8007bec <HAL_SPI_RxCpltCallback+0x44>
			bar[i] = SPI_RX[i+8];
		}
		newBar = 1;
	}

	if (hspi == &hspi1)
 8007bb8:	4b24      	ldr	r3, [pc, #144]	; (8007c4c <HAL_SPI_RxCpltCallback+0xa4>)
 8007bba:	429c      	cmp	r4, r3
 8007bbc:	d000      	beq.n	8007bc0 <HAL_SPI_RxCpltCallback+0x18>
		}


	*/

}
 8007bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bc0:	4a23      	ldr	r2, [pc, #140]	; (8007c50 <HAL_SPI_RxCpltCallback+0xa8>)
		currentLeverBuffer = 1;
 8007bc2:	2601      	movs	r6, #1
 8007bc4:	4b23      	ldr	r3, [pc, #140]	; (8007c54 <HAL_SPI_RxCpltCallback+0xac>)
 8007bc6:	6815      	ldr	r5, [r2, #0]
 8007bc8:	6854      	ldr	r4, [r2, #4]
 8007bca:	6890      	ldr	r0, [r2, #8]
 8007bcc:	68d1      	ldr	r1, [r2, #12]
 8007bce:	601d      	str	r5, [r3, #0]
 8007bd0:	605c      	str	r4, [r3, #4]
 8007bd2:	6915      	ldr	r5, [r2, #16]
 8007bd4:	6954      	ldr	r4, [r2, #20]
 8007bd6:	6098      	str	r0, [r3, #8]
 8007bd8:	60d9      	str	r1, [r3, #12]
 8007bda:	6990      	ldr	r0, [r2, #24]
 8007bdc:	69d1      	ldr	r1, [r2, #28]
 8007bde:	4a1e      	ldr	r2, [pc, #120]	; (8007c58 <HAL_SPI_RxCpltCallback+0xb0>)
 8007be0:	611d      	str	r5, [r3, #16]
 8007be2:	615c      	str	r4, [r3, #20]
 8007be4:	6198      	str	r0, [r3, #24]
 8007be6:	61d9      	str	r1, [r3, #28]
 8007be8:	7016      	strb	r6, [r2, #0]
}
 8007bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bec:	4a1b      	ldr	r2, [pc, #108]	; (8007c5c <HAL_SPI_RxCpltCallback+0xb4>)
		newBar = 1;
 8007bee:	2101      	movs	r1, #1
 8007bf0:	4b1b      	ldr	r3, [pc, #108]	; (8007c60 <HAL_SPI_RxCpltCallback+0xb8>)
 8007bf2:	6815      	ldr	r5, [r2, #0]
 8007bf4:	6850      	ldr	r0, [r2, #4]
 8007bf6:	4a1b      	ldr	r2, [pc, #108]	; (8007c64 <HAL_SPI_RxCpltCallback+0xbc>)
 8007bf8:	601d      	str	r5, [r3, #0]
 8007bfa:	6058      	str	r0, [r3, #4]
 8007bfc:	6011      	str	r1, [r2, #0]
 8007bfe:	e7db      	b.n	8007bb8 <HAL_SPI_RxCpltCallback+0x10>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8007c00:	2200      	movs	r2, #0
 8007c02:	2110      	movs	r1, #16
 8007c04:	4818      	ldr	r0, [pc, #96]	; (8007c68 <HAL_SPI_RxCpltCallback+0xc0>)
 8007c06:	f7fa f953 	bl	8001eb0 <HAL_GPIO_WritePin>
 8007c0a:	4b18      	ldr	r3, [pc, #96]	; (8007c6c <HAL_SPI_RxCpltCallback+0xc4>)
 8007c0c:	4d18      	ldr	r5, [pc, #96]	; (8007c70 <HAL_SPI_RxCpltCallback+0xc8>)
		newPluck = 1;
 8007c0e:	f04f 0c01 	mov.w	ip, #1
 8007c12:	685e      	ldr	r6, [r3, #4]
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8007c14:	f1a3 011a 	sub.w	r1, r3, #26
 8007c18:	681f      	ldr	r7, [r3, #0]
 8007c1a:	2234      	movs	r2, #52	; 0x34
 8007c1c:	606e      	str	r6, [r5, #4]
 8007c1e:	689e      	ldr	r6, [r3, #8]
 8007c20:	68d8      	ldr	r0, [r3, #12]
 8007c22:	602f      	str	r7, [r5, #0]
 8007c24:	60ae      	str	r6, [r5, #8]
 8007c26:	691f      	ldr	r7, [r3, #16]
 8007c28:	695e      	ldr	r6, [r3, #20]
 8007c2a:	8b1b      	ldrh	r3, [r3, #24]
 8007c2c:	60e8      	str	r0, [r5, #12]
 8007c2e:	4620      	mov	r0, r4
 8007c30:	832b      	strh	r3, [r5, #24]
		newPluck = 1;
 8007c32:	4b10      	ldr	r3, [pc, #64]	; (8007c74 <HAL_SPI_RxCpltCallback+0xcc>)
 8007c34:	612f      	str	r7, [r5, #16]
 8007c36:	616e      	str	r6, [r5, #20]
 8007c38:	f8c3 c000 	str.w	ip, [r3]
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8007c3c:	f7fe f82c 	bl	8005c98 <HAL_SPI_Receive_DMA>
 8007c40:	e7b7      	b.n	8007bb2 <HAL_SPI_RxCpltCallback+0xa>
 8007c42:	bf00      	nop
 8007c44:	20018444 	.word	0x20018444
 8007c48:	200183bc 	.word	0x200183bc
 8007c4c:	200185bc 	.word	0x200185bc
 8007c50:	30000460 	.word	0x30000460
 8007c54:	200180e8 	.word	0x200180e8
 8007c58:	20000460 	.word	0x20000460
 8007c5c:	30000408 	.word	0x30000408
 8007c60:	20017b40 	.word	0x20017b40
 8007c64:	2000044c 	.word	0x2000044c
 8007c68:	58020400 	.word	0x58020400
 8007c6c:	3000043a 	.word	0x3000043a
 8007c70:	20000528 	.word	0x20000528
 8007c74:	20000450 	.word	0x20000450

08007c78 <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	if (hspi == &hspi5)
 8007c78:	4b22      	ldr	r3, [pc, #136]	; (8007d04 <HAL_SPI_RxHalfCpltCallback+0x8c>)
 8007c7a:	4298      	cmp	r0, r3
{
 8007c7c:	b570      	push	{r4, r5, r6, lr}
 8007c7e:	4604      	mov	r4, r0
	if (hspi == &hspi5)
 8007c80:	d026      	beq.n	8007cd0 <HAL_SPI_RxHalfCpltCallback+0x58>
		{
			pluck[i] = SPI_PLUCK_RX[i];
		}
		newPluck = 1;
	}
	if (hspi == &hspi2)
 8007c82:	4b21      	ldr	r3, [pc, #132]	; (8007d08 <HAL_SPI_RxHalfCpltCallback+0x90>)
 8007c84:	429c      	cmp	r4, r3
 8007c86:	d019      	beq.n	8007cbc <HAL_SPI_RxHalfCpltCallback+0x44>
		{
			bar[i] = SPI_RX[i];
		}
		newBar = 1;
	}
	if (hspi == &hspi1)
 8007c88:	4b20      	ldr	r3, [pc, #128]	; (8007d0c <HAL_SPI_RxHalfCpltCallback+0x94>)
 8007c8a:	429c      	cmp	r4, r3
 8007c8c:	d000      	beq.n	8007c90 <HAL_SPI_RxHalfCpltCallback+0x18>
		{
			levers[0][i] = SPI_LEVERS[i];
		}
		currentLeverBuffer = 0;
	}
}
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	4a1f      	ldr	r2, [pc, #124]	; (8007d10 <HAL_SPI_RxHalfCpltCallback+0x98>)
		currentLeverBuffer = 0;
 8007c92:	2600      	movs	r6, #0
 8007c94:	4b1f      	ldr	r3, [pc, #124]	; (8007d14 <HAL_SPI_RxHalfCpltCallback+0x9c>)
 8007c96:	6815      	ldr	r5, [r2, #0]
 8007c98:	6854      	ldr	r4, [r2, #4]
 8007c9a:	6890      	ldr	r0, [r2, #8]
 8007c9c:	68d1      	ldr	r1, [r2, #12]
 8007c9e:	601d      	str	r5, [r3, #0]
 8007ca0:	605c      	str	r4, [r3, #4]
 8007ca2:	6915      	ldr	r5, [r2, #16]
 8007ca4:	6954      	ldr	r4, [r2, #20]
 8007ca6:	6098      	str	r0, [r3, #8]
 8007ca8:	60d9      	str	r1, [r3, #12]
 8007caa:	6990      	ldr	r0, [r2, #24]
 8007cac:	69d1      	ldr	r1, [r2, #28]
 8007cae:	4a1a      	ldr	r2, [pc, #104]	; (8007d18 <HAL_SPI_RxHalfCpltCallback+0xa0>)
 8007cb0:	611d      	str	r5, [r3, #16]
 8007cb2:	615c      	str	r4, [r3, #20]
 8007cb4:	6198      	str	r0, [r3, #24]
 8007cb6:	61d9      	str	r1, [r3, #28]
 8007cb8:	7016      	strb	r6, [r2, #0]
}
 8007cba:	bd70      	pop	{r4, r5, r6, pc}
 8007cbc:	4a17      	ldr	r2, [pc, #92]	; (8007d1c <HAL_SPI_RxHalfCpltCallback+0xa4>)
		newBar = 1;
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	4b17      	ldr	r3, [pc, #92]	; (8007d20 <HAL_SPI_RxHalfCpltCallback+0xa8>)
 8007cc2:	6815      	ldr	r5, [r2, #0]
 8007cc4:	6850      	ldr	r0, [r2, #4]
 8007cc6:	4a17      	ldr	r2, [pc, #92]	; (8007d24 <HAL_SPI_RxHalfCpltCallback+0xac>)
 8007cc8:	601d      	str	r5, [r3, #0]
 8007cca:	6058      	str	r0, [r3, #4]
 8007ccc:	6011      	str	r1, [r2, #0]
 8007cce:	e7db      	b.n	8007c88 <HAL_SPI_RxHalfCpltCallback+0x10>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	2110      	movs	r1, #16
 8007cd4:	4814      	ldr	r0, [pc, #80]	; (8007d28 <HAL_SPI_RxHalfCpltCallback+0xb0>)
		newPluck = 1;
 8007cd6:	2501      	movs	r5, #1
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8007cd8:	f7fa f8ea 	bl	8001eb0 <HAL_GPIO_WritePin>
 8007cdc:	4a13      	ldr	r2, [pc, #76]	; (8007d2c <HAL_SPI_RxHalfCpltCallback+0xb4>)
 8007cde:	4b14      	ldr	r3, [pc, #80]	; (8007d30 <HAL_SPI_RxHalfCpltCallback+0xb8>)
 8007ce0:	6810      	ldr	r0, [r2, #0]
 8007ce2:	6851      	ldr	r1, [r2, #4]
 8007ce4:	6018      	str	r0, [r3, #0]
 8007ce6:	6059      	str	r1, [r3, #4]
 8007ce8:	6890      	ldr	r0, [r2, #8]
 8007cea:	68d1      	ldr	r1, [r2, #12]
 8007cec:	8b16      	ldrh	r6, [r2, #24]
 8007cee:	6098      	str	r0, [r3, #8]
 8007cf0:	60d9      	str	r1, [r3, #12]
 8007cf2:	6910      	ldr	r0, [r2, #16]
 8007cf4:	6951      	ldr	r1, [r2, #20]
		newPluck = 1;
 8007cf6:	4a0f      	ldr	r2, [pc, #60]	; (8007d34 <HAL_SPI_RxHalfCpltCallback+0xbc>)
 8007cf8:	6118      	str	r0, [r3, #16]
 8007cfa:	6159      	str	r1, [r3, #20]
 8007cfc:	831e      	strh	r6, [r3, #24]
 8007cfe:	6015      	str	r5, [r2, #0]
 8007d00:	e7bf      	b.n	8007c82 <HAL_SPI_RxHalfCpltCallback+0xa>
 8007d02:	bf00      	nop
 8007d04:	20018444 	.word	0x20018444
 8007d08:	200183bc 	.word	0x200183bc
 8007d0c:	200185bc 	.word	0x200185bc
 8007d10:	30000460 	.word	0x30000460
 8007d14:	200180c8 	.word	0x200180c8
 8007d18:	20000460 	.word	0x20000460
 8007d1c:	30000400 	.word	0x30000400
 8007d20:	20017b40 	.word	0x20017b40
 8007d24:	2000044c 	.word	0x2000044c
 8007d28:	58020400 	.word	0x58020400
 8007d2c:	30000420 	.word	0x30000420
 8007d30:	20000528 	.word	0x20000528
 8007d34:	20000450 	.word	0x20000450

08007d38 <HAL_SAI_ErrorCallback>:
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop

08007d3c <HAL_SAI_TxCpltCallback>:
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop

08007d40 <HAL_SAI_TxHalfCpltCallback>:
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{

}
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop

08007d44 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
	audioFrame(HALF_BUFFER_SIZE);
 8007d44:	2040      	movs	r0, #64	; 0x40
 8007d46:	f7ff bd33 	b.w	80077b0 <audioFrame>
 8007d4a:	bf00      	nop

08007d4c <HAL_SAI_RxHalfCpltCallback>:
}

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
	audioFrame(0);
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	f7ff bd2f 	b.w	80077b0 <audioFrame>
 8007d52:	bf00      	nop

08007d54 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007d54:	b500      	push	{lr}
 8007d56:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	460a      	mov	r2, r1
 8007d5e:	4601      	mov	r1, r0
 8007d60:	4804      	ldr	r0, [pc, #16]	; (8007d74 <BSP_SD_ReadBlocks+0x20>)
 8007d62:	f7fc fec7 	bl	8004af4 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8007d66:	3000      	adds	r0, #0
 8007d68:	bf18      	it	ne
 8007d6a:	2001      	movne	r0, #1
 8007d6c:	b003      	add	sp, #12
 8007d6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d72:	bf00      	nop
 8007d74:	2001833c 	.word	0x2001833c

08007d78 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007d78:	b500      	push	{lr}
 8007d7a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	460a      	mov	r2, r1
 8007d82:	4601      	mov	r1, r0
 8007d84:	4804      	ldr	r0, [pc, #16]	; (8007d98 <BSP_SD_WriteBlocks+0x20>)
 8007d86:	f7fc ffb7 	bl	8004cf8 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8007d8a:	3000      	adds	r0, #0
 8007d8c:	bf18      	it	ne
 8007d8e:	2001      	movne	r0, #1
 8007d90:	b003      	add	sp, #12
 8007d92:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d96:	bf00      	nop
 8007d98:	2001833c 	.word	0x2001833c

08007d9c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007d9c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007d9e:	4803      	ldr	r0, [pc, #12]	; (8007dac <BSP_SD_GetCardState+0x10>)
 8007da0:	f7fd fce0 	bl	8005764 <HAL_SD_GetCardState>
}
 8007da4:	3804      	subs	r0, #4
 8007da6:	bf18      	it	ne
 8007da8:	2001      	movne	r0, #1
 8007daa:	bd08      	pop	{r3, pc}
 8007dac:	2001833c 	.word	0x2001833c

08007db0 <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007db0:	4601      	mov	r1, r0
 8007db2:	4801      	ldr	r0, [pc, #4]	; (8007db8 <BSP_SD_GetCardInfo+0x8>)
 8007db4:	f7fd bbba 	b.w	800552c <HAL_SD_GetCardInfo>
 8007db8:	2001833c 	.word	0x2001833c

08007dbc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007dbc:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 8007dbe:	2301      	movs	r3, #1
{
 8007dc0:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8007dc2:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007dc6:	f000 f909 	bl	8007fdc <BSP_PlatformIsDetected>
 8007dca:	b908      	cbnz	r0, 8007dd0 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 8007dcc:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8007dd0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8007dd4:	b003      	add	sp, #12
 8007dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007dda:	bf00      	nop

08007ddc <BSP_SD_Init>:
{
 8007ddc:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007dde:	f7ff ffed 	bl	8007dbc <BSP_SD_IsDetected>
 8007de2:	2801      	cmp	r0, #1
 8007de4:	d001      	beq.n	8007dea <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 8007de6:	2002      	movs	r0, #2
}
 8007de8:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 8007dea:	4807      	ldr	r0, [pc, #28]	; (8007e08 <BSP_SD_Init+0x2c>)
 8007dec:	f7fd fc54 	bl	8005698 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d1f9      	bne.n	8007de8 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007df4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007df8:	4803      	ldr	r0, [pc, #12]	; (8007e08 <BSP_SD_Init+0x2c>)
 8007dfa:	f7fd fbab 	bl	8005554 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8007dfe:	3000      	adds	r0, #0
 8007e00:	bf18      	it	ne
 8007e02:	2001      	movne	r0, #1
}
 8007e04:	bd08      	pop	{r3, pc}
 8007e06:	bf00      	nop
 8007e08:	2001833c 	.word	0x2001833c

08007e0c <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8007e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8007e10:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8007e12:	b082      	sub	sp, #8
 8007e14:	4605      	mov	r5, r0

	HAL_Delay(2);
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e16:	4e40      	ldr	r6, [pc, #256]	; (8007f18 <AudioCodec_init+0x10c>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8007e18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007e1c:	483f      	ldr	r0, [pc, #252]	; (8007f1c <AudioCodec_init+0x110>)
 8007e1e:	f7fa f847 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8007e22:	2002      	movs	r0, #2
	myI2cData[0] = 0x07;
 8007e24:	4c3e      	ldr	r4, [pc, #248]	; (8007f20 <AudioCodec_init+0x114>)
	HAL_Delay(2);
 8007e26:	f7f8 fac1 	bl	80003ac <HAL_Delay>
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e2a:	4f3e      	ldr	r7, [pc, #248]	; (8007f24 <AudioCodec_init+0x118>)
	myI2cData[0] = 0x07;
 8007e2c:	f240 3c07 	movw	ip, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e30:	6831      	ldr	r1, [r6, #0]
 8007e32:	4622      	mov	r2, r4
 8007e34:	883b      	ldrh	r3, [r7, #0]
 8007e36:	4628      	mov	r0, r5
 8007e38:	9100      	str	r1, [sp, #0]
 8007e3a:	2120      	movs	r1, #32
 8007e3c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8007f2c <AudioCodec_init+0x120>
	myI2cData[0] = 0x07;
 8007e40:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e44:	f7fa f950 	bl	80020e8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e48:	6831      	ldr	r1, [r6, #0]
	myI2cData[0] = 0x01;
 8007e4a:	f244 1c01 	movw	ip, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e4e:	883b      	ldrh	r3, [r7, #0]
 8007e50:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e52:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e56:	4628      	mov	r0, r5
 8007e58:	9100      	str	r1, [sp, #0]
 8007e5a:	2120      	movs	r1, #32
	myI2cData[0] = 0x01;
 8007e5c:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e60:	f7fa f942 	bl	80020e8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e64:	6832      	ldr	r2, [r6, #0]
	myI2cData[0] = 0x02;
 8007e66:	f04f 0c02 	mov.w	ip, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e6a:	883b      	ldrh	r3, [r7, #0]
 8007e6c:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e6e:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e72:	4628      	mov	r0, r5
 8007e74:	9200      	str	r2, [sp, #0]
 8007e76:	4622      	mov	r2, r4
	myI2cData[0] = 0x02;
 8007e78:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e7c:	f7fa f934 	bl	80020e8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e80:	6831      	ldr	r1, [r6, #0]
	myI2cData[0] = 0x03;
 8007e82:	f647 1c03 	movw	ip, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e86:	883b      	ldrh	r3, [r7, #0]
 8007e88:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e8a:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e8e:	4628      	mov	r0, r5
 8007e90:	9100      	str	r1, [sp, #0]
 8007e92:	2120      	movs	r1, #32
	myI2cData[0] = 0x03;
 8007e94:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e98:	f7fa f926 	bl	80020e8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007e9c:	6832      	ldr	r2, [r6, #0]
	myI2cData[0] = 0x04;
 8007e9e:	f44f 7c82 	mov.w	ip, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007ea2:	883b      	ldrh	r3, [r7, #0]
 8007ea4:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007ea6:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007eaa:	4628      	mov	r0, r5
 8007eac:	9200      	str	r2, [sp, #0]
 8007eae:	4622      	mov	r2, r4
	myI2cData[0] = 0x04;
 8007eb0:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007eb4:	f7fa f918 	bl	80020e8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007eb8:	6831      	ldr	r1, [r6, #0]
	myI2cData[0] = 0x05;
 8007eba:	f240 1c05 	movw	ip, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007ebe:	883b      	ldrh	r3, [r7, #0]
 8007ec0:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007ec2:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	9100      	str	r1, [sp, #0]
 8007eca:	2120      	movs	r1, #32
	myI2cData[0] = 0x05;
 8007ecc:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007ed0:	f7fa f90a 	bl	80020e8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007ed4:	6832      	ldr	r2, [r6, #0]
	myI2cData[0] = 0x06;
 8007ed6:	f241 0c06 	movw	ip, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007eda:	883b      	ldrh	r3, [r7, #0]
 8007edc:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007ede:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	9200      	str	r2, [sp, #0]
 8007ee6:	4622      	mov	r2, r4
	myI2cData[0] = 0x06;
 8007ee8:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007eec:	f7fa f8fc 	bl	80020e8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007ef0:	6831      	ldr	r1, [r6, #0]
 8007ef2:	4622      	mov	r2, r4
 8007ef4:	883b      	ldrh	r3, [r7, #0]
	myI2cData[0] = 0x07;
 8007ef6:	f240 2707 	movw	r7, #519	; 0x207
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007efa:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007efe:	4628      	mov	r0, r5
 8007f00:	9100      	str	r1, [sp, #0]
 8007f02:	2120      	movs	r1, #32
	myI2cData[0] = 0x07;
 8007f04:	8027      	strh	r7, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007f06:	f7fa f8ef 	bl	80020e8 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8007f0a:	4b07      	ldr	r3, [pc, #28]	; (8007f28 <AudioCodec_init+0x11c>)
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

}
 8007f10:	b002      	add	sp, #8
 8007f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f16:	bf00      	nop
 8007f18:	2000039c 	.word	0x2000039c
 8007f1c:	58020800 	.word	0x58020800
 8007f20:	20000458 	.word	0x20000458
 8007f24:	200003a0 	.word	0x200003a0
 8007f28:	2000043c 	.word	0x2000043c
 8007f2c:	20017bd8 	.word	0x20017bd8

08007f30 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f30:	4b22      	ldr	r3, [pc, #136]	; (8007fbc <MX_DMA_Init+0x8c>)
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8007f32:	2200      	movs	r2, #0
 8007f34:	200b      	movs	r0, #11
 8007f36:	4611      	mov	r1, r2
{
 8007f38:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f3a:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8007f3e:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f40:	f044 0401 	orr.w	r4, r4, #1
 8007f44:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8007f48:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 8007f4c:	f004 0401 	and.w	r4, r4, #1
 8007f50:	9400      	str	r4, [sp, #0]
 8007f52:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007f54:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 8007f58:	f044 0402 	orr.w	r4, r4, #2
 8007f5c:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8007f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8007f6c:	f7f8 fa54 	bl	8000418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8007f70:	200b      	movs	r0, #11
 8007f72:	f7f8 fa87 	bl	8000484 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 4, 0);
 8007f76:	2200      	movs	r2, #0
 8007f78:	2104      	movs	r1, #4
 8007f7a:	200c      	movs	r0, #12
 8007f7c:	f7f8 fa4c 	bl	8000418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8007f80:	200c      	movs	r0, #12
 8007f82:	f7f8 fa7f 	bl	8000484 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8007f86:	2200      	movs	r2, #0
 8007f88:	2105      	movs	r1, #5
 8007f8a:	200d      	movs	r0, #13
 8007f8c:	f7f8 fa44 	bl	8000418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8007f90:	200d      	movs	r0, #13
 8007f92:	f7f8 fa77 	bl	8000484 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8007f96:	2200      	movs	r2, #0
 8007f98:	200e      	movs	r0, #14
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	f7f8 fa3c 	bl	8000418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8007fa0:	200e      	movs	r0, #14
 8007fa2:	f7f8 fa6f 	bl	8000484 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2101      	movs	r1, #1
 8007faa:	2038      	movs	r0, #56	; 0x38
 8007fac:	f7f8 fa34 	bl	8000418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007fb0:	2038      	movs	r0, #56	; 0x38

}
 8007fb2:	b002      	add	sp, #8
 8007fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007fb8:	f7f8 ba64 	b.w	8000484 <HAL_NVIC_EnableIRQ>
 8007fbc:	58024400 	.word	0x58024400

08007fc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007fc0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007fc2:	4903      	ldr	r1, [pc, #12]	; (8007fd0 <MX_FATFS_Init+0x10>)
 8007fc4:	4803      	ldr	r0, [pc, #12]	; (8007fd4 <MX_FATFS_Init+0x14>)
 8007fc6:	f7fe ff7d 	bl	8006ec4 <FATFS_LinkDriver>
 8007fca:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <MX_FATFS_Init+0x18>)
 8007fcc:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007fce:	bd08      	pop	{r3, pc}
 8007fd0:	20017be0 	.word	0x20017be0
 8007fd4:	0800c690 	.word	0x0800c690
 8007fd8:	20017bdc 	.word	0x20017bdc

08007fdc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007fdc:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007fde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007fe2:	4803      	ldr	r0, [pc, #12]	; (8007ff0 <BSP_PlatformIsDetected+0x14>)
 8007fe4:	f7f9 ff5e 	bl	8001ea4 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8007fe8:	fab0 f080 	clz	r0, r0
 8007fec:	0940      	lsrs	r0, r0, #5
 8007fee:	bd08      	pop	{r3, pc}
 8007ff0:	58020800 	.word	0x58020800

08007ff4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8007ff4:	b570      	push	{r4, r5, r6, lr}
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007ff6:	4b18      	ldr	r3, [pc, #96]	; (8008058 <MX_FMC_Init+0x64>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8007ff8:	2001      	movs	r0, #1
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007ffa:	4d18      	ldr	r5, [pc, #96]	; (800805c <MX_FMC_Init+0x68>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8007ffc:	2108      	movs	r1, #8
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8007ffe:	2410      	movs	r4, #16
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008000:	2240      	movs	r2, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008002:	601d      	str	r5, [r3, #0]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8008004:	f44f 7580 	mov.w	r5, #256	; 0x100
{
 8008008:	b088      	sub	sp, #32
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
 800800a:	2604      	movs	r6, #4
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800800c:	6098      	str	r0, [r3, #8]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800800e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8008012:	60d9      	str	r1, [r3, #12]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8008014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8008018:	611c      	str	r4, [r3, #16]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800801a:	2400      	movs	r4, #0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800801c:	615a      	str	r2, [r3, #20]
  SdramTiming.LoadToActiveDelay = 2;
 800801e:	2202      	movs	r2, #2
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8008020:	619d      	str	r5, [r3, #24]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8008022:	2506      	movs	r5, #6
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8008024:	6218      	str	r0, [r3, #32]
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008026:	4618      	mov	r0, r3
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8008028:	6259      	str	r1, [r3, #36]	; 0x24
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800802a:	eb0d 0106 	add.w	r1, sp, r6
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800802e:	605c      	str	r4, [r3, #4]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008030:	61dc      	str	r4, [r3, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8008032:	629c      	str	r4, [r3, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8008034:	9201      	str	r2, [sp, #4]
  SdramTiming.RCDDelay = 2;
 8008036:	9207      	str	r2, [sp, #28]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8008038:	9502      	str	r5, [sp, #8]
  SdramTiming.RPDelay = 2;
 800803a:	e9cd 2205 	strd	r2, r2, [sp, #20]
  SdramTiming.SelfRefreshTime = 4;
 800803e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008042:	f7fd fba3 	bl	800578c <HAL_SDRAM_Init>
 8008046:	b108      	cbz	r0, 800804c <MX_FMC_Init+0x58>
  {
    Error_Handler( );
 8008048:	f000 fbac 	bl	80087a4 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800804c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8008050:	f7f8 f9c4 	bl	80003dc <HAL_SetFMCMemorySwappingConfig>

}
 8008054:	b008      	add	sp, #32
 8008056:	bd70      	pop	{r4, r5, r6, pc}
 8008058:	20018048 	.word	0x20018048
 800805c:	52004140 	.word	0x52004140

08008060 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8008060:	4a2a      	ldr	r2, [pc, #168]	; (800810c <HAL_SDRAM_MspInit+0xac>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008062:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8008064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008066:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8008068:	6814      	ldr	r4, [r2, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800806a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800806e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8008072:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8008074:	b10c      	cbz	r4, 800807a <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8008076:	b007      	add	sp, #28
 8008078:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_RCC_FMC_CLK_ENABLE();
 800807a:	4b25      	ldr	r3, [pc, #148]	; (8008110 <HAL_SDRAM_MspInit+0xb0>)
  FMC_Initialized = 1;
 800807c:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800807e:	f64f 003f 	movw	r0, #63551	; 0xf83f
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008082:	2702      	movs	r7, #2
  FMC_Initialized = 1;
 8008084:	6011      	str	r1, [r2, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008086:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8008088:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800808c:	250c      	movs	r5, #12
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800808e:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8008090:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008094:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8008098:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800809c:	9001      	str	r0, [sp, #4]
  __HAL_RCC_FMC_CLK_ENABLE();
 800809e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80080a2:	481c      	ldr	r0, [pc, #112]	; (8008114 <HAL_SDRAM_MspInit+0xb4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080a4:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80080aa:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80080ae:	f7f9 fdd5 	bl	8001c5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 80080b2:	2319      	movs	r3, #25
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080b4:	a901      	add	r1, sp, #4
 80080b6:	4818      	ldr	r0, [pc, #96]	; (8008118 <HAL_SDRAM_MspInit+0xb8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 80080b8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ba:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080bc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80080be:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080c2:	f7f9 fdcb 	bl	8001c5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80080c6:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80080ca:	a901      	add	r1, sp, #4
 80080cc:	4813      	ldr	r0, [pc, #76]	; (800811c <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80080ce:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080d0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80080d4:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80080d8:	f7f9 fdc0 	bl	8001c5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80080dc:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80080e0:	a901      	add	r1, sp, #4
 80080e2:	480f      	ldr	r0, [pc, #60]	; (8008120 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80080e4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80080ea:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80080ee:	f7f9 fdb5 	bl	8001c5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80080f2:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080f6:	a901      	add	r1, sp, #4
 80080f8:	480a      	ldr	r0, [pc, #40]	; (8008124 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080fa:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80080fe:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008100:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008104:	f7f9 fdaa 	bl	8001c5c <HAL_GPIO_Init>
}
 8008108:	b007      	add	sp, #28
 800810a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800810c:	2000045c 	.word	0x2000045c
 8008110:	58024400 	.word	0x58024400
 8008114:	58021400 	.word	0x58021400
 8008118:	58020800 	.word	0x58020800
 800811c:	58021800 	.word	0x58021800
 8008120:	58021000 	.word	0x58021000
 8008124:	58020c00 	.word	0x58020c00

08008128 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8008128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800812c:	4b87      	ldr	r3, [pc, #540]	; (800834c <MX_GPIO_Init+0x224>)
{
 800812e:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008130:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008132:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008134:	f04f 0b02 	mov.w	fp, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8008138:	4f85      	ldr	r7, [pc, #532]	; (8008350 <MX_GPIO_Init+0x228>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800813a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800813c:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800813e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8008140:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008144:	940b      	str	r4, [sp, #44]	; 0x2c

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008146:	2603      	movs	r6, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008148:	940c      	str	r4, [sp, #48]	; 0x30
 800814a:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800814c:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8008150:	f8df a208 	ldr.w	sl, [pc, #520]	; 800835c <MX_GPIO_Init+0x234>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008154:	f040 0c10 	orr.w	ip, r0, #16
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8008158:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8008360 <MX_GPIO_Init+0x238>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800815c:	4638      	mov	r0, r7
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800815e:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8008364 <MX_GPIO_Init+0x23c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008162:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 8008166:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800816a:	f00c 0c10 	and.w	ip, ip, #16
 800816e:	f8cd c004 	str.w	ip, [sp, #4]
 8008172:	f8dd c004 	ldr.w	ip, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008176:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800817a:	f04c 0c04 	orr.w	ip, ip, #4
 800817e:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 8008182:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8008186:	f00c 0c04 	and.w	ip, ip, #4
 800818a:	f8cd c008 	str.w	ip, [sp, #8]
 800818e:	f8dd c008 	ldr.w	ip, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008192:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8008196:	f04c 0c20 	orr.w	ip, ip, #32
 800819a:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800819e:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081a2:	f00c 0c20 	and.w	ip, ip, #32
 80081a6:	f8cd c00c 	str.w	ip, [sp, #12]
 80081aa:	f8dd c00c 	ldr.w	ip, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80081ae:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081b2:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80081b6:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 80081ba:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081be:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 80081c2:	f8cd c010 	str.w	ip, [sp, #16]
 80081c6:	f8dd c010 	ldr.w	ip, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80081ca:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081ce:	ea4c 0c05 	orr.w	ip, ip, r5
 80081d2:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 80081d6:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081da:	ea0c 0c05 	and.w	ip, ip, r5
 80081de:	f8cd c014 	str.w	ip, [sp, #20]
 80081e2:	f8dd c014 	ldr.w	ip, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80081e6:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081ea:	ea4c 0c0b 	orr.w	ip, ip, fp
 80081ee:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 80081f2:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081f6:	ea0c 0c0b 	and.w	ip, ip, fp
 80081fa:	f8cd c018 	str.w	ip, [sp, #24]
 80081fe:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008202:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8008206:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 800820a:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800820e:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8008212:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 8008216:	f8cd c01c 	str.w	ip, [sp, #28]
 800821a:	f8dd c01c 	ldr.w	ip, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800821e:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8008222:	f04c 0c08 	orr.w	ip, ip, #8
 8008226:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800822a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800822e:	f003 0308 	and.w	r3, r3, #8
 8008232:	9308      	str	r3, [sp, #32]
 8008234:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8008236:	f7f9 fe3b 	bl	8001eb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800823a:	4622      	mov	r2, r4
 800823c:	4650      	mov	r0, sl
 800823e:	2180      	movs	r1, #128	; 0x80
 8008240:	f7f9 fe36 	bl	8001eb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8008244:	4622      	mov	r2, r4
 8008246:	4648      	mov	r0, r9
 8008248:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800824c:	f7f9 fe30 	bl	8001eb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8008250:	4622      	mov	r2, r4
 8008252:	4640      	mov	r0, r8
 8008254:	2110      	movs	r1, #16
 8008256:	f7f9 fe2b 	bl	8001eb0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800825a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800825e:	a909      	add	r1, sp, #36	; 0x24
 8008260:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008262:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008266:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800826a:	f7f9 fcf7 	bl	8001c5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800826e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008272:	a909      	add	r1, sp, #36	; 0x24
 8008274:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008276:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800827a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800827e:	f7f9 fced 	bl	8001c5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8008282:	f248 03c6 	movw	r3, #32966	; 0x80c6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008286:	a909      	add	r1, sp, #36	; 0x24
 8008288:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800828a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800828c:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008290:	f7f9 fce4 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8008294:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008298:	a909      	add	r1, sp, #36	; 0x24
 800829a:	482e      	ldr	r0, [pc, #184]	; (8008354 <MX_GPIO_Init+0x22c>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800829c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800829e:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80082a2:	f7f9 fcdb 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA10 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80082a6:	f249 530f 	movw	r3, #38159	; 0x950f
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082aa:	a909      	add	r1, sp, #36	; 0x24
 80082ac:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80082ae:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b0:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082b4:	f7f9 fcd2 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80082b8:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082ba:	4638      	mov	r0, r7
 80082bc:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80082be:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082c0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082c4:	f7f9 fcca 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 80082c8:	f240 33e5 	movw	r3, #997	; 0x3e5
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082cc:	a909      	add	r1, sp, #36	; 0x24
 80082ce:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 80082d0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d2:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082d6:	f7f9 fcc1 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082da:	a909      	add	r1, sp, #36	; 0x24
 80082dc:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082de:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082e0:	e9cd b409 	strd	fp, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082e4:	f7f9 fcba 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 80082e8:	f643 03f8 	movw	r3, #14584	; 0x38f8
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082ec:	a909      	add	r1, sp, #36	; 0x24
 80082ee:	481a      	ldr	r0, [pc, #104]	; (8008358 <MX_GPIO_Init+0x230>)
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 80082f0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f2:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082f6:	f7f9 fcb1 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG9 PG10
                           PG11 PG12 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10
 80082fa:	f647 6348 	movw	r3, #32328	; 0x7e48
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80082fe:	a909      	add	r1, sp, #36	; 0x24
 8008300:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10
 8008302:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008304:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008308:	f7f9 fca8 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800830c:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800830e:	4650      	mov	r0, sl
 8008310:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008312:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008314:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008316:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800831a:	f7f9 fc9f 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800831e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008322:	4648      	mov	r0, r9
 8008324:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8008326:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008328:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800832a:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800832e:	f7f9 fc95 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008332:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008334:	a909      	add	r1, sp, #36	; 0x24
 8008336:	4640      	mov	r0, r8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008338:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800833a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800833c:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008340:	f7f9 fc8c 	bl	8001c5c <HAL_GPIO_Init>

}
 8008344:	b00f      	add	sp, #60	; 0x3c
 8008346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834a:	bf00      	nop
 800834c:	58024400 	.word	0x58024400
 8008350:	58020800 	.word	0x58020800
 8008354:	58021400 	.word	0x58021400
 8008358:	58020c00 	.word	0x58020c00
 800835c:	58021800 	.word	0x58021800
 8008360:	58020000 	.word	0x58020000
 8008364:	58020400 	.word	0x58020400

08008368 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008368:	b538      	push	{r3, r4, r5, lr}

  hi2c2.Instance = I2C2;
 800836a:	4b13      	ldr	r3, [pc, #76]	; (80083b8 <MX_I2C2_Init+0x50>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
 800836c:	2200      	movs	r2, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800836e:	2101      	movs	r1, #1
  hi2c2.Instance = I2C2;
 8008370:	4d12      	ldr	r5, [pc, #72]	; (80083bc <MX_I2C2_Init+0x54>)
  hi2c2.Init.Timing = 0x00B03FDB;
 8008372:	4c13      	ldr	r4, [pc, #76]	; (80083c0 <MX_I2C2_Init+0x58>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008374:	4618      	mov	r0, r3
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008376:	621a      	str	r2, [r3, #32]
  hi2c2.Init.Timing = 0x00B03FDB;
 8008378:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c2.Init.OwnAddress1 = 0;
 800837c:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8008380:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008384:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008388:	f7f9 fe50 	bl	800202c <HAL_I2C_Init>
 800838c:	b988      	cbnz	r0, 80083b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800838e:	2100      	movs	r1, #0
 8008390:	4809      	ldr	r0, [pc, #36]	; (80083b8 <MX_I2C2_Init+0x50>)
 8008392:	f7f9 ff77 	bl	8002284 <HAL_I2CEx_ConfigAnalogFilter>
 8008396:	b948      	cbnz	r0, 80083ac <MX_I2C2_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008398:	2100      	movs	r1, #0
 800839a:	4807      	ldr	r0, [pc, #28]	; (80083b8 <MX_I2C2_Init+0x50>)
 800839c:	f7f9 ffa0 	bl	80022e0 <HAL_I2CEx_ConfigDigitalFilter>
 80083a0:	b900      	cbnz	r0, 80083a4 <MX_I2C2_Init+0x3c>
  {
    Error_Handler();
  }

}
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80083a8:	f000 b9fc 	b.w	80087a4 <Error_Handler>
    Error_Handler();
 80083ac:	f000 f9fa 	bl	80087a4 <Error_Handler>
 80083b0:	e7f2      	b.n	8008398 <MX_I2C2_Init+0x30>
    Error_Handler();
 80083b2:	f000 f9f7 	bl	80087a4 <Error_Handler>
 80083b6:	e7ea      	b.n	800838e <MX_I2C2_Init+0x26>
 80083b8:	2001807c 	.word	0x2001807c
 80083bc:	40005800 	.word	0x40005800
 80083c0:	00b03fdb 	.word	0x00b03fdb

080083c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80083c4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C2)
 80083c6:	4a1a      	ldr	r2, [pc, #104]	; (8008430 <HAL_I2C_MspInit+0x6c>)
{
 80083c8:	b088      	sub	sp, #32
  if(i2cHandle->Instance==I2C2)
 80083ca:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083cc:	2300      	movs	r3, #0
  if(i2cHandle->Instance==I2C2)
 80083ce:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083d0:	9307      	str	r3, [sp, #28]
 80083d2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80083d6:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(i2cHandle->Instance==I2C2)
 80083da:	d001      	beq.n	80083e0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80083dc:	b008      	add	sp, #32
 80083de:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083e0:	4c14      	ldr	r4, [pc, #80]	; (8008434 <HAL_I2C_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083e2:	2012      	movs	r0, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80083e4:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80083e6:	f44f 6640 	mov.w	r6, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083ea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083ee:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083f0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083f2:	f043 0302 	orr.w	r3, r3, #2
 80083f6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80083fa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083fe:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008400:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008404:	480c      	ldr	r0, [pc, #48]	; (8008438 <HAL_I2C_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008406:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008408:	9301      	str	r3, [sp, #4]
 800840a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800840c:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008410:	f7f9 fc24 	bl	8001c5c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008414:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8008418:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800841c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8008420:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8008424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008428:	9302      	str	r3, [sp, #8]
 800842a:	9b02      	ldr	r3, [sp, #8]
}
 800842c:	b008      	add	sp, #32
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	40005800 	.word	0x40005800
 8008434:	58024400 	.word	0x58024400
 8008438:	58020400 	.word	0x58020400

0800843c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800843c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008440:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008442:	224c      	movs	r2, #76	; 0x4c
 8008444:	2100      	movs	r1, #0
 8008446:	a80a      	add	r0, sp, #40	; 0x28
 8008448:	f002 f904 	bl	800a654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800844c:	2220      	movs	r2, #32
 800844e:	2100      	movs	r1, #0
 8008450:	a802      	add	r0, sp, #8
 8008452:	f002 f8ff 	bl	800a654 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008456:	22bc      	movs	r2, #188	; 0xbc
 8008458:	2100      	movs	r1, #0
 800845a:	a81d      	add	r0, sp, #116	; 0x74
 800845c:	f002 f8fa 	bl	800a654 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008460:	2002      	movs	r0, #2
 8008462:	f7f9 ff69 	bl	8002338 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8008466:	4b34      	ldr	r3, [pc, #208]	; (8008538 <SystemClock_Config+0xfc>)
 8008468:	2200      	movs	r2, #0
 800846a:	4934      	ldr	r1, [pc, #208]	; (800853c <SystemClock_Config+0x100>)
 800846c:	9201      	str	r2, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800846e:	461a      	mov	r2, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8008470:	6998      	ldr	r0, [r3, #24]
 8008472:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8008476:	6198      	str	r0, [r3, #24]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008482:	f043 0301 	orr.w	r3, r3, #1
 8008486:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008488:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	9301      	str	r3, [sp, #4]
 8008490:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8008492:	6993      	ldr	r3, [r2, #24]
 8008494:	049b      	lsls	r3, r3, #18
 8008496:	d5fc      	bpl.n	8008492 <SystemClock_Config+0x56>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8008498:	4a29      	ldr	r2, [pc, #164]	; (8008540 <SystemClock_Config+0x104>)
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800849a:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800849c:	2021      	movs	r0, #33	; 0x21
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800849e:	2400      	movs	r4, #0
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80084a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80084a2:	f04f 0808 	mov.w	r8, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80084a6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80084aa:	2601      	movs	r6, #1
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80084ac:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.PLL.PLLM = 5;
 80084b0:	f04f 0905 	mov.w	r9, #5
  RCC_OscInitStruct.PLL.PLLN = 192;
 80084b4:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80084b6:	432b      	orrs	r3, r5
 80084b8:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80084ba:	900a      	str	r0, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80084bc:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80084be:	970b      	str	r7, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80084c0:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = 2;
 80084c2:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80084c4:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 80084c6:	e9cd 9115 	strd	r9, r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80084ca:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80084ce:	e9cd 5517 	strd	r5, r5, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80084d2:	e9cd 841a 	strd	r8, r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80084d6:	f7f9 ff55 	bl	8002384 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80084da:	223f      	movs	r2, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80084dc:	2003      	movs	r0, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80084de:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80084e0:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80084e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80084e6:	4649      	mov	r1, r9
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80084e8:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80084ea:	eb0d 0008 	add.w	r0, sp, r8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80084ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80084f2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80084f6:	e9cd 4804 	strd	r4, r8, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80084fa:	f7fa fac1 	bl	8002a80 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SPI5
 80084fe:	f8df c044 	ldr.w	ip, [pc, #68]	; 8008544 <SystemClock_Config+0x108>
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI2
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8008502:	2119      	movs	r1, #25
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8008504:	f44f 72ac 	mov.w	r2, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8008508:	2307      	movs	r3, #7
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800850a:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800850c:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800850e:	942e      	str	r4, [sp, #184]	; 0xb8
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8008510:	9730      	str	r7, [sp, #192]	; 0xc0
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8008512:	9632      	str	r6, [sp, #200]	; 0xc8
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8008514:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8008518:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800851c:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8008520:	e9cd 443c 	strd	r4, r4, [sp, #240]	; 0xf0
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8008524:	e9cd c11d 	strd	ip, r1, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8008528:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800852c:	f7fa fd78 	bl	8003020 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8008530:	b04d      	add	sp, #308	; 0x134
 8008532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008536:	bf00      	nop
 8008538:	58024800 	.word	0x58024800
 800853c:	58000400 	.word	0x58000400
 8008540:	58024400 	.word	0x58024400
 8008544:	01033108 	.word	0x01033108

08008548 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 8008548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 1;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800854c:	4c2b      	ldr	r4, [pc, #172]	; (80085fc <SDRAM_Initialization_sequence+0xb4>)
{
 800854e:	b087      	sub	sp, #28
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8008550:	2501      	movs	r5, #1
    __IO uint32_t tmpmrd = 0;
 8008552:	2600      	movs	r6, #0
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008554:	2710      	movs	r7, #16
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008556:	a902      	add	r1, sp, #8
 8008558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800855c:	4620      	mov	r0, r4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
 800855e:	f04f 0808 	mov.w	r8, #8
    __IO uint32_t tmpmrd = 0;
 8008562:	9601      	str	r6, [sp, #4]
    Command.ModeRegisterDefinition = 0;
 8008564:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8008566:	f04f 0903 	mov.w	r9, #3
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800856a:	9502      	str	r5, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800856c:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008570:	f7fd f934 	bl	80057dc <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 8008574:	4628      	mov	r0, r5
 8008576:	f7f7 ff19 	bl	80003ac <HAL_Delay>
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800857a:	2302      	movs	r3, #2
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800857c:	eb0d 0108 	add.w	r1, sp, r8
 8008580:	4620      	mov	r0, r4
 8008582:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8008586:	9302      	str	r3, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 8008588:	9605      	str	r6, [sp, #20]
    Command.AutoRefreshNumber = 1;
 800858a:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800858e:	f7fd f925 	bl	80057dc <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 8008592:	f240 2222 	movw	r2, #546	; 0x222
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8008596:	2304      	movs	r3, #4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008598:	eb0d 0108 	add.w	r1, sp, r8
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800859c:	9201      	str	r2, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800859e:	4620      	mov	r0, r4
    Command.ModeRegisterDefinition = tmpmrd;
 80085a0:	f8dd c004 	ldr.w	ip, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80085a8:	9302      	str	r3, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80085aa:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 80085ac:	e9cd 5c04 	strd	r5, ip, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085b0:	f7fd f914 	bl	80057dc <HAL_SDRAM_SendCommand>
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085b4:	eb0d 0108 	add.w	r1, sp, r8
 80085b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085bc:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80085be:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 80085c0:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80085c2:	f8cd 9008 	str.w	r9, [sp, #8]
    Command.AutoRefreshNumber = 8;
 80085c6:	f8cd 8010 	str.w	r8, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085ca:	f7fd f907 	bl	80057dc <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80085ce:	4628      	mov	r0, r5
 80085d0:	f7f7 feec 	bl	80003ac <HAL_Delay>
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085d4:	eb0d 0108 	add.w	r1, sp, r8
 80085d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085dc:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80085de:	e9cd 9702 	strd	r9, r7, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 80085e2:	e9cd 8604 	strd	r8, r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085e6:	f7fd f8f9 	bl	80057dc <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 80085ea:	f240 5169 	movw	r1, #1385	; 0x569
 80085ee:	4620      	mov	r0, r4
 80085f0:	f7fd f916 	bl	8005820 <HAL_SDRAM_ProgramRefreshRate>
}
 80085f4:	b007      	add	sp, #28
 80085f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085fa:	bf00      	nop
 80085fc:	20018048 	.word	0x20018048

08008600 <randomNumber>:

float randomNumber(void) {
 8008600:	b500      	push	{lr}
 8008602:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8008604:	4807      	ldr	r0, [pc, #28]	; (8008624 <randomNumber+0x24>)
 8008606:	a901      	add	r1, sp, #4
 8008608:	f7fb fd94 	bl	8004134 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800860c:	eddd 7a01 	vldr	s15, [sp, #4]
 8008610:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8008628 <randomNumber+0x28>
 8008614:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8008618:	ee27 0a80 	vmul.f32	s0, s15, s0
 800861c:	b003      	add	sp, #12
 800861e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008622:	bf00      	nop
 8008624:	20018108 	.word	0x20018108
 8008628:	2f80000d 	.word	0x2f80000d

0800862c <MPU_Conf>:


void MPU_Conf(void)
{
 800862c:	b510      	push	{r4, lr}
 800862e:	b084      	sub	sp, #16
  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8008630:	2400      	movs	r4, #0
	HAL_MPU_Disable();
 8008632:	f7f7 ff4d 	bl	80004d0 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x30000000;
 8008636:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800863a:	f240 1201 	movw	r2, #257	; 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800863e:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <MPU_Conf+0x48>)


  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008640:	4668      	mov	r0, sp
  MPU_InitStruct.BaseAddress = 0x30000000;
 8008642:	9101      	str	r1, [sp, #4]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008644:	f8ad 2000 	strh.w	r2, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8008648:	e9cd 3402 	strd	r3, r4, [sp, #8]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800864c:	f7f7 ff62 	bl	8000514 <HAL_MPU_ConfigRegion>
  //now set up D3 domain RAM

  MPU_InitStruct.Enable = MPU_REGION_ENABLE;

  //D3 Domain�SRAM1
  MPU_InitStruct.BaseAddress = 0x38000000;
 8008650:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008654:	f240 2201 	movw	r2, #513	; 0x201


  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8008658:	4b07      	ldr	r3, [pc, #28]	; (8008678 <MPU_Conf+0x4c>)


  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800865a:	4668      	mov	r0, sp
  MPU_InitStruct.BaseAddress = 0x38000000;
 800865c:	9101      	str	r1, [sp, #4]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800865e:	f8ad 2000 	strh.w	r2, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8008662:	9302      	str	r3, [sp, #8]
 8008664:	9403      	str	r4, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008666:	f7f7 ff55 	bl	8000514 <HAL_MPU_ConfigRegion>
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  */



  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800866a:	2004      	movs	r0, #4
 800866c:	f7f7 ff40 	bl	80004f0 <HAL_MPU_Enable>
}
 8008670:	b004      	add	sp, #16
 8008672:	bd10      	pop	{r4, pc}
 8008674:	03010011 	.word	0x03010011
 8008678:	0301000f 	.word	0x0301000f

0800867c <main>:
{
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  MPU_Conf();
 800867e:	f7ff ffd5 	bl	800862c <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 8008682:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008686:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800868a:	4a3b      	ldr	r2, [pc, #236]	; (8008778 <main+0xfc>)
 800868c:	2100      	movs	r1, #0
 800868e:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008692:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008696:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800869a:	6953      	ldr	r3, [r2, #20]
 800869c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80086a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80086a6:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80086aa:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80086ae:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80086b2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80086b6:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80086ba:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80086be:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80086c2:	07b7      	lsls	r7, r6, #30
 80086c4:	015c      	lsls	r4, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80086c6:	ea04 050c 	and.w	r5, r4, ip
 80086ca:	4638      	mov	r0, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80086cc:	4631      	mov	r1, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80086ce:	ea45 0300 	orr.w	r3, r5, r0
      } while (ways-- != 0U);
 80086d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80086d4:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 80086d8:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80086dc:	1c4b      	adds	r3, r1, #1
 80086de:	d1f6      	bne.n	80086ce <main+0x52>
 80086e0:	3c20      	subs	r4, #32
    } while(sets-- != 0U);
 80086e2:	f114 0f20 	cmn.w	r4, #32
 80086e6:	d1ee      	bne.n	80086c6 <main+0x4a>
 80086e8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80086ec:	6953      	ldr	r3, [r2, #20]
 80086ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086f2:	6153      	str	r3, [r2, #20]
 80086f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80086f8:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80086fc:	f7f7 fe12 	bl	8000324 <HAL_Init>
  SystemClock_Config();
 8008700:	f7ff fe9c 	bl	800843c <SystemClock_Config>
  MX_GPIO_Init();
 8008704:	f7ff fd10 	bl	8008128 <MX_GPIO_Init>
  MX_DMA_Init();
 8008708:	f7ff fc12 	bl	8007f30 <MX_DMA_Init>
  MX_FMC_Init();
 800870c:	f7ff fc72 	bl	8007ff4 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8008710:	f000 f9e2 	bl	8008ad8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8008714:	f7ff fc54 	bl	8007fc0 <MX_FATFS_Init>
  MX_SAI1_Init();
 8008718:	f000 f874 	bl	8008804 <MX_SAI1_Init>
  MX_RNG_Init();
 800871c:	f000 f844 	bl	80087a8 <MX_RNG_Init>
  MX_SPI2_Init();
 8008720:	f000 fa70 	bl	8008c04 <MX_SPI2_Init>
  MX_I2C2_Init();
 8008724:	f7ff fe20 	bl	8008368 <MX_I2C2_Init>
  MX_SPI1_Init();
 8008728:	f000 fa44 	bl	8008bb4 <MX_SPI1_Init>
  MX_SPI5_Init();
 800872c:	f000 fa92 	bl	8008c54 <MX_SPI5_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8008730:	2200      	movs	r2, #0
 8008732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008736:	4811      	ldr	r0, [pc, #68]	; (800877c <main+0x100>)
 8008738:	f7f9 fbba 	bl	8001eb0 <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800873c:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 8008740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8008744:	eee1 3a10 	vmsr	fpscr, r3
  HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 16);
 8008748:	2210      	movs	r2, #16
 800874a:	490d      	ldr	r1, [pc, #52]	; (8008780 <main+0x104>)
 800874c:	480d      	ldr	r0, [pc, #52]	; (8008784 <main+0x108>)
 800874e:	f7fd faa3 	bl	8005c98 <HAL_SPI_Receive_DMA>
  HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8008752:	2234      	movs	r2, #52	; 0x34
 8008754:	490c      	ldr	r1, [pc, #48]	; (8008788 <main+0x10c>)
 8008756:	480d      	ldr	r0, [pc, #52]	; (800878c <main+0x110>)
 8008758:	f7fd fa9e 	bl	8005c98 <HAL_SPI_Receive_DMA>
  HAL_SPI_Receive_DMA(&hspi1, SPI_LEVERS, 32);
 800875c:	2220      	movs	r2, #32
 800875e:	490c      	ldr	r1, [pc, #48]	; (8008790 <main+0x114>)
 8008760:	480c      	ldr	r0, [pc, #48]	; (8008794 <main+0x118>)
 8008762:	f7fd fa99 	bl	8005c98 <HAL_SPI_Receive_DMA>
  SDRAM_Initialization_sequence();
 8008766:	f7ff feef 	bl	8008548 <SDRAM_Initialization_sequence>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 800876a:	4a0b      	ldr	r2, [pc, #44]	; (8008798 <main+0x11c>)
 800876c:	490b      	ldr	r1, [pc, #44]	; (800879c <main+0x120>)
 800876e:	480c      	ldr	r0, [pc, #48]	; (80087a0 <main+0x124>)
 8008770:	f7fe fbce 	bl	8006f10 <audioInit>
 8008774:	e7fe      	b.n	8008774 <main+0xf8>
 8008776:	bf00      	nop
 8008778:	e000ed00 	.word	0xe000ed00
 800877c:	58020800 	.word	0x58020800
 8008780:	30000400 	.word	0x30000400
 8008784:	200183bc 	.word	0x200183bc
 8008788:	30000420 	.word	0x30000420
 800878c:	20018444 	.word	0x20018444
 8008790:	30000460 	.word	0x30000460
 8008794:	200185bc 	.word	0x200185bc
 8008798:	2001811c 	.word	0x2001811c
 800879c:	200182a4 	.word	0x200182a4
 80087a0:	2001807c 	.word	0x2001807c

080087a4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop

080087a8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80087a8:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 80087aa:	4b07      	ldr	r3, [pc, #28]	; (80087c8 <MX_RNG_Init+0x20>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80087ac:	2100      	movs	r1, #0
  hrng.Instance = RNG;
 80087ae:	4a07      	ldr	r2, [pc, #28]	; (80087cc <MX_RNG_Init+0x24>)
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80087b0:	4618      	mov	r0, r3
  hrng.Instance = RNG;
 80087b2:	e9c3 2100 	strd	r2, r1, [r3]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80087b6:	f7fb fc81 	bl	80040bc <HAL_RNG_Init>
 80087ba:	b900      	cbnz	r0, 80087be <MX_RNG_Init+0x16>
  {
    Error_Handler();
  }

}
 80087bc:	bd08      	pop	{r3, pc}
 80087be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80087c2:	f7ff bfef 	b.w	80087a4 <Error_Handler>
 80087c6:	bf00      	nop
 80087c8:	20018108 	.word	0x20018108
 80087cc:	48021800 	.word	0x48021800

080087d0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 80087d0:	6802      	ldr	r2, [r0, #0]
 80087d2:	4b0a      	ldr	r3, [pc, #40]	; (80087fc <HAL_RNG_MspInit+0x2c>)
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d000      	beq.n	80087da <HAL_RNG_MspInit+0xa>
 80087d8:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80087da:	4b09      	ldr	r3, [pc, #36]	; (8008800 <HAL_RNG_MspInit+0x30>)
{
 80087dc:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 80087de:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80087e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087e6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80087ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80087ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f2:	9301      	str	r3, [sp, #4]
 80087f4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80087f6:	b002      	add	sp, #8
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	48021800 	.word	0x48021800
 8008800:	58024400 	.word	0x58024400

08008804 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8008804:	b570      	push	{r4, r5, r6, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 8008806:	481a      	ldr	r0, [pc, #104]	; (8008870 <MX_SAI1_Init+0x6c>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8008808:	2500      	movs	r5, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 800880a:	4c1a      	ldr	r4, [pc, #104]	; (8008874 <MX_SAI1_Init+0x70>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800880c:	2101      	movs	r1, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800880e:	f64b 3280 	movw	r2, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008812:	2302      	movs	r3, #2
  hsai_BlockA1.Instance = SAI1_Block_A;
 8008814:	6020      	str	r0, [r4, #0]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008816:	4620      	mov	r0, r4
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8008818:	61e1      	str	r1, [r4, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800881a:	4629      	mov	r1, r5
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800881c:	6222      	str	r2, [r4, #32]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800881e:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008820:	60e5      	str	r5, [r4, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008822:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8008824:	e9c4 5501 	strd	r5, r5, [r4, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8008828:	e9c4 5505 	strd	r5, r5, [r4, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800882c:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008830:	f7fb fcb0 	bl	8004194 <HAL_SAI_InitProtocol>
 8008834:	b9c8      	cbnz	r0, 800886a <MX_SAI1_Init+0x66>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8008836:	4c10      	ldr	r4, [pc, #64]	; (8008878 <MX_SAI1_Init+0x74>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008838:	2500      	movs	r5, #0
  hsai_BlockB1.Instance = SAI1_Block_B;
 800883a:	4910      	ldr	r1, [pc, #64]	; (800887c <MX_SAI1_Init+0x78>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800883c:	2203      	movs	r2, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800883e:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8008840:	2601      	movs	r6, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 8008842:	6021      	str	r1, [r4, #0]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008844:	4620      	mov	r0, r4
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8008846:	6062      	str	r2, [r4, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008848:	4629      	mov	r1, r5
 800884a:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800884c:	60a6      	str	r6, [r4, #8]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800884e:	61e6      	str	r6, [r4, #28]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008850:	6165      	str	r5, [r4, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008852:	60e5      	str	r5, [r4, #12]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008854:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8008856:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800885a:	f7fb fc9b 	bl	8004194 <HAL_SAI_InitProtocol>
 800885e:	b900      	cbnz	r0, 8008862 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
  }

}
 8008860:	bd70      	pop	{r4, r5, r6, pc}
 8008862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8008866:	f7ff bf9d 	b.w	80087a4 <Error_Handler>
    Error_Handler();
 800886a:	f7ff ff9b 	bl	80087a4 <Error_Handler>
 800886e:	e7e2      	b.n	8008836 <MX_SAI1_Init+0x32>
 8008870:	40015804 	.word	0x40015804
 8008874:	200182a4 	.word	0x200182a4
 8008878:	2001811c 	.word	0x2001811c
 800887c:	40015824 	.word	0x40015824

08008880 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8008880:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8008882:	4a50      	ldr	r2, [pc, #320]	; (80089c4 <HAL_SAI_MspInit+0x144>)
{
 8008884:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI1_Block_A)
 8008886:	6803      	ldr	r3, [r0, #0]
{
 8008888:	4605      	mov	r5, r0
    if(hsai->Instance==SAI1_Block_A)
 800888a:	4293      	cmp	r3, r2
 800888c:	d03f      	beq.n	800890e <HAL_SAI_MspInit+0x8e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 800888e:	4a4e      	ldr	r2, [pc, #312]	; (80089c8 <HAL_SAI_MspInit+0x148>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d001      	beq.n	8008898 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 8008894:	b009      	add	sp, #36	; 0x24
 8008896:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (SAI1_client == 0)
 8008898:	4b4c      	ldr	r3, [pc, #304]	; (80089cc <HAL_SAI_MspInit+0x14c>)
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	2a00      	cmp	r2, #0
 800889e:	d06f      	beq.n	8008980 <HAL_SAI_MspInit+0x100>
    SAI1_client ++;
 80088a0:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80088a2:	2108      	movs	r1, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a4:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a6:	2600      	movs	r6, #0
    SAI1_client ++;
 80088a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088aa:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80088ac:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80088ae:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b0:	9004      	str	r0, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80088b2:	a903      	add	r1, sp, #12
 80088b4:	4846      	ldr	r0, [pc, #280]	; (80089d0 <HAL_SAI_MspInit+0x150>)
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80088b6:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai1_b.Instance = DMA1_Stream2;
 80088ba:	4c46      	ldr	r4, [pc, #280]	; (80089d4 <HAL_SAI_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80088bc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088be:	e9cd 6205 	strd	r6, r2, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80088c2:	f7f9 f9cb 	bl	8001c5c <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 80088c6:	4a44      	ldr	r2, [pc, #272]	; (80089d8 <HAL_SAI_MspInit+0x158>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80088c8:	2358      	movs	r3, #88	; 0x58
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80088ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80088ce:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80088d2:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_b.Instance = DMA1_Stream2;
 80088d6:	6022      	str	r2, [r4, #0]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80088d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80088dc:	6063      	str	r3, [r4, #4]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80088de:	2304      	movs	r3, #4
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80088e0:	60a6      	str	r6, [r4, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80088e2:	60e6      	str	r6, [r4, #12]
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80088e4:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80088e6:	e9c4 c004 	strd	ip, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80088ea:	4620      	mov	r0, r4
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 80088ec:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80088f0:	e9c4 7106 	strd	r7, r1, [r4, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80088f4:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80088f8:	f7f7 feb2 	bl	8000660 <HAL_DMA_Init>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d15b      	bne.n	80089b8 <HAL_SAI_MspInit+0x138>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8008900:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
 8008904:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8008906:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
}
 800890a:	b009      	add	sp, #36	; 0x24
 800890c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 800890e:	4b2f      	ldr	r3, [pc, #188]	; (80089cc <HAL_SAI_MspInit+0x14c>)
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	2a00      	cmp	r2, #0
 8008914:	d042      	beq.n	800899c <HAL_SAI_MspInit+0x11c>
    SAI1_client ++;
 8008916:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8008918:	2174      	movs	r1, #116	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800891a:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800891c:	2600      	movs	r6, #0
    SAI1_client ++;
 800891e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008920:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008922:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8008924:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008926:	9004      	str	r0, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008928:	a903      	add	r1, sp, #12
 800892a:	4829      	ldr	r0, [pc, #164]	; (80089d0 <HAL_SAI_MspInit+0x150>)
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800892c:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_sai1_a.Instance = DMA1_Stream1;
 8008930:	4c2a      	ldr	r4, [pc, #168]	; (80089dc <HAL_SAI_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008932:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008934:	e9cd 6205 	strd	r6, r2, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008938:	f7f9 f990 	bl	8001c5c <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 800893c:	4928      	ldr	r1, [pc, #160]	; (80089e0 <HAL_SAI_MspInit+0x160>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800893e:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008940:	2340      	movs	r3, #64	; 0x40
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008942:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8008946:	60e6      	str	r6, [r4, #12]
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008948:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai1_a.Instance = DMA1_Stream1;
 800894a:	6021      	str	r1, [r4, #0]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800894c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8008950:	6062      	str	r2, [r4, #4]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008952:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008956:	60a3      	str	r3, [r4, #8]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008958:	2304      	movs	r3, #4
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800895a:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800895e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008962:	e9c4 7004 	strd	r7, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8008966:	4620      	mov	r0, r4
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8008968:	e9c4 6106 	strd	r6, r1, [r4, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800896c:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8008970:	f7f7 fe76 	bl	8000660 <HAL_DMA_Init>
 8008974:	bb18      	cbnz	r0, 80089be <HAL_SAI_MspInit+0x13e>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8008976:	63a5      	str	r5, [r4, #56]	; 0x38
 8008978:	682b      	ldr	r3, [r5, #0]
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800897a:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
 800897e:	e786      	b.n	800888e <HAL_SAI_MspInit+0xe>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008980:	4918      	ldr	r1, [pc, #96]	; (80089e4 <HAL_SAI_MspInit+0x164>)
 8008982:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8008986:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800898a:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 800898e:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8008992:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008996:	9102      	str	r1, [sp, #8]
 8008998:	9902      	ldr	r1, [sp, #8]
 800899a:	e781      	b.n	80088a0 <HAL_SAI_MspInit+0x20>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800899c:	4911      	ldr	r1, [pc, #68]	; (80089e4 <HAL_SAI_MspInit+0x164>)
 800899e:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 80089a2:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80089a6:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 80089aa:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 80089ae:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80089b2:	9101      	str	r1, [sp, #4]
 80089b4:	9901      	ldr	r1, [sp, #4]
 80089b6:	e7ae      	b.n	8008916 <HAL_SAI_MspInit+0x96>
      Error_Handler();
 80089b8:	f7ff fef4 	bl	80087a4 <Error_Handler>
 80089bc:	e7a0      	b.n	8008900 <HAL_SAI_MspInit+0x80>
      Error_Handler();
 80089be:	f7ff fef1 	bl	80087a4 <Error_Handler>
 80089c2:	e7d8      	b.n	8008976 <HAL_SAI_MspInit+0xf6>
 80089c4:	40015804 	.word	0x40015804
 80089c8:	40015824 	.word	0x40015824
 80089cc:	20000464 	.word	0x20000464
 80089d0:	58021000 	.word	0x58021000
 80089d4:	2001822c 	.word	0x2001822c
 80089d8:	40020040 	.word	0x40020040
 80089dc:	200181b4 	.word	0x200181b4
 80089e0:	40020028 	.word	0x40020028
 80089e4:	58024400 	.word	0x58024400

080089e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80089e8:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 80089ea:	4c0a      	ldr	r4, [pc, #40]	; (8008a14 <SD_initialize+0x2c>)
 80089ec:	2501      	movs	r5, #1
 80089ee:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80089f0:	f7ff f9f4 	bl	8007ddc <BSP_SD_Init>
 80089f4:	b108      	cbz	r0, 80089fa <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80089f6:	7820      	ldrb	r0, [r4, #0]
}
 80089f8:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 80089fa:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80089fc:	f7ff f9ce 	bl	8007d9c <BSP_SD_GetCardState>
 8008a00:	b918      	cbnz	r0, 8008a0a <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 8008a02:	7823      	ldrb	r3, [r4, #0]
 8008a04:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008a08:	7023      	strb	r3, [r4, #0]
  return Stat;
 8008a0a:	7823      	ldrb	r3, [r4, #0]
 8008a0c:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8008a0e:	7023      	strb	r3, [r4, #0]
  return Stat;
 8008a10:	7820      	ldrb	r0, [r4, #0]
}
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	200003a2 	.word	0x200003a2

08008a18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008a18:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	4c05      	ldr	r4, [pc, #20]	; (8008a34 <SD_status+0x1c>)
 8008a1e:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8008a20:	f7ff f9bc 	bl	8007d9c <BSP_SD_GetCardState>
 8008a24:	b918      	cbnz	r0, 8008a2e <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8008a26:	7823      	ldrb	r3, [r4, #0]
 8008a28:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008a2c:	7023      	strb	r3, [r4, #0]
  return Stat;
 8008a2e:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8008a30:	bd10      	pop	{r4, pc}
 8008a32:	bf00      	nop
 8008a34:	200003a2 	.word	0x200003a2

08008a38 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008a38:	b508      	push	{r3, lr}
 8008a3a:	4608      	mov	r0, r1
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a44:	f7ff f986 	bl	8007d54 <BSP_SD_ReadBlocks>
 8008a48:	b920      	cbnz	r0, 8008a54 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008a4a:	f7ff f9a7 	bl	8007d9c <BSP_SD_GetCardState>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d1fb      	bne.n	8008a4a <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8008a52:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8008a54:	2001      	movs	r0, #1
}
 8008a56:	bd08      	pop	{r3, pc}

08008a58 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008a58:	4b16      	ldr	r3, [pc, #88]	; (8008ab4 <SD_ioctl+0x5c>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	07db      	lsls	r3, r3, #31
 8008a5e:	d408      	bmi.n	8008a72 <SD_ioctl+0x1a>
{
 8008a60:	b510      	push	{r4, lr}
 8008a62:	4614      	mov	r4, r2
 8008a64:	b08a      	sub	sp, #40	; 0x28

  switch (cmd)
 8008a66:	2903      	cmp	r1, #3
 8008a68:	d821      	bhi.n	8008aae <SD_ioctl+0x56>
 8008a6a:	e8df f001 	tbb	[pc, r1]
 8008a6e:	0704      	.short	0x0704
 8008a70:	170f      	.short	0x170f
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008a72:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8008a74:	4770      	bx	lr
    res = RES_OK;
 8008a76:	2000      	movs	r0, #0
}
 8008a78:	b00a      	add	sp, #40	; 0x28
 8008a7a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8008a7c:	a801      	add	r0, sp, #4
 8008a7e:	f7ff f997 	bl	8007db0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008a82:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 8008a84:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008a86:	6023      	str	r3, [r4, #0]
}
 8008a88:	b00a      	add	sp, #40	; 0x28
 8008a8a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8008a8c:	a801      	add	r0, sp, #4
 8008a8e:	f7ff f98f 	bl	8007db0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008a92:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 8008a94:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008a96:	8023      	strh	r3, [r4, #0]
}
 8008a98:	b00a      	add	sp, #40	; 0x28
 8008a9a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8008a9c:	a801      	add	r0, sp, #4
 8008a9e:	f7ff f987 	bl	8007db0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008aa2:	9b08      	ldr	r3, [sp, #32]
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	0a5b      	lsrs	r3, r3, #9
 8008aa8:	6023      	str	r3, [r4, #0]
}
 8008aaa:	b00a      	add	sp, #40	; 0x28
 8008aac:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 8008aae:	2004      	movs	r0, #4
}
 8008ab0:	b00a      	add	sp, #40	; 0x28
 8008ab2:	bd10      	pop	{r4, pc}
 8008ab4:	200003a2 	.word	0x200003a2

08008ab8 <SD_write>:
{
 8008ab8:	b508      	push	{r3, lr}
 8008aba:	4608      	mov	r0, r1
 8008abc:	4611      	mov	r1, r2
 8008abe:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ac4:	f7ff f958 	bl	8007d78 <BSP_SD_WriteBlocks>
 8008ac8:	b920      	cbnz	r0, 8008ad4 <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008aca:	f7ff f967 	bl	8007d9c <BSP_SD_GetCardState>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d1fb      	bne.n	8008aca <SD_write+0x12>
}
 8008ad2:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8008ad4:	2001      	movs	r0, #1
}
 8008ad6:	bd08      	pop	{r3, pc}

08008ad8 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8008ad8:	b430      	push	{r4, r5}

  hsd1.Instance = SDMMC1;
 8008ada:	4b08      	ldr	r3, [pc, #32]	; (8008afc <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8008adc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hsd1.Instance = SDMMC1;
 8008ae0:	4d07      	ldr	r5, [pc, #28]	; (8008b00 <MX_SDMMC1_SD_Init+0x28>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8008ae2:	2200      	movs	r2, #0
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 16;
 8008ae4:	2010      	movs	r0, #16
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8008ae6:	2101      	movs	r1, #1
  hsd1.Instance = SDMMC1;
 8008ae8:	601d      	str	r5, [r3, #0]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8008aea:	60dc      	str	r4, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008aec:	611a      	str	r2, [r3, #16]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8008aee:	e9c3 0105 	strd	r0, r1, [r3, #20]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008af2:	e9c3 2201 	strd	r2, r2, [r3, #4]

}
 8008af6:	bc30      	pop	{r4, r5}
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	2001833c 	.word	0x2001833c
 8008b00:	52007000 	.word	0x52007000

08008b04 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8008b04:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8008b06:	4a27      	ldr	r2, [pc, #156]	; (8008ba4 <HAL_SD_MspInit+0xa0>)
{
 8008b08:	b088      	sub	sp, #32
  if(sdHandle->Instance==SDMMC1)
 8008b0a:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b0c:	2300      	movs	r3, #0
  if(sdHandle->Instance==SDMMC1)
 8008b0e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b10:	9307      	str	r3, [sp, #28]
 8008b12:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8008b16:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(sdHandle->Instance==SDMMC1)
 8008b1a:	d001      	beq.n	8008b20 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8008b1c:	b008      	add	sp, #32
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008b20:	4b21      	ldr	r3, [pc, #132]	; (8008ba8 <HAL_SD_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8008b22:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8008b24:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b28:	2401      	movs	r4, #1
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008b2a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b2e:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b30:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008b34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008b38:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8008b3c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008b40:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8008b44:	9200      	str	r2, [sp, #0]
 8008b46:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008b4c:	f042 0204 	orr.w	r2, r2, #4
 8008b50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008b54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008b58:	f002 0204 	and.w	r2, r2, #4
 8008b5c:	9201      	str	r2, [sp, #4]
 8008b5e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008b64:	f042 0208 	orr.w	r2, r2, #8
 8008b68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8008b70:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b72:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b76:	480d      	ldr	r0, [pc, #52]	; (8008bac <HAL_SD_MspInit+0xa8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b78:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b7a:	9302      	str	r3, [sp, #8]
 8008b7c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8008b7e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008b80:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b84:	f7f9 f86a 	bl	8001c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008b88:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008b8a:	eb0d 0105 	add.w	r1, sp, r5
 8008b8e:	4808      	ldr	r0, [pc, #32]	; (8008bb0 <HAL_SD_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008b90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b92:	e9cd 6404 	strd	r6, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8008b96:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008b9a:	f7f9 f85f 	bl	8001c5c <HAL_GPIO_Init>
}
 8008b9e:	b008      	add	sp, #32
 8008ba0:	bd70      	pop	{r4, r5, r6, pc}
 8008ba2:	bf00      	nop
 8008ba4:	52007000 	.word	0x52007000
 8008ba8:	58024400 	.word	0x58024400
 8008bac:	58020800 	.word	0x58020800
 8008bb0:	58020c00 	.word	0x58020c00

08008bb4 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8008bb4:	4b11      	ldr	r3, [pc, #68]	; (8008bfc <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8008bb6:	2200      	movs	r2, #0
  hspi1.Instance = SPI1;
 8008bb8:	4911      	ldr	r1, [pc, #68]	; (8008c00 <MX_SPI1_Init+0x4c>)
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008bba:	4618      	mov	r0, r3
{
 8008bbc:	b510      	push	{r4, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008bbe:	2407      	movs	r4, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008bc0:	609a      	str	r2, [r3, #8]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8008bc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008bc4:	60dc      	str	r4, [r3, #12]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8008bc6:	e9c3 1200 	strd	r1, r2, [r3]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008bca:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008bce:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 8008bd2:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8008bd6:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008bda:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008bde:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8008be2:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008be6:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008bea:	f7fc fe97 	bl	800591c <HAL_SPI_Init>
 8008bee:	b900      	cbnz	r0, 8008bf2 <MX_SPI1_Init+0x3e>
  {
    Error_Handler();
  }

}
 8008bf0:	bd10      	pop	{r4, pc}
 8008bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8008bf6:	f7ff bdd5 	b.w	80087a4 <Error_Handler>
 8008bfa:	bf00      	nop
 8008bfc:	200185bc 	.word	0x200185bc
 8008c00:	40013000 	.word	0x40013000

08008c04 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 8008c04:	4b11      	ldr	r3, [pc, #68]	; (8008c4c <MX_SPI2_Init+0x48>)
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8008c06:	2200      	movs	r2, #0
  hspi2.Instance = SPI2;
 8008c08:	4911      	ldr	r1, [pc, #68]	; (8008c50 <MX_SPI2_Init+0x4c>)
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008c0a:	4618      	mov	r0, r3
{
 8008c0c:	b510      	push	{r4, lr}
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008c0e:	2407      	movs	r4, #7
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008c10:	609a      	str	r2, [r3, #8]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8008c12:	619a      	str	r2, [r3, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008c14:	60dc      	str	r4, [r3, #12]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8008c16:	e9c3 1200 	strd	r1, r2, [r3]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008c1a:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008c1e:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi2.Init.CRCPolynomial = 0x0;
 8008c22:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8008c26:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008c2a:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008c2e:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8008c32:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008c36:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008c3a:	f7fc fe6f 	bl	800591c <HAL_SPI_Init>
 8008c3e:	b900      	cbnz	r0, 8008c42 <MX_SPI2_Init+0x3e>
  {
    Error_Handler();
  }

}
 8008c40:	bd10      	pop	{r4, pc}
 8008c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8008c46:	f7ff bdad 	b.w	80087a4 <Error_Handler>
 8008c4a:	bf00      	nop
 8008c4c:	200183bc 	.word	0x200183bc
 8008c50:	40003800 	.word	0x40003800

08008c54 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8008c54:	b538      	push	{r3, r4, r5, lr}

  hspi5.Instance = SPI5;
 8008c56:	4b12      	ldr	r3, [pc, #72]	; (8008ca0 <MX_SPI5_Init+0x4c>)
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8008c58:	2200      	movs	r2, #0
  hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8008c5a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  hspi5.Instance = SPI5;
 8008c5e:	4d11      	ldr	r5, [pc, #68]	; (8008ca4 <MX_SPI5_Init+0x50>)
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8008c60:	2107      	movs	r1, #7
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008c62:	4618      	mov	r0, r3
  hspi5.Instance = SPI5;
 8008c64:	601d      	str	r5, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8008c66:	605a      	str	r2, [r3, #4]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8008c68:	619a      	str	r2, [r3, #24]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8008c6a:	e9c3 4102 	strd	r4, r1, [r3, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008c6e:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8008c72:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi5.Init.CRCPolynomial = 0x0;
 8008c76:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8008c7a:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008c7e:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008c82:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8008c86:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008c8a:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008c8e:	f7fc fe45 	bl	800591c <HAL_SPI_Init>
 8008c92:	b900      	cbnz	r0, 8008c96 <MX_SPI5_Init+0x42>
  {
    Error_Handler();
  }

}
 8008c94:	bd38      	pop	{r3, r4, r5, pc}
 8008c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8008c9a:	f7ff bd83 	b.w	80087a4 <Error_Handler>
 8008c9e:	bf00      	nop
 8008ca0:	20018444 	.word	0x20018444
 8008ca4:	40015000 	.word	0x40015000

08008ca8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8008cac:	4a8f      	ldr	r2, [pc, #572]	; (8008eec <HAL_SPI_MspInit+0x244>)
{
 8008cae:	b08d      	sub	sp, #52	; 0x34
  if(spiHandle->Instance==SPI1)
 8008cb0:	6803      	ldr	r3, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cb2:	2400      	movs	r4, #0
{
 8008cb4:	4606      	mov	r6, r0
  if(spiHandle->Instance==SPI1)
 8008cb6:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cb8:	940b      	str	r4, [sp, #44]	; 0x2c
 8008cba:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8008cbe:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if(spiHandle->Instance==SPI1)
 8008cc2:	d009      	beq.n	8008cd8 <HAL_SPI_MspInit+0x30>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8008cc4:	4a8a      	ldr	r2, [pc, #552]	; (8008ef0 <HAL_SPI_MspInit+0x248>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d066      	beq.n	8008d98 <HAL_SPI_MspInit+0xf0>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 8008cca:	4a8a      	ldr	r2, [pc, #552]	; (8008ef4 <HAL_SPI_MspInit+0x24c>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	f000 80c2 	beq.w	8008e56 <HAL_SPI_MspInit+0x1ae>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8008cd2:	b00d      	add	sp, #52	; 0x34
 8008cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008cd8:	4b87      	ldr	r3, [pc, #540]	; (8008ef8 <HAL_SPI_MspInit+0x250>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008cda:	f04f 0801 	mov.w	r8, #1
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008cde:	2010      	movs	r0, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ce0:	2702      	movs	r7, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008ce2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008ce6:	f04f 0905 	mov.w	r9, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cea:	a907      	add	r1, sp, #28
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8008cec:	4d83      	ldr	r5, [pc, #524]	; (8008efc <HAL_SPI_MspInit+0x254>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008cee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008cf2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8008cf6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008cfa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008cfe:	9201      	str	r2, [sp, #4]
 8008d00:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008d06:	ea42 0208 	orr.w	r2, r2, r8
 8008d0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008d12:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d14:	ea03 0308 	and.w	r3, r3, r8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d18:	4879      	ldr	r0, [pc, #484]	; (8008f00 <HAL_SPI_MspInit+0x258>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d1a:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d1c:	9302      	str	r3, [sp, #8]
 8008d1e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008d20:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008d24:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d28:	f7f8 ff98 	bl	8001c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008d2c:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d2e:	a907      	add	r1, sp, #28
 8008d30:	4873      	ldr	r0, [pc, #460]	; (8008f00 <HAL_SPI_MspInit+0x258>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d32:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008d34:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d36:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008d38:	e9cd 790a 	strd	r7, r9, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d3c:	f7f8 ff8e 	bl	8001c5c <HAL_GPIO_Init>
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008d40:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8008d44:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8008f1c <HAL_SPI_MspInit+0x274>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8008d48:	f04f 0c25 	mov.w	ip, #37	; 0x25
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8008d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008d50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008d54:	2304      	movs	r3, #4
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8008d56:	4628      	mov	r0, r5
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8008d58:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008d5c:	612f      	str	r7, [r5, #16]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008d5e:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d60:	e9c5 4402 	strd	r4, r4, [r5, #8]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d64:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008d68:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8008d6c:	e9c5 ec00 	strd	lr, ip, [r5]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008d70:	e9c5 1207 	strd	r1, r2, [r5, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8008d74:	f7f7 fc74 	bl	8000660 <HAL_DMA_Init>
 8008d78:	b108      	cbz	r0, 8008d7e <HAL_SPI_MspInit+0xd6>
      Error_Handler();
 8008d7a:	f7ff fd13 	bl	80087a4 <Error_Handler>
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8008d7e:	2200      	movs	r2, #0
 8008d80:	2103      	movs	r1, #3
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8008d82:	67f5      	str	r5, [r6, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8008d84:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8008d86:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8008d88:	f7f7 fb46 	bl	8000418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8008d8c:	2023      	movs	r0, #35	; 0x23
 8008d8e:	f7f7 fb79 	bl	8000484 <HAL_NVIC_EnableIRQ>
}
 8008d92:	b00d      	add	sp, #52	; 0x34
 8008d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008d98:	4b57      	ldr	r3, [pc, #348]	; (8008ef8 <HAL_SPI_MspInit+0x250>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d9a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8008d9c:	f44f 4130 	mov.w	r1, #45056	; 0xb000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008da0:	2003      	movs	r0, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008da2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008da6:	f04f 0805 	mov.w	r8, #5
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8008daa:	4d56      	ldr	r5, [pc, #344]	; (8008f04 <HAL_SPI_MspInit+0x25c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008dac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008db0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8008db4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8008db8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008dbc:	9203      	str	r2, [sp, #12]
 8008dbe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008dc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008dc4:	433a      	orrs	r2, r7
 8008dc6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8008dce:	9107      	str	r1, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dd0:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008dd2:	403b      	ands	r3, r7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dd4:	900a      	str	r0, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dd6:	484c      	ldr	r0, [pc, #304]	; (8008f08 <HAL_SPI_MspInit+0x260>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008dd8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dda:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ddc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008dde:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008de2:	f7f8 ff3b 	bl	8001c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8008de6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dea:	a907      	add	r1, sp, #28
 8008dec:	4846      	ldr	r0, [pc, #280]	; (8008f08 <HAL_SPI_MspInit+0x260>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dee:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8008df0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008df2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008df4:	e9cd 780a 	strd	r7, r8, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008df8:	f7f8 ff30 	bl	8001c5c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8008dfc:	4843      	ldr	r0, [pc, #268]	; (8008f0c <HAL_SPI_MspInit+0x264>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8008dfe:	f04f 0e27 	mov.w	lr, #39	; 0x27
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008e02:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8008e06:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008e0a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008e0e:	2204      	movs	r2, #4
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8008e10:	2301      	movs	r3, #1
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8008e12:	6028      	str	r0, [r5, #0]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8008e14:	4628      	mov	r0, r5
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e16:	616c      	str	r4, [r5, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e18:	61ac      	str	r4, [r5, #24]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8008e1a:	f8c5 e004 	str.w	lr, [r5, #4]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008e1e:	f8c5 c010 	str.w	ip, [r5, #16]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e22:	e9c5 4402 	strd	r4, r4, [r5, #8]
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008e26:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008e2a:	e9c5 7107 	strd	r7, r1, [r5, #28]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8008e2e:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8008e32:	f7f7 fc15 	bl	8000660 <HAL_DMA_Init>
 8008e36:	b108      	cbz	r0, 8008e3c <HAL_SPI_MspInit+0x194>
      Error_Handler();
 8008e38:	f7ff fcb4 	bl	80087a4 <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8008e3c:	2200      	movs	r2, #0
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8008e3e:	67f5      	str	r5, [r6, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8008e40:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8008e42:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8008e44:	4611      	mov	r1, r2
 8008e46:	f7f7 fae7 	bl	8000418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008e4a:	2024      	movs	r0, #36	; 0x24
 8008e4c:	f7f7 fb1a 	bl	8000484 <HAL_NVIC_EnableIRQ>
}
 8008e50:	b00d      	add	sp, #52	; 0x34
 8008e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008e56:	4b28      	ldr	r3, [pc, #160]	; (8008ef8 <HAL_SPI_MspInit+0x250>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e58:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8008e5a:	f44f 7530 	mov.w	r5, #704	; 0x2c0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008e5e:	a907      	add	r1, sp, #28
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008e60:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8008e64:	4f2a      	ldr	r7, [pc, #168]	; (8008f10 <HAL_SPI_MspInit+0x268>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008e66:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008e6a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8008e6e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008e72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008e76:	9205      	str	r2, [sp, #20]
 8008e78:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008e7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008e7e:	f042 0220 	orr.w	r2, r2, #32
 8008e82:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008e86:	2205      	movs	r2, #5
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8008e8c:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008e8e:	f003 0320 	and.w	r3, r3, #32
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8008e92:	4d20      	ldr	r5, [pc, #128]	; (8008f14 <HAL_SPI_MspInit+0x26c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e94:	9008      	str	r0, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e96:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008e98:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008e9a:	481f      	ldr	r0, [pc, #124]	; (8008f18 <HAL_SPI_MspInit+0x270>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008e9c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008e9e:	920b      	str	r2, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008ea0:	f7f8 fedc 	bl	8001c5c <HAL_GPIO_Init>
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8008ea4:	2155      	movs	r1, #85	; 0x55
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008eaa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8008eae:	4628      	mov	r0, r5
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 8008eb0:	61ec      	str	r4, [r5, #28]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008eb2:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008eb4:	612a      	str	r2, [r5, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008eb6:	622b      	str	r3, [r5, #32]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008eb8:	e9c5 4402 	strd	r4, r4, [r5, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ebc:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8008ec0:	e9c5 7100 	strd	r7, r1, [r5]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8008ec4:	f7f7 fbcc 	bl	8000660 <HAL_DMA_Init>
 8008ec8:	b960      	cbnz	r0, 8008ee4 <HAL_SPI_MspInit+0x23c>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8008eca:	2200      	movs	r2, #0
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8008ecc:	67f5      	str	r5, [r6, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8008ece:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8008ed0:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	f7f7 faa0 	bl	8000418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8008ed8:	2055      	movs	r0, #85	; 0x55
 8008eda:	f7f7 fad3 	bl	8000484 <HAL_NVIC_EnableIRQ>
}
 8008ede:	b00d      	add	sp, #52	; 0x34
 8008ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8008ee4:	f7ff fc5e 	bl	80087a4 <Error_Handler>
 8008ee8:	e7ef      	b.n	8008eca <HAL_SPI_MspInit+0x222>
 8008eea:	bf00      	nop
 8008eec:	40013000 	.word	0x40013000
 8008ef0:	40003800 	.word	0x40003800
 8008ef4:	40015000 	.word	0x40015000
 8008ef8:	58024400 	.word	0x58024400
 8008efc:	20018644 	.word	0x20018644
 8008f00:	58020000 	.word	0x58020000
 8008f04:	20018544 	.word	0x20018544
 8008f08:	58020400 	.word	0x58020400
 8008f0c:	40020010 	.word	0x40020010
 8008f10:	40020058 	.word	0x40020058
 8008f14:	200184cc 	.word	0x200184cc
 8008f18:	58021400 	.word	0x58021400
 8008f1c:	40020410 	.word	0x40020410

08008f20 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f20:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <HAL_MspInit+0x20>)
{
 8008f22:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f24:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8008f28:	f042 0202 	orr.w	r2, r2, #2
 8008f2c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8008f30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008f34:	f003 0302 	and.w	r3, r3, #2
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008f3c:	b002      	add	sp, #8
 8008f3e:	4770      	bx	lr
 8008f40:	58024400 	.word	0x58024400

08008f44 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop

08008f48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f48:	e7fe      	b.n	8008f48 <HardFault_Handler>
 8008f4a:	bf00      	nop

08008f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008f4c:	e7fe      	b.n	8008f4c <MemManage_Handler>
 8008f4e:	bf00      	nop

08008f50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008f50:	e7fe      	b.n	8008f50 <BusFault_Handler>
 8008f52:	bf00      	nop

08008f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f54:	e7fe      	b.n	8008f54 <UsageFault_Handler>
 8008f56:	bf00      	nop

08008f58 <SVC_Handler>:
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop

08008f5c <DebugMon_Handler>:
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop

08008f60 <PendSV_Handler>:
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop

08008f64 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008f64:	f7f7 ba10 	b.w	8000388 <HAL_IncTick>

08008f68 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008f68:	4801      	ldr	r0, [pc, #4]	; (8008f70 <DMA1_Stream0_IRQHandler+0x8>)
 8008f6a:	f7f8 ba57 	b.w	800141c <HAL_DMA_IRQHandler>
 8008f6e:	bf00      	nop
 8008f70:	20018544 	.word	0x20018544

08008f74 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8008f74:	4801      	ldr	r0, [pc, #4]	; (8008f7c <DMA1_Stream1_IRQHandler+0x8>)
 8008f76:	f7f8 ba51 	b.w	800141c <HAL_DMA_IRQHandler>
 8008f7a:	bf00      	nop
 8008f7c:	200181b4 	.word	0x200181b4

08008f80 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8008f80:	4801      	ldr	r0, [pc, #4]	; (8008f88 <DMA1_Stream2_IRQHandler+0x8>)
 8008f82:	f7f8 ba4b 	b.w	800141c <HAL_DMA_IRQHandler>
 8008f86:	bf00      	nop
 8008f88:	2001822c 	.word	0x2001822c

08008f8c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8008f8c:	4801      	ldr	r0, [pc, #4]	; (8008f94 <DMA1_Stream3_IRQHandler+0x8>)
 8008f8e:	f7f8 ba45 	b.w	800141c <HAL_DMA_IRQHandler>
 8008f92:	bf00      	nop
 8008f94:	200184cc 	.word	0x200184cc

08008f98 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <SPI1_IRQHandler+0x8>)
 8008f9a:	f7fd b807 	b.w	8005fac <HAL_SPI_IRQHandler>
 8008f9e:	bf00      	nop
 8008fa0:	200185bc 	.word	0x200185bc

08008fa4 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <SPI2_IRQHandler+0x8>)
 8008fa6:	f7fd b801 	b.w	8005fac <HAL_SPI_IRQHandler>
 8008faa:	bf00      	nop
 8008fac:	200183bc 	.word	0x200183bc

08008fb0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8008fb0:	4801      	ldr	r0, [pc, #4]	; (8008fb8 <DMA2_Stream0_IRQHandler+0x8>)
 8008fb2:	f7f8 ba33 	b.w	800141c <HAL_DMA_IRQHandler>
 8008fb6:	bf00      	nop
 8008fb8:	20018644 	.word	0x20018644

08008fbc <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8008fbc:	4801      	ldr	r0, [pc, #4]	; (8008fc4 <SPI5_IRQHandler+0x8>)
 8008fbe:	f7fc bff5 	b.w	8005fac <HAL_SPI_IRQHandler>
 8008fc2:	bf00      	nop
 8008fc4:	20018444 	.word	0x20018444

08008fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008fc8:	b430      	push	{r4, r5}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008fca:	4c19      	ldr	r4, [pc, #100]	; (8009030 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008fcc:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8008fce:	4b19      	ldr	r3, [pc, #100]	; (8009034 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008fd0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008fd4:	4818      	ldr	r0, [pc, #96]	; (8009038 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008fd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008fda:	4d18      	ldr	r5, [pc, #96]	; (800903c <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008fdc:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8008fe0:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008fe2:	4917      	ldr	r1, [pc, #92]	; (8009040 <SystemInit+0x78>)
  RCC->CR |= RCC_CR_HSION;
 8008fe4:	f044 0401 	orr.w	r4, r4, #1
 8008fe8:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 8008fea:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8008fec:	681c      	ldr	r4, [r3, #0]
 8008fee:	4020      	ands	r0, r4
 8008ff0:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8008ff2:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8008ff4:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8008ff6:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8008ff8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 8008ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8008ffc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8008ffe:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 8009000:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8009002:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8009004:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8009006:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800900e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8009010:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009012:	682b      	ldr	r3, [r5, #0]
 8009014:	4019      	ands	r1, r3
 8009016:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800901a:	d202      	bcs.n	8009022 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800901c:	4b09      	ldr	r3, [pc, #36]	; (8009044 <SystemInit+0x7c>)
 800901e:	2201      	movs	r2, #1
 8009020:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009022:	4b03      	ldr	r3, [pc, #12]	; (8009030 <SystemInit+0x68>)
 8009024:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009028:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800902a:	bc30      	pop	{r4, r5}
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	e000ed00 	.word	0xe000ed00
 8009034:	58024400 	.word	0x58024400
 8009038:	eaf6ed7f 	.word	0xeaf6ed7f
 800903c:	5c001000 	.word	0x5c001000
 8009040:	ffff0000 	.word	0xffff0000
 8009044:	51008108 	.word	0x51008108

08009048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009080 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800904c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800904e:	e003      	b.n	8009058 <LoopCopyDataInit>

08009050 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009050:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009052:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009054:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009056:	3104      	adds	r1, #4

08009058 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009058:	480b      	ldr	r0, [pc, #44]	; (8009088 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800905a:	4b0c      	ldr	r3, [pc, #48]	; (800908c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800905c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800905e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009060:	d3f6      	bcc.n	8009050 <CopyDataInit>
  ldr  r2, =_sbss
 8009062:	4a0b      	ldr	r2, [pc, #44]	; (8009090 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009064:	e002      	b.n	800906c <LoopFillZerobss>

08009066 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009066:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009068:	f842 3b04 	str.w	r3, [r2], #4

0800906c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800906c:	4b09      	ldr	r3, [pc, #36]	; (8009094 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800906e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009070:	d3f9      	bcc.n	8009066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009072:	f7ff ffa9 	bl	8008fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009076:	f001 fac9 	bl	800a60c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800907a:	f7ff faff 	bl	800867c <main>
  bx  lr    
 800907e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009080:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009084:	08028d50 	.word	0x08028d50
  ldr  r0, =_sdata
 8009088:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800908c:	20000414 	.word	0x20000414
  ldr  r2, =_sbss
 8009090:	20000414 	.word	0x20000414
  ldr  r3, = _ebss
 8009094:	200186bc 	.word	0x200186bc

08009098 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009098:	e7fe      	b.n	8009098 <ADC3_IRQHandler>
	...

0800909c <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, float factor, tMempool* const mp)
{
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80090a2:	680c      	ldr	r4, [r1, #0]
{
 80090a4:	4605      	mov	r5, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 80090a6:	2010      	movs	r0, #16
{
 80090a8:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 80090ac:	4621      	mov	r1, r4
 80090ae:	f000 feeb 	bl	8009e88 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 80090b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
 80090b6:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 80090b8:	6028      	str	r0, [r5, #0]
    p->mempool = m;
 80090ba:	6004      	str	r4, [r0, #0]
    p->oneminusfactor=1.0f-factor;
 80090bc:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->factor=factor;
 80090c0:	ed80 8a01 	vstr	s16, [r0, #4]
    p->curr=0.0f;
 80090c4:	60c3      	str	r3, [r0, #12]
    p->oneminusfactor=1.0f-factor;
 80090c6:	edc0 7a02 	vstr	s15, [r0, #8]
}
 80090ca:	ecbd 8b02 	vpop	{d8}
 80090ce:	bd38      	pop	{r3, r4, r5, pc}

080090d0 <tHermiteDelay_initToPool>:
{
    tHermiteDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tHermiteDelay_initToPool  (tHermiteDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80090d6:	6817      	ldr	r7, [r2, #0]
{
 80090d8:	460d      	mov	r5, r1
 80090da:	4606      	mov	r6, r0
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 80090dc:	2030      	movs	r0, #48	; 0x30
 80090de:	4639      	mov	r1, r7
{
 80090e0:	eeb0 8a40 	vmov.f32	s16, s0
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 80090e4:	f000 fed0 	bl	8009e88 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 80090e8:	ee07 5a90 	vmov	s15, r5
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 80090ec:	6030      	str	r0, [r6, #0]
 80090ee:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 80090f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
 80090f4:	6007      	str	r7, [r0, #0]
    d->maxDelay = maxDelay;
 80090f6:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 80090f8:	eef4 7ac8 	vcmpe.f32	s15, s16
 80090fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009100:	d551      	bpl.n	80091a6 <tHermiteDelay_initToPool+0xd6>
 8009102:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8009106:	1e6b      	subs	r3, r5, #1
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 8009108:	b10d      	cbz	r5, 800910e <tHermiteDelay_initToPool+0x3e>
 800910a:	421d      	tst	r5, r3
 800910c:	d00b      	beq.n	8009126 <tHermiteDelay_initToPool+0x56>
    }
    else
    {
        //make the delay size into a power of 2
        maxDelay--;
        maxDelay |= maxDelay >> 1;
 800910e:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
 8009112:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
 8009116:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
 800911a:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
 800911e:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
        maxDelay++;
 8009122:	1c5d      	adds	r5, r3, #1
        d->maxDelay = maxDelay;
 8009124:	61e5      	str	r5, [r4, #28]
 8009126:	60a3      	str	r3, [r4, #8]
        d->bufferMask = maxDelay - 1;
    }
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 8009128:	4639      	mov	r1, r7
 800912a:	00a8      	lsls	r0, r5, #2
 800912c:	f000 feac 	bl	8009e88 <mpool_alloc>

    d->gain = 1.0f;

    d->lastIn = 0.0f;
 8009130:	2200      	movs	r2, #0
    d->lastOut = 0.0f;

    d->inPoint = 0;
 8009132:	2300      	movs	r3, #0
    d->gain = 1.0f;
 8009134:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 8009138:	6060      	str	r0, [r4, #4]
    d->gain = 1.0f;
 800913a:	6221      	str	r1, [r4, #32]
    d->lastIn = 0.0f;
 800913c:	6122      	str	r2, [r4, #16]
    d->lastOut = 0.0f;
 800913e:	60e2      	str	r2, [r4, #12]
    d->outPoint = 0;

    tHermiteDelay_setDelay(dl, d->delay);
 8009140:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    d->outPoint = 0;
 8009144:	e9c4 3305 	strd	r3, r3, [r4, #20]
    return d->lastOut;
}

void tHermiteDelay_setDelay (tHermiteDelay* const dl, float delay)
{
    _tHermiteDelay* d = *dl;
 8009148:	6833      	ldr	r3, [r6, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    float outPointer = d->inPoint - d->delay;
 800914a:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
 800914e:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
 8009152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009156:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
 800915a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800915e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009162:	d50a      	bpl.n	800917a <tHermiteDelay_initToPool+0xaa>
        outPointer += d->maxDelay; // modulo maximum length
 8009164:	ed93 7a07 	vldr	s14, [r3, #28]
 8009168:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800916c:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 8009170:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009178:	d4f8      	bmi.n	800916c <tHermiteDelay_initToPool+0x9c>
    
    d->outPoint = (uint32_t) outPointer;   // integer part
 800917a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
    
    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
    
    d->outPoint &= d->bufferMask;
 800917e:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
 8009180:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 8009184:	eeb8 6a66 	vcvt.f32.u32	s12, s13
    d->outPoint &= d->bufferMask;
 8009188:	ee16 1a90 	vmov	r1, s13
 800918c:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
 800918e:	ee77 7ac6 	vsub.f32	s15, s15, s12
    d->outPoint &= d->bufferMask;
 8009192:	619a      	str	r2, [r3, #24]
    d->omAlpha = 1.0f - d->alpha;
 8009194:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
 8009198:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
 800919c:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
 80091a0:	ecbd 8b02 	vpop	{d8}
 80091a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
 80091a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80091aa:	2300      	movs	r3, #0
 80091ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b0:	bf4c      	ite	mi
 80091b2:	6243      	strmi	r3, [r0, #36]	; 0x24
    else                    d->delay = delay;
 80091b4:	ed80 8a09 	vstrpl	s16, [r0, #36]	; 0x24
 80091b8:	e7a5      	b.n	8009106 <tHermiteDelay_initToPool+0x36>
 80091ba:	bf00      	nop

080091bc <tHermiteDelay_clear>:
    _tHermiteDelay* d = *dl;
 80091bc:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 80091be:	69cb      	ldr	r3, [r1, #28]
 80091c0:	b14b      	cbz	r3, 80091d6 <tHermiteDelay_clear+0x1a>
 80091c2:	2300      	movs	r3, #0
        d->buff[i] = 0;
 80091c4:	2000      	movs	r0, #0
 80091c6:	684a      	ldr	r2, [r1, #4]
 80091c8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 80091cc:	3301      	adds	r3, #1
        d->buff[i] = 0;
 80091ce:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 80091d0:	69ca      	ldr	r2, [r1, #28]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d8f7      	bhi.n	80091c6 <tHermiteDelay_clear+0xa>
}
 80091d6:	4770      	bx	lr

080091d8 <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode, tMempool* const mp)
{
 80091d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tMempool* m = *mp;
 80091dc:	6815      	ldr	r5, [r2, #0]
{
 80091de:	4680      	mov	r8, r0
 80091e0:	460f      	mov	r7, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80091e2:	2018      	movs	r0, #24
 80091e4:	4629      	mov	r1, r5
{
 80091e6:	4616      	mov	r6, r2
 80091e8:	ed2d 8b04 	vpush	{d8-d9}
 80091ec:	eef0 8a40 	vmov.f32	s17, s0
 80091f0:	eeb0 9a60 	vmov.f32	s18, s1
 80091f4:	eeb0 8a41 	vmov.f32	s16, s2
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80091f8:	f000 fe46 	bl	8009e88 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
 80091fc:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80091fe:	4604      	mov	r4, r0
 8009200:	f8c8 0000 	str.w	r0, [r8]
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8009204:	eeb0 0a49 	vmov.f32	s0, s18
    p->mempool = m;
 8009208:	6005      	str	r5, [r0, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800920a:	4631      	mov	r1, r6
    p->targetLevel=targetLevel;
 800920c:	edc4 8a01 	vstr	s17, [r4, #4]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8009210:	3014      	adds	r0, #20
    p->curr=0.0f;
 8009212:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8009214:	f7ff ff42 	bl	800909c <tPowerFollower_initToPool>
    p->mode=mode;
 8009218:	60e7      	str	r7, [r4, #12]
    p->strength=strength;
 800921a:	ed84 8a02 	vstr	s16, [r4, #8]
}
 800921e:	ecbd 8b04 	vpop	{d8-d9}
 8009222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009226:	bf00      	nop

08009228 <tRosenbergGlottalPulse_init>:


/// Glottal Pulse (Rosenberg model)

void tRosenbergGlottalPulse_init (tRosenbergGlottalPulse* const gp, LEAF* const leaf)
{
 8009228:	b538      	push	{r3, r4, r5, lr}
    tRosenbergGlottalPulse_initToPool(gp, &leaf->mempool);
}

void tRosenbergGlottalPulse_initToPool (tRosenbergGlottalPulse* const gp, tMempool* const mp)
{
     _tMempool* m = *mp;
 800922a:	698c      	ldr	r4, [r1, #24]
{
 800922c:	4605      	mov	r5, r0
    _tRosenbergGlottalPulse* g = *gp = (_tRosenbergGlottalPulse*) mpool_alloc(sizeof(_tRosenbergGlottalPulse), m);
 800922e:	2020      	movs	r0, #32
 8009230:	4621      	mov	r1, r4
 8009232:	f000 fe29 	bl	8009e88 <mpool_alloc>
 8009236:	6028      	str	r0, [r5, #0]
    g->mempool = m;
 8009238:	6004      	str	r4, [r0, #0]
    LEAF* leaf = g->mempool->leaf;
    
    g->invSampleRate = leaf->invSampleRate;

    g->phase  = 0.0f;
 800923a:	2300      	movs	r3, #0
    g->invSampleRate = leaf->invSampleRate;
 800923c:	6862      	ldr	r2, [r4, #4]
 800923e:	6852      	ldr	r2, [r2, #4]
    g->phase  = 0.0f;
 8009240:	6043      	str	r3, [r0, #4]
    g->invSampleRate = leaf->invSampleRate;
 8009242:	61c2      	str	r2, [r0, #28]
    g->openLength = 0.0f;
 8009244:	6083      	str	r3, [r0, #8]
    g->pulseLength = 0.0f;
 8009246:	60c3      	str	r3, [r0, #12]
    g->freq = 0.0f;
 8009248:	6143      	str	r3, [r0, #20]
    g->inc = 0.0f;
 800924a:	6183      	str	r3, [r0, #24]
}
 800924c:	bd38      	pop	{r3, r4, r5, pc}
 800924e:	bf00      	nop

08009250 <tRosenbergGlottalPulse_setOpenLengthAndPulseLength>:
void   tRosenbergGlottalPulse_setOpenLengthAndPulseLength           (tRosenbergGlottalPulse* const gp, float openLength, float pulseLength)
{
    _tRosenbergGlottalPulse* g = *gp;
    g->openLength = openLength;
    g->pulseLength = pulseLength;
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8009250:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tRosenbergGlottalPulse* g = *gp;
 8009254:	6803      	ldr	r3, [r0, #0]
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8009256:	ee30 7ac0 	vsub.f32	s14, s1, s0
    g->openLength = openLength;
 800925a:	ed83 0a02 	vstr	s0, [r3, #8]
    g->pulseLength = pulseLength;
 800925e:	edc3 0a03 	vstr	s1, [r3, #12]
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8009262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009266:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800926a:	4770      	bx	lr

0800926c <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, LEAF* const leaf)
{
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 8009272:	699d      	ldr	r5, [r3, #24]
{
 8009274:	4614      	mov	r4, r2
 8009276:	4607      	mov	r7, r0
 8009278:	460e      	mov	r6, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800927a:	2068      	movs	r0, #104	; 0x68
 800927c:	4629      	mov	r1, r5
{
 800927e:	eef0 9a40 	vmov.f32	s19, s0
 8009282:	eeb0 9a60 	vmov.f32	s18, s1
 8009286:	eef0 8a61 	vmov.f32	s17, s3
 800928a:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800928e:	f000 fdfb 	bl	8009e88 <mpool_alloc>
    
    LEAF* leaf = adsr->mempool->leaf;

    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8009292:	1e61      	subs	r1, r4, #1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8009294:	6038      	str	r0, [r7, #0]
    adsr->mempool = m;
 8009296:	6005      	str	r5, [r0, #0]

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8009298:	ee07 4a90 	vmov	s15, r4
    LEAF* leaf = adsr->mempool->leaf;
 800929c:	686b      	ldr	r3, [r5, #4]

    adsr->next = 0.0f;

    adsr->whichStage = env_idle;

    adsr->sustain = sustain;
 800929e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    adsr->exp_buff = expBuffer;
 80092a2:	6046      	str	r6, [r0, #4]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80092a4:	eef8 4a67 	vcvt.f32.u32	s9, s15
 80092a8:	ed9f 6a20 	vldr	s12, [pc, #128]	; 800932c <tADSRT_init+0xc0>
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 80092ac:	eeb4 5a00 	vmov.f32	s10, #64	; 0x3e000000  0.125
 80092b0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8009330 <tADSRT_init+0xc4>
    adsr->whichStage = env_idle;
 80092b4:	2200      	movs	r2, #0
    adsr->buff_sizeMinusOne = bufferSize - 1;
 80092b6:	e9c0 4102 	strd	r4, r1, [r0, #8]
 80092ba:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
    adsr->sampleRate = leaf->sampleRate;
 80092be:	edd3 5a00 	vldr	s11, [r3]
 80092c2:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
 80092c6:	fec8 1a87 	vmaxnm.f32	s3, s17, s14
    adsr->next = 0.0f;
 80092ca:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80092ce:	ee25 6a86 	vmul.f32	s12, s11, s12

    adsr->baseLeakFactor = 1.0f;
 80092d2:	edc0 6a17 	vstr	s13, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
 80092d6:	edc0 6a18 	vstr	s13, [r0, #96]	; 0x60
    adsr->sustain = sustain;
 80092da:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
 80092de:	fe88 8a66 	vminnm.f32	s16, s16, s13
    adsr->sampleRate = leaf->sampleRate;
 80092e2:	edc0 5a04 	vstr	s11, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80092e6:	eec4 7a86 	vdiv.f32	s15, s9, s12
    adsr->whichStage = env_idle;
 80092ea:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->attack = attack;
 80092ec:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->decay = decay;
 80092f0:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->release = release;
 80092f4:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->sustain = sustain;
 80092f8:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80092fc:	ee87 6a80 	vdiv.f32	s12, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8009300:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8009304:	eec7 6aa0 	vdiv.f32	s13, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8009308:	ee87 7aa1 	vdiv.f32	s14, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800930c:	ee67 7a85 	vmul.f32	s15, s15, s10
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8009310:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8009314:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8009318:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800931c:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
    adsr->invSampleRate = leaf->invSampleRate;
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	6643      	str	r3, [r0, #100]	; 0x64
}
 8009324:	ecbd 8b04 	vpop	{d8-d9}
 8009328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800932a:	bf00      	nop
 800932c:	3a83126f 	.word	0x3a83126f
 8009330:	00000000 	.word	0x00000000

08009334 <tADSRT_setDecay>:
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
}

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;
 8009334:	6803      	ldr	r3, [r0, #0]
 8009336:	eddf 7a06 	vldr	s15, [pc, #24]	; 8009350 <tADSRT_setDecay+0x1c>
    if (decay < 0.0f)
    {
        decay = 0.0f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800933a:	ed93 7a05 	vldr	s14, [r3, #20]
 800933e:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    adsr->decay = decay;
 8009342:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8009346:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800934a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800934e:	4770      	bx	lr
 8009350:	00000000 	.word	0x00000000

08009354 <tADSRT_setLeakFactor>:
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
}

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
 8009354:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 8009356:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 8009358:	eddf 7a06 	vldr	s15, [pc, #24]	; 8009374 <tADSRT_setLeakFactor+0x20>
 800935c:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
 8009360:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 8009364:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009368:	f001 fa42 	bl	800a7f0 <powf>
 800936c:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 8009370:	bd10      	pop	{r4, pc}
 8009372:	bf00      	nop
 8009374:	472c4400 	.word	0x472c4400

08009378 <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
 8009378:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 800937a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800937c:	b942      	cbnz	r2, 8009390 <tADSRT_on+0x18>
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
    }
    else // Normal start.
    {
        adsr->whichStage = env_attack;
 800937e:	2101      	movs	r1, #1
    }

    adsr->attackPhase = 0;
 8009380:	2200      	movs	r2, #0
 8009382:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 8009384:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
 8009388:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
 800938a:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
 800938c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800938e:	4770      	bx	lr
        adsr->rampPhase = 0;
 8009390:	2000      	movs	r0, #0
        adsr->rampPeak = adsr->next;
 8009392:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 8009394:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 8009396:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
 8009398:	645a      	str	r2, [r3, #68]	; 0x44
 800939a:	e7f1      	b.n	8009380 <tADSRT_on+0x8>

0800939c <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 800939c:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 800939e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093a0:	b11a      	cbz	r2, 80093aa <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 80093a2:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 80093a4:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 80093a6:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
 80093a8:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
 80093aa:	4770      	bx	lr

080093ac <tADSRT_tick>:

float   tADSRT_tick(tADSRT* const adsrenv)
{
 80093ac:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 80093ae:	6804      	ldr	r4, [r0, #0]
{
 80093b0:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
 80093b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80093b6:	3b01      	subs	r3, #1
 80093b8:	2b04      	cmp	r3, #4
 80093ba:	f200 808c 	bhi.w	80094d6 <tADSRT_tick+0x12a>
 80093be:	e8df f003 	tbb	[pc, r3]
 80093c2:	4b22      	.short	0x4b22
 80093c4:	6b3e      	.short	0x6b3e
 80093c6:	03          	.byte	0x03
 80093c7:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 80093c8:	edd4 7a03 	vldr	s15, [r4, #12]
 80093cc:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 80093d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d4:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80093d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093dc:	f340 80e3 	ble.w	80095a6 <tADSRT_tick+0x1fa>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 80093e0:	eddf 7aa0 	vldr	s15, [pc, #640]	; 8009664 <tADSRT_tick+0x2b8>
                adsr->whichStage = env_attack;
 80093e4:	2301      	movs	r3, #1
 80093e6:	eeb0 8a67 	vmov.f32	s16, s15
 80093ea:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 80093ec:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 80093f0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 80093f4:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->rampPhase += adsr->rampInc;
 80093f8:	ee37 1a81 	vadd.f32	s2, s15, s2
 80093fc:	ed84 1a16 	vstr	s2, [r4, #88]	; 0x58
}
 8009400:	ecbd 8b02 	vpop	{d8}
 8009404:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 8009406:	edd4 7a03 	vldr	s15, [r4, #12]
 800940a:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
 800940e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009412:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 8009416:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800941a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800941e:	dd61      	ble.n	80094e4 <tADSRT_tick+0x138>
                adsr->whichStage = env_decay;
 8009420:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 8009422:	ed84 8a06 	vstr	s16, [r4, #24]
                adsr->whichStage = env_decay;
 8009426:	63a3      	str	r3, [r4, #56]	; 0x38
            adsr->attackPhase += adsr->attackInc;
 8009428:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
}
 800942c:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->attackPhase += adsr->attackInc;
 8009430:	ee37 1a81 	vadd.f32	s2, s15, s2
 8009434:	ed84 1a13 	vstr	s2, [r4, #76]	; 0x4c
}
 8009438:	ecbd 8b02 	vpop	{d8}
 800943c:	bd10      	pop	{r4, pc}
            adsr->next = adsr->next * adsr->leakFactor;
 800943e:	ed94 8a06 	vldr	s16, [r4, #24]
 8009442:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 8009446:	ee28 8a27 	vmul.f32	s16, s16, s15
}
 800944a:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->next = adsr->next * adsr->leakFactor;
 800944e:	ed84 8a06 	vstr	s16, [r4, #24]
}
 8009452:	ecbd 8b02 	vpop	{d8}
 8009456:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8009458:	edd4 7a03 	vldr	s15, [r4, #12]
 800945c:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 8009460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009464:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8009468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800946c:	dd66      	ble.n	800953c <tADSRT_tick+0x190>
                adsr->next = adsr->gain * adsr->sustain;
 800946e:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
 8009472:	2303      	movs	r3, #3
                adsr->next = adsr->gain * adsr->sustain;
 8009474:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 8009478:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 800947a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800947e:	ed84 8a06 	vstr	s16, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
 8009482:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
}
 8009486:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->decayPhase += adsr->decayInc;
 800948a:	ee37 1a81 	vadd.f32	s2, s15, s2
 800948e:	ed84 1a14 	vstr	s2, [r4, #80]	; 0x50
}
 8009492:	ecbd 8b02 	vpop	{d8}
 8009496:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8009498:	edd4 7a03 	vldr	s15, [r4, #12]
 800949c:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 80094a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a4:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80094a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ac:	f340 80a4 	ble.w	80095f8 <tADSRT_tick+0x24c>
                adsr->next = 0.0f;
 80094b0:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8009664 <tADSRT_tick+0x2b8>
                adsr->whichStage = env_idle;
 80094b4:	2300      	movs	r3, #0
 80094b6:	eeb0 8a67 	vmov.f32	s16, s15
 80094ba:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 80094bc:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 80094c0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
}
 80094c4:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->releasePhase += adsr->releaseInc;
 80094c8:	ee37 1a81 	vadd.f32	s2, s15, s2
 80094cc:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
}
 80094d0:	ecbd 8b02 	vpop	{d8}
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	ed94 8a06 	vldr	s16, [r4, #24]
 80094da:	eeb0 0a48 	vmov.f32	s0, s16
 80094de:	ecbd 8b02 	vpop	{d8}
 80094e2:	bd10      	pop	{r4, pc}
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80094e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094e8:	6862      	ldr	r2, [r4, #4]
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 80094ea:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80094ee:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->attackPhase - intPart;
 80094f2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80094f6:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->attackPhase - intPart;
 80094fa:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80094fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009502:	f100 80ab 	bmi.w	800965c <tADSRT_tick+0x2b0>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 8009506:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800950a:	ee17 3a90 	vmov	r3, s15
 800950e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009512:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 8009516:	ee16 3a90 	vmov	r3, s13
 800951a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800951e:	ed92 0a00 	vldr	s0, [r2]
 8009522:	f000 fc5b 	bl	8009ddc <LEAF_interpolation_linear>
 8009526:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800952a:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
 800952e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009532:	ee28 8a00 	vmul.f32	s16, s16, s0
 8009536:	ed84 8a06 	vstr	s16, [r4, #24]
 800953a:	e775      	b.n	8009428 <tADSRT_tick+0x7c>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800953c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009540:	6862      	ldr	r2, [r4, #4]
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 8009542:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8009546:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->decayPhase - intPart;
 800954a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800954e:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->decayPhase - intPart;
 8009552:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8009556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800955a:	d47c      	bmi.n	8009656 <tADSRT_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 800955c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8009560:	ee17 3a90 	vmov	r3, s15
 8009564:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009568:	edd3 0a00 	vldr	s1, [r3]
                float interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart));
 800956c:	ee16 3a90 	vmov	r3, s13
 8009570:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009574:	ed92 0a00 	vldr	s0, [r2]
 8009578:	f000 fc30 	bl	8009ddc <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 800957c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009580:	ed94 8a0f 	vldr	s16, [r4, #60]	; 0x3c
 8009584:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8009588:	ee37 7a48 	vsub.f32	s14, s14, s16
 800958c:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
 8009590:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 8009594:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009598:	eea7 8a00 	vfma.f32	s16, s14, s0
 800959c:	ee27 8a88 	vmul.f32	s16, s15, s16
 80095a0:	ed84 8a06 	vstr	s16, [r4, #24]
 80095a4:	e76d      	b.n	8009482 <tADSRT_tick+0xd6>
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 80095a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095aa:	6862      	ldr	r2, [r4, #4]
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 80095ac:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 80095b0:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->rampPhase - intPart;
 80095b4:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 80095b8:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->rampPhase - intPart;
 80095bc:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 80095c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c4:	d444      	bmi.n	8009650 <tADSRT_tick+0x2a4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 80095c6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80095ca:	ee17 3a90 	vmov	r3, s15
 80095ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095d2:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 80095d6:	ee16 3a90 	vmov	r3, s13
 80095da:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 80095de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80095e2:	ed92 0a00 	vldr	s0, [r2]
 80095e6:	f000 fbf9 	bl	8009ddc <LEAF_interpolation_linear>
 80095ea:	ee28 8a00 	vmul.f32	s16, s16, s0
 80095ee:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 80095f2:	ed84 8a06 	vstr	s16, [r4, #24]
 80095f6:	e6fb      	b.n	80093f0 <tADSRT_tick+0x44>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 80095f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095fc:	6862      	ldr	r2, [r4, #4]
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 80095fe:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8009602:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->releasePhase - intPart;
 8009606:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800960a:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->releasePhase - intPart;
 800960e:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8009612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009616:	d418      	bmi.n	800964a <tADSRT_tick+0x29e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 8009618:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800961c:	ee17 3a90 	vmov	r3, s15
 8009620:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009624:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 8009628:	ee16 3a90 	vmov	r3, s13
 800962c:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 8009630:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009634:	ed92 0a00 	vldr	s0, [r2]
 8009638:	f000 fbd0 	bl	8009ddc <LEAF_interpolation_linear>
 800963c:	ee28 8a00 	vmul.f32	s16, s16, s0
 8009640:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 8009644:	ed84 8a06 	vstr	s16, [r4, #24]
 8009648:	e73a      	b.n	80094c0 <tADSRT_tick+0x114>
                    secondValue = 0.0f;
 800964a:	eddf 0a06 	vldr	s1, [pc, #24]	; 8009664 <tADSRT_tick+0x2b8>
 800964e:	e7eb      	b.n	8009628 <tADSRT_tick+0x27c>
                    secondValue = 0.0f;
 8009650:	eddf 0a04 	vldr	s1, [pc, #16]	; 8009664 <tADSRT_tick+0x2b8>
 8009654:	e7bf      	b.n	80095d6 <tADSRT_tick+0x22a>
                    secondValue = 0.0f;
 8009656:	eddf 0a03 	vldr	s1, [pc, #12]	; 8009664 <tADSRT_tick+0x2b8>
 800965a:	e787      	b.n	800956c <tADSRT_tick+0x1c0>
                    secondValue = 0.0f;
 800965c:	eddf 0a01 	vldr	s1, [pc, #4]	; 8009664 <tADSRT_tick+0x2b8>
 8009660:	e759      	b.n	8009516 <tADSRT_tick+0x16a>
 8009662:	bf00      	nop
 8009664:	00000000 	.word	0x00000000

08009668 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 800966e:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8009670:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8009672:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8009674:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8009678:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800967a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800967e:	f000 fc03 	bl	8009e88 <mpool_alloc>
 8009682:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009686:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80096bc <tExpSmooth_init+0x54>
 800968a:	6028      	str	r0, [r5, #0]
 800968c:	fec8 0a67 	vminnm.f32	s1, s16, s15
 8009690:	fec0 0a87 	vmaxnm.f32	s1, s1, s14
    smooth->dest = val;
    if (factor < 0) factor = 0;
    if (factor > 1) factor = 1;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
 8009694:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8009698:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 800969a:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 800969e:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 80096a2:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
 80096a6:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->factor = factor;
 80096aa:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 80096ae:	6863      	ldr	r3, [r4, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	6183      	str	r3, [r0, #24]
}
 80096b4:	ecbd 8b02 	vpop	{d8}
 80096b8:	bd38      	pop	{r3, r4, r5, pc}
 80096ba:	bf00      	nop
 80096bc:	00000000 	.word	0x00000000

080096c0 <tExpSmooth_initToPool>:
{
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80096c6:	680c      	ldr	r4, [r1, #0]
{
 80096c8:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80096ca:	201c      	movs	r0, #28
{
 80096cc:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80096d0:	4621      	mov	r1, r4
{
 80096d2:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80096d6:	f000 fbd7 	bl	8009e88 <mpool_alloc>
 80096da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80096de:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8009714 <tExpSmooth_initToPool+0x54>
 80096e2:	6028      	str	r0, [r5, #0]
 80096e4:	fec8 0a67 	vminnm.f32	s1, s16, s15
 80096e8:	fec0 0a87 	vmaxnm.f32	s1, s1, s14
    smooth->oneminusfactor = 1.0f - factor;
 80096ec:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 80096f0:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 80096f2:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 80096f6:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 80096fa:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
 80096fe:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->factor = factor;
 8009702:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 8009706:	6863      	ldr	r3, [r4, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	6183      	str	r3, [r0, #24]
}
 800970c:	ecbd 8b02 	vpop	{d8}
 8009710:	bd38      	pop	{r3, r4, r5, pc}
 8009712:	bf00      	nop
 8009714:	00000000 	.word	0x00000000

08009718 <tExpSmooth_setDest>:
    smooth->oneminusfactor = 1.0f - factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 8009718:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 800971a:	ed83 0a05 	vstr	s0, [r3, #20]
}
 800971e:	4770      	bx	lr

08009720 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 8009720:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 8009722:	edd3 7a04 	vldr	s15, [r3, #16]
 8009726:	ed93 0a03 	vldr	s0, [r3, #12]
 800972a:	ed93 7a02 	vldr	s14, [r3, #8]
 800972e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009732:	edd3 7a05 	vldr	s15, [r3, #20]
 8009736:	eea7 0a27 	vfma.f32	s0, s14, s15
 800973a:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
 800973e:	4770      	bx	lr

08009740 <tTwoZero_initToPool>:
{
    tTwoZero_initToPool(ft, &leaf->mempool);
}

void    tTwoZero_initToPool     (tTwoZero* const ft, tMempool* const mp)
{
 8009740:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 8009742:	680c      	ldr	r4, [r1, #0]
{
 8009744:	4605      	mov	r5, r0
    _tTwoZero* f = *ft = (_tTwoZero*) mpool_alloc(sizeof(_tTwoZero), m);
 8009746:	2028      	movs	r0, #40	; 0x28
 8009748:	4621      	mov	r1, r4
 800974a:	f000 fb9d 	bl	8009e88 <mpool_alloc>
 800974e:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8009750:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->gain = 1.0f;
    f->lastIn[0] = 0.0f;
 8009752:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8009754:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
 8009756:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800975a:	68d2      	ldr	r2, [r2, #12]
    f->gain = 1.0f;
 800975c:	6041      	str	r1, [r0, #4]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800975e:	6242      	str	r2, [r0, #36]	; 0x24
    f->lastIn[0] = 0.0f;
 8009760:	61c3      	str	r3, [r0, #28]
    f->lastIn[1] = 0.0f;
 8009762:	6203      	str	r3, [r0, #32]
}
 8009764:	bd38      	pop	{r3, r4, r5, pc}
 8009766:	bf00      	nop

08009768 <tTwoZero_setCoefficients>:
    f->b1 = b1;
}

void    tTwoZero_setCoefficients(tTwoZero* const ft, float b0, float b1, float b2)
{
    _tTwoZero* f = *ft;
 8009768:	6803      	ldr	r3, [r0, #0]
    f->b0 = b0;
 800976a:	ed83 0a02 	vstr	s0, [r3, #8]
    f->b1 = b1;
 800976e:	edc3 0a03 	vstr	s1, [r3, #12]
    f->b2 = b2;
 8009772:	ed83 1a04 	vstr	s2, [r3, #16]
}
 8009776:	4770      	bx	lr

08009778 <tEfficientSVF_init>:
}

#if LEAF_INCLUDE_FILTERTAN_TABLE
// Efficient version of tSVF where frequency is set based on 12-bit integer input for lookup in tanh wavetable.
void   tEfficientSVF_init(tEfficientSVF* const svff, SVFType type, uint16_t input, float Q, LEAF* const leaf)
{
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	ed2d 8b02 	vpush	{d8}
    tEfficientSVF_initToPool(svff, type, input, Q, &leaf->mempool);
}

void    tEfficientSVF_initToPool    (tEfficientSVF* const svff, SVFType type, uint16_t input, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 800977e:	699c      	ldr	r4, [r3, #24]
{
 8009780:	4607      	mov	r7, r0
 8009782:	460d      	mov	r5, r1
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 8009784:	202c      	movs	r0, #44	; 0x2c
 8009786:	4621      	mov	r1, r4
{
 8009788:	4616      	mov	r6, r2
 800978a:	eeb0 8a40 	vmov.f32	s16, s0
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 800978e:	f000 fb7b 	bl	8009e88 <mpool_alloc>
    
    svf->ic1eq = 0;
    svf->ic2eq = 0;
    
    svf->g = __leaf_table_filtertan[input];
    svf->k = 1.0f/Q;
 8009792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    svf->g = __leaf_table_filtertan[input];
 8009796:	4a14      	ldr	r2, [pc, #80]	; (80097e8 <tEfficientSVF_init+0x70>)
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 8009798:	6038      	str	r0, [r7, #0]
    svf->ic1eq = 0;
 800979a:	2300      	movs	r3, #0
    svf->g = __leaf_table_filtertan[input];
 800979c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    svf->mempool = m;
 80097a0:	6004      	str	r4, [r0, #0]
    svf->k = 1.0f/Q;
 80097a2:	eec7 6a08 	vdiv.f32	s13, s14, s16
    svf->type = type;
 80097a6:	7105      	strb	r5, [r0, #4]
    svf->g = __leaf_table_filtertan[input];
 80097a8:	edd2 7a00 	vldr	s15, [r2]
    svf->ic1eq = 0;
 80097ac:	6103      	str	r3, [r0, #16]
    svf->g = __leaf_table_filtertan[input];
 80097ae:	edc0 7a06 	vstr	s15, [r0, #24]
    svf->ic2eq = 0;
 80097b2:	6143      	str	r3, [r0, #20]
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 80097b4:	ee37 6aa6 	vadd.f32	s12, s15, s13
    svf->k = 1.0f/Q;
 80097b8:	edc0 6a07 	vstr	s13, [r0, #28]
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 80097bc:	eef0 6a47 	vmov.f32	s13, s14
 80097c0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80097c4:	eeb0 6a66 	vmov.f32	s12, s13
 80097c8:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g*svf->a1;
 80097cc:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 80097d0:	edc0 6a08 	vstr	s13, [r0, #32]
    svf->a3 = svf->g*svf->a2;
 80097d4:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g*svf->a1;
 80097d8:	ed80 7a09 	vstr	s14, [r0, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 80097dc:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
}
 80097e0:	ecbd 8b02 	vpop	{d8}
 80097e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097e6:	bf00      	nop
 80097e8:	0800c6b4 	.word	0x0800c6b4

080097ec <tEfficientSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tEfficientSVF_tick(tEfficientSVF* const svff, float v0)
{
    _tEfficientSVF* svf = *svff;
 80097ec:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80097ee:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 80097f2:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80097f6:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80097fa:	eeb0 7a66 	vmov.f32	s14, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80097fe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
 8009802:	ee70 5a66 	vsub.f32	s11, s0, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8009806:	ed93 4a08 	vldr	s8, [r3, #32]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800980a:	edd3 4a0a 	vldr	s9, [r3, #40]	; 0x28
 800980e:	eea6 7a27 	vfma.f32	s14, s12, s15
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    if (svf->type == SVFTypeLowpass)        return v2;
 8009812:	791a      	ldrb	r2, [r3, #4]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8009814:	ee67 7aa5 	vmul.f32	s15, s15, s11
    if (svf->type == SVFTypeLowpass)        return v2;
 8009818:	2a01      	cmp	r2, #1
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800981a:	eee4 7a06 	vfma.f32	s15, s8, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800981e:	eea4 7aa5 	vfma.f32	s14, s9, s11
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8009822:	ee97 6a85 	vfnms.f32	s12, s15, s10
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8009826:	ee77 5a07 	vadd.f32	s11, s14, s14
 800982a:	ee75 6ae6 	vsub.f32	s13, s11, s13
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800982e:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8009832:	edc3 6a05 	vstr	s13, [r3, #20]
    if (svf->type == SVFTypeLowpass)        return v2;
 8009836:	d008      	beq.n	800984a <tEfficientSVF_tick+0x5e>
    else if (svf->type == SVFTypeBandpass)  return v1;
 8009838:	2a02      	cmp	r2, #2
 800983a:	d009      	beq.n	8009850 <tEfficientSVF_tick+0x64>
    else if (svf->type == SVFTypeHighpass)  return v0 - (svf->k * v1) - v2;
 800983c:	b16a      	cbz	r2, 800985a <tEfficientSVF_tick+0x6e>
    else if (svf->type == SVFTypeNotch)     return v0 - (svf->k * v1);
 800983e:	2a03      	cmp	r2, #3
 8009840:	d014      	beq.n	800986c <tEfficientSVF_tick+0x80>
    else if (svf->type == SVFTypePeak)      return v0 - (svf->k * v1) - (2.0f * v2);
 8009842:	2a04      	cmp	r2, #4
 8009844:	d019      	beq.n	800987a <tEfficientSVF_tick+0x8e>
    else                                    return 0.0f;
 8009846:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009888 <tEfficientSVF_tick+0x9c>
    
}
 800984a:	eeb0 0a47 	vmov.f32	s0, s14
 800984e:	4770      	bx	lr
    else if (svf->type == SVFTypeBandpass)  return v1;
 8009850:	eeb0 7a67 	vmov.f32	s14, s15
}
 8009854:	eeb0 0a47 	vmov.f32	s0, s14
 8009858:	4770      	bx	lr
    else if (svf->type == SVFTypeHighpass)  return v0 - (svf->k * v1) - v2;
 800985a:	edd3 6a07 	vldr	s13, [r3, #28]
 800985e:	eea6 0ae7 	vfms.f32	s0, s13, s15
 8009862:	ee30 7a47 	vsub.f32	s14, s0, s14
}
 8009866:	eeb0 0a47 	vmov.f32	s0, s14
 800986a:	4770      	bx	lr
    else if (svf->type == SVFTypeNotch)     return v0 - (svf->k * v1);
 800986c:	ed93 7a07 	vldr	s14, [r3, #28]
 8009870:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009874:	eeb0 7a40 	vmov.f32	s14, s0
 8009878:	e7e7      	b.n	800984a <tEfficientSVF_tick+0x5e>
    else if (svf->type == SVFTypePeak)      return v0 - (svf->k * v1) - (2.0f * v2);
 800987a:	ed93 7a07 	vldr	s14, [r3, #28]
 800987e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009882:	ee30 7a65 	vsub.f32	s14, s0, s11
 8009886:	e7e0      	b.n	800984a <tEfficientSVF_tick+0x5e>
 8009888:	00000000 	.word	0x00000000

0800988c <tEfficientSVF_setFreq>:

void     tEfficientSVF_setFreq(tEfficientSVF* const svff, uint16_t input)
{
    _tEfficientSVF* svf = *svff;
    
    svf->g = __leaf_table_filtertan[input];
 800988c:	4a10      	ldr	r2, [pc, #64]	; (80098d0 <tEfficientSVF_setFreq+0x44>)
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800988e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    _tEfficientSVF* svf = *svff;
 8009892:	6803      	ldr	r3, [r0, #0]
    svf->g = __leaf_table_filtertan[input];
 8009894:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8009898:	ed93 7a07 	vldr	s14, [r3, #28]
 800989c:	eef0 6a46 	vmov.f32	s13, s12
    svf->g = __leaf_table_filtertan[input];
 80098a0:	edd1 7a00 	vldr	s15, [r1]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80098a4:	ee37 7a87 	vadd.f32	s14, s15, s14
    svf->g = __leaf_table_filtertan[input];
 80098a8:	edc3 7a06 	vstr	s15, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80098ac:	eee7 6a87 	vfma.f32	s13, s15, s14
 80098b0:	eeb0 7a66 	vmov.f32	s14, s13
 80098b4:	eec6 6a07 	vdiv.f32	s13, s12, s14
    svf->a2 = svf->g * svf->a1;
 80098b8:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80098bc:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 80098c0:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 80098c4:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 80098c8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	0800c6b4 	.word	0x0800c6b4

080098d4 <tHighpass_initToPool>:
{
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80098da:	680c      	ldr	r4, [r1, #0]
{
 80098dc:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80098de:	2018      	movs	r0, #24
{
 80098e0:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80098e4:	4621      	mov	r1, r4
 80098e6:	f000 fb2b 	bl	8009f40 <mpool_calloc>
 80098ea:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 80098ec:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 80098ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80098f2:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 80098f4:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80098f6:	ed92 7a03 	vldr	s14, [r2, #12]
    f->xs = 0.0f;
    
    f->frequency = freq;
 80098fa:	ed80 8a04 	vstr	s16, [r0, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 80098fe:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8009902:	ed80 7a05 	vstr	s14, [r0, #20]
    f->ys = 0.0f;
 8009906:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 8009908:	6043      	str	r3, [r0, #4]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800990a:	edc0 7a03 	vstr	s15, [r0, #12]
}
 800990e:	ecbd 8b02 	vpop	{d8}
 8009912:	bd38      	pop	{r3, r4, r5, pc}

08009914 <tVZFilter_init>:
}

/////

void    tVZFilter_init  (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth, LEAF* const leaf)
{
 8009914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009916:	ed2d 8b04 	vpush	{d8-d9}
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
}

void    tVZFilter_initToPool     (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth, tMempool* const mp)
{
    _tMempool* m = *mp;
 800991a:	6995      	ldr	r5, [r2, #24]
{
 800991c:	4606      	mov	r6, r0
 800991e:	460f      	mov	r7, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8009920:	2044      	movs	r0, #68	; 0x44
 8009922:	4629      	mov	r1, r5
{
 8009924:	eef0 8a60 	vmov.f32	s17, s1
 8009928:	eeb0 9a40 	vmov.f32	s18, s0
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800992c:	f000 faac 	bl	8009e88 <mpool_alloc>
 8009930:	6030      	str	r0, [r6, #0]
    
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8009932:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    f->mempool = m;
 8009936:	6005      	str	r5, [r0, #0]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8009938:	4604      	mov	r4, r0
    LEAF* leaf = f->mempool->leaf;
 800993a:	686b      	ldr	r3, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800993c:	eef0 0a49 	vmov.f32	s1, s18
 8009940:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 8009c68 <tVZFilter_init+0x354>
    f->sampleRate = leaf->sampleRate;
 8009944:	edd3 7a00 	vldr	s15, [r3]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8009948:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
 800994c:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8009950:	ee27 1a81 	vmul.f32	s2, s15, s2
    f->invSampleRate = leaf->invSampleRate;
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	6403      	str	r3, [r0, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8009958:	f000 fa04 	bl	8009d64 <LEAF_clip>
    f->type = type;
    f->G    = ONE_OVER_SQRT2;
    f->invG = 1.0f/ONE_OVER_SQRT2;
 800995c:	4bbe      	ldr	r3, [pc, #760]	; (8009c58 <tVZFilter_init+0x344>)
    f->G    = ONE_OVER_SQRT2;
 800995e:	4abf      	ldr	r2, [pc, #764]	; (8009c5c <tVZFilter_init+0x348>)
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8009960:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->B    = bandWidth;
 8009964:	edc4 8a0d 	vstr	s17, [r4, #52]	; 0x34
    f->m    = 0.0f;
 8009968:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
    f->s1 = 0.0f;
 800996c:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2 = 0.0f;
 8009970:	ed84 8a03 	vstr	s16, [r4, #12]
    f->invG = 1.0f/ONE_OVER_SQRT2;
 8009974:	6323      	str	r3, [r4, #48]	; 0x30
    f->type = type;
 8009976:	7127      	strb	r7, [r4, #4]
    f->G    = ONE_OVER_SQRT2;
 8009978:	62e2      	str	r2, [r4, #44]	; 0x2c
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
    _tVZFilter* f = *vf;
 800997a:	6834      	ldr	r4, [r6, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800997c:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8009c60 <tVZFilter_init+0x34c>
 8009980:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8009984:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8009988:	ee28 8a07 	vmul.f32	s16, s16, s14
 800998c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009990:	eeb0 0a48 	vmov.f32	s0, s16
 8009994:	f001 f86a 	bl	800aa6c <tanf>
    
    switch( f->type )
 8009998:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800999a:	eef0 8a40 	vmov.f32	s17, s0
 800999e:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 80099a2:	2b0a      	cmp	r3, #10
 80099a4:	f200 81b2 	bhi.w	8009d0c <tVZFilter_init+0x3f8>
 80099a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80099ac:	005e0053 	.word	0x005e0053
 80099b0:	00740069 	.word	0x00740069
 80099b4:	00e300ab 	.word	0x00e300ab
 80099b8:	01360116 	.word	0x01360116
 80099bc:	01a50160 	.word	0x01a50160
 80099c0:	000b      	.short	0x000b
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80099c2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80099c6:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 80099ca:	6835      	ldr	r5, [r6, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80099cc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80099d0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80099d4:	f000 ff0c 	bl	800a7f0 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80099d8:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 80099dc:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 80099e0:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8009c60 <tVZFilter_init+0x34c>
 80099e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80099e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099ec:	ee27 0a80 	vmul.f32	s0, s15, s0
 80099f0:	f001 f83c 	bl	800aa6c <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80099f4:	ed95 7a04 	vldr	s14, [r5, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80099f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80099fc:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8009a00:	edc4 7a07 	vstr	s15, [r4, #28]
 8009a04:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8009a08:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009a0c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009a10:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009a14:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009a18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009a1c:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8009a20:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8009a24:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8009a28:	eeb1 7a67 	vneg.f32	s14, s15
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8009a2c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8009a30:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 8009a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a38:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8009a3c:	eef0 6a47 	vmov.f32	s13, s14
 8009a40:	eee7 6aa8 	vfma.f32	s13, s15, s17
 8009a44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009a48:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8009a4c:	ecbd 8b04 	vpop	{d8-d9}
 8009a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8009a52:	2300      	movs	r3, #0
 8009a54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8009a58:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8009a5c:	6262      	str	r2, [r4, #36]	; 0x24
            f->R2 = f->invG;
 8009a5e:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8009a62:	61e3      	str	r3, [r4, #28]
 8009a64:	6223      	str	r3, [r4, #32]
 8009a66:	e7e5      	b.n	8009a34 <tVZFilter_init+0x120>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8009a6e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8009a72:	61e2      	str	r2, [r4, #28]
            f->R2 = f->invG;
 8009a74:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8009a78:	6223      	str	r3, [r4, #32]
 8009a7a:	6263      	str	r3, [r4, #36]	; 0x24
 8009a7c:	e7da      	b.n	8009a34 <tVZFilter_init+0x120>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8009a84:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8009a88:	6222      	str	r2, [r4, #32]
            f->R2 = f->invG;
 8009a8a:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8009a8e:	61e3      	str	r3, [r4, #28]
 8009a90:	6263      	str	r3, [r4, #36]	; 0x24
 8009a92:	e7cf      	b.n	8009a34 <tVZFilter_init+0x120>
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009a94:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8009a98:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 8009a9c:	6835      	ldr	r5, [r6, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009a9e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009aa2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009aa6:	f000 fea3 	bl	800a7f0 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8009aaa:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8009aae:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8009ab2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8009c60 <tVZFilter_init+0x34c>
 8009ab6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009abe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009ac2:	f000 ffd3 	bl	800aa6c <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009ac6:	ed95 7a04 	vldr	s14, [r5, #16]
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8009aca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8009ace:	2300      	movs	r3, #0
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009ad0:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8009ad4:	61e3      	str	r3, [r4, #28]
 8009ad6:	6263      	str	r3, [r4, #36]	; 0x24
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8009ad8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009adc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ae0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009ae4:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009ae8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009aec:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8009af0:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8009af4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009af8:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8009afc:	edc4 7a08 	vstr	s15, [r4, #32]
 8009b00:	e798      	b.n	8009a34 <tVZFilter_init+0x120>
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009b02:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8009b06:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 8009b0a:	6835      	ldr	r5, [r6, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009b0c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009b10:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009b14:	f000 fe6c 	bl	800a7f0 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8009b18:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8009b1c:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8009b20:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8009c60 <tVZFilter_init+0x34c>
 8009b24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b2c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009b30:	f000 ff9c 	bl	800aa6c <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009b34:	ed95 7a04 	vldr	s14, [r5, #16]
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8009b38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8009b3c:	2300      	movs	r3, #0
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009b3e:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8009b42:	6223      	str	r3, [r4, #32]
 8009b44:	edc4 7a07 	vstr	s15, [r4, #28]
 8009b48:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8009b4c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009b50:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009b54:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009b58:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009b5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009b60:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8009b64:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8009b68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009b6c:	edc4 7a05 	vstr	s15, [r4, #20]
 8009b70:	e760      	b.n	8009a34 <tVZFilter_init+0x120>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8009b72:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8009b76:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 8009b7a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009b7e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009b82:	f000 fe35 	bl	800a7f0 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8009b86:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009b8a:	f000 ff6f 	bl	800aa6c <tanf>
            float r  = f->g/wl;
 8009b8e:	ee88 0a80 	vdiv.f32	s0, s17, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8009b92:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8009b96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009b9a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009b9e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8009ba2:	edc4 7a07 	vstr	s15, [r4, #28]
 8009ba6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8009baa:	ee67 6a26 	vmul.f32	s13, s14, s13
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8009bae:	ee20 0a00 	vmul.f32	s0, s0, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8009bb2:	eee0 7a00 	vfma.f32	s15, s0, s0
 8009bb6:	ee87 6a80 	vdiv.f32	s12, s15, s0
 8009bba:	ee76 7a65 	vsub.f32	s15, s12, s11
 8009bbe:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8009bc2:	eef1 7ac6 	vsqrt.f32	s15, s12
 8009bc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8009bca:	ee27 7a27 	vmul.f32	s14, s14, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8009bce:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8009bd2:	ed84 7a08 	vstr	s14, [r4, #32]
 8009bd6:	e72d      	b.n	8009a34 <tVZFilter_init+0x120>
            float A = sqrtf(f->G);
 8009bd8:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8009bdc:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8009be0:	eddf 7a20 	vldr	s15, [pc, #128]	; 8009c64 <tVZFilter_init+0x350>
            float A = sqrtf(f->G);
 8009be4:	eeb1 8ac9 	vsqrt.f32	s16, s18
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8009be8:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8009bec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009bf0:	eef1 7ac8 	vsqrt.f32	s15, s16
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8009bf4:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 8009bf8:	edc4 8a04 	vstr	s17, [r4, #16]
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8009bfc:	f001 f8e0 	bl	800adc0 <sinhf>
 8009c00:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8009c04:	ed84 9a07 	vstr	s18, [r4, #28]
 8009c08:	6265      	str	r5, [r4, #36]	; 0x24
 8009c0a:	ee28 8a27 	vmul.f32	s16, s16, s15
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8009c0e:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8009c12:	ed84 8a08 	vstr	s16, [r4, #32]
 8009c16:	e70d      	b.n	8009a34 <tVZFilter_init+0x120>
            float A = sqrtf(f->G);
 8009c18:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8009c1c:	eddf 7a11 	vldr	s15, [pc, #68]	; 8009c64 <tVZFilter_init+0x350>
            float A = sqrtf(f->G);
 8009c20:	eeb1 8ac9 	vsqrt.f32	s16, s18
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8009c24:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8009c28:	ee20 0a27 	vmul.f32	s0, s0, s15
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8009c2c:	eef1 7ac8 	vsqrt.f32	s15, s16
 8009c30:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8009c34:	edc4 8a04 	vstr	s17, [r4, #16]
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8009c38:	f001 f8c2 	bl	800adc0 <sinhf>
 8009c3c:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8009c40:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009c44:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 8009c48:	ee28 8a27 	vmul.f32	s16, s16, s15
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8009c4c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8009c50:	61e3      	str	r3, [r4, #28]
 8009c52:	ed84 8a08 	vstr	s16, [r4, #32]
 8009c56:	e6ed      	b.n	8009a34 <tVZFilter_init+0x120>
 8009c58:	3fb504f3 	.word	0x3fb504f3
 8009c5c:	3f3504f3 	.word	0x3f3504f3
 8009c60:	40490fdb 	.word	0x40490fdb
 8009c64:	3eb17218 	.word	0x3eb17218
 8009c68:	00000000 	.word	0x00000000
            float x  = 2.0f*f->m-1.0f;
 8009c6c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009c70:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8009c74:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
            f->R2 = f->invG;
 8009c78:	6b23      	ldr	r3, [r4, #48]	; 0x30
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8009c7a:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 8009c68 <tVZFilter_init+0x354>
            f->R2 = f->invG;
 8009c7e:	6163      	str	r3, [r4, #20]
            float x  = 2.0f*f->m-1.0f;
 8009c80:	eea7 8a27 	vfma.f32	s16, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8009c84:	eef1 8a48 	vneg.f32	s17, s16
 8009c88:	eeb0 0a68 	vmov.f32	s0, s17
 8009c8c:	f000 f8de 	bl	8009e4c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8009c90:	ed5f 0a0b 	vldr	s1, [pc, #-44]	; 8009c68 <tVZFilter_init+0x354>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8009c94:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8009c98:	eeb0 0a48 	vmov.f32	s0, s16
 8009c9c:	f000 f8da 	bl	8009e54 <minimum>
            f->cB = 1.0f-x*x;
 8009ca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8009ca4:	edd4 6a07 	vldr	s13, [r4, #28]
 8009ca8:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cB = 1.0f-x*x;
 8009cac:	eea8 7a88 	vfma.f32	s14, s17, s16
            float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8009cb0:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 8009cb4:	ee36 5aa6 	vadd.f32	s10, s13, s13
 8009cb8:	edd4 8a04 	vldr	s17, [r4, #16]
 8009cbc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009cc0:	ee27 6a07 	vmul.f32	s12, s14, s14
 8009cc4:	eea6 6aa6 	vfma.f32	s12, s13, s13
 8009cc8:	eea0 6a00 	vfma.f32	s12, s0, s0
 8009ccc:	eea0 6a45 	vfms.f32	s12, s0, s10
 8009cd0:	ee84 5a86 	vdiv.f32	s10, s9, s12
 8009cd4:	eeb1 6ac5 	vsqrt.f32	s12, s10
 8009cd8:	ee26 6a25 	vmul.f32	s12, s12, s11
            f->cL *= s; f->cB *= s; f->cH *= s;
 8009cdc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009ce0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009ce4:	ee20 0a06 	vmul.f32	s0, s0, s12
 8009ce8:	edc4 6a07 	vstr	s13, [r4, #28]
 8009cec:	ed84 7a08 	vstr	s14, [r4, #32]
 8009cf0:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 8009cf4:	e69e      	b.n	8009a34 <tVZFilter_init+0x120>
            f->cL = 1.0f;
 8009cf6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8009cfa:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8009cfe:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8009d00:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cH = 1.0f;
 8009d04:	6263      	str	r3, [r4, #36]	; 0x24
            f->cB = f->R2;
 8009d06:	edc4 7a08 	vstr	s15, [r4, #32]
 8009d0a:	e693      	b.n	8009a34 <tVZFilter_init+0x120>
 8009d0c:	edd4 7a05 	vldr	s15, [r4, #20]
 8009d10:	e690      	b.n	8009a34 <tVZFilter_init+0x120>
 8009d12:	bf00      	nop

08009d14 <log2f_approx>:

#define log10f_fast(x)  (log2f_approx(x)*0.3010299956639812f)

// This is a fast approximation to log2() found on http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html credited to this post https://community.arm.com/developer/tools-software/tools/f/armds-forum/4292/cmsis-dsp-new-functionality-proposal/22621#22621
// Y = C[0]*F*F*F + C[1]*F*F + C[2]*F + C[3] + E;
float log2f_approx(float X) {
 8009d14:	b500      	push	{lr}
 8009d16:	b083      	sub	sp, #12
    float Y, F;
    int E;
    F = frexpf(fabsf(X), &E);
 8009d18:	eeb0 0ac0 	vabs.f32	s0, s0
 8009d1c:	a801      	add	r0, sp, #4
 8009d1e:	f000 fca1 	bl	800a664 <frexpf>
    Y = 1.23149591368684f;
    Y *= F;
    Y += -4.11852516267426f;
 8009d22:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8009d54 <log2f_approx+0x40>
 8009d26:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8009d58 <log2f_approx+0x44>
    Y *= F;
    Y += 6.02197014179219f;
 8009d2a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009d5c <log2f_approx+0x48>
    Y += -4.11852516267426f;
 8009d2e:	eee0 6a27 	vfma.f32	s13, s0, s15
    Y *= F;
    Y += -3.13396450166353f;
    Y += E;
 8009d32:	eddd 7a01 	vldr	s15, [sp, #4]
 8009d36:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8009d60 <log2f_approx+0x4c>
 8009d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d3e:	ee77 7ac6 	vsub.f32	s15, s15, s12
    Y += 6.02197014179219f;
 8009d42:	eea0 7a26 	vfma.f32	s14, s0, s13
    return(Y);
}
 8009d46:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8009d4e:	b003      	add	sp, #12
 8009d50:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d54:	3f9da1a8 	.word	0x3f9da1a8
 8009d58:	c083caf5 	.word	0xc083caf5
 8009d5c:	40c0b3fb 	.word	0x40c0b3fb
 8009d60:	404892e0 	.word	0x404892e0

08009d64 <LEAF_clip>:

float   LEAF_clip(float min, float val, float max)
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 8009d64:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8009d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6c:	dd05      	ble.n	8009d7a <LEAF_clip+0x16>
 8009d6e:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 8009d72:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 8009d76:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 8009d7a:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8009d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d82:	dc01      	bgt.n	8009d88 <LEAF_clip+0x24>
 8009d84:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop

08009d8c <LEAF_generate_exp>:


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
    float increment = (end - start) / (float)size;
 8009d8c:	ee07 1a90 	vmov	s15, r1
 8009d90:	ee31 1a60 	vsub.f32	s2, s2, s1
    float x = start;
    for (int i = 0; i < size; i++)
 8009d94:	2900      	cmp	r1, #0
    float increment = (end - start) / (float)size;
 8009d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8009d9a:	b538      	push	{r3, r4, r5, lr}
 8009d9c:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (end - start) / (float)size;
 8009da0:	eec1 8a27 	vdiv.f32	s17, s2, s15
    for (int i = 0; i < size; i++)
 8009da4:	dd16      	ble.n	8009dd4 <LEAF_generate_exp+0x48>
 8009da6:	4604      	mov	r4, r0
 8009da8:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8009dac:	eeb0 8a60 	vmov.f32	s16, s1
 8009db0:	eeb0 9a40 	vmov.f32	s18, s0
 8009db4:	eef0 9a61 	vmov.f32	s19, s3
    {
        buffer[i] = powf(base, x) + offset;
 8009db8:	eef0 0a48 	vmov.f32	s1, s16
 8009dbc:	eeb0 0a49 	vmov.f32	s0, s18
 8009dc0:	f000 fd16 	bl	800a7f0 <powf>
 8009dc4:	ee30 0a29 	vadd.f32	s0, s0, s19
        x += increment;
 8009dc8:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = powf(base, x) + offset;
 8009dcc:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8009dd0:	42a5      	cmp	r5, r4
 8009dd2:	d1f1      	bne.n	8009db8 <LEAF_generate_exp+0x2c>
    }
}
 8009dd4:	ecbd 8b04 	vpop	{d8-d9}
 8009dd8:	bd38      	pop	{r3, r4, r5, pc}
 8009dda:	bf00      	nop

08009ddc <LEAF_interpolation_linear>:
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
}

// alpha, [0.0, 1.0]
float LEAF_interpolation_linear (float A, float B, float alpha)
{
 8009ddc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009de0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8009e00 <LEAF_interpolation_linear+0x24>
 8009de4:	fe81 1a67 	vminnm.f32	s2, s2, s15
 8009de8:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
    
    float omAlpha = 1.0f - alpha;
 8009dec:	ee77 7ac1 	vsub.f32	s15, s15, s2
    
    // First 1/2 of interpolation
    float out = A * omAlpha;
    
    out += B * alpha;
 8009df0:	ee20 1a81 	vmul.f32	s2, s1, s2
    
    return out;
}
 8009df4:	eea7 1a80 	vfma.f32	s2, s15, s0
 8009df8:	eeb0 0a41 	vmov.f32	s0, s2
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	00000000 	.word	0x00000000

08009e04 <mtof>:

#define LOGTEN 2.302585092994

float mtof(float f)
{
    if (f <= -1500.0f) return(0);
 8009e04:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8009e38 <mtof+0x34>
 8009e08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e10:	d90f      	bls.n	8009e32 <mtof+0x2e>
    else if (f > 1499.0f) return(mtof(1499.0f));
    else return (8.17579891564f * expf(0.0577622650f * f));
 8009e12:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8009e3c <mtof+0x38>
 8009e16:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009e40 <mtof+0x3c>
 8009e1a:	fe80 0a47 	vminnm.f32	s0, s0, s14
{
 8009e1e:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8009e20:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009e24:	f000 fc48 	bl	800a6b8 <expf>
 8009e28:	eddf 7a06 	vldr	s15, [pc, #24]	; 8009e44 <mtof+0x40>
 8009e2c:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8009e30:	bd08      	pop	{r3, pc}
    if (f <= -1500.0f) return(0);
 8009e32:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8009e48 <mtof+0x44>
}
 8009e36:	4770      	bx	lr
 8009e38:	c4bb8000 	.word	0xc4bb8000
 8009e3c:	44bb6000 	.word	0x44bb6000
 8009e40:	3d6c9820 	.word	0x3d6c9820
 8009e44:	4102d013 	.word	0x4102d013
 8009e48:	00000000 	.word	0x00000000

08009e4c <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8009e4c:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop

08009e54 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8009e54:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop

08009e5c <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8009e5c:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8009e5e:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8009e60:	2510      	movs	r5, #16
    pool->usize  = 0;
 8009e62:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8009e64:	635d      	str	r5, [r3, #52]	; 0x34
    mpool_create(memory, size, &leaf->_internal_mempool);
 8009e66:	f100 051c 	add.w	r5, r0, #28
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8009e6a:	6a03      	ldr	r3, [r0, #32]
    pool->mpool = (char*)memory;
 8009e6c:	6241      	str	r1, [r0, #36]	; 0x24
    pool->usize  = 0;
 8009e6e:	e9c0 420a 	strd	r4, r2, [r0, #40]	; 0x28
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8009e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
    node->next = next;
 8009e74:	604c      	str	r4, [r1, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8009e76:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 8009e78:	440b      	add	r3, r1
    node->prev = prev;
 8009e7a:	608c      	str	r4, [r1, #8]
    node->pool = block_location + header_size;
 8009e7c:	600b      	str	r3, [r1, #0]
    node->size = size;
 8009e7e:	60ca      	str	r2, [r1, #12]
    leaf->mempool = &leaf->_internal_mempool;
 8009e80:	6185      	str	r5, [r0, #24]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8009e82:	6301      	str	r1, [r0, #48]	; 0x30
}
 8009e84:	bc30      	pop	{r4, r5}
 8009e86:	4770      	bx	lr

08009e88 <mpool_alloc>:
{
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8009e8a:	684a      	ldr	r2, [r1, #4]
 8009e8c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8009e8e:	3301      	adds	r3, #1
 8009e90:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8009e92:	694c      	ldr	r4, [r1, #20]
 8009e94:	2c00      	cmp	r4, #0
 8009e96:	d038      	beq.n	8009f0a <mpool_alloc+0x82>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8009e98:	1dc5      	adds	r5, r0, #7
 8009e9a:	f025 0507 	bic.w	r5, r5, #7
    while (node_to_alloc->size < size_to_alloc)
 8009e9e:	e002      	b.n	8009ea6 <mpool_alloc+0x1e>
        if (node_to_alloc == NULL)
 8009ea0:	4614      	mov	r4, r2
 8009ea2:	2a00      	cmp	r2, #0
 8009ea4:	d031      	beq.n	8009f0a <mpool_alloc+0x82>
    while (node_to_alloc->size < size_to_alloc)
 8009ea6:	68e3      	ldr	r3, [r4, #12]
 8009ea8:	6862      	ldr	r2, [r4, #4]
 8009eaa:	42ab      	cmp	r3, r5
 8009eac:	d3f8      	bcc.n	8009ea0 <mpool_alloc+0x18>
    node_to_alloc->size = size_to_alloc;
 8009eae:	60e5      	str	r5, [r4, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8009eb0:	1b5e      	subs	r6, r3, r5
    if (leftover > pool->leaf->header_size)
 8009eb2:	6848      	ldr	r0, [r1, #4]
 8009eb4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8009eb6:	42b0      	cmp	r0, r6
 8009eb8:	d334      	bcc.n	8009f24 <mpool_alloc+0x9c>
        node_to_alloc->size += leftover;
 8009eba:	4617      	mov	r7, r2
 8009ebc:	60e3      	str	r3, [r4, #12]
    if (pool->head == node_to_alloc)
 8009ebe:	694b      	ldr	r3, [r1, #20]
 8009ec0:	42a3      	cmp	r3, r4
        pool->head = new_node;
 8009ec2:	bf08      	it	eq
 8009ec4:	614f      	streq	r7, [r1, #20]
 8009ec6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8009eca:	b10a      	cbz	r2, 8009ed0 <mpool_alloc+0x48>
    {
        // Close the link
        node->next->prev = node->prev;
 8009ecc:	6093      	str	r3, [r2, #8]
 8009ece:	68a3      	ldr	r3, [r4, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8009ed0:	b10b      	cbz	r3, 8009ed6 <mpool_alloc+0x4e>
    {
        // Close the link
        node->prev->next = node->next;
 8009ed2:	6862      	ldr	r2, [r4, #4]
 8009ed4:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 8009ed6:	2300      	movs	r3, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8009ed8:	68e5      	ldr	r5, [r4, #12]
    node->prev = NULL;
 8009eda:	e9c4 3301 	strd	r3, r3, [r4, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8009ede:	6848      	ldr	r0, [r1, #4]
 8009ee0:	68ca      	ldr	r2, [r1, #12]
 8009ee2:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8009ee4:	4432      	add	r2, r6
 8009ee6:	442a      	add	r2, r5
 8009ee8:	60ca      	str	r2, [r1, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8009eea:	6942      	ldr	r2, [r0, #20]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	dd0a      	ble.n	8009f06 <mpool_alloc+0x7e>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8009ef0:	68e2      	ldr	r2, [r4, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 8009ef2:	6820      	ldr	r0, [r4, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8009ef4:	b142      	cbz	r2, 8009f08 <mpool_alloc+0x80>
 8009ef6:	3801      	subs	r0, #1
 8009ef8:	4619      	mov	r1, r3
 8009efa:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009efe:	3301      	adds	r3, #1
 8009f00:	68e2      	ldr	r2, [r4, #12]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d8f9      	bhi.n	8009efa <mpool_alloc+0x72>
 8009f06:	6820      	ldr	r0, [r4, #0]
}
 8009f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ((pool->msize - pool->usize) > asize)
 8009f0a:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 8009f0e:	6849      	ldr	r1, [r1, #4]
 8009f10:	1a9b      	subs	r3, r3, r2
 8009f12:	4283      	cmp	r3, r0
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8009f14:	4608      	mov	r0, r1
 8009f16:	bf8c      	ite	hi
 8009f18:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8009f1a:	4621      	movls	r1, r4
 8009f1c:	f000 fb66 	bl	800a5ec <LEAF_internalErrorCallback>
            return NULL;
 8009f20:	4620      	mov	r0, r4
}
 8009f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8009f24:	688b      	ldr	r3, [r1, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8009f26:	4405      	add	r5, r0
                               node_to_alloc->prev,
 8009f28:	f8d4 c008 	ldr.w	ip, [r4, #8]
        new_node = create_node(&pool->mpool[offset],
 8009f2c:	1a36      	subs	r6, r6, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8009f2e:	1ae7      	subs	r7, r4, r3
        offset += pool->leaf->header_size + node_to_alloc->size;
 8009f30:	443d      	add	r5, r7
        new_node = create_node(&pool->mpool[offset],
 8009f32:	195f      	adds	r7, r3, r5
    node->pool = block_location + header_size;
 8009f34:	4438      	add	r0, r7
 8009f36:	5158      	str	r0, [r3, r5]
    node->size = size;
 8009f38:	60fe      	str	r6, [r7, #12]
    node->prev = prev;
 8009f3a:	e9c7 2c01 	strd	r2, ip, [r7, #4]
 8009f3e:	e7be      	b.n	8009ebe <mpool_alloc+0x36>

08009f40 <mpool_calloc>:
{
 8009f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8009f42:	684a      	ldr	r2, [r1, #4]
 8009f44:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8009f46:	3301      	adds	r3, #1
 8009f48:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8009f4a:	694c      	ldr	r4, [r1, #20]
 8009f4c:	2c00      	cmp	r4, #0
 8009f4e:	d033      	beq.n	8009fb8 <mpool_calloc+0x78>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8009f50:	1dc5      	adds	r5, r0, #7
 8009f52:	f025 0507 	bic.w	r5, r5, #7
    while (node_to_alloc->size < size_to_alloc)
 8009f56:	e002      	b.n	8009f5e <mpool_calloc+0x1e>
        if (node_to_alloc == NULL)
 8009f58:	4614      	mov	r4, r2
 8009f5a:	2a00      	cmp	r2, #0
 8009f5c:	d02c      	beq.n	8009fb8 <mpool_calloc+0x78>
    while (node_to_alloc->size < size_to_alloc)
 8009f5e:	68e3      	ldr	r3, [r4, #12]
 8009f60:	6862      	ldr	r2, [r4, #4]
 8009f62:	42ab      	cmp	r3, r5
 8009f64:	d3f8      	bcc.n	8009f58 <mpool_calloc+0x18>
    node_to_alloc->size = size_to_alloc;
 8009f66:	60e5      	str	r5, [r4, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8009f68:	1b5e      	subs	r6, r3, r5
    if (leftover > pool->leaf->header_size)
 8009f6a:	6848      	ldr	r0, [r1, #4]
 8009f6c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8009f6e:	42b0      	cmp	r0, r6
 8009f70:	d32f      	bcc.n	8009fd2 <mpool_calloc+0x92>
        node_to_alloc->size += leftover;
 8009f72:	4617      	mov	r7, r2
 8009f74:	60e3      	str	r3, [r4, #12]
    if (pool->head == node_to_alloc)
 8009f76:	694b      	ldr	r3, [r1, #20]
 8009f78:	42a3      	cmp	r3, r4
        pool->head = new_node;
 8009f7a:	bf08      	it	eq
 8009f7c:	614f      	streq	r7, [r1, #20]
 8009f7e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    if (node->next != NULL)
 8009f82:	b10a      	cbz	r2, 8009f88 <mpool_calloc+0x48>
        node->next->prev = node->prev;
 8009f84:	6093      	str	r3, [r2, #8]
 8009f86:	68a3      	ldr	r3, [r4, #8]
    if (node->prev != NULL)
 8009f88:	b10b      	cbz	r3, 8009f8e <mpool_calloc+0x4e>
        node->prev->next = node->next;
 8009f8a:	6862      	ldr	r2, [r4, #4]
 8009f8c:	605a      	str	r2, [r3, #4]
    node->next = NULL;
 8009f8e:	2300      	movs	r3, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8009f90:	68e0      	ldr	r0, [r4, #12]
    node->prev = NULL;
 8009f92:	e9c4 3301 	strd	r3, r3, [r4, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8009f96:	684a      	ldr	r2, [r1, #4]
 8009f98:	68cd      	ldr	r5, [r1, #12]
 8009f9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f9c:	442a      	add	r2, r5
 8009f9e:	4402      	add	r2, r0
 8009fa0:	60ca      	str	r2, [r1, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 8009fa2:	68e2      	ldr	r2, [r4, #12]
 8009fa4:	b132      	cbz	r2, 8009fb4 <mpool_calloc+0x74>
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6822      	ldr	r2, [r4, #0]
 8009faa:	54d1      	strb	r1, [r2, r3]
 8009fac:	3301      	adds	r3, #1
 8009fae:	68e2      	ldr	r2, [r4, #12]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d8f9      	bhi.n	8009fa8 <mpool_calloc+0x68>
    return node_to_alloc->pool;
 8009fb4:	6820      	ldr	r0, [r4, #0]
}
 8009fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ((pool->msize - pool->usize) > asize)
 8009fb8:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 8009fbc:	6849      	ldr	r1, [r1, #4]
 8009fbe:	1a9b      	subs	r3, r3, r2
 8009fc0:	4283      	cmp	r3, r0
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	bf8c      	ite	hi
 8009fc6:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8009fc8:	4621      	movls	r1, r4
 8009fca:	f000 fb0f 	bl	800a5ec <LEAF_internalErrorCallback>
            return NULL;
 8009fce:	4620      	mov	r0, r4
}
 8009fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8009fd2:	688b      	ldr	r3, [r1, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8009fd4:	4405      	add	r5, r0
                               node_to_alloc->prev,
 8009fd6:	f8d4 c008 	ldr.w	ip, [r4, #8]
        new_node = create_node(&pool->mpool[offset],
 8009fda:	1a36      	subs	r6, r6, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8009fdc:	1ae7      	subs	r7, r4, r3
        offset += pool->leaf->header_size + node_to_alloc->size;
 8009fde:	443d      	add	r5, r7
        new_node = create_node(&pool->mpool[offset],
 8009fe0:	195f      	adds	r7, r3, r5
    node->pool = block_location + header_size;
 8009fe2:	4438      	add	r0, r7
 8009fe4:	5158      	str	r0, [r3, r5]
    node->size = size;
 8009fe6:	60fe      	str	r6, [r7, #12]
    node->prev = prev;
 8009fe8:	e9c7 2c01 	strd	r2, ip, [r7, #4]
 8009fec:	e7c3      	b.n	8009f76 <mpool_calloc+0x36>
 8009fee:	bf00      	nop

08009ff0 <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 8009ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 8009ff4:	699d      	ldr	r5, [r3, #24]
{
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	b083      	sub	sp, #12
    pool->leaf->allocCount++;
 8009ffa:	6868      	ldr	r0, [r5, #4]
 8009ffc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8009ffe:	3301      	adds	r3, #1
 800a000:	6483      	str	r3, [r0, #72]	; 0x48
    if (pool->head == NULL)
 800a002:	696b      	ldr	r3, [r5, #20]
 800a004:	b91b      	cbnz	r3, 800a00e <tMempool_init+0x1e>
 800a006:	e051      	b.n	800a0ac <tMempool_init+0xbc>
        if (node_to_alloc == NULL)
 800a008:	4623      	mov	r3, r4
 800a00a:	2c00      	cmp	r4, #0
 800a00c:	d04e      	beq.n	800a0ac <tMempool_init+0xbc>
    while (node_to_alloc->size < size_to_alloc)
 800a00e:	68d8      	ldr	r0, [r3, #12]
 800a010:	685c      	ldr	r4, [r3, #4]
 800a012:	2817      	cmp	r0, #23
 800a014:	d9f8      	bls.n	800a008 <tMempool_init+0x18>
    node_to_alloc->size = size_to_alloc;
 800a016:	2718      	movs	r7, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800a018:	f1a0 0c18 	sub.w	ip, r0, #24
    node_to_alloc->size = size_to_alloc;
 800a01c:	60df      	str	r7, [r3, #12]
    if (leftover > pool->leaf->header_size)
 800a01e:	686f      	ldr	r7, [r5, #4]
 800a020:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 800a022:	45bc      	cmp	ip, r7
 800a024:	d851      	bhi.n	800a0ca <tMempool_init+0xda>
        node_to_alloc->size += leftover;
 800a026:	46a4      	mov	ip, r4
 800a028:	60d8      	str	r0, [r3, #12]
    if (pool->head == node_to_alloc)
 800a02a:	6968      	ldr	r0, [r5, #20]
 800a02c:	4283      	cmp	r3, r0
        pool->head = new_node;
 800a02e:	bf08      	it	eq
 800a030:	f8c5 c014 	streq.w	ip, [r5, #20]
 800a034:	e9d3 4001 	ldrd	r4, r0, [r3, #4]
    if (node->next != NULL)
 800a038:	b10c      	cbz	r4, 800a03e <tMempool_init+0x4e>
        node->next->prev = node->prev;
 800a03a:	60a0      	str	r0, [r4, #8]
 800a03c:	6898      	ldr	r0, [r3, #8]
    if (node->prev != NULL)
 800a03e:	b108      	cbz	r0, 800a044 <tMempool_init+0x54>
        node->prev->next = node->next;
 800a040:	685c      	ldr	r4, [r3, #4]
 800a042:	6044      	str	r4, [r0, #4]
    node->next = NULL;
 800a044:	2400      	movs	r4, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800a046:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 800a048:	e9c3 4401 	strd	r4, r4, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800a04c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800a050:	9001      	str	r0, [sp, #4]
 800a052:	68ef      	ldr	r7, [r5, #12]
 800a054:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a058:	4407      	add	r7, r0
 800a05a:	4638      	mov	r0, r7
 800a05c:	9f01      	ldr	r7, [sp, #4]
 800a05e:	4407      	add	r7, r0
 800a060:	60ef      	str	r7, [r5, #12]
    if (pool->leaf->clearOnAllocation > 0)
 800a062:	f8dc 0014 	ldr.w	r0, [ip, #20]
 800a066:	42a0      	cmp	r0, r4
 800a068:	dd0a      	ble.n	800a080 <tMempool_init+0x90>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800a06a:	68df      	ldr	r7, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 800a06c:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800a06e:	b147      	cbz	r7, 800a082 <tMempool_init+0x92>
 800a070:	3801      	subs	r0, #1
 800a072:	46a4      	mov	ip, r4
 800a074:	f800 cf01 	strb.w	ip, [r0, #1]!
 800a078:	3401      	adds	r4, #1
 800a07a:	68df      	ldr	r7, [r3, #12]
 800a07c:	42bc      	cmp	r4, r7
 800a07e:	d3f9      	bcc.n	800a074 <tMempool_init+0x84>
 800a080:	6818      	ldr	r0, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800a082:	6030      	str	r0, [r6, #0]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800a084:	2610      	movs	r6, #16
    m->leaf = mm->leaf;
 800a086:	686b      	ldr	r3, [r5, #4]
    pool->usize  = 0;
 800a088:	2400      	movs	r4, #0
    m->leaf = mm->leaf;
 800a08a:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800a08c:	635e      	str	r6, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800a08e:	6843      	ldr	r3, [r0, #4]
    pool->mpool = (char*)memory;
 800a090:	6081      	str	r1, [r0, #8]
    pool->usize  = 0;
 800a092:	e9c0 4203 	strd	r4, r2, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800a096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    node->next = next;
 800a098:	604c      	str	r4, [r1, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800a09a:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 800a09c:	440b      	add	r3, r1
    node->size = size;
 800a09e:	e9c1 4202 	strd	r4, r2, [r1, #8]
    node->pool = block_location + header_size;
 800a0a2:	600b      	str	r3, [r1, #0]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800a0a4:	6141      	str	r1, [r0, #20]
}
 800a0a6:	b003      	add	sp, #12
 800a0a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if ((pool->msize - pool->usize) > asize)
 800a0ac:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
 800a0b0:	6868      	ldr	r0, [r5, #4]
 800a0b2:	1a52      	subs	r2, r2, r1
 800a0b4:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800a0b6:	bf94      	ite	ls
 800a0b8:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800a0ba:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800a0bc:	f000 fa96 	bl	800a5ec <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	6033      	str	r3, [r6, #0]
    m->leaf = mm->leaf;
 800a0c4:	686a      	ldr	r2, [r5, #4]
 800a0c6:	605a      	str	r2, [r3, #4]
 800a0c8:	deff      	udf	#255	; 0xff
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800a0ca:	f8d5 8008 	ldr.w	r8, [r5, #8]
        new_node = create_node(&pool->mpool[offset],
 800a0ce:	ebac 0007 	sub.w	r0, ip, r7
        offset += pool->leaf->header_size + node_to_alloc->size;
 800a0d2:	f107 0e18 	add.w	lr, r7, #24
                               node_to_alloc->prev,
 800a0d6:	f8d3 9008 	ldr.w	r9, [r3, #8]
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800a0da:	eba3 0c08 	sub.w	ip, r3, r8
        offset += pool->leaf->header_size + node_to_alloc->size;
 800a0de:	44e6      	add	lr, ip
        new_node = create_node(&pool->mpool[offset],
 800a0e0:	eb08 0c0e 	add.w	ip, r8, lr
    node->pool = block_location + header_size;
 800a0e4:	4467      	add	r7, ip
 800a0e6:	f848 700e 	str.w	r7, [r8, lr]
    node->size = size;
 800a0ea:	f8cc 000c 	str.w	r0, [ip, #12]
    node->prev = prev;
 800a0ee:	e9cc 4901 	strd	r4, r9, [ip, #4]
 800a0f2:	e79a      	b.n	800a02a <tMempool_init+0x3a>

0800a0f4 <tCycle_init>:
#endif

#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 800a0f4:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 800a0f6:	698c      	ldr	r4, [r1, #24]
{
 800a0f8:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 800a0fa:	2014      	movs	r0, #20
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	f7ff fec3 	bl	8009e88 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0.0f;
 800a102:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 800a104:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 800a106:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 800a108:	6862      	ldr	r2, [r4, #4]
    c->inc      =  0.0f;
 800a10a:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
 800a10c:	6043      	str	r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 800a10e:	6853      	ldr	r3, [r2, #4]
 800a110:	6103      	str	r3, [r0, #16]
}
 800a112:	bd38      	pop	{r3, r4, r5, pc}

0800a114 <tCycle_initToPool>:
{
 800a114:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 800a116:	680c      	ldr	r4, [r1, #0]
{
 800a118:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 800a11a:	2014      	movs	r0, #20
 800a11c:	4621      	mov	r1, r4
 800a11e:	f7ff feb3 	bl	8009e88 <mpool_alloc>
    c->inc      =  0.0f;
 800a122:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 800a124:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 800a126:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 800a128:	6862      	ldr	r2, [r4, #4]
    c->inc      =  0.0f;
 800a12a:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
 800a12c:	6043      	str	r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 800a12e:	6853      	ldr	r3, [r2, #4]
 800a130:	6103      	str	r3, [r0, #16]
}
 800a132:	bd38      	pop	{r3, r4, r5, pc}

0800a134 <tCycle_setFreq>:
    mpool_free((char*)c, c->mempool);
}

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
 800a134:	6803      	ldr	r3, [r0, #0]
    
    if (!isfinite(freq)) return;
    
    c->freq  = freq;

    c->inc = freq * c->invSampleRate;
 800a136:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 800a13a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
 800a13e:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->inc -= (int)c->inc;
 800a142:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a14a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a14e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 800a152:	4770      	bx	lr

0800a154 <tCycle_tick>:

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 800a154:	6803      	ldr	r3, [r0, #0]
    float samp0;
    float samp1;
    
    // Phasor increment
    c->phase += c->inc;
    if (c->phase >= 1.0f) c->phase -= 1.0f;
 800a156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase += c->inc;
 800a15a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a15e:	edd3 6a02 	vldr	s13, [r3, #8]
 800a162:	ee77 7aa6 	vadd.f32	s15, s15, s13
    if (c->phase >= 1.0f) c->phase -= 1.0f;
 800a166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a16e:	bfa8      	it	ge
 800a170:	ee77 7ac7 	vsubge.f32	s15, s15, s14
    if (c->phase < 0.0f) c->phase += 1.0f;
 800a174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    if (c->phase >= 1.0f) c->phase -= 1.0f;
 800a178:	edc3 7a01 	vstr	s15, [r3, #4]
    if (c->phase < 0.0f) c->phase += 1.0f;
 800a17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a180:	d505      	bpl.n	800a18e <tCycle_tick+0x3a>
 800a182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a186:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a18a:	edc3 7a01 	vstr	s15, [r3, #4]

    // Wavetable synthesis

    temp = SINE_TABLE_SIZE * c->phase;
 800a18e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a1cc <tCycle_tick+0x78>
    idx = (int)temp;
    frac = temp - (float)idx;
    samp0 = __leaf_table_sinewave[idx];
 800a192:	4a0f      	ldr	r2, [pc, #60]	; (800a1d0 <tCycle_tick+0x7c>)
    temp = SINE_TABLE_SIZE * c->phase;
 800a194:	ee67 7a87 	vmul.f32	s15, s15, s14
    idx = (int)temp;
 800a198:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a19c:	ee17 3a10 	vmov	r3, s14
    frac = temp - (float)idx;
 800a1a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    if (++idx >= SINE_TABLE_SIZE) idx = 0;
 800a1a4:	1c59      	adds	r1, r3, #1
    samp0 = __leaf_table_sinewave[idx];
 800a1a6:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    frac = temp - (float)idx;
 800a1aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (++idx >= SINE_TABLE_SIZE) idx = 0;
 800a1ae:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    samp0 = __leaf_table_sinewave[idx];
 800a1b2:	ed90 0a00 	vldr	s0, [r0]
    if (++idx >= SINE_TABLE_SIZE) idx = 0;
 800a1b6:	bfa8      	it	ge
 800a1b8:	2100      	movge	r1, #0
    samp1 = __leaf_table_sinewave[idx];
 800a1ba:	eb02 0281 	add.w	r2, r2, r1, lsl #2

    return (samp0 + (samp1 - samp0) * frac);
 800a1be:	ed92 7a00 	vldr	s14, [r2]
 800a1c2:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 800a1c6:	eea7 0a27 	vfma.f32	s0, s14, s15
 800a1ca:	4770      	bx	lr
 800a1cc:	45000000 	.word	0x45000000
 800a1d0:	080266b4 	.word	0x080266b4

0800a1d4 <tTriangle_initToPool>:
{
    tTriangle_initToPool(cy, &leaf->mempool);
}

void    tTriangle_initToPool    (tTriangle* const cy, tMempool* const mp)
{
 800a1d4:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
 800a1d6:	680c      	ldr	r4, [r1, #0]
{
 800a1d8:	4606      	mov	r6, r0
    _tTriangle* c = *cy = (_tTriangle*) mpool_alloc(sizeof(_tTriangle), m);
 800a1da:	201c      	movs	r0, #28
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0.0f;
 800a1dc:	2500      	movs	r5, #0
    _tTriangle* c = *cy = (_tTriangle*) mpool_alloc(sizeof(_tTriangle), m);
 800a1de:	4621      	mov	r1, r4
 800a1e0:	f7ff fe52 	bl	8009e88 <mpool_alloc>
 800a1e4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 800a1e6:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 800a1e8:	6863      	ldr	r3, [r4, #4]
    c->inc      =  0.0f;
 800a1ea:	6085      	str	r5, [r0, #8]
    c->phase    =  0.0f;
 800a1ec:	6045      	str	r5, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 800a1ee:	685b      	ldr	r3, [r3, #4]

void tTriangle_setFreq(tTriangle* const cy, float freq)
{
    _tTriangle* c = *cy;
    
    c->freq = freq;
 800a1f0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800a260 <tTriangle_initToPool+0x8c>
    c->invSampleRate = leaf->invSampleRate;
 800a1f4:	6183      	str	r3, [r0, #24]
    _tTriangle* c = *cy;
 800a1f6:	6834      	ldr	r4, [r6, #0]
    
    c->inc = c->freq * c->invSampleRate;
    c->inc -= (int)c->inc;
    
    // abs for negative frequencies
    c->w = fabsf(c->freq * (TRI_TABLE_SIZE * c->invSampleRate));
 800a1f8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800a264 <tTriangle_initToPool+0x90>
    c->inc = c->freq * c->invSampleRate;
 800a1fc:	edd4 7a06 	vldr	s15, [r4, #24]
    c->freq = freq;
 800a200:	ed84 7a03 	vstr	s14, [r4, #12]
    c->inc = c->freq * c->invSampleRate;
 800a204:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->inc -= (int)c->inc;
 800a208:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    c->w = fabsf(c->freq * (TRI_TABLE_SIZE * c->invSampleRate));
 800a20c:	ee27 0a80 	vmul.f32	s0, s15, s0
    c->inc -= (int)c->inc;
 800a210:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->w = fabsf(c->freq * (TRI_TABLE_SIZE * c->invSampleRate));
 800a214:	eeb0 0ac0 	vabs.f32	s0, s0
    c->inc -= (int)c->inc;
 800a218:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->w = fabsf(c->freq * (TRI_TABLE_SIZE * c->invSampleRate));
 800a21c:	ed84 0a05 	vstr	s0, [r4, #20]
    c->inc -= (int)c->inc;
 800a220:	edc4 7a02 	vstr	s15, [r4, #8]
    
    c->w = log2f_approx(c->w);//+ LEAF_SQRT2 - 1.0f; adding an offset here will shift our table selection upward, reducing aliasing but lower high freq fidelity. +1.0f should remove all aliasing
 800a224:	f7ff fd76 	bl	8009d14 <log2f_approx>
    if (c->w < 0.0f) c->w = 0.0f;
 800a228:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    c->w = log2f_approx(c->w);//+ LEAF_SQRT2 - 1.0f; adding an offset here will shift our table selection upward, reducing aliasing but lower high freq fidelity. +1.0f should remove all aliasing
 800a22c:	ed84 0a05 	vstr	s0, [r4, #20]
    if (c->w < 0.0f) c->w = 0.0f;
 800a230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a234:	d40f      	bmi.n	800a256 <tTriangle_initToPool+0x82>
    c->oct = (int)c->w;
 800a236:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a23a:	ee17 3a90 	vmov	r3, s15
    c->w -= c->oct;
 800a23e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (c->oct >= 10) c->oct = 9;
 800a242:	2b09      	cmp	r3, #9
    c->oct = (int)c->w;
 800a244:	6123      	str	r3, [r4, #16]
    c->w -= c->oct;
 800a246:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a24a:	ed84 0a05 	vstr	s0, [r4, #20]
    if (c->oct >= 10) c->oct = 9;
 800a24e:	dd01      	ble.n	800a254 <tTriangle_initToPool+0x80>
 800a250:	2309      	movs	r3, #9
 800a252:	6123      	str	r3, [r4, #16]
}
 800a254:	bd70      	pop	{r4, r5, r6, pc}
    c->oct = (int)c->w;
 800a256:	2300      	movs	r3, #0
    if (c->w < 0.0f) c->w = 0.0f;
 800a258:	6165      	str	r5, [r4, #20]
    c->oct = (int)c->w;
 800a25a:	6123      	str	r3, [r4, #16]
}
 800a25c:	bd70      	pop	{r4, r5, r6, pc}
 800a25e:	bf00      	nop
 800a260:	435c0000 	.word	0x435c0000
 800a264:	45000000 	.word	0x45000000

0800a268 <tSawtooth_initToPool>:
{
    tSawtooth_initToPool(cy, &leaf->mempool);
}

void    tSawtooth_initToPool    (tSawtooth* const cy, tMempool* const mp)
{
 800a268:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
 800a26a:	680c      	ldr	r4, [r1, #0]
{
 800a26c:	4606      	mov	r6, r0
    _tSawtooth* c = *cy = (_tSawtooth*) mpool_alloc(sizeof(_tSawtooth), m);
 800a26e:	201c      	movs	r0, #28
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      = 0.0f;
 800a270:	2500      	movs	r5, #0
    _tSawtooth* c = *cy = (_tSawtooth*) mpool_alloc(sizeof(_tSawtooth), m);
 800a272:	4621      	mov	r1, r4
 800a274:	f7ff fe08 	bl	8009e88 <mpool_alloc>
 800a278:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 800a27a:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 800a27c:	6863      	ldr	r3, [r4, #4]
    c->inc      = 0.0f;
 800a27e:	6085      	str	r5, [r0, #8]
    c->phase    = 0.0f;
 800a280:	6045      	str	r5, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 800a282:	685b      	ldr	r3, [r3, #4]

void    tSawtooth_setFreq(tSawtooth* const cy, float freq)
{
    _tSawtooth* c = *cy;
    
    c->freq  = freq;
 800a284:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800a2f4 <tSawtooth_initToPool+0x8c>
    c->invSampleRate = leaf->invSampleRate;
 800a288:	6183      	str	r3, [r0, #24]
    _tSawtooth* c = *cy;
 800a28a:	6834      	ldr	r4, [r6, #0]
    
    c->inc = c->freq * c->invSampleRate;
    c->inc -= (int)c->inc;
    
    // abs for negative frequencies
    c->w = fabsf(c->freq * (SAW_TABLE_SIZE * c->invSampleRate));
 800a28c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800a2f8 <tSawtooth_initToPool+0x90>
    c->inc = c->freq * c->invSampleRate;
 800a290:	edd4 7a06 	vldr	s15, [r4, #24]
    c->freq  = freq;
 800a294:	ed84 7a03 	vstr	s14, [r4, #12]
    c->inc = c->freq * c->invSampleRate;
 800a298:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->inc -= (int)c->inc;
 800a29c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    c->w = fabsf(c->freq * (SAW_TABLE_SIZE * c->invSampleRate));
 800a2a0:	ee27 0a80 	vmul.f32	s0, s15, s0
    c->inc -= (int)c->inc;
 800a2a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->w = fabsf(c->freq * (SAW_TABLE_SIZE * c->invSampleRate));
 800a2a8:	eeb0 0ac0 	vabs.f32	s0, s0
    c->inc -= (int)c->inc;
 800a2ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->w = fabsf(c->freq * (SAW_TABLE_SIZE * c->invSampleRate));
 800a2b0:	ed84 0a05 	vstr	s0, [r4, #20]
    c->inc -= (int)c->inc;
 800a2b4:	edc4 7a02 	vstr	s15, [r4, #8]
    
    c->w = log2f_approx(c->w);//+ LEAF_SQRT2 - 1.0f; adding an offset here will shift our table selection upward, reducing aliasing but lower high freq fidelity. +1.0f should remove all aliasing
 800a2b8:	f7ff fd2c 	bl	8009d14 <log2f_approx>
    if (c->w < 0.0f) c->w = 0.0f; // If c->w is < 0.0f, then freq is less than our base freq
 800a2bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    c->w = log2f_approx(c->w);//+ LEAF_SQRT2 - 1.0f; adding an offset here will shift our table selection upward, reducing aliasing but lower high freq fidelity. +1.0f should remove all aliasing
 800a2c0:	ed84 0a05 	vstr	s0, [r4, #20]
    if (c->w < 0.0f) c->w = 0.0f; // If c->w is < 0.0f, then freq is less than our base freq
 800a2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c8:	d40f      	bmi.n	800a2ea <tSawtooth_initToPool+0x82>
    c->oct = (int)c->w;
 800a2ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a2ce:	ee17 3a90 	vmov	r3, s15
    c->w -= c->oct;
 800a2d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (c->oct >= 10) c->oct = 9;
 800a2d6:	2b09      	cmp	r3, #9
    c->oct = (int)c->w;
 800a2d8:	6123      	str	r3, [r4, #16]
    c->w -= c->oct;
 800a2da:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a2de:	ed84 0a05 	vstr	s0, [r4, #20]
    if (c->oct >= 10) c->oct = 9;
 800a2e2:	dd01      	ble.n	800a2e8 <tSawtooth_initToPool+0x80>
 800a2e4:	2309      	movs	r3, #9
 800a2e6:	6123      	str	r3, [r4, #16]
}
 800a2e8:	bd70      	pop	{r4, r5, r6, pc}
    c->oct = (int)c->w;
 800a2ea:	2300      	movs	r3, #0
    if (c->w < 0.0f) c->w = 0.0f; // If c->w is < 0.0f, then freq is less than our base freq
 800a2ec:	6165      	str	r5, [r4, #20]
    c->oct = (int)c->w;
 800a2ee:	6123      	str	r3, [r4, #16]
}
 800a2f0:	bd70      	pop	{r4, r5, r6, pc}
 800a2f2:	bf00      	nop
 800a2f4:	435c0000 	.word	0x435c0000
 800a2f8:	45000000 	.word	0x45000000

0800a2fc <tSawtooth_setFreq>:
{
 800a2fc:	b510      	push	{r4, lr}
    _tSawtooth* c = *cy;
 800a2fe:	6804      	ldr	r4, [r0, #0]
    c->w = fabsf(c->freq * (SAW_TABLE_SIZE * c->invSampleRate));
 800a300:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a368 <tSawtooth_setFreq+0x6c>
    c->inc = c->freq * c->invSampleRate;
 800a304:	edd4 7a06 	vldr	s15, [r4, #24]
    c->freq  = freq;
 800a308:	ed84 0a03 	vstr	s0, [r4, #12]
    c->inc = c->freq * c->invSampleRate;
 800a30c:	ee60 7a27 	vmul.f32	s15, s0, s15
    c->inc -= (int)c->inc;
 800a310:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    c->w = fabsf(c->freq * (SAW_TABLE_SIZE * c->invSampleRate));
 800a314:	ee27 0a87 	vmul.f32	s0, s15, s14
    c->inc -= (int)c->inc;
 800a318:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
    c->w = fabsf(c->freq * (SAW_TABLE_SIZE * c->invSampleRate));
 800a31c:	eeb0 0ac0 	vabs.f32	s0, s0
    c->inc -= (int)c->inc;
 800a320:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->w = fabsf(c->freq * (SAW_TABLE_SIZE * c->invSampleRate));
 800a324:	ed84 0a05 	vstr	s0, [r4, #20]
    c->inc -= (int)c->inc;
 800a328:	edc4 7a02 	vstr	s15, [r4, #8]
    c->w = log2f_approx(c->w);//+ LEAF_SQRT2 - 1.0f; adding an offset here will shift our table selection upward, reducing aliasing but lower high freq fidelity. +1.0f should remove all aliasing
 800a32c:	f7ff fcf2 	bl	8009d14 <log2f_approx>
    if (c->w < 0.0f) c->w = 0.0f; // If c->w is < 0.0f, then freq is less than our base freq
 800a330:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    c->w = log2f_approx(c->w);//+ LEAF_SQRT2 - 1.0f; adding an offset here will shift our table selection upward, reducing aliasing but lower high freq fidelity. +1.0f should remove all aliasing
 800a334:	ed84 0a05 	vstr	s0, [r4, #20]
    if (c->w < 0.0f) c->w = 0.0f; // If c->w is < 0.0f, then freq is less than our base freq
 800a338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a33c:	d40f      	bmi.n	800a35e <tSawtooth_setFreq+0x62>
    c->oct = (int)c->w;
 800a33e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a342:	ee17 3a90 	vmov	r3, s15
    c->w -= c->oct;
 800a346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (c->oct >= 10) c->oct = 9;
 800a34a:	2b09      	cmp	r3, #9
    c->oct = (int)c->w;
 800a34c:	6123      	str	r3, [r4, #16]
    c->w -= c->oct;
 800a34e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a352:	ed84 0a05 	vstr	s0, [r4, #20]
    if (c->oct >= 10) c->oct = 9;
 800a356:	dd01      	ble.n	800a35c <tSawtooth_setFreq+0x60>
 800a358:	2309      	movs	r3, #9
 800a35a:	6123      	str	r3, [r4, #16]
}
 800a35c:	bd10      	pop	{r4, pc}
 800a35e:	2300      	movs	r3, #0
    c->oct = (int)c->w;
 800a360:	2200      	movs	r2, #0
    if (c->w < 0.0f) c->w = 0.0f; // If c->w is < 0.0f, then freq is less than our base freq
 800a362:	6163      	str	r3, [r4, #20]
    c->oct = (int)c->w;
 800a364:	6122      	str	r2, [r4, #16]
}
 800a366:	bd10      	pop	{r4, pc}
 800a368:	45000000 	.word	0x45000000

0800a36c <tSawtooth_tick>:

float   tSawtooth_tick(tSawtooth* const cy)
{
 800a36c:	b430      	push	{r4, r5}
    _tSawtooth* c = *cy;
 800a36e:	6802      	ldr	r2, [r0, #0]
    float samp0;
    float samp1;
    
    // Phasor increment
    c->phase += c->inc;
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 800a370:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    c->phase += c->inc;
 800a374:	ed92 7a01 	vldr	s14, [r2, #4]
 800a378:	edd2 7a02 	vldr	s15, [r2, #8]
 800a37c:	ee37 7a27 	vadd.f32	s14, s14, s15
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 800a380:	eeb4 7ae6 	vcmpe.f32	s14, s13
    c->phase += c->inc;
 800a384:	ed82 7a01 	vstr	s14, [r2, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 800a388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a38c:	db5a      	blt.n	800a444 <tSawtooth_tick+0xd8>
 800a38e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800a392:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800a396:	ee77 7a66 	vsub.f32	s15, s14, s13
 800a39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a39e:	eeb0 7a67 	vmov.f32	s14, s15
 800a3a2:	daf6      	bge.n	800a392 <tSawtooth_tick+0x26>
    while (c->phase < 0.0f) c->phase += 1.0f;
 800a3a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a3a8:	edc2 7a01 	vstr	s15, [r2, #4]
 800a3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b0:	d54f      	bpl.n	800a452 <tSawtooth_tick+0xe6>
 800a3b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a3b6:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800a3ba:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a3be:	ee37 7a86 	vadd.f32	s14, s15, s12
 800a3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c6:	eef0 7a47 	vmov.f32	s15, s14
 800a3ca:	d4f6      	bmi.n	800a3ba <tSawtooth_tick+0x4e>
 800a3cc:	ed82 7a01 	vstr	s14, [r2, #4]
    
    // Wavetable synthesis
    temp = SAW_TABLE_SIZE * c->phase;
 800a3d0:	eddf 7a21 	vldr	s15, [pc, #132]	; 800a458 <tSawtooth_tick+0xec>
    
    idx = (int)temp;
    frac = temp - (float)idx;
    samp0 = __leaf_table_sawtooth[c->oct][idx];
 800a3d4:	6913      	ldr	r3, [r2, #16]
    temp = SAW_TABLE_SIZE * c->phase;
 800a3d6:	ee27 7a27 	vmul.f32	s14, s14, s15
    if (++idx >= SAW_TABLE_SIZE) idx = 0;
    samp1 = __leaf_table_sawtooth[c->oct+1][idx];
    
    float oct1 = (samp0 + (samp1 - samp0) * frac);
    
    return oct0 + (oct1 - oct0) * c->w;
 800a3da:	edd2 5a05 	vldr	s11, [r2, #20]
    samp0 = __leaf_table_sawtooth[c->oct+1][idx];
 800a3de:	1c58      	adds	r0, r3, #1
    samp0 = __leaf_table_sawtooth[c->oct][idx];
 800a3e0:	02db      	lsls	r3, r3, #11
 800a3e2:	491e      	ldr	r1, [pc, #120]	; (800a45c <tSawtooth_tick+0xf0>)
    idx = (int)temp;
 800a3e4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    samp0 = __leaf_table_sawtooth[c->oct+1][idx];
 800a3e8:	02c0      	lsls	r0, r0, #11
    idx = (int)temp;
 800a3ea:	ee17 2a90 	vmov	r2, s15
    frac = temp - (float)idx;
 800a3ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (++idx >= SAW_TABLE_SIZE) idx = 0;
 800a3f2:	1c54      	adds	r4, r2, #1
    samp0 = __leaf_table_sawtooth[c->oct][idx];
 800a3f4:	189d      	adds	r5, r3, r2
    samp0 = __leaf_table_sawtooth[c->oct+1][idx];
 800a3f6:	4402      	add	r2, r0
    frac = temp - (float)idx;
 800a3f8:	ee37 7a67 	vsub.f32	s14, s14, s15
    if (++idx >= SAW_TABLE_SIZE) idx = 0;
 800a3fc:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    samp0 = __leaf_table_sawtooth[c->oct][idx];
 800a400:	eb01 0585 	add.w	r5, r1, r5, lsl #2
    samp0 = __leaf_table_sawtooth[c->oct+1][idx];
 800a404:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    if (++idx >= SAW_TABLE_SIZE) idx = 0;
 800a408:	bfa8      	it	ge
 800a40a:	2400      	movge	r4, #0
    samp0 = __leaf_table_sawtooth[c->oct][idx];
 800a40c:	ed95 0a00 	vldr	s0, [r5]
    samp0 = __leaf_table_sawtooth[c->oct+1][idx];
 800a410:	edd2 7a00 	vldr	s15, [r2]
    samp1 = __leaf_table_sawtooth[c->oct][idx];
 800a414:	4423      	add	r3, r4
    samp1 = __leaf_table_sawtooth[c->oct+1][idx];
 800a416:	4420      	add	r0, r4
    samp1 = __leaf_table_sawtooth[c->oct][idx];
 800a418:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    samp1 = __leaf_table_sawtooth[c->oct+1][idx];
 800a41c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    float oct0 = (samp0 + (samp1 - samp0) * frac);
 800a420:	ed93 6a00 	vldr	s12, [r3]
    float oct1 = (samp0 + (samp1 - samp0) * frac);
 800a424:	edd1 6a00 	vldr	s13, [r1]
    float oct0 = (samp0 + (samp1 - samp0) * frac);
 800a428:	ee36 6a40 	vsub.f32	s12, s12, s0
    float oct1 = (samp0 + (samp1 - samp0) * frac);
 800a42c:	ee76 6ae7 	vsub.f32	s13, s13, s15
    float oct0 = (samp0 + (samp1 - samp0) * frac);
 800a430:	eea6 0a07 	vfma.f32	s0, s12, s14
    float oct1 = (samp0 + (samp1 - samp0) * frac);
 800a434:	eee6 7a87 	vfma.f32	s15, s13, s14
}
 800a438:	bc30      	pop	{r4, r5}
    return oct0 + (oct1 - oct0) * c->w;
 800a43a:	ee77 7ac0 	vsub.f32	s15, s15, s0
}
 800a43e:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800a442:	4770      	bx	lr
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 800a444:	eef0 7a47 	vmov.f32	s15, s14
    while (c->phase < 0.0f) c->phase += 1.0f;
 800a448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a450:	d4af      	bmi.n	800a3b2 <tSawtooth_tick+0x46>
 800a452:	eeb0 7a67 	vmov.f32	s14, s15
 800a456:	e7bb      	b.n	800a3d0 <tSawtooth_tick+0x64>
 800a458:	45000000 	.word	0x45000000
 800a45c:	080106b4 	.word	0x080106b4

0800a460 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
 800a460:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
 800a462:	6994      	ldr	r4, [r2, #24]
{
 800a464:	4606      	mov	r6, r0
 800a466:	460d      	mov	r5, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 800a468:	2018      	movs	r0, #24
 800a46a:	4621      	mov	r1, r4
 800a46c:	f7ff fd0c 	bl	8009e88 <mpool_alloc>
 800a470:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 800a472:	6004      	str	r4, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 800a474:	6863      	ldr	r3, [r4, #4]
    
    n->type = type;
 800a476:	7105      	strb	r5, [r0, #4]
    n->rand = leaf->random;
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	6143      	str	r3, [r0, #20]
}
 800a47c:	bd70      	pop	{r4, r5, r6, pc}
 800a47e:	bf00      	nop

0800a480 <tSimpleLivingString2_initToPool>:
}

void    tSimpleLivingString2_initToPool  (tSimpleLivingString2* const pl, float freq, float brightness,
                                         float decay, float targetLev, float levSmoothFactor,
                                         float levStrength, int levMode, tMempool* const mp)
{
 800a480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a484:	ed2d 8b06 	vpush	{d8-d10}
    _tMempool* m = *mp;
 800a488:	6817      	ldr	r7, [r2, #0]
{
 800a48a:	4606      	mov	r6, r0
 800a48c:	4688      	mov	r8, r1
    _tSimpleLivingString2* p = *pl = (_tSimpleLivingString2*) mpool_alloc(sizeof(_tSimpleLivingString2), m);
 800a48e:	2034      	movs	r0, #52	; 0x34
 800a490:	4639      	mov	r1, r7
{
 800a492:	eef0 9a42 	vmov.f32	s19, s4
 800a496:	eeb0 aa62 	vmov.f32	s20, s5
 800a49a:	4615      	mov	r5, r2
 800a49c:	eef0 aa41 	vmov.f32	s21, s2
 800a4a0:	eeb0 9a61 	vmov.f32	s18, s3
 800a4a4:	eeb0 8a40 	vmov.f32	s16, s0
 800a4a8:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString2* p = *pl = (_tSimpleLivingString2*) mpool_alloc(sizeof(_tSimpleLivingString2), m);
 800a4ac:	f7ff fcec 	bl	8009e88 <mpool_alloc>
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	6030      	str	r0, [r6, #0]
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;

    p->sampleRate = leaf->sampleRate;
    p->curr=0.0f;
 800a4b4:	2300      	movs	r3, #0
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 800a4b6:	eddf 0a35 	vldr	s1, [pc, #212]	; 800a58c <tSimpleLivingString2_initToPool+0x10c>
    p->mempool = m;
 800a4ba:	6027      	str	r7, [r4, #0]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 800a4bc:	4629      	mov	r1, r5
    p->sampleRate = leaf->sampleRate;
 800a4be:	687a      	ldr	r2, [r7, #4]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 800a4c0:	302c      	adds	r0, #44	; 0x2c
    tSimpleLivingString2_setFreq(pl, freq);
    tHermiteDelay_initToPool(&p->delayLine,p->waveLengthInSamples, 2400, mp);
 800a4c2:	f104 091c 	add.w	r9, r4, #28
    p->sampleRate = leaf->sampleRate;
 800a4c6:	ed92 0a00 	vldr	s0, [r2]
    p->curr=0.0f;
 800a4ca:	61a3      	str	r3, [r4, #24]
    p->sampleRate = leaf->sampleRate;
 800a4cc:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 800a4d0:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800a4d4:	f7ff f8f4 	bl	80096c0 <tExpSmooth_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString2_setFreq(tSimpleLivingString2* const pl, float freq)
{
    _tSimpleLivingString2* p = *pl;
 800a4d8:	6833      	ldr	r3, [r6, #0]

    if (freq<20) freq=20;
    else if (freq>10000) freq=10000;
    p->waveLengthInSamples = p->sampleRate/freq -1;
 800a4da:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800a590 <tSimpleLivingString2_initToPool+0x110>
 800a4de:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 800a4e2:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    p->waveLengthInSamples = p->sampleRate/freq -1;
 800a4e6:	fec8 7a67 	vminnm.f32	s15, s16, s15
 800a4ea:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 800a4ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4f2:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
 800a4f6:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800a4fa:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a4fe:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 800a502:	f7ff f909 	bl	8009718 <tExpSmooth_setDest>
    tHermiteDelay_initToPool(&p->delayLine,p->waveLengthInSamples, 2400, mp);
 800a506:	462a      	mov	r2, r5
 800a508:	ed94 0a02 	vldr	s0, [r4, #8]
 800a50c:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800a510:	4648      	mov	r0, r9
 800a512:	f7fe fddd 	bl	80090d0 <tHermiteDelay_initToPool>
    tHermiteDelay_clear(&p->delayLine);
 800a516:	4648      	mov	r0, r9
 800a518:	f7fe fe50 	bl	80091bc <tHermiteDelay_clear>
    tTwoZero_initToPool(&p->bridgeFilter, mp);
 800a51c:	4629      	mov	r1, r5
 800a51e:	f104 0020 	add.w	r0, r4, #32
 800a522:	f7ff f90d 	bl	8009740 <tTwoZero_initToPool>
}

void     tSimpleLivingString2_setBrightness(tSimpleLivingString2* const pl, float brightness)
{
    _tSimpleLivingString2* p = *pl;
    float h0=(1.0 + brightness) * 0.5f;
 800a526:	eeb7 6ae8 	vcvt.f64.f32	d6, s17
    float h1=(1.0 - brightness) * 0.25f;
 800a52a:	eeb7 1b00 	vmov.f64	d1, #112	; 0x3f800000  1.0
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 800a52e:	6830      	ldr	r0, [r6, #0]
    float h0=(1.0 + brightness) * 0.5f;
 800a530:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    float h1=(1.0 - brightness) * 0.25f;
 800a534:	eeb5 5b00 	vmov.f64	d5, #80	; 0x3e800000  0.250
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 800a538:	3020      	adds	r0, #32
    float h1=(1.0 - brightness) * 0.25f;
 800a53a:	ee31 1b46 	vsub.f64	d1, d1, d6
    float h0=(1.0 + brightness) * 0.5f;
 800a53e:	ee06 7b07 	vmla.f64	d7, d6, d7
    float h1=(1.0 - brightness) * 0.25f;
 800a542:	ee21 1b05 	vmul.f64	d1, d1, d5
 800a546:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 800a54a:	eef7 0bc7 	vcvt.f32.f64	s1, d7
 800a54e:	eeb0 0a41 	vmov.f32	s0, s2
 800a552:	f7ff f909 	bl	8009768 <tTwoZero_setCoefficients>
    tHighpass_initToPool(&p->DCblocker,13, mp);
 800a556:	4629      	mov	r1, r5
 800a558:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a55c:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 800a560:	f7ff f9b8 	bl	80098d4 <tHighpass_initToPool>
    p->decay=decay;
 800a564:	edc4 aa04 	vstr	s21, [r4, #16]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 800a568:	eeb0 1a4a 	vmov.f32	s2, s20
 800a56c:	462a      	mov	r2, r5
 800a56e:	eef0 0a69 	vmov.f32	s1, s19
 800a572:	4641      	mov	r1, r8
 800a574:	eeb0 0a49 	vmov.f32	s0, s18
 800a578:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a57c:	f7fe fe2c 	bl	80091d8 <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
 800a580:	f8c4 8014 	str.w	r8, [r4, #20]
}
 800a584:	ecbd 8b06 	vpop	{d8-d10}
 800a588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58c:	3c23d70a 	.word	0x3c23d70a
 800a590:	461c4000 	.word	0x461c4000

0800a594 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop

0800a598 <LEAF_init>:
{
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4604      	mov	r4, r0
 800a59c:	461d      	mov	r5, r3
 800a59e:	ed2d 8b02 	vpush	{d8}
    leaf->_internal_mempool.leaf = leaf;
 800a5a2:	6220      	str	r0, [r4, #32]
{
 800a5a4:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 800a5a8:	f7ff fc58 	bl	8009e5c <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 800a5ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800a5b0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800a5e4 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 800a5b4:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800a5b6:	490c      	ldr	r1, [pc, #48]	; (800a5e8 <LEAF_init+0x50>)
    leaf->invSampleRate = 1.0f/sr;
 800a5b8:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 800a5bc:	6125      	str	r5, [r4, #16]
    leaf->sampleRate = sr;
 800a5be:	ed84 8a00 	vstr	s16, [r4]
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800a5c2:	63a1      	str	r1, [r4, #56]	; 0x38
    leaf->clearOnAllocation = 0;
 800a5c4:	6162      	str	r2, [r4, #20]
    leaf->freeCount = 0;
 800a5c6:	64e2      	str	r2, [r4, #76]	; 0x4c
        leaf->errorState[i] = 0;
 800a5c8:	e9c4 220f 	strd	r2, r2, [r4, #60]	; 0x3c
    leaf->allocCount = 0;
 800a5cc:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800a5d0:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 800a5d4:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800a5d8:	edc4 7a03 	vstr	s15, [r4, #12]
}
 800a5dc:	ecbd 8b02 	vpop	{d8}
 800a5e0:	bd38      	pop	{r3, r4, r5, pc}
 800a5e2:	bf00      	nop
 800a5e4:	40c90fdb 	.word	0x40c90fdb
 800a5e8:	0800a595 	.word	0x0800a595

0800a5ec <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800a5ec:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 800a5ee:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800a5f2:	2401      	movs	r4, #1
 800a5f4:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 800a5f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 800a5fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a5fc:	4718      	bx	r3
 800a5fe:	bf00      	nop

0800a600 <__errno>:
 800a600:	4b01      	ldr	r3, [pc, #4]	; (800a608 <__errno+0x8>)
 800a602:	6818      	ldr	r0, [r3, #0]
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	200003ac 	.word	0x200003ac

0800a60c <__libc_init_array>:
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	4e0d      	ldr	r6, [pc, #52]	; (800a644 <__libc_init_array+0x38>)
 800a610:	4c0d      	ldr	r4, [pc, #52]	; (800a648 <__libc_init_array+0x3c>)
 800a612:	1ba4      	subs	r4, r4, r6
 800a614:	10a4      	asrs	r4, r4, #2
 800a616:	2500      	movs	r5, #0
 800a618:	42a5      	cmp	r5, r4
 800a61a:	d109      	bne.n	800a630 <__libc_init_array+0x24>
 800a61c:	4e0b      	ldr	r6, [pc, #44]	; (800a64c <__libc_init_array+0x40>)
 800a61e:	4c0c      	ldr	r4, [pc, #48]	; (800a650 <__libc_init_array+0x44>)
 800a620:	f002 f826 	bl	800c670 <_init>
 800a624:	1ba4      	subs	r4, r4, r6
 800a626:	10a4      	asrs	r4, r4, #2
 800a628:	2500      	movs	r5, #0
 800a62a:	42a5      	cmp	r5, r4
 800a62c:	d105      	bne.n	800a63a <__libc_init_array+0x2e>
 800a62e:	bd70      	pop	{r4, r5, r6, pc}
 800a630:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a634:	4798      	blx	r3
 800a636:	3501      	adds	r5, #1
 800a638:	e7ee      	b.n	800a618 <__libc_init_array+0xc>
 800a63a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a63e:	4798      	blx	r3
 800a640:	3501      	adds	r5, #1
 800a642:	e7f2      	b.n	800a62a <__libc_init_array+0x1e>
 800a644:	08028d48 	.word	0x08028d48
 800a648:	08028d48 	.word	0x08028d48
 800a64c:	08028d48 	.word	0x08028d48
 800a650:	08028d4c 	.word	0x08028d4c

0800a654 <memset>:
 800a654:	4402      	add	r2, r0
 800a656:	4603      	mov	r3, r0
 800a658:	4293      	cmp	r3, r2
 800a65a:	d100      	bne.n	800a65e <memset+0xa>
 800a65c:	4770      	bx	lr
 800a65e:	f803 1b01 	strb.w	r1, [r3], #1
 800a662:	e7f9      	b.n	800a658 <memset+0x4>

0800a664 <frexpf>:
 800a664:	ee10 1a10 	vmov	r1, s0
 800a668:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a66c:	b510      	push	{r4, lr}
 800a66e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a672:	f04f 0400 	mov.w	r4, #0
 800a676:	ee10 2a10 	vmov	r2, s0
 800a67a:	6004      	str	r4, [r0, #0]
 800a67c:	da17      	bge.n	800a6ae <frexpf+0x4a>
 800a67e:	b1b3      	cbz	r3, 800a6ae <frexpf+0x4a>
 800a680:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a684:	da0a      	bge.n	800a69c <frexpf+0x38>
 800a686:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a6b4 <frexpf+0x50>
 800a68a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a68e:	f06f 0118 	mvn.w	r1, #24
 800a692:	ee17 2a90 	vmov	r2, s15
 800a696:	6001      	str	r1, [r0, #0]
 800a698:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a69c:	6801      	ldr	r1, [r0, #0]
 800a69e:	15db      	asrs	r3, r3, #23
 800a6a0:	3b7e      	subs	r3, #126	; 0x7e
 800a6a2:	440b      	add	r3, r1
 800a6a4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a6a8:	6003      	str	r3, [r0, #0]
 800a6aa:	f042 517c 	orr.w	r1, r2, #1056964608	; 0x3f000000
 800a6ae:	ee00 1a10 	vmov	s0, r1
 800a6b2:	bd10      	pop	{r4, pc}
 800a6b4:	4c000000 	.word	0x4c000000

0800a6b8 <expf>:
 800a6b8:	ee10 2a10 	vmov	r2, s0
 800a6bc:	f240 412a 	movw	r1, #1066	; 0x42a
 800a6c0:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800a6c4:	428b      	cmp	r3, r1
 800a6c6:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 800a6ca:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800a6ce:	d92e      	bls.n	800a72e <expf+0x76>
 800a6d0:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800a6d4:	d061      	beq.n	800a79a <expf+0xe2>
 800a6d6:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800a6da:	d304      	bcc.n	800a6e6 <expf+0x2e>
 800a6dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a6e0:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800a6e4:	4770      	bx	lr
 800a6e6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800a7a0 <expf+0xe8>
 800a6ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f2:	dd04      	ble.n	800a6fe <expf+0x46>
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800a6fa:	f001 bc7d 	b.w	800bff8 <__math_oflowf>
 800a6fe:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a7a4 <expf+0xec>
 800a702:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70a:	d504      	bpl.n	800a716 <expf+0x5e>
 800a70c:	2000      	movs	r0, #0
 800a70e:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800a712:	f001 bc65 	b.w	800bfe0 <__math_uflowf>
 800a716:	eddf 7a24 	vldr	s15, [pc, #144]	; 800a7a8 <expf+0xf0>
 800a71a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a722:	d504      	bpl.n	800a72e <expf+0x76>
 800a724:	2000      	movs	r0, #0
 800a726:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800a72a:	f001 bc5f 	b.w	800bfec <__math_may_uflowf>
 800a72e:	491f      	ldr	r1, [pc, #124]	; (800a7ac <expf+0xf4>)
 800a730:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a734:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 800a738:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 800a73c:	eeb0 4b47 	vmov.f64	d4, d7
 800a740:	eea5 4b06 	vfma.f64	d4, d5, d6
 800a744:	ec55 4b14 	vmov	r4, r5, d4
 800a748:	ee34 7b47 	vsub.f64	d7, d4, d7
 800a74c:	f004 021f 	and.w	r2, r4, #31
 800a750:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800a754:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a758:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 800a75c:	e9d2 4500 	ldrd	r4, r5, [r2]
 800a760:	eea6 0b07 	vfma.f64	d0, d6, d7
 800a764:	ee14 0a10 	vmov	r0, s8
 800a768:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 800a76c:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 800a770:	f04f 0b00 	mov.w	fp, #0
 800a774:	eb1b 0204 	adds.w	r2, fp, r4
 800a778:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 800a77c:	eb4c 0305 	adc.w	r3, ip, r5
 800a780:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a784:	ee27 7b07 	vmul.f64	d7, d7, d7
 800a788:	eea6 0b07 	vfma.f64	d0, d6, d7
 800a78c:	ec43 2b17 	vmov	d7, r2, r3
 800a790:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a794:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a798:	e7a2      	b.n	800a6e0 <expf+0x28>
 800a79a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800a7b0 <expf+0xf8>
 800a79e:	e79f      	b.n	800a6e0 <expf+0x28>
 800a7a0:	42b17217 	.word	0x42b17217
 800a7a4:	c2cff1b4 	.word	0xc2cff1b4
 800a7a8:	c2ce8ecf 	.word	0xc2ce8ecf
 800a7ac:	080286b8 	.word	0x080286b8
 800a7b0:	00000000 	.word	0x00000000

0800a7b4 <fabsf>:
 800a7b4:	ee10 3a10 	vmov	r3, s0
 800a7b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7bc:	ee00 3a10 	vmov	s0, r3
 800a7c0:	4770      	bx	lr

0800a7c2 <checkint>:
 800a7c2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a7c6:	2b7e      	cmp	r3, #126	; 0x7e
 800a7c8:	dd10      	ble.n	800a7ec <checkint+0x2a>
 800a7ca:	2b96      	cmp	r3, #150	; 0x96
 800a7cc:	dc0c      	bgt.n	800a7e8 <checkint+0x26>
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a7d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d8:	1e5a      	subs	r2, r3, #1
 800a7da:	4202      	tst	r2, r0
 800a7dc:	d106      	bne.n	800a7ec <checkint+0x2a>
 800a7de:	4203      	tst	r3, r0
 800a7e0:	bf0c      	ite	eq
 800a7e2:	2002      	moveq	r0, #2
 800a7e4:	2001      	movne	r0, #1
 800a7e6:	4770      	bx	lr
 800a7e8:	2002      	movs	r0, #2
 800a7ea:	4770      	bx	lr
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	4770      	bx	lr

0800a7f0 <powf>:
 800a7f0:	ee10 1a10 	vmov	r1, s0
 800a7f4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a7f8:	ee10 4a90 	vmov	r4, s1
 800a7fc:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800a800:	0062      	lsls	r2, r4, #1
 800a802:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a806:	eef0 4a60 	vmov.f32	s9, s1
 800a80a:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800a80e:	4b92      	ldr	r3, [pc, #584]	; (800aa58 <powf+0x268>)
 800a810:	d255      	bcs.n	800a8be <powf+0xce>
 800a812:	4298      	cmp	r0, r3
 800a814:	d855      	bhi.n	800a8c2 <powf+0xd2>
 800a816:	2000      	movs	r0, #0
 800a818:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800a81c:	4a8f      	ldr	r2, [pc, #572]	; (800aa5c <powf+0x26c>)
 800a81e:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 800a822:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 800a826:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800a82a:	0ddb      	lsrs	r3, r3, #23
 800a82c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800a830:	05db      	lsls	r3, r3, #23
 800a832:	ed94 6b00 	vldr	d6, [r4]
 800a836:	1ac9      	subs	r1, r1, r3
 800a838:	ee07 1a90 	vmov	s15, r1
 800a83c:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 800a840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a844:	eea6 2b07 	vfma.f64	d2, d6, d7
 800a848:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 800a84c:	ee22 6b02 	vmul.f64	d6, d2, d2
 800a850:	eea2 7b05 	vfma.f64	d7, d2, d5
 800a854:	15db      	asrs	r3, r3, #23
 800a856:	ed94 5b02 	vldr	d5, [r4, #8]
 800a85a:	ee00 3a10 	vmov	s0, r3
 800a85e:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800a862:	ee30 0b05 	vadd.f64	d0, d0, d5
 800a866:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 800a86a:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 800a86e:	eea2 0b05 	vfma.f64	d0, d2, d5
 800a872:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 800a876:	eea2 5b03 	vfma.f64	d5, d2, d3
 800a87a:	eea6 0b05 	vfma.f64	d0, d6, d5
 800a87e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800a882:	eea7 0b06 	vfma.f64	d0, d7, d6
 800a886:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 800a88a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a88e:	ee10 3a90 	vmov	r3, s1
 800a892:	2500      	movs	r5, #0
 800a894:	0bda      	lsrs	r2, r3, #15
 800a896:	2300      	movs	r3, #0
 800a898:	b292      	uxth	r2, r2
 800a89a:	f248 04be 	movw	r4, #32958	; 0x80be
 800a89e:	429d      	cmp	r5, r3
 800a8a0:	bf08      	it	eq
 800a8a2:	4294      	cmpeq	r4, r2
 800a8a4:	f080 8094 	bcs.w	800a9d0 <powf+0x1e0>
 800a8a8:	ed9f 7b65 	vldr	d7, [pc, #404]	; 800aa40 <powf+0x250>
 800a8ac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b4:	dd76      	ble.n	800a9a4 <powf+0x1b4>
 800a8b6:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800a8ba:	f001 bb9d 	b.w	800bff8 <__math_oflowf>
 800a8be:	4298      	cmp	r0, r3
 800a8c0:	d92d      	bls.n	800a91e <powf+0x12e>
 800a8c2:	b952      	cbnz	r2, 800a8da <powf+0xea>
 800a8c4:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800a8c8:	005b      	lsls	r3, r3, #1
 800a8ca:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800a8ce:	f240 80ae 	bls.w	800aa2e <powf+0x23e>
 800a8d2:	ee30 0a24 	vadd.f32	s0, s0, s9
 800a8d6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a8da:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800a8de:	d105      	bne.n	800a8ec <powf+0xfc>
 800a8e0:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800a8e4:	0064      	lsls	r4, r4, #1
 800a8e6:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800a8ea:	e7f0      	b.n	800a8ce <powf+0xde>
 800a8ec:	004b      	lsls	r3, r1, #1
 800a8ee:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800a8f2:	d8ee      	bhi.n	800a8d2 <powf+0xe2>
 800a8f4:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800a8f8:	d1eb      	bne.n	800a8d2 <powf+0xe2>
 800a8fa:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a8fe:	f000 8096 	beq.w	800aa2e <powf+0x23e>
 800a902:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a906:	ea6f 0404 	mvn.w	r4, r4
 800a90a:	bf34      	ite	cc
 800a90c:	2300      	movcc	r3, #0
 800a90e:	2301      	movcs	r3, #1
 800a910:	0fe4      	lsrs	r4, r4, #31
 800a912:	42a3      	cmp	r3, r4
 800a914:	f040 808e 	bne.w	800aa34 <powf+0x244>
 800a918:	ee24 0aa4 	vmul.f32	s0, s9, s9
 800a91c:	e7db      	b.n	800a8d6 <powf+0xe6>
 800a91e:	004d      	lsls	r5, r1, #1
 800a920:	1e6a      	subs	r2, r5, #1
 800a922:	429a      	cmp	r2, r3
 800a924:	d91b      	bls.n	800a95e <powf+0x16e>
 800a926:	2900      	cmp	r1, #0
 800a928:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a92c:	da0e      	bge.n	800a94c <powf+0x15c>
 800a92e:	ee10 0a90 	vmov	r0, s1
 800a932:	f7ff ff46 	bl	800a7c2 <checkint>
 800a936:	2801      	cmp	r0, #1
 800a938:	d108      	bne.n	800a94c <powf+0x15c>
 800a93a:	eeb1 0a40 	vneg.f32	s0, s0
 800a93e:	b93d      	cbnz	r5, 800a950 <powf+0x160>
 800a940:	2c00      	cmp	r4, #0
 800a942:	dac8      	bge.n	800a8d6 <powf+0xe6>
 800a944:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800a948:	f001 bb5c 	b.w	800c004 <__math_divzerof>
 800a94c:	2000      	movs	r0, #0
 800a94e:	e7f6      	b.n	800a93e <powf+0x14e>
 800a950:	2c00      	cmp	r4, #0
 800a952:	dac0      	bge.n	800a8d6 <powf+0xe6>
 800a954:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a958:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a95c:	e7bb      	b.n	800a8d6 <powf+0xe6>
 800a95e:	2900      	cmp	r1, #0
 800a960:	da1e      	bge.n	800a9a0 <powf+0x1b0>
 800a962:	ee10 0a90 	vmov	r0, s1
 800a966:	f7ff ff2c 	bl	800a7c2 <checkint>
 800a96a:	b918      	cbnz	r0, 800a974 <powf+0x184>
 800a96c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800a970:	f001 bb58 	b.w	800c024 <__math_invalidf>
 800a974:	2801      	cmp	r0, #1
 800a976:	bf0c      	ite	eq
 800a978:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a97c:	2000      	movne	r0, #0
 800a97e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a982:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a986:	f4bf af47 	bcs.w	800a818 <powf+0x28>
 800a98a:	eddf 0a35 	vldr	s1, [pc, #212]	; 800aa60 <powf+0x270>
 800a98e:	ee20 0a20 	vmul.f32	s0, s0, s1
 800a992:	ee10 3a10 	vmov	r3, s0
 800a996:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a99a:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800a99e:	e73b      	b.n	800a818 <powf+0x28>
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	e7ee      	b.n	800a982 <powf+0x192>
 800a9a4:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800aa48 <powf+0x258>
 800a9a8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b0:	d803      	bhi.n	800a9ba <powf+0x1ca>
 800a9b2:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800a9b6:	f001 bb13 	b.w	800bfe0 <__math_uflowf>
 800a9ba:	ed9f 7b25 	vldr	d7, [pc, #148]	; 800aa50 <powf+0x260>
 800a9be:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c6:	d503      	bpl.n	800a9d0 <powf+0x1e0>
 800a9c8:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800a9cc:	f001 bb0e 	b.w	800bfec <__math_may_uflowf>
 800a9d0:	4924      	ldr	r1, [pc, #144]	; (800aa64 <powf+0x274>)
 800a9d2:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 800a9d6:	ee30 6b07 	vadd.f64	d6, d0, d7
 800a9da:	ec55 4b16 	vmov	r4, r5, d6
 800a9de:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a9e2:	f004 021f 	and.w	r2, r4, #31
 800a9e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a9ea:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 800a9ee:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a9f2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a9f6:	e9d2 6700 	ldrd	r6, r7, [r2]
 800a9fa:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a9fe:	1824      	adds	r4, r4, r0
 800aa00:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800aa04:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 800aa08:	2000      	movs	r0, #0
 800aa0a:	1982      	adds	r2, r0, r6
 800aa0c:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 800aa10:	eb41 0307 	adc.w	r3, r1, r7
 800aa14:	eea0 6b05 	vfma.f64	d6, d0, d5
 800aa18:	ee20 0b00 	vmul.f64	d0, d0, d0
 800aa1c:	eea6 7b00 	vfma.f64	d7, d6, d0
 800aa20:	ec43 2b16 	vmov	d6, r2, r3
 800aa24:	ee27 0b06 	vmul.f64	d0, d7, d6
 800aa28:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800aa2c:	e753      	b.n	800a8d6 <powf+0xe6>
 800aa2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800aa32:	e750      	b.n	800a8d6 <powf+0xe6>
 800aa34:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800aa68 <powf+0x278>
 800aa38:	e74d      	b.n	800a8d6 <powf+0xe6>
 800aa3a:	bf00      	nop
 800aa3c:	f3af 8000 	nop.w
 800aa40:	ffd1d571 	.word	0xffd1d571
 800aa44:	405fffff 	.word	0x405fffff
 800aa48:	00000000 	.word	0x00000000
 800aa4c:	c062c000 	.word	0xc062c000
 800aa50:	00000000 	.word	0x00000000
 800aa54:	c062a000 	.word	0xc062a000
 800aa58:	fefffffe 	.word	0xfefffffe
 800aa5c:	08028800 	.word	0x08028800
 800aa60:	4b000000 	.word	0x4b000000
 800aa64:	080286b8 	.word	0x080286b8
 800aa68:	00000000 	.word	0x00000000

0800aa6c <tanf>:
 800aa6c:	ee10 3a10 	vmov	r3, s0
 800aa70:	b507      	push	{r0, r1, r2, lr}
 800aa72:	4a10      	ldr	r2, [pc, #64]	; (800aab4 <tanf+0x48>)
 800aa74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	dc05      	bgt.n	800aa88 <tanf+0x1c>
 800aa7c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800aab8 <tanf+0x4c>
 800aa80:	2001      	movs	r0, #1
 800aa82:	f001 f9af 	bl	800bde4 <__kernel_tanf>
 800aa86:	e004      	b.n	800aa92 <tanf+0x26>
 800aa88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aa8c:	db04      	blt.n	800aa98 <tanf+0x2c>
 800aa8e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800aa92:	b003      	add	sp, #12
 800aa94:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa98:	4668      	mov	r0, sp
 800aa9a:	f000 fd87 	bl	800b5ac <__ieee754_rem_pio2f>
 800aa9e:	0040      	lsls	r0, r0, #1
 800aaa0:	f000 0002 	and.w	r0, r0, #2
 800aaa4:	f1c0 0001 	rsb	r0, r0, #1
 800aaa8:	eddd 0a01 	vldr	s1, [sp, #4]
 800aaac:	ed9d 0a00 	vldr	s0, [sp]
 800aab0:	e7e7      	b.n	800aa82 <tanf+0x16>
 800aab2:	bf00      	nop
 800aab4:	3f490fda 	.word	0x3f490fda
 800aab8:	00000000 	.word	0x00000000

0800aabc <tanhf>:
 800aabc:	b510      	push	{r4, lr}
 800aabe:	ee10 4a10 	vmov	r4, s0
 800aac2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800aac6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aaca:	ed2d 8b02 	vpush	{d8}
 800aace:	eef0 7a40 	vmov.f32	s15, s0
 800aad2:	db0c      	blt.n	800aaee <tanhf+0x32>
 800aad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aad8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800aadc:	2c00      	cmp	r4, #0
 800aade:	bfac      	ite	ge
 800aae0:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800aae4:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800aae8:	ecbd 8b02 	vpop	{d8}
 800aaec:	bd10      	pop	{r4, pc}
 800aaee:	4a1b      	ldr	r2, [pc, #108]	; (800ab5c <tanhf+0xa0>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	dc30      	bgt.n	800ab56 <tanhf+0x9a>
 800aaf4:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800aaf8:	da06      	bge.n	800ab08 <tanhf+0x4c>
 800aafa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800aafe:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ab02:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ab06:	e7ef      	b.n	800aae8 <tanhf+0x2c>
 800ab08:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ab0c:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800ab10:	db12      	blt.n	800ab38 <tanhf+0x7c>
 800ab12:	f7ff fe4f 	bl	800a7b4 <fabsf>
 800ab16:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ab1a:	f001 fbb7 	bl	800c28c <expm1f>
 800ab1e:	ee30 0a08 	vadd.f32	s0, s0, s16
 800ab22:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800ab26:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ab2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ab2e:	2c00      	cmp	r4, #0
 800ab30:	bfb8      	it	lt
 800ab32:	eeb1 0a40 	vneglt.f32	s0, s0
 800ab36:	e7d7      	b.n	800aae8 <tanhf+0x2c>
 800ab38:	f7ff fe3c 	bl	800a7b4 <fabsf>
 800ab3c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800ab40:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ab44:	f001 fba2 	bl	800c28c <expm1f>
 800ab48:	ee70 7a08 	vadd.f32	s15, s0, s16
 800ab4c:	eeb1 7a40 	vneg.f32	s14, s0
 800ab50:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ab54:	e7eb      	b.n	800ab2e <tanhf+0x72>
 800ab56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ab5a:	e7e8      	b.n	800ab2e <tanhf+0x72>
 800ab5c:	41afffff 	.word	0x41afffff

0800ab60 <pow>:
 800ab60:	b570      	push	{r4, r5, r6, lr}
 800ab62:	ed2d 8b0a 	vpush	{d8-d12}
 800ab66:	eeb0 9b40 	vmov.f64	d9, d0
 800ab6a:	eeb0 8b41 	vmov.f64	d8, d1
 800ab6e:	4c8c      	ldr	r4, [pc, #560]	; (800ada0 <pow+0x240>)
 800ab70:	b08a      	sub	sp, #40	; 0x28
 800ab72:	f000 f991 	bl	800ae98 <__ieee754_pow>
 800ab76:	f994 3000 	ldrsb.w	r3, [r4]
 800ab7a:	eeb0 ab40 	vmov.f64	d10, d0
 800ab7e:	1c5a      	adds	r2, r3, #1
 800ab80:	4626      	mov	r6, r4
 800ab82:	d04b      	beq.n	800ac1c <pow+0xbc>
 800ab84:	eeb4 8b48 	vcmp.f64	d8, d8
 800ab88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab8c:	d646      	bvs.n	800ac1c <pow+0xbc>
 800ab8e:	eeb4 9b49 	vcmp.f64	d9, d9
 800ab92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab96:	d719      	bvc.n	800abcc <pow+0x6c>
 800ab98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ab9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba0:	d13c      	bne.n	800ac1c <pow+0xbc>
 800aba2:	2201      	movs	r2, #1
 800aba4:	9200      	str	r2, [sp, #0]
 800aba6:	497f      	ldr	r1, [pc, #508]	; (800ada4 <pow+0x244>)
 800aba8:	4a7f      	ldr	r2, [pc, #508]	; (800ada8 <pow+0x248>)
 800abaa:	9201      	str	r2, [sp, #4]
 800abac:	2000      	movs	r0, #0
 800abae:	2200      	movs	r2, #0
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	9208      	str	r2, [sp, #32]
 800abb4:	ed8d 9b02 	vstr	d9, [sp, #8]
 800abb8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800abbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800abc0:	d02a      	beq.n	800ac18 <pow+0xb8>
 800abc2:	4668      	mov	r0, sp
 800abc4:	f001 fa4e 	bl	800c064 <matherr>
 800abc8:	bb00      	cbnz	r0, 800ac0c <pow+0xac>
 800abca:	e04e      	b.n	800ac6a <pow+0x10a>
 800abcc:	ed9f bb72 	vldr	d11, [pc, #456]	; 800ad98 <pow+0x238>
 800abd0:	eeb4 9b4b 	vcmp.f64	d9, d11
 800abd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd8:	eeb0 cb4b 	vmov.f64	d12, d11
 800abdc:	d14a      	bne.n	800ac74 <pow+0x114>
 800abde:	eeb4 8b4b 	vcmp.f64	d8, d11
 800abe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe6:	d11f      	bne.n	800ac28 <pow+0xc8>
 800abe8:	2201      	movs	r2, #1
 800abea:	9200      	str	r2, [sp, #0]
 800abec:	4a6e      	ldr	r2, [pc, #440]	; (800ada8 <pow+0x248>)
 800abee:	9201      	str	r2, [sp, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	9208      	str	r2, [sp, #32]
 800abf4:	ed8d 9b02 	vstr	d9, [sp, #8]
 800abf8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800abfc:	ed8d bb06 	vstr	d11, [sp, #24]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d0de      	beq.n	800abc2 <pow+0x62>
 800ac04:	4b67      	ldr	r3, [pc, #412]	; (800ada4 <pow+0x244>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac0c:	9b08      	ldr	r3, [sp, #32]
 800ac0e:	b11b      	cbz	r3, 800ac18 <pow+0xb8>
 800ac10:	f7ff fcf6 	bl	800a600 <__errno>
 800ac14:	9b08      	ldr	r3, [sp, #32]
 800ac16:	6003      	str	r3, [r0, #0]
 800ac18:	ed9d ab06 	vldr	d10, [sp, #24]
 800ac1c:	eeb0 0b4a 	vmov.f64	d0, d10
 800ac20:	b00a      	add	sp, #40	; 0x28
 800ac22:	ecbd 8b0a 	vpop	{d8-d12}
 800ac26:	bd70      	pop	{r4, r5, r6, pc}
 800ac28:	eeb0 0b48 	vmov.f64	d0, d8
 800ac2c:	f001 fa12 	bl	800c054 <finite>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d0f3      	beq.n	800ac1c <pow+0xbc>
 800ac34:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800ac38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac3c:	d5ee      	bpl.n	800ac1c <pow+0xbc>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	4b59      	ldr	r3, [pc, #356]	; (800ada8 <pow+0x248>)
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	2300      	movs	r3, #0
 800ac48:	9308      	str	r3, [sp, #32]
 800ac4a:	f994 3000 	ldrsb.w	r3, [r4]
 800ac4e:	ed8d 9b02 	vstr	d9, [sp, #8]
 800ac52:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ac56:	b913      	cbnz	r3, 800ac5e <pow+0xfe>
 800ac58:	ed8d bb06 	vstr	d11, [sp, #24]
 800ac5c:	e7b1      	b.n	800abc2 <pow+0x62>
 800ac5e:	4953      	ldr	r1, [pc, #332]	; (800adac <pow+0x24c>)
 800ac60:	2000      	movs	r0, #0
 800ac62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d1ab      	bne.n	800abc2 <pow+0x62>
 800ac6a:	f7ff fcc9 	bl	800a600 <__errno>
 800ac6e:	2321      	movs	r3, #33	; 0x21
 800ac70:	6003      	str	r3, [r0, #0]
 800ac72:	e7cb      	b.n	800ac0c <pow+0xac>
 800ac74:	f001 f9ee 	bl	800c054 <finite>
 800ac78:	4605      	mov	r5, r0
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d164      	bne.n	800ad48 <pow+0x1e8>
 800ac7e:	eeb0 0b49 	vmov.f64	d0, d9
 800ac82:	f001 f9e7 	bl	800c054 <finite>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d05e      	beq.n	800ad48 <pow+0x1e8>
 800ac8a:	eeb0 0b48 	vmov.f64	d0, d8
 800ac8e:	f001 f9e1 	bl	800c054 <finite>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d058      	beq.n	800ad48 <pow+0x1e8>
 800ac96:	eeb4 ab4a 	vcmp.f64	d10, d10
 800ac9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac9e:	f994 3000 	ldrsb.w	r3, [r4]
 800aca2:	4a41      	ldr	r2, [pc, #260]	; (800ada8 <pow+0x248>)
 800aca4:	d70e      	bvc.n	800acc4 <pow+0x164>
 800aca6:	2101      	movs	r1, #1
 800aca8:	e9cd 1200 	strd	r1, r2, [sp]
 800acac:	9508      	str	r5, [sp, #32]
 800acae:	ed8d 9b02 	vstr	d9, [sp, #8]
 800acb2:	ed8d 8b04 	vstr	d8, [sp, #16]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d0ce      	beq.n	800ac58 <pow+0xf8>
 800acba:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800acbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800acc2:	e7d0      	b.n	800ac66 <pow+0x106>
 800acc4:	2103      	movs	r1, #3
 800acc6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800acca:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800acce:	ee28 8b07 	vmul.f64	d8, d8, d7
 800acd2:	e9cd 1200 	strd	r1, r2, [sp]
 800acd6:	9508      	str	r5, [sp, #32]
 800acd8:	ed8d 9b02 	vstr	d9, [sp, #8]
 800acdc:	b9fb      	cbnz	r3, 800ad1e <pow+0x1be>
 800acde:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800ace2:	4b33      	ldr	r3, [pc, #204]	; (800adb0 <pow+0x250>)
 800ace4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ace8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800acf0:	d54b      	bpl.n	800ad8a <pow+0x22a>
 800acf2:	eeb0 0b48 	vmov.f64	d0, d8
 800acf6:	f001 f9bf 	bl	800c078 <rint>
 800acfa:	eeb4 0b48 	vcmp.f64	d0, d8
 800acfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad02:	d004      	beq.n	800ad0e <pow+0x1ae>
 800ad04:	4b2b      	ldr	r3, [pc, #172]	; (800adb4 <pow+0x254>)
 800ad06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ad0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad0e:	f996 3000 	ldrsb.w	r3, [r6]
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d139      	bne.n	800ad8a <pow+0x22a>
 800ad16:	f7ff fc73 	bl	800a600 <__errno>
 800ad1a:	2322      	movs	r3, #34	; 0x22
 800ad1c:	e7a8      	b.n	800ac70 <pow+0x110>
 800ad1e:	4b26      	ldr	r3, [pc, #152]	; (800adb8 <pow+0x258>)
 800ad20:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800ad24:	2200      	movs	r2, #0
 800ad26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad2e:	d5ee      	bpl.n	800ad0e <pow+0x1ae>
 800ad30:	eeb0 0b48 	vmov.f64	d0, d8
 800ad34:	f001 f9a0 	bl	800c078 <rint>
 800ad38:	eeb4 0b48 	vcmp.f64	d0, d8
 800ad3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad40:	d0e5      	beq.n	800ad0e <pow+0x1ae>
 800ad42:	2200      	movs	r2, #0
 800ad44:	4b19      	ldr	r3, [pc, #100]	; (800adac <pow+0x24c>)
 800ad46:	e7e0      	b.n	800ad0a <pow+0x1aa>
 800ad48:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800ad4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad50:	f47f af64 	bne.w	800ac1c <pow+0xbc>
 800ad54:	eeb0 0b49 	vmov.f64	d0, d9
 800ad58:	f001 f97c 	bl	800c054 <finite>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	f43f af5d 	beq.w	800ac1c <pow+0xbc>
 800ad62:	eeb0 0b48 	vmov.f64	d0, d8
 800ad66:	f001 f975 	bl	800c054 <finite>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	f43f af56 	beq.w	800ac1c <pow+0xbc>
 800ad70:	2304      	movs	r3, #4
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	4b0c      	ldr	r3, [pc, #48]	; (800ada8 <pow+0x248>)
 800ad76:	9301      	str	r3, [sp, #4]
 800ad78:	2300      	movs	r3, #0
 800ad7a:	9308      	str	r3, [sp, #32]
 800ad7c:	ed8d 9b02 	vstr	d9, [sp, #8]
 800ad80:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ad84:	ed8d cb06 	vstr	d12, [sp, #24]
 800ad88:	e7c1      	b.n	800ad0e <pow+0x1ae>
 800ad8a:	4668      	mov	r0, sp
 800ad8c:	f001 f96a 	bl	800c064 <matherr>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	f47f af3b 	bne.w	800ac0c <pow+0xac>
 800ad96:	e7be      	b.n	800ad16 <pow+0x1b6>
	...
 800ada0:	20000410 	.word	0x20000410
 800ada4:	3ff00000 	.word	0x3ff00000
 800ada8:	08028928 	.word	0x08028928
 800adac:	fff00000 	.word	0xfff00000
 800adb0:	47efffff 	.word	0x47efffff
 800adb4:	c7efffff 	.word	0xc7efffff
 800adb8:	7ff00000 	.word	0x7ff00000
 800adbc:	00000000 	.word	0x00000000

0800adc0 <sinhf>:
 800adc0:	b530      	push	{r4, r5, lr}
 800adc2:	ed2d 8b02 	vpush	{d8}
 800adc6:	4c32      	ldr	r4, [pc, #200]	; (800ae90 <sinhf+0xd0>)
 800adc8:	b08b      	sub	sp, #44	; 0x2c
 800adca:	eef0 8a40 	vmov.f32	s17, s0
 800adce:	f000 fd19 	bl	800b804 <__ieee754_sinhf>
 800add2:	f994 3000 	ldrsb.w	r3, [r4]
 800add6:	3301      	adds	r3, #1
 800add8:	eeb0 8a40 	vmov.f32	s16, s0
 800addc:	d030      	beq.n	800ae40 <sinhf+0x80>
 800adde:	f001 fb7f 	bl	800c4e0 <finitef>
 800ade2:	4605      	mov	r5, r0
 800ade4:	bb60      	cbnz	r0, 800ae40 <sinhf+0x80>
 800ade6:	eeb0 0a68 	vmov.f32	s0, s17
 800adea:	f001 fb79 	bl	800c4e0 <finitef>
 800adee:	b338      	cbz	r0, 800ae40 <sinhf+0x80>
 800adf0:	2303      	movs	r3, #3
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	4b27      	ldr	r3, [pc, #156]	; (800ae94 <sinhf+0xd4>)
 800adf6:	9301      	str	r3, [sp, #4]
 800adf8:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 800adfc:	f994 3000 	ldrsb.w	r3, [r4]
 800ae00:	9508      	str	r5, [sp, #32]
 800ae02:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ae06:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae0a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800ae0e:	b9eb      	cbnz	r3, 800ae4c <sinhf+0x8c>
 800ae10:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800ae70 <sinhf+0xb0>
 800ae14:	ed9f 6b18 	vldr	d6, [pc, #96]	; 800ae78 <sinhf+0xb8>
 800ae18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae1c:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800ae20:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae24:	4668      	mov	r0, sp
 800ae26:	f001 f91d 	bl	800c064 <matherr>
 800ae2a:	b1d8      	cbz	r0, 800ae64 <sinhf+0xa4>
 800ae2c:	9b08      	ldr	r3, [sp, #32]
 800ae2e:	b11b      	cbz	r3, 800ae38 <sinhf+0x78>
 800ae30:	f7ff fbe6 	bl	800a600 <__errno>
 800ae34:	9b08      	ldr	r3, [sp, #32]
 800ae36:	6003      	str	r3, [r0, #0]
 800ae38:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ae3c:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 800ae40:	eeb0 0a48 	vmov.f32	s0, s16
 800ae44:	b00b      	add	sp, #44	; 0x2c
 800ae46:	ecbd 8b02 	vpop	{d8}
 800ae4a:	bd30      	pop	{r4, r5, pc}
 800ae4c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ae80 <sinhf+0xc0>
 800ae50:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800ae88 <sinhf+0xc8>
 800ae54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae58:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae62:	d1df      	bne.n	800ae24 <sinhf+0x64>
 800ae64:	f7ff fbcc 	bl	800a600 <__errno>
 800ae68:	2322      	movs	r3, #34	; 0x22
 800ae6a:	6003      	str	r3, [r0, #0]
 800ae6c:	e7de      	b.n	800ae2c <sinhf+0x6c>
 800ae6e:	bf00      	nop
 800ae70:	e0000000 	.word	0xe0000000
 800ae74:	47efffff 	.word	0x47efffff
 800ae78:	e0000000 	.word	0xe0000000
 800ae7c:	c7efffff 	.word	0xc7efffff
 800ae80:	00000000 	.word	0x00000000
 800ae84:	7ff00000 	.word	0x7ff00000
 800ae88:	00000000 	.word	0x00000000
 800ae8c:	fff00000 	.word	0xfff00000
 800ae90:	20000410 	.word	0x20000410
 800ae94:	0802892c 	.word	0x0802892c

0800ae98 <__ieee754_pow>:
 800ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9c:	ec57 6b11 	vmov	r6, r7, d1
 800aea0:	ed2d 8b02 	vpush	{d8}
 800aea4:	eeb0 8b40 	vmov.f64	d8, d0
 800aea8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800aeac:	ea58 0306 	orrs.w	r3, r8, r6
 800aeb0:	b085      	sub	sp, #20
 800aeb2:	46b9      	mov	r9, r7
 800aeb4:	ee11 2a10 	vmov	r2, s2
 800aeb8:	f000 8306 	beq.w	800b4c8 <__ieee754_pow+0x630>
 800aebc:	ee18 aa90 	vmov	sl, s17
 800aec0:	4bb9      	ldr	r3, [pc, #740]	; (800b1a8 <__ieee754_pow+0x310>)
 800aec2:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800aec6:	429c      	cmp	r4, r3
 800aec8:	ee10 ba10 	vmov	fp, s0
 800aecc:	dc0b      	bgt.n	800aee6 <__ieee754_pow+0x4e>
 800aece:	d105      	bne.n	800aedc <__ieee754_pow+0x44>
 800aed0:	f1bb 0f00 	cmp.w	fp, #0
 800aed4:	d107      	bne.n	800aee6 <__ieee754_pow+0x4e>
 800aed6:	45a0      	cmp	r8, r4
 800aed8:	dc0d      	bgt.n	800aef6 <__ieee754_pow+0x5e>
 800aeda:	e001      	b.n	800aee0 <__ieee754_pow+0x48>
 800aedc:	4598      	cmp	r8, r3
 800aede:	dc02      	bgt.n	800aee6 <__ieee754_pow+0x4e>
 800aee0:	4598      	cmp	r8, r3
 800aee2:	d110      	bne.n	800af06 <__ieee754_pow+0x6e>
 800aee4:	b17a      	cbz	r2, 800af06 <__ieee754_pow+0x6e>
 800aee6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800aeea:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aeee:	ea54 030b 	orrs.w	r3, r4, fp
 800aef2:	f000 82e9 	beq.w	800b4c8 <__ieee754_pow+0x630>
 800aef6:	48ad      	ldr	r0, [pc, #692]	; (800b1ac <__ieee754_pow+0x314>)
 800aef8:	b005      	add	sp, #20
 800aefa:	ecbd 8b02 	vpop	{d8}
 800aefe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af02:	f001 b8b1 	b.w	800c068 <nan>
 800af06:	f1ba 0f00 	cmp.w	sl, #0
 800af0a:	da4e      	bge.n	800afaa <__ieee754_pow+0x112>
 800af0c:	4ba8      	ldr	r3, [pc, #672]	; (800b1b0 <__ieee754_pow+0x318>)
 800af0e:	4598      	cmp	r8, r3
 800af10:	dc49      	bgt.n	800afa6 <__ieee754_pow+0x10e>
 800af12:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800af16:	4598      	cmp	r8, r3
 800af18:	dd47      	ble.n	800afaa <__ieee754_pow+0x112>
 800af1a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800af1e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800af22:	2b14      	cmp	r3, #20
 800af24:	dd24      	ble.n	800af70 <__ieee754_pow+0xd8>
 800af26:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800af2a:	fa22 f503 	lsr.w	r5, r2, r3
 800af2e:	fa05 f303 	lsl.w	r3, r5, r3
 800af32:	4293      	cmp	r3, r2
 800af34:	d139      	bne.n	800afaa <__ieee754_pow+0x112>
 800af36:	f005 0501 	and.w	r5, r5, #1
 800af3a:	f1c5 0502 	rsb	r5, r5, #2
 800af3e:	2a00      	cmp	r2, #0
 800af40:	d15a      	bne.n	800aff8 <__ieee754_pow+0x160>
 800af42:	4b99      	ldr	r3, [pc, #612]	; (800b1a8 <__ieee754_pow+0x310>)
 800af44:	4598      	cmp	r8, r3
 800af46:	d122      	bne.n	800af8e <__ieee754_pow+0xf6>
 800af48:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800af4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800af50:	ea53 030b 	orrs.w	r3, r3, fp
 800af54:	f000 82b8 	beq.w	800b4c8 <__ieee754_pow+0x630>
 800af58:	4b96      	ldr	r3, [pc, #600]	; (800b1b4 <__ieee754_pow+0x31c>)
 800af5a:	429c      	cmp	r4, r3
 800af5c:	dd27      	ble.n	800afae <__ieee754_pow+0x116>
 800af5e:	f1b9 0f00 	cmp.w	r9, #0
 800af62:	f280 82b4 	bge.w	800b4ce <__ieee754_pow+0x636>
 800af66:	ed9f 7b84 	vldr	d7, [pc, #528]	; 800b178 <__ieee754_pow+0x2e0>
 800af6a:	ed8d 7b00 	vstr	d7, [sp]
 800af6e:	e026      	b.n	800afbe <__ieee754_pow+0x126>
 800af70:	2a00      	cmp	r2, #0
 800af72:	d140      	bne.n	800aff6 <__ieee754_pow+0x15e>
 800af74:	f1c3 0314 	rsb	r3, r3, #20
 800af78:	fa48 f503 	asr.w	r5, r8, r3
 800af7c:	fa05 f303 	lsl.w	r3, r5, r3
 800af80:	4543      	cmp	r3, r8
 800af82:	f040 82aa 	bne.w	800b4da <__ieee754_pow+0x642>
 800af86:	f005 0501 	and.w	r5, r5, #1
 800af8a:	f1c5 0502 	rsb	r5, r5, #2
 800af8e:	4b8a      	ldr	r3, [pc, #552]	; (800b1b8 <__ieee754_pow+0x320>)
 800af90:	4598      	cmp	r8, r3
 800af92:	d11b      	bne.n	800afcc <__ieee754_pow+0x134>
 800af94:	f1b9 0f00 	cmp.w	r9, #0
 800af98:	f280 829c 	bge.w	800b4d4 <__ieee754_pow+0x63c>
 800af9c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800afa0:	ee87 7b08 	vdiv.f64	d7, d7, d8
 800afa4:	e7e1      	b.n	800af6a <__ieee754_pow+0xd2>
 800afa6:	2502      	movs	r5, #2
 800afa8:	e7c9      	b.n	800af3e <__ieee754_pow+0xa6>
 800afaa:	2500      	movs	r5, #0
 800afac:	e7c7      	b.n	800af3e <__ieee754_pow+0xa6>
 800afae:	f1b9 0f00 	cmp.w	r9, #0
 800afb2:	dad8      	bge.n	800af66 <__ieee754_pow+0xce>
 800afb4:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 800afb8:	4633      	mov	r3, r6
 800afba:	e9cd 3400 	strd	r3, r4, [sp]
 800afbe:	ed9d 0b00 	vldr	d0, [sp]
 800afc2:	b005      	add	sp, #20
 800afc4:	ecbd 8b02 	vpop	{d8}
 800afc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afcc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800afd0:	d102      	bne.n	800afd8 <__ieee754_pow+0x140>
 800afd2:	ee28 7b08 	vmul.f64	d7, d8, d8
 800afd6:	e7c8      	b.n	800af6a <__ieee754_pow+0xd2>
 800afd8:	4b78      	ldr	r3, [pc, #480]	; (800b1bc <__ieee754_pow+0x324>)
 800afda:	4599      	cmp	r9, r3
 800afdc:	d10c      	bne.n	800aff8 <__ieee754_pow+0x160>
 800afde:	f1ba 0f00 	cmp.w	sl, #0
 800afe2:	db09      	blt.n	800aff8 <__ieee754_pow+0x160>
 800afe4:	eeb0 0b48 	vmov.f64	d0, d8
 800afe8:	b005      	add	sp, #20
 800afea:	ecbd 8b02 	vpop	{d8}
 800afee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff2:	f000 bad7 	b.w	800b5a4 <__ieee754_sqrt>
 800aff6:	2500      	movs	r5, #0
 800aff8:	eeb0 0b48 	vmov.f64	d0, d8
 800affc:	f001 f821 	bl	800c042 <fabs>
 800b000:	ed8d 0b00 	vstr	d0, [sp]
 800b004:	f1bb 0f00 	cmp.w	fp, #0
 800b008:	d128      	bne.n	800b05c <__ieee754_pow+0x1c4>
 800b00a:	b124      	cbz	r4, 800b016 <__ieee754_pow+0x17e>
 800b00c:	4b6a      	ldr	r3, [pc, #424]	; (800b1b8 <__ieee754_pow+0x320>)
 800b00e:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 800b012:	429a      	cmp	r2, r3
 800b014:	d122      	bne.n	800b05c <__ieee754_pow+0x1c4>
 800b016:	f1b9 0f00 	cmp.w	r9, #0
 800b01a:	da07      	bge.n	800b02c <__ieee754_pow+0x194>
 800b01c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b020:	ed9d 6b00 	vldr	d6, [sp]
 800b024:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800b028:	ed8d 7b00 	vstr	d7, [sp]
 800b02c:	f1ba 0f00 	cmp.w	sl, #0
 800b030:	dac5      	bge.n	800afbe <__ieee754_pow+0x126>
 800b032:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b036:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b03a:	ea54 0305 	orrs.w	r3, r4, r5
 800b03e:	d106      	bne.n	800b04e <__ieee754_pow+0x1b6>
 800b040:	ed9d 7b00 	vldr	d7, [sp]
 800b044:	ee37 7b47 	vsub.f64	d7, d7, d7
 800b048:	ee87 7b07 	vdiv.f64	d7, d7, d7
 800b04c:	e78d      	b.n	800af6a <__ieee754_pow+0xd2>
 800b04e:	2d01      	cmp	r5, #1
 800b050:	d1b5      	bne.n	800afbe <__ieee754_pow+0x126>
 800b052:	ed9d 7b00 	vldr	d7, [sp]
 800b056:	eeb1 7b47 	vneg.f64	d7, d7
 800b05a:	e786      	b.n	800af6a <__ieee754_pow+0xd2>
 800b05c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800b060:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b064:	ea55 030a 	orrs.w	r3, r5, sl
 800b068:	d104      	bne.n	800b074 <__ieee754_pow+0x1dc>
 800b06a:	ee38 8b48 	vsub.f64	d8, d8, d8
 800b06e:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800b072:	e77a      	b.n	800af6a <__ieee754_pow+0xd2>
 800b074:	4b52      	ldr	r3, [pc, #328]	; (800b1c0 <__ieee754_pow+0x328>)
 800b076:	4598      	cmp	r8, r3
 800b078:	f340 80a8 	ble.w	800b1cc <__ieee754_pow+0x334>
 800b07c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b080:	4598      	cmp	r8, r3
 800b082:	dd0b      	ble.n	800b09c <__ieee754_pow+0x204>
 800b084:	4b4b      	ldr	r3, [pc, #300]	; (800b1b4 <__ieee754_pow+0x31c>)
 800b086:	429c      	cmp	r4, r3
 800b088:	dc0e      	bgt.n	800b0a8 <__ieee754_pow+0x210>
 800b08a:	f1b9 0f00 	cmp.w	r9, #0
 800b08e:	f6bf af6a 	bge.w	800af66 <__ieee754_pow+0xce>
 800b092:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800b180 <__ieee754_pow+0x2e8>
 800b096:	ee27 7b07 	vmul.f64	d7, d7, d7
 800b09a:	e766      	b.n	800af6a <__ieee754_pow+0xd2>
 800b09c:	4b49      	ldr	r3, [pc, #292]	; (800b1c4 <__ieee754_pow+0x32c>)
 800b09e:	429c      	cmp	r4, r3
 800b0a0:	ddf3      	ble.n	800b08a <__ieee754_pow+0x1f2>
 800b0a2:	4b45      	ldr	r3, [pc, #276]	; (800b1b8 <__ieee754_pow+0x320>)
 800b0a4:	429c      	cmp	r4, r3
 800b0a6:	dd03      	ble.n	800b0b0 <__ieee754_pow+0x218>
 800b0a8:	f1b9 0f00 	cmp.w	r9, #0
 800b0ac:	dcf1      	bgt.n	800b092 <__ieee754_pow+0x1fa>
 800b0ae:	e75a      	b.n	800af66 <__ieee754_pow+0xce>
 800b0b0:	ed9d 7b00 	vldr	d7, [sp]
 800b0b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b0b8:	ed9f 5b33 	vldr	d5, [pc, #204]	; 800b188 <__ieee754_pow+0x2f0>
 800b0bc:	ee37 6b46 	vsub.f64	d6, d7, d6
 800b0c0:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 800b0c4:	eeb1 3b46 	vneg.f64	d3, d6
 800b0c8:	eea3 5b07 	vfma.f64	d5, d3, d7
 800b0cc:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b0d0:	eea5 7b46 	vfms.f64	d7, d5, d6
 800b0d4:	ee26 5b06 	vmul.f64	d5, d6, d6
 800b0d8:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b0dc:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800b190 <__ieee754_pow+0x2f8>
 800b0e0:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800b0e4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800b198 <__ieee754_pow+0x300>
 800b0e8:	eea6 7b05 	vfma.f64	d7, d6, d5
 800b0ec:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800b1a0 <__ieee754_pow+0x308>
 800b0f0:	eeb0 4b47 	vmov.f64	d4, d7
 800b0f4:	eea6 4b05 	vfma.f64	d4, d6, d5
 800b0f8:	ec53 2b14 	vmov	r2, r3, d4
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	ec43 2b14 	vmov	d4, r2, r3
 800b102:	eeb0 6b44 	vmov.f64	d6, d4
 800b106:	eea3 6b05 	vfma.f64	d6, d3, d5
 800b10a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b10e:	3d01      	subs	r5, #1
 800b110:	ea55 030a 	orrs.w	r3, r5, sl
 800b114:	f04f 0200 	mov.w	r2, #0
 800b118:	463b      	mov	r3, r7
 800b11a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800b11e:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800b122:	ec47 6b15 	vmov	d5, r6, r7
 800b126:	fe06 8b08 	vseleq.f64	d8, d6, d8
 800b12a:	ec47 6b13 	vmov	d3, r6, r7
 800b12e:	ec43 2b16 	vmov	d6, r2, r3
 800b132:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b136:	ee35 5b46 	vsub.f64	d5, d5, d6
 800b13a:	4b23      	ldr	r3, [pc, #140]	; (800b1c8 <__ieee754_pow+0x330>)
 800b13c:	eea5 7b04 	vfma.f64	d7, d5, d4
 800b140:	ee24 6b06 	vmul.f64	d6, d4, d6
 800b144:	ee37 5b06 	vadd.f64	d5, d7, d6
 800b148:	ee15 1a90 	vmov	r1, s11
 800b14c:	4299      	cmp	r1, r3
 800b14e:	ee15 2a10 	vmov	r2, s10
 800b152:	f340 819b 	ble.w	800b48c <__ieee754_pow+0x5f4>
 800b156:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b15a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b15e:	4313      	orrs	r3, r2
 800b160:	f000 810a 	beq.w	800b378 <__ieee754_pow+0x4e0>
 800b164:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800b180 <__ieee754_pow+0x2e8>
 800b168:	ee28 8b07 	vmul.f64	d8, d8, d7
 800b16c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b170:	e6fb      	b.n	800af6a <__ieee754_pow+0xd2>
 800b172:	bf00      	nop
 800b174:	f3af 8000 	nop.w
	...
 800b180:	8800759c 	.word	0x8800759c
 800b184:	7e37e43c 	.word	0x7e37e43c
 800b188:	55555555 	.word	0x55555555
 800b18c:	3fd55555 	.word	0x3fd55555
 800b190:	652b82fe 	.word	0x652b82fe
 800b194:	3ff71547 	.word	0x3ff71547
 800b198:	f85ddf44 	.word	0xf85ddf44
 800b19c:	3e54ae0b 	.word	0x3e54ae0b
 800b1a0:	60000000 	.word	0x60000000
 800b1a4:	3ff71547 	.word	0x3ff71547
 800b1a8:	7ff00000 	.word	0x7ff00000
 800b1ac:	08028931 	.word	0x08028931
 800b1b0:	433fffff 	.word	0x433fffff
 800b1b4:	3fefffff 	.word	0x3fefffff
 800b1b8:	3ff00000 	.word	0x3ff00000
 800b1bc:	3fe00000 	.word	0x3fe00000
 800b1c0:	41e00000 	.word	0x41e00000
 800b1c4:	3feffffe 	.word	0x3feffffe
 800b1c8:	408fffff 	.word	0x408fffff
 800b1cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b1d0:	f280 80ce 	bge.w	800b370 <__ieee754_pow+0x4d8>
 800b1d4:	ed9d 6b00 	vldr	d6, [sp]
 800b1d8:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 800b4e0 <__ieee754_pow+0x648>
 800b1dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b1e0:	ed8d 7b00 	vstr	d7, [sp]
 800b1e4:	9c01      	ldr	r4, [sp, #4]
 800b1e6:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800b1ea:	1521      	asrs	r1, r4, #20
 800b1ec:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b1f0:	4419      	add	r1, r3
 800b1f2:	4be3      	ldr	r3, [pc, #908]	; (800b580 <__ieee754_pow+0x6e8>)
 800b1f4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b1f8:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 800b1fc:	429c      	cmp	r4, r3
 800b1fe:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800b202:	dd06      	ble.n	800b212 <__ieee754_pow+0x37a>
 800b204:	4bdf      	ldr	r3, [pc, #892]	; (800b584 <__ieee754_pow+0x6ec>)
 800b206:	429c      	cmp	r4, r3
 800b208:	f340 80b4 	ble.w	800b374 <__ieee754_pow+0x4dc>
 800b20c:	3101      	adds	r1, #1
 800b20e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800b212:	2400      	movs	r4, #0
 800b214:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b218:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800b21c:	4603      	mov	r3, r0
 800b21e:	ec43 2b17 	vmov	d7, r2, r3
 800b222:	4bd9      	ldr	r3, [pc, #868]	; (800b588 <__ieee754_pow+0x6f0>)
 800b224:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 800b228:	4463      	add	r3, ip
 800b22a:	ed93 5b00 	vldr	d5, [r3]
 800b22e:	1040      	asrs	r0, r0, #1
 800b230:	ee37 2b45 	vsub.f64	d2, d7, d5
 800b234:	ee35 6b07 	vadd.f64	d6, d5, d7
 800b238:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800b23c:	ee22 6b01 	vmul.f64	d6, d2, d1
 800b240:	ed8d 6b00 	vstr	d6, [sp]
 800b244:	e9dd 8900 	ldrd	r8, r9, [sp]
 800b248:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800b24c:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 800b250:	f04f 0800 	mov.w	r8, #0
 800b254:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 800b258:	2200      	movs	r2, #0
 800b25a:	ec49 8b14 	vmov	d4, r8, r9
 800b25e:	ec43 2b16 	vmov	d6, r2, r3
 800b262:	eeb1 3b44 	vneg.f64	d3, d4
 800b266:	eea3 2b06 	vfma.f64	d2, d3, d6
 800b26a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b26e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b272:	eea3 2b07 	vfma.f64	d2, d3, d7
 800b276:	ed9d 7b00 	vldr	d7, [sp]
 800b27a:	ee22 2b01 	vmul.f64	d2, d2, d1
 800b27e:	ee27 5b07 	vmul.f64	d5, d7, d7
 800b282:	ee37 6b04 	vadd.f64	d6, d7, d4
 800b286:	ed9f 1b98 	vldr	d1, [pc, #608]	; 800b4e8 <__ieee754_pow+0x650>
 800b28a:	ee25 0b05 	vmul.f64	d0, d5, d5
 800b28e:	ee26 6b02 	vmul.f64	d6, d6, d2
 800b292:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800b4f0 <__ieee754_pow+0x658>
 800b296:	eea5 7b01 	vfma.f64	d7, d5, d1
 800b29a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800b4f8 <__ieee754_pow+0x660>
 800b29e:	eea7 1b05 	vfma.f64	d1, d7, d5
 800b2a2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800b500 <__ieee754_pow+0x668>
 800b2a6:	eea1 7b05 	vfma.f64	d7, d1, d5
 800b2aa:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800b508 <__ieee754_pow+0x670>
 800b2ae:	eea7 1b05 	vfma.f64	d1, d7, d5
 800b2b2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800b510 <__ieee754_pow+0x678>
 800b2b6:	eea1 7b05 	vfma.f64	d7, d1, d5
 800b2ba:	eea0 6b07 	vfma.f64	d6, d0, d7
 800b2be:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 800b2c2:	eeb0 5b47 	vmov.f64	d5, d7
 800b2c6:	eea4 5b04 	vfma.f64	d5, d4, d4
 800b2ca:	ee35 5b06 	vadd.f64	d5, d5, d6
 800b2ce:	ed8d 5b02 	vstr	d5, [sp, #8]
 800b2d2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b2d6:	ed9d 5b02 	vldr	d5, [sp, #8]
 800b2da:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b2de:	eea3 7b04 	vfma.f64	d7, d3, d4
 800b2e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b2e6:	ed9d 6b00 	vldr	d6, [sp]
 800b2ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b2ee:	eea2 7b05 	vfma.f64	d7, d2, d5
 800b2f2:	eeb0 6b47 	vmov.f64	d6, d7
 800b2f6:	eea4 6b05 	vfma.f64	d6, d4, d5
 800b2fa:	ed8d 6b00 	vstr	d6, [sp]
 800b2fe:	f8cd 8000 	str.w	r8, [sp]
 800b302:	ed9d 2b00 	vldr	d2, [sp]
 800b306:	eeb0 6b42 	vmov.f64	d6, d2
 800b30a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800b30e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b312:	ed9f 6b81 	vldr	d6, [pc, #516]	; 800b518 <__ieee754_pow+0x680>
 800b316:	4b9d      	ldr	r3, [pc, #628]	; (800b58c <__ieee754_pow+0x6f4>)
 800b318:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b31c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800b520 <__ieee754_pow+0x688>
 800b320:	4463      	add	r3, ip
 800b322:	eea2 7b06 	vfma.f64	d7, d2, d6
 800b326:	ed93 6b00 	vldr	d6, [r3]
 800b32a:	4b99      	ldr	r3, [pc, #612]	; (800b590 <__ieee754_pow+0x6f8>)
 800b32c:	ee37 6b06 	vadd.f64	d6, d7, d6
 800b330:	449c      	add	ip, r3
 800b332:	ed9c 1b00 	vldr	d1, [ip]
 800b336:	eeb0 4b46 	vmov.f64	d4, d6
 800b33a:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 800b528 <__ieee754_pow+0x690>
 800b33e:	ee07 1a90 	vmov	s15, r1
 800b342:	eea2 4b03 	vfma.f64	d4, d2, d3
 800b346:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b34a:	ee34 4b01 	vadd.f64	d4, d4, d1
 800b34e:	ee34 5b07 	vadd.f64	d5, d4, d7
 800b352:	ed8d 5b00 	vstr	d5, [sp]
 800b356:	f8cd 8000 	str.w	r8, [sp]
 800b35a:	ed9d 4b00 	vldr	d4, [sp]
 800b35e:	ee34 7b47 	vsub.f64	d7, d4, d7
 800b362:	ee37 7b41 	vsub.f64	d7, d7, d1
 800b366:	eea2 7b43 	vfms.f64	d7, d2, d3
 800b36a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b36e:	e6ce      	b.n	800b10e <__ieee754_pow+0x276>
 800b370:	2300      	movs	r3, #0
 800b372:	e73a      	b.n	800b1ea <__ieee754_pow+0x352>
 800b374:	2401      	movs	r4, #1
 800b376:	e74d      	b.n	800b214 <__ieee754_pow+0x37c>
 800b378:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800b530 <__ieee754_pow+0x698>
 800b37c:	ee35 5b46 	vsub.f64	d5, d5, d6
 800b380:	ee37 4b04 	vadd.f64	d4, d7, d4
 800b384:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800b388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b38c:	f73f aeea 	bgt.w	800b164 <__ieee754_pow+0x2cc>
 800b390:	4a80      	ldr	r2, [pc, #512]	; (800b594 <__ieee754_pow+0x6fc>)
 800b392:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b396:	4293      	cmp	r3, r2
 800b398:	f340 808e 	ble.w	800b4b8 <__ieee754_pow+0x620>
 800b39c:	151b      	asrs	r3, r3, #20
 800b39e:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 800b3a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b3a6:	4103      	asrs	r3, r0
 800b3a8:	440b      	add	r3, r1
 800b3aa:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b3ae:	487a      	ldr	r0, [pc, #488]	; (800b598 <__ieee754_pow+0x700>)
 800b3b0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b3b4:	4110      	asrs	r0, r2
 800b3b6:	ea23 0500 	bic.w	r5, r3, r0
 800b3ba:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800b3be:	2400      	movs	r4, #0
 800b3c0:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800b3c4:	f1c2 0214 	rsb	r2, r2, #20
 800b3c8:	ec45 4b15 	vmov	d5, r4, r5
 800b3cc:	4110      	asrs	r0, r2
 800b3ce:	2900      	cmp	r1, #0
 800b3d0:	bfb8      	it	lt
 800b3d2:	4240      	neglt	r0, r0
 800b3d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b3d8:	ee36 5b07 	vadd.f64	d5, d6, d7
 800b3dc:	ec53 2b15 	vmov	r2, r3, d5
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	ec43 2b15 	vmov	d5, r2, r3
 800b3e6:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800b538 <__ieee754_pow+0x6a0>
 800b3ea:	ee35 6b46 	vsub.f64	d6, d5, d6
 800b3ee:	ee37 6b46 	vsub.f64	d6, d7, d6
 800b3f2:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800b540 <__ieee754_pow+0x6a8>
 800b3f6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b3fa:	eea6 7b04 	vfma.f64	d7, d6, d4
 800b3fe:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800b548 <__ieee754_pow+0x6b0>
 800b402:	eeb0 4b47 	vmov.f64	d4, d7
 800b406:	eea5 4b06 	vfma.f64	d4, d5, d6
 800b40a:	eeb0 3b44 	vmov.f64	d3, d4
 800b40e:	eea5 3b46 	vfms.f64	d3, d5, d6
 800b412:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 800b550 <__ieee754_pow+0x6b8>
 800b416:	ee37 7b43 	vsub.f64	d7, d7, d3
 800b41a:	ee24 6b04 	vmul.f64	d6, d4, d4
 800b41e:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 800b558 <__ieee754_pow+0x6c0>
 800b422:	eea4 7b07 	vfma.f64	d7, d4, d7
 800b426:	eea6 3b05 	vfma.f64	d3, d6, d5
 800b42a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800b560 <__ieee754_pow+0x6c8>
 800b42e:	eea3 5b06 	vfma.f64	d5, d3, d6
 800b432:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800b568 <__ieee754_pow+0x6d0>
 800b436:	eea5 3b06 	vfma.f64	d3, d5, d6
 800b43a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800b570 <__ieee754_pow+0x6d8>
 800b43e:	eea3 5b06 	vfma.f64	d5, d3, d6
 800b442:	eeb0 3b44 	vmov.f64	d3, d4
 800b446:	eea5 3b46 	vfms.f64	d3, d5, d6
 800b44a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b44e:	eeb0 6b43 	vmov.f64	d6, d3
 800b452:	ee24 3b03 	vmul.f64	d3, d4, d3
 800b456:	ee36 5b45 	vsub.f64	d5, d6, d5
 800b45a:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800b45e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b462:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b466:	ee37 7b44 	vsub.f64	d7, d7, d4
 800b46a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b46e:	ed8d 7b00 	vstr	d7, [sp]
 800b472:	9901      	ldr	r1, [sp, #4]
 800b474:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 800b478:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b47c:	da1e      	bge.n	800b4bc <__ieee754_pow+0x624>
 800b47e:	eeb0 0b47 	vmov.f64	d0, d7
 800b482:	f000 fe85 	bl	800c190 <scalbn>
 800b486:	ee20 7b08 	vmul.f64	d7, d0, d8
 800b48a:	e56e      	b.n	800af6a <__ieee754_pow+0xd2>
 800b48c:	4b43      	ldr	r3, [pc, #268]	; (800b59c <__ieee754_pow+0x704>)
 800b48e:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800b492:	4298      	cmp	r0, r3
 800b494:	f77f af7c 	ble.w	800b390 <__ieee754_pow+0x4f8>
 800b498:	4b41      	ldr	r3, [pc, #260]	; (800b5a0 <__ieee754_pow+0x708>)
 800b49a:	440b      	add	r3, r1
 800b49c:	4313      	orrs	r3, r2
 800b49e:	d002      	beq.n	800b4a6 <__ieee754_pow+0x60e>
 800b4a0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800b578 <__ieee754_pow+0x6e0>
 800b4a4:	e660      	b.n	800b168 <__ieee754_pow+0x2d0>
 800b4a6:	ee35 5b46 	vsub.f64	d5, d5, d6
 800b4aa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b2:	f6ff af6d 	blt.w	800b390 <__ieee754_pow+0x4f8>
 800b4b6:	e7f3      	b.n	800b4a0 <__ieee754_pow+0x608>
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	e78d      	b.n	800b3d8 <__ieee754_pow+0x540>
 800b4bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	ec43 2b10 	vmov	d0, r2, r3
 800b4c6:	e7de      	b.n	800b486 <__ieee754_pow+0x5ee>
 800b4c8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b4cc:	e54d      	b.n	800af6a <__ieee754_pow+0xd2>
 800b4ce:	e9cd 6700 	strd	r6, r7, [sp]
 800b4d2:	e574      	b.n	800afbe <__ieee754_pow+0x126>
 800b4d4:	ed8d 8b00 	vstr	d8, [sp]
 800b4d8:	e571      	b.n	800afbe <__ieee754_pow+0x126>
 800b4da:	4615      	mov	r5, r2
 800b4dc:	e557      	b.n	800af8e <__ieee754_pow+0xf6>
 800b4de:	bf00      	nop
 800b4e0:	00000000 	.word	0x00000000
 800b4e4:	43400000 	.word	0x43400000
 800b4e8:	4a454eef 	.word	0x4a454eef
 800b4ec:	3fca7e28 	.word	0x3fca7e28
 800b4f0:	93c9db65 	.word	0x93c9db65
 800b4f4:	3fcd864a 	.word	0x3fcd864a
 800b4f8:	a91d4101 	.word	0xa91d4101
 800b4fc:	3fd17460 	.word	0x3fd17460
 800b500:	518f264d 	.word	0x518f264d
 800b504:	3fd55555 	.word	0x3fd55555
 800b508:	db6fabff 	.word	0xdb6fabff
 800b50c:	3fdb6db6 	.word	0x3fdb6db6
 800b510:	33333303 	.word	0x33333303
 800b514:	3fe33333 	.word	0x3fe33333
 800b518:	dc3a03fd 	.word	0xdc3a03fd
 800b51c:	3feec709 	.word	0x3feec709
 800b520:	145b01f5 	.word	0x145b01f5
 800b524:	be3e2fe0 	.word	0xbe3e2fe0
 800b528:	e0000000 	.word	0xe0000000
 800b52c:	3feec709 	.word	0x3feec709
 800b530:	652b82fe 	.word	0x652b82fe
 800b534:	3c971547 	.word	0x3c971547
 800b538:	fefa39ef 	.word	0xfefa39ef
 800b53c:	3fe62e42 	.word	0x3fe62e42
 800b540:	0ca86c39 	.word	0x0ca86c39
 800b544:	be205c61 	.word	0xbe205c61
 800b548:	00000000 	.word	0x00000000
 800b54c:	3fe62e43 	.word	0x3fe62e43
 800b550:	72bea4d0 	.word	0x72bea4d0
 800b554:	3e663769 	.word	0x3e663769
 800b558:	c5d26bf1 	.word	0xc5d26bf1
 800b55c:	bebbbd41 	.word	0xbebbbd41
 800b560:	af25de2c 	.word	0xaf25de2c
 800b564:	3f11566a 	.word	0x3f11566a
 800b568:	16bebd93 	.word	0x16bebd93
 800b56c:	bf66c16c 	.word	0xbf66c16c
 800b570:	5555553e 	.word	0x5555553e
 800b574:	3fc55555 	.word	0x3fc55555
 800b578:	c2f8f359 	.word	0xc2f8f359
 800b57c:	01a56e1f 	.word	0x01a56e1f
 800b580:	0003988e 	.word	0x0003988e
 800b584:	000bb679 	.word	0x000bb679
 800b588:	08028938 	.word	0x08028938
 800b58c:	08028958 	.word	0x08028958
 800b590:	08028948 	.word	0x08028948
 800b594:	3fe00000 	.word	0x3fe00000
 800b598:	000fffff 	.word	0x000fffff
 800b59c:	4090cbff 	.word	0x4090cbff
 800b5a0:	3f6f3400 	.word	0x3f6f3400

0800b5a4 <__ieee754_sqrt>:
 800b5a4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800b5a8:	4770      	bx	lr
	...

0800b5ac <__ieee754_rem_pio2f>:
 800b5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5ae:	ee10 6a10 	vmov	r6, s0
 800b5b2:	4b86      	ldr	r3, [pc, #536]	; (800b7cc <__ieee754_rem_pio2f+0x220>)
 800b5b4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800b5b8:	429c      	cmp	r4, r3
 800b5ba:	b087      	sub	sp, #28
 800b5bc:	4605      	mov	r5, r0
 800b5be:	dc05      	bgt.n	800b5cc <__ieee754_rem_pio2f+0x20>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	ed85 0a00 	vstr	s0, [r5]
 800b5c6:	6043      	str	r3, [r0, #4]
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	e020      	b.n	800b60e <__ieee754_rem_pio2f+0x62>
 800b5cc:	4b80      	ldr	r3, [pc, #512]	; (800b7d0 <__ieee754_rem_pio2f+0x224>)
 800b5ce:	429c      	cmp	r4, r3
 800b5d0:	dc38      	bgt.n	800b644 <__ieee754_rem_pio2f+0x98>
 800b5d2:	2e00      	cmp	r6, #0
 800b5d4:	f024 040f 	bic.w	r4, r4, #15
 800b5d8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800b7d4 <__ieee754_rem_pio2f+0x228>
 800b5dc:	4b7e      	ldr	r3, [pc, #504]	; (800b7d8 <__ieee754_rem_pio2f+0x22c>)
 800b5de:	dd18      	ble.n	800b612 <__ieee754_rem_pio2f+0x66>
 800b5e0:	429c      	cmp	r4, r3
 800b5e2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b5e6:	bf09      	itett	eq
 800b5e8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800b7dc <__ieee754_rem_pio2f+0x230>
 800b5ec:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800b7e0 <__ieee754_rem_pio2f+0x234>
 800b5f0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b5f4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800b7e4 <__ieee754_rem_pio2f+0x238>
 800b5f8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b5fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b600:	edc0 6a00 	vstr	s13, [r0]
 800b604:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b608:	edc0 7a01 	vstr	s15, [r0, #4]
 800b60c:	2001      	movs	r0, #1
 800b60e:	b007      	add	sp, #28
 800b610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b612:	429c      	cmp	r4, r3
 800b614:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b618:	bf09      	itett	eq
 800b61a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800b7dc <__ieee754_rem_pio2f+0x230>
 800b61e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800b7e0 <__ieee754_rem_pio2f+0x234>
 800b622:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b626:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800b7e4 <__ieee754_rem_pio2f+0x238>
 800b62a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b62e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b632:	edc0 6a00 	vstr	s13, [r0]
 800b636:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b63a:	edc0 7a01 	vstr	s15, [r0, #4]
 800b63e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b642:	e7e4      	b.n	800b60e <__ieee754_rem_pio2f+0x62>
 800b644:	4b68      	ldr	r3, [pc, #416]	; (800b7e8 <__ieee754_rem_pio2f+0x23c>)
 800b646:	429c      	cmp	r4, r3
 800b648:	dc71      	bgt.n	800b72e <__ieee754_rem_pio2f+0x182>
 800b64a:	f7ff f8b3 	bl	800a7b4 <fabsf>
 800b64e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b7ec <__ieee754_rem_pio2f+0x240>
 800b652:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b656:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b65a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b65e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800b662:	ee17 0a90 	vmov	r0, s15
 800b666:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b7d4 <__ieee754_rem_pio2f+0x228>
 800b66a:	eeb1 7a46 	vneg.f32	s14, s12
 800b66e:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b672:	281f      	cmp	r0, #31
 800b674:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b7e0 <__ieee754_rem_pio2f+0x234>
 800b678:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b67c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b680:	ee16 3a90 	vmov	r3, s13
 800b684:	dc1c      	bgt.n	800b6c0 <__ieee754_rem_pio2f+0x114>
 800b686:	1e47      	subs	r7, r0, #1
 800b688:	4959      	ldr	r1, [pc, #356]	; (800b7f0 <__ieee754_rem_pio2f+0x244>)
 800b68a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b68e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800b692:	428a      	cmp	r2, r1
 800b694:	d014      	beq.n	800b6c0 <__ieee754_rem_pio2f+0x114>
 800b696:	602b      	str	r3, [r5, #0]
 800b698:	ed95 7a00 	vldr	s14, [r5]
 800b69c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b6a0:	2e00      	cmp	r6, #0
 800b6a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b6a6:	ed85 0a01 	vstr	s0, [r5, #4]
 800b6aa:	dab0      	bge.n	800b60e <__ieee754_rem_pio2f+0x62>
 800b6ac:	eeb1 7a47 	vneg.f32	s14, s14
 800b6b0:	eeb1 0a40 	vneg.f32	s0, s0
 800b6b4:	ed85 7a00 	vstr	s14, [r5]
 800b6b8:	ed85 0a01 	vstr	s0, [r5, #4]
 800b6bc:	4240      	negs	r0, r0
 800b6be:	e7a6      	b.n	800b60e <__ieee754_rem_pio2f+0x62>
 800b6c0:	15e4      	asrs	r4, r4, #23
 800b6c2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b6c6:	1aa2      	subs	r2, r4, r2
 800b6c8:	2a08      	cmp	r2, #8
 800b6ca:	dde4      	ble.n	800b696 <__ieee754_rem_pio2f+0xea>
 800b6cc:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b7dc <__ieee754_rem_pio2f+0x230>
 800b6d0:	eef0 6a40 	vmov.f32	s13, s0
 800b6d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b6d8:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b6dc:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b6e0:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b7e4 <__ieee754_rem_pio2f+0x238>
 800b6e4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800b6e8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b6ec:	eef0 7a40 	vmov.f32	s15, s0
 800b6f0:	ee15 3a90 	vmov	r3, s11
 800b6f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b6f8:	1aa4      	subs	r4, r4, r2
 800b6fa:	2c19      	cmp	r4, #25
 800b6fc:	dc04      	bgt.n	800b708 <__ieee754_rem_pio2f+0x15c>
 800b6fe:	edc5 5a00 	vstr	s11, [r5]
 800b702:	eeb0 0a66 	vmov.f32	s0, s13
 800b706:	e7c7      	b.n	800b698 <__ieee754_rem_pio2f+0xec>
 800b708:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b7f4 <__ieee754_rem_pio2f+0x248>
 800b70c:	eeb0 0a66 	vmov.f32	s0, s13
 800b710:	eea7 0a25 	vfma.f32	s0, s14, s11
 800b714:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b718:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b71c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b7f8 <__ieee754_rem_pio2f+0x24c>
 800b720:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800b724:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b728:	ed85 7a00 	vstr	s14, [r5]
 800b72c:	e7b4      	b.n	800b698 <__ieee754_rem_pio2f+0xec>
 800b72e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b732:	db06      	blt.n	800b742 <__ieee754_rem_pio2f+0x196>
 800b734:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b738:	edc0 7a01 	vstr	s15, [r0, #4]
 800b73c:	edc0 7a00 	vstr	s15, [r0]
 800b740:	e742      	b.n	800b5c8 <__ieee754_rem_pio2f+0x1c>
 800b742:	15e2      	asrs	r2, r4, #23
 800b744:	3a86      	subs	r2, #134	; 0x86
 800b746:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800b74a:	ee07 3a90 	vmov	s15, r3
 800b74e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b752:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800b7fc <__ieee754_rem_pio2f+0x250>
 800b756:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b75a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b75e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b762:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b766:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b76a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b76e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b772:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b776:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b77a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b782:	edcd 7a05 	vstr	s15, [sp, #20]
 800b786:	d11e      	bne.n	800b7c6 <__ieee754_rem_pio2f+0x21a>
 800b788:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b790:	bf0c      	ite	eq
 800b792:	2301      	moveq	r3, #1
 800b794:	2302      	movne	r3, #2
 800b796:	491a      	ldr	r1, [pc, #104]	; (800b800 <__ieee754_rem_pio2f+0x254>)
 800b798:	9101      	str	r1, [sp, #4]
 800b79a:	2102      	movs	r1, #2
 800b79c:	9100      	str	r1, [sp, #0]
 800b79e:	a803      	add	r0, sp, #12
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	f000 f89d 	bl	800b8e0 <__kernel_rem_pio2f>
 800b7a6:	2e00      	cmp	r6, #0
 800b7a8:	f6bf af31 	bge.w	800b60e <__ieee754_rem_pio2f+0x62>
 800b7ac:	edd5 7a00 	vldr	s15, [r5]
 800b7b0:	eef1 7a67 	vneg.f32	s15, s15
 800b7b4:	edc5 7a00 	vstr	s15, [r5]
 800b7b8:	edd5 7a01 	vldr	s15, [r5, #4]
 800b7bc:	eef1 7a67 	vneg.f32	s15, s15
 800b7c0:	edc5 7a01 	vstr	s15, [r5, #4]
 800b7c4:	e77a      	b.n	800b6bc <__ieee754_rem_pio2f+0x110>
 800b7c6:	2303      	movs	r3, #3
 800b7c8:	e7e5      	b.n	800b796 <__ieee754_rem_pio2f+0x1ea>
 800b7ca:	bf00      	nop
 800b7cc:	3f490fd8 	.word	0x3f490fd8
 800b7d0:	4016cbe3 	.word	0x4016cbe3
 800b7d4:	3fc90f80 	.word	0x3fc90f80
 800b7d8:	3fc90fd0 	.word	0x3fc90fd0
 800b7dc:	37354400 	.word	0x37354400
 800b7e0:	37354443 	.word	0x37354443
 800b7e4:	2e85a308 	.word	0x2e85a308
 800b7e8:	43490f80 	.word	0x43490f80
 800b7ec:	3f22f984 	.word	0x3f22f984
 800b7f0:	08028968 	.word	0x08028968
 800b7f4:	2e85a300 	.word	0x2e85a300
 800b7f8:	248d3132 	.word	0x248d3132
 800b7fc:	43800000 	.word	0x43800000
 800b800:	080289e8 	.word	0x080289e8

0800b804 <__ieee754_sinhf>:
 800b804:	b510      	push	{r4, lr}
 800b806:	ee10 3a10 	vmov	r3, s0
 800b80a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b80e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b812:	ed2d 8b02 	vpush	{d8}
 800b816:	eef0 7a40 	vmov.f32	s15, s0
 800b81a:	db06      	blt.n	800b82a <__ieee754_sinhf+0x26>
 800b81c:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b820:	ecbd 8b02 	vpop	{d8}
 800b824:	eeb0 0a67 	vmov.f32	s0, s15
 800b828:	bd10      	pop	{r4, pc}
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	4b28      	ldr	r3, [pc, #160]	; (800b8d0 <__ieee754_sinhf+0xcc>)
 800b82e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800b832:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800b836:	fe28 8a88 	vselge.f32	s16, s17, s16
 800b83a:	429c      	cmp	r4, r3
 800b83c:	dc2a      	bgt.n	800b894 <__ieee754_sinhf+0x90>
 800b83e:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 800b842:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b846:	da08      	bge.n	800b85a <__ieee754_sinhf+0x56>
 800b848:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800b8d4 <__ieee754_sinhf+0xd0>
 800b84c:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b850:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800b854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b858:	dce2      	bgt.n	800b820 <__ieee754_sinhf+0x1c>
 800b85a:	eeb0 0a67 	vmov.f32	s0, s15
 800b85e:	f7fe ffa9 	bl	800a7b4 <fabsf>
 800b862:	f000 fd13 	bl	800c28c <expm1f>
 800b866:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b86a:	bfbb      	ittet	lt
 800b86c:	ee20 7a00 	vmullt.f32	s14, s0, s0
 800b870:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 800b874:	ee70 8a28 	vaddge.f32	s17, s0, s17
 800b878:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 800b87c:	bfad      	iteet	ge
 800b87e:	eec0 7a28 	vdivge.f32	s15, s0, s17
 800b882:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 800b886:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 800b88a:	ee77 7a80 	vaddge.f32	s15, s15, s0
 800b88e:	ee67 7a88 	vmul.f32	s15, s15, s16
 800b892:	e7c5      	b.n	800b820 <__ieee754_sinhf+0x1c>
 800b894:	4b10      	ldr	r3, [pc, #64]	; (800b8d8 <__ieee754_sinhf+0xd4>)
 800b896:	429c      	cmp	r4, r3
 800b898:	dc06      	bgt.n	800b8a8 <__ieee754_sinhf+0xa4>
 800b89a:	f7fe ff8b 	bl	800a7b4 <fabsf>
 800b89e:	f7fe ff0b 	bl	800a6b8 <expf>
 800b8a2:	ee60 7a08 	vmul.f32	s15, s0, s16
 800b8a6:	e7bb      	b.n	800b820 <__ieee754_sinhf+0x1c>
 800b8a8:	4b0c      	ldr	r3, [pc, #48]	; (800b8dc <__ieee754_sinhf+0xd8>)
 800b8aa:	429c      	cmp	r4, r3
 800b8ac:	dc0a      	bgt.n	800b8c4 <__ieee754_sinhf+0xc0>
 800b8ae:	f7fe ff81 	bl	800a7b4 <fabsf>
 800b8b2:	ee20 0a28 	vmul.f32	s0, s0, s17
 800b8b6:	f7fe feff 	bl	800a6b8 <expf>
 800b8ba:	ee68 7a00 	vmul.f32	s15, s16, s0
 800b8be:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b8c2:	e7ad      	b.n	800b820 <__ieee754_sinhf+0x1c>
 800b8c4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800b8d4 <__ieee754_sinhf+0xd0>
 800b8c8:	ee60 7a07 	vmul.f32	s15, s0, s14
 800b8cc:	e7a8      	b.n	800b820 <__ieee754_sinhf+0x1c>
 800b8ce:	bf00      	nop
 800b8d0:	41afffff 	.word	0x41afffff
 800b8d4:	7cf0bdc2 	.word	0x7cf0bdc2
 800b8d8:	42b17217 	.word	0x42b17217
 800b8dc:	42b2d4fc 	.word	0x42b2d4fc

0800b8e0 <__kernel_rem_pio2f>:
 800b8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e4:	ed2d 8b04 	vpush	{d8-d9}
 800b8e8:	b0d7      	sub	sp, #348	; 0x15c
 800b8ea:	469b      	mov	fp, r3
 800b8ec:	460e      	mov	r6, r1
 800b8ee:	4bbe      	ldr	r3, [pc, #760]	; (800bbe8 <__kernel_rem_pio2f+0x308>)
 800b8f0:	9964      	ldr	r1, [sp, #400]	; 0x190
 800b8f2:	9002      	str	r0, [sp, #8]
 800b8f4:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800b8f8:	9865      	ldr	r0, [sp, #404]	; 0x194
 800b8fa:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800bbf8 <__kernel_rem_pio2f+0x318>
 800b8fe:	1ed1      	subs	r1, r2, #3
 800b900:	2308      	movs	r3, #8
 800b902:	fb91 f1f3 	sdiv	r1, r1, r3
 800b906:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800b90a:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800b90e:	1c4c      	adds	r4, r1, #1
 800b910:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800b914:	eba1 050a 	sub.w	r5, r1, sl
 800b918:	aa1a      	add	r2, sp, #104	; 0x68
 800b91a:	eb09 070a 	add.w	r7, r9, sl
 800b91e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800b922:	4696      	mov	lr, r2
 800b924:	2300      	movs	r3, #0
 800b926:	42bb      	cmp	r3, r7
 800b928:	dd0f      	ble.n	800b94a <__kernel_rem_pio2f+0x6a>
 800b92a:	af42      	add	r7, sp, #264	; 0x108
 800b92c:	2200      	movs	r2, #0
 800b92e:	454a      	cmp	r2, r9
 800b930:	dc27      	bgt.n	800b982 <__kernel_rem_pio2f+0xa2>
 800b932:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800b936:	eb0b 0302 	add.w	r3, fp, r2
 800b93a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800b93e:	9d02      	ldr	r5, [sp, #8]
 800b940:	eddf 7aad 	vldr	s15, [pc, #692]	; 800bbf8 <__kernel_rem_pio2f+0x318>
 800b944:	f04f 0c00 	mov.w	ip, #0
 800b948:	e015      	b.n	800b976 <__kernel_rem_pio2f+0x96>
 800b94a:	42dd      	cmn	r5, r3
 800b94c:	bf5d      	ittte	pl
 800b94e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800b952:	ee07 2a90 	vmovpl	s15, r2
 800b956:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b95a:	eef0 7a47 	vmovmi.f32	s15, s14
 800b95e:	ecee 7a01 	vstmia	lr!, {s15}
 800b962:	3301      	adds	r3, #1
 800b964:	e7df      	b.n	800b926 <__kernel_rem_pio2f+0x46>
 800b966:	ecf5 6a01 	vldmia	r5!, {s13}
 800b96a:	ed33 7a01 	vldmdb	r3!, {s14}
 800b96e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b972:	f10c 0c01 	add.w	ip, ip, #1
 800b976:	45d4      	cmp	ip, sl
 800b978:	ddf5      	ble.n	800b966 <__kernel_rem_pio2f+0x86>
 800b97a:	ece7 7a01 	vstmia	r7!, {s15}
 800b97e:	3201      	adds	r2, #1
 800b980:	e7d5      	b.n	800b92e <__kernel_rem_pio2f+0x4e>
 800b982:	ab06      	add	r3, sp, #24
 800b984:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b988:	9304      	str	r3, [sp, #16]
 800b98a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800bbf4 <__kernel_rem_pio2f+0x314>
 800b98e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800bbf0 <__kernel_rem_pio2f+0x310>
 800b992:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800b996:	9303      	str	r3, [sp, #12]
 800b998:	464d      	mov	r5, r9
 800b99a:	ab56      	add	r3, sp, #344	; 0x158
 800b99c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800b9a0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800b9a4:	3f01      	subs	r7, #1
 800b9a6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800b9aa:	00bf      	lsls	r7, r7, #2
 800b9ac:	ab56      	add	r3, sp, #344	; 0x158
 800b9ae:	19da      	adds	r2, r3, r7
 800b9b0:	3a4c      	subs	r2, #76	; 0x4c
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	1ae9      	subs	r1, r5, r3
 800b9b6:	2900      	cmp	r1, #0
 800b9b8:	dc4c      	bgt.n	800ba54 <__kernel_rem_pio2f+0x174>
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 fddc 	bl	800c578 <scalbnf>
 800b9c0:	eeb0 8a40 	vmov.f32	s16, s0
 800b9c4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b9c8:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b9cc:	f000 fd92 	bl	800c4f4 <floorf>
 800b9d0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b9d4:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b9d8:	2c00      	cmp	r4, #0
 800b9da:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b9de:	edcd 7a01 	vstr	s15, [sp, #4]
 800b9e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9e6:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b9ea:	dd48      	ble.n	800ba7e <__kernel_rem_pio2f+0x19e>
 800b9ec:	1e69      	subs	r1, r5, #1
 800b9ee:	ab06      	add	r3, sp, #24
 800b9f0:	f1c4 0008 	rsb	r0, r4, #8
 800b9f4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800b9f8:	9a01      	ldr	r2, [sp, #4]
 800b9fa:	fa4c f300 	asr.w	r3, ip, r0
 800b9fe:	441a      	add	r2, r3
 800ba00:	4083      	lsls	r3, r0
 800ba02:	9201      	str	r2, [sp, #4]
 800ba04:	ebac 0203 	sub.w	r2, ip, r3
 800ba08:	ab06      	add	r3, sp, #24
 800ba0a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800ba0e:	f1c4 0307 	rsb	r3, r4, #7
 800ba12:	fa42 f803 	asr.w	r8, r2, r3
 800ba16:	f1b8 0f00 	cmp.w	r8, #0
 800ba1a:	dd41      	ble.n	800baa0 <__kernel_rem_pio2f+0x1c0>
 800ba1c:	9b01      	ldr	r3, [sp, #4]
 800ba1e:	2000      	movs	r0, #0
 800ba20:	3301      	adds	r3, #1
 800ba22:	9301      	str	r3, [sp, #4]
 800ba24:	4601      	mov	r1, r0
 800ba26:	4285      	cmp	r5, r0
 800ba28:	dc6d      	bgt.n	800bb06 <__kernel_rem_pio2f+0x226>
 800ba2a:	2c00      	cmp	r4, #0
 800ba2c:	dd04      	ble.n	800ba38 <__kernel_rem_pio2f+0x158>
 800ba2e:	2c01      	cmp	r4, #1
 800ba30:	d07e      	beq.n	800bb30 <__kernel_rem_pio2f+0x250>
 800ba32:	2c02      	cmp	r4, #2
 800ba34:	f000 8086 	beq.w	800bb44 <__kernel_rem_pio2f+0x264>
 800ba38:	f1b8 0f02 	cmp.w	r8, #2
 800ba3c:	d130      	bne.n	800baa0 <__kernel_rem_pio2f+0x1c0>
 800ba3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ba42:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ba46:	b359      	cbz	r1, 800baa0 <__kernel_rem_pio2f+0x1c0>
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f000 fd95 	bl	800c578 <scalbnf>
 800ba4e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ba52:	e025      	b.n	800baa0 <__kernel_rem_pio2f+0x1c0>
 800ba54:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ba58:	a806      	add	r0, sp, #24
 800ba5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba62:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ba66:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba6a:	ee10 1a10 	vmov	r1, s0
 800ba6e:	ed32 0a01 	vldmdb	r2!, {s0}
 800ba72:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800ba76:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	e79a      	b.n	800b9b4 <__kernel_rem_pio2f+0xd4>
 800ba7e:	d106      	bne.n	800ba8e <__kernel_rem_pio2f+0x1ae>
 800ba80:	1e6b      	subs	r3, r5, #1
 800ba82:	aa06      	add	r2, sp, #24
 800ba84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ba88:	ea4f 2822 	mov.w	r8, r2, asr #8
 800ba8c:	e7c3      	b.n	800ba16 <__kernel_rem_pio2f+0x136>
 800ba8e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ba92:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ba96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba9a:	da31      	bge.n	800bb00 <__kernel_rem_pio2f+0x220>
 800ba9c:	f04f 0800 	mov.w	r8, #0
 800baa0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800baa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa8:	f040 80a8 	bne.w	800bbfc <__kernel_rem_pio2f+0x31c>
 800baac:	1e6b      	subs	r3, r5, #1
 800baae:	4618      	mov	r0, r3
 800bab0:	2200      	movs	r2, #0
 800bab2:	4548      	cmp	r0, r9
 800bab4:	da4d      	bge.n	800bb52 <__kernel_rem_pio2f+0x272>
 800bab6:	2a00      	cmp	r2, #0
 800bab8:	f000 8087 	beq.w	800bbca <__kernel_rem_pio2f+0x2ea>
 800babc:	aa06      	add	r2, sp, #24
 800babe:	3c08      	subs	r4, #8
 800bac0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bac4:	2900      	cmp	r1, #0
 800bac6:	f000 808d 	beq.w	800bbe4 <__kernel_rem_pio2f+0x304>
 800baca:	4620      	mov	r0, r4
 800bacc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bad0:	9302      	str	r3, [sp, #8]
 800bad2:	f000 fd51 	bl	800c578 <scalbnf>
 800bad6:	9b02      	ldr	r3, [sp, #8]
 800bad8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800bbf4 <__kernel_rem_pio2f+0x314>
 800badc:	0099      	lsls	r1, r3, #2
 800bade:	aa42      	add	r2, sp, #264	; 0x108
 800bae0:	1850      	adds	r0, r2, r1
 800bae2:	1d05      	adds	r5, r0, #4
 800bae4:	461c      	mov	r4, r3
 800bae6:	2c00      	cmp	r4, #0
 800bae8:	f280 80b8 	bge.w	800bc5c <__kernel_rem_pio2f+0x37c>
 800baec:	2500      	movs	r5, #0
 800baee:	1b5c      	subs	r4, r3, r5
 800baf0:	2c00      	cmp	r4, #0
 800baf2:	f2c0 80d8 	blt.w	800bca6 <__kernel_rem_pio2f+0x3c6>
 800baf6:	4f3d      	ldr	r7, [pc, #244]	; (800bbec <__kernel_rem_pio2f+0x30c>)
 800baf8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800bbf8 <__kernel_rem_pio2f+0x318>
 800bafc:	2400      	movs	r4, #0
 800bafe:	e0c6      	b.n	800bc8e <__kernel_rem_pio2f+0x3ae>
 800bb00:	f04f 0802 	mov.w	r8, #2
 800bb04:	e78a      	b.n	800ba1c <__kernel_rem_pio2f+0x13c>
 800bb06:	ab06      	add	r3, sp, #24
 800bb08:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bb0c:	b949      	cbnz	r1, 800bb22 <__kernel_rem_pio2f+0x242>
 800bb0e:	b12b      	cbz	r3, 800bb1c <__kernel_rem_pio2f+0x23c>
 800bb10:	aa06      	add	r2, sp, #24
 800bb12:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800bb16:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	4619      	mov	r1, r3
 800bb20:	e781      	b.n	800ba26 <__kernel_rem_pio2f+0x146>
 800bb22:	aa06      	add	r2, sp, #24
 800bb24:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800bb28:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	e7f5      	b.n	800bb1c <__kernel_rem_pio2f+0x23c>
 800bb30:	1e68      	subs	r0, r5, #1
 800bb32:	ab06      	add	r3, sp, #24
 800bb34:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bb38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb3c:	aa06      	add	r2, sp, #24
 800bb3e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800bb42:	e779      	b.n	800ba38 <__kernel_rem_pio2f+0x158>
 800bb44:	1e68      	subs	r0, r5, #1
 800bb46:	ab06      	add	r3, sp, #24
 800bb48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bb4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb50:	e7f4      	b.n	800bb3c <__kernel_rem_pio2f+0x25c>
 800bb52:	a906      	add	r1, sp, #24
 800bb54:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bb58:	3801      	subs	r0, #1
 800bb5a:	430a      	orrs	r2, r1
 800bb5c:	e7a9      	b.n	800bab2 <__kernel_rem_pio2f+0x1d2>
 800bb5e:	f10c 0c01 	add.w	ip, ip, #1
 800bb62:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bb66:	2a00      	cmp	r2, #0
 800bb68:	d0f9      	beq.n	800bb5e <__kernel_rem_pio2f+0x27e>
 800bb6a:	eb0b 0305 	add.w	r3, fp, r5
 800bb6e:	aa1a      	add	r2, sp, #104	; 0x68
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	1898      	adds	r0, r3, r2
 800bb74:	3004      	adds	r0, #4
 800bb76:	1c69      	adds	r1, r5, #1
 800bb78:	3704      	adds	r7, #4
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	4465      	add	r5, ip
 800bb7e:	9005      	str	r0, [sp, #20]
 800bb80:	428d      	cmp	r5, r1
 800bb82:	f6ff af0a 	blt.w	800b99a <__kernel_rem_pio2f+0xba>
 800bb86:	a81a      	add	r0, sp, #104	; 0x68
 800bb88:	eb02 0c03 	add.w	ip, r2, r3
 800bb8c:	4484      	add	ip, r0
 800bb8e:	9803      	ldr	r0, [sp, #12]
 800bb90:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bb94:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800bb98:	9001      	str	r0, [sp, #4]
 800bb9a:	ee07 0a90 	vmov	s15, r0
 800bb9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bba2:	9805      	ldr	r0, [sp, #20]
 800bba4:	edcc 7a00 	vstr	s15, [ip]
 800bba8:	eddf 7a13 	vldr	s15, [pc, #76]	; 800bbf8 <__kernel_rem_pio2f+0x318>
 800bbac:	eb00 0802 	add.w	r8, r0, r2
 800bbb0:	f04f 0c00 	mov.w	ip, #0
 800bbb4:	45d4      	cmp	ip, sl
 800bbb6:	dd0c      	ble.n	800bbd2 <__kernel_rem_pio2f+0x2f2>
 800bbb8:	eb02 0c07 	add.w	ip, r2, r7
 800bbbc:	a842      	add	r0, sp, #264	; 0x108
 800bbbe:	4484      	add	ip, r0
 800bbc0:	edcc 7a01 	vstr	s15, [ip, #4]
 800bbc4:	3101      	adds	r1, #1
 800bbc6:	3204      	adds	r2, #4
 800bbc8:	e7da      	b.n	800bb80 <__kernel_rem_pio2f+0x2a0>
 800bbca:	9b04      	ldr	r3, [sp, #16]
 800bbcc:	f04f 0c01 	mov.w	ip, #1
 800bbd0:	e7c7      	b.n	800bb62 <__kernel_rem_pio2f+0x282>
 800bbd2:	ecfe 6a01 	vldmia	lr!, {s13}
 800bbd6:	ed38 7a01 	vldmdb	r8!, {s14}
 800bbda:	f10c 0c01 	add.w	ip, ip, #1
 800bbde:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bbe2:	e7e7      	b.n	800bbb4 <__kernel_rem_pio2f+0x2d4>
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	e769      	b.n	800babc <__kernel_rem_pio2f+0x1dc>
 800bbe8:	08028d2c 	.word	0x08028d2c
 800bbec:	08028d00 	.word	0x08028d00
 800bbf0:	43800000 	.word	0x43800000
 800bbf4:	3b800000 	.word	0x3b800000
 800bbf8:	00000000 	.word	0x00000000
 800bbfc:	4260      	negs	r0, r4
 800bbfe:	eeb0 0a48 	vmov.f32	s0, s16
 800bc02:	f000 fcb9 	bl	800c578 <scalbnf>
 800bc06:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800bbf0 <__kernel_rem_pio2f+0x310>
 800bc0a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc12:	db1a      	blt.n	800bc4a <__kernel_rem_pio2f+0x36a>
 800bc14:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800bbf4 <__kernel_rem_pio2f+0x314>
 800bc18:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bc1c:	aa06      	add	r2, sp, #24
 800bc1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc22:	a906      	add	r1, sp, #24
 800bc24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc28:	3408      	adds	r4, #8
 800bc2a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bc2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc32:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bc36:	ee10 3a10 	vmov	r3, s0
 800bc3a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800bc3e:	1c6b      	adds	r3, r5, #1
 800bc40:	ee17 2a90 	vmov	r2, s15
 800bc44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bc48:	e73f      	b.n	800baca <__kernel_rem_pio2f+0x1ea>
 800bc4a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bc4e:	aa06      	add	r2, sp, #24
 800bc50:	ee10 3a10 	vmov	r3, s0
 800bc54:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800bc58:	462b      	mov	r3, r5
 800bc5a:	e736      	b.n	800baca <__kernel_rem_pio2f+0x1ea>
 800bc5c:	aa06      	add	r2, sp, #24
 800bc5e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800bc62:	9202      	str	r2, [sp, #8]
 800bc64:	ee07 2a90 	vmov	s15, r2
 800bc68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc6c:	3c01      	subs	r4, #1
 800bc6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bc72:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bc76:	ed65 7a01 	vstmdb	r5!, {s15}
 800bc7a:	e734      	b.n	800bae6 <__kernel_rem_pio2f+0x206>
 800bc7c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800bc80:	ecf7 6a01 	vldmia	r7!, {s13}
 800bc84:	ed9c 7a00 	vldr	s14, [ip]
 800bc88:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bc8c:	3401      	adds	r4, #1
 800bc8e:	454c      	cmp	r4, r9
 800bc90:	dc01      	bgt.n	800bc96 <__kernel_rem_pio2f+0x3b6>
 800bc92:	42a5      	cmp	r5, r4
 800bc94:	daf2      	bge.n	800bc7c <__kernel_rem_pio2f+0x39c>
 800bc96:	aa56      	add	r2, sp, #344	; 0x158
 800bc98:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800bc9c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800bca0:	3501      	adds	r5, #1
 800bca2:	3804      	subs	r0, #4
 800bca4:	e723      	b.n	800baee <__kernel_rem_pio2f+0x20e>
 800bca6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800bca8:	2a03      	cmp	r2, #3
 800bcaa:	d84d      	bhi.n	800bd48 <__kernel_rem_pio2f+0x468>
 800bcac:	e8df f002 	tbb	[pc, r2]
 800bcb0:	021f1f3e 	.word	0x021f1f3e
 800bcb4:	aa56      	add	r2, sp, #344	; 0x158
 800bcb6:	4411      	add	r1, r2
 800bcb8:	399c      	subs	r1, #156	; 0x9c
 800bcba:	4608      	mov	r0, r1
 800bcbc:	461c      	mov	r4, r3
 800bcbe:	2c00      	cmp	r4, #0
 800bcc0:	dc5f      	bgt.n	800bd82 <__kernel_rem_pio2f+0x4a2>
 800bcc2:	4608      	mov	r0, r1
 800bcc4:	461c      	mov	r4, r3
 800bcc6:	2c01      	cmp	r4, #1
 800bcc8:	dc6b      	bgt.n	800bda2 <__kernel_rem_pio2f+0x4c2>
 800bcca:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800bbf8 <__kernel_rem_pio2f+0x318>
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	dc77      	bgt.n	800bdc2 <__kernel_rem_pio2f+0x4e2>
 800bcd2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800bcd6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800bcda:	f1b8 0f00 	cmp.w	r8, #0
 800bcde:	d176      	bne.n	800bdce <__kernel_rem_pio2f+0x4ee>
 800bce0:	edc6 6a00 	vstr	s13, [r6]
 800bce4:	ed86 7a01 	vstr	s14, [r6, #4]
 800bce8:	edc6 7a02 	vstr	s15, [r6, #8]
 800bcec:	e02c      	b.n	800bd48 <__kernel_rem_pio2f+0x468>
 800bcee:	aa56      	add	r2, sp, #344	; 0x158
 800bcf0:	4411      	add	r1, r2
 800bcf2:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800bbf8 <__kernel_rem_pio2f+0x318>
 800bcf6:	399c      	subs	r1, #156	; 0x9c
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	da32      	bge.n	800bd64 <__kernel_rem_pio2f+0x484>
 800bcfe:	f1b8 0f00 	cmp.w	r8, #0
 800bd02:	d035      	beq.n	800bd70 <__kernel_rem_pio2f+0x490>
 800bd04:	eef1 7a47 	vneg.f32	s15, s14
 800bd08:	edc6 7a00 	vstr	s15, [r6]
 800bd0c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800bd10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd14:	a82f      	add	r0, sp, #188	; 0xbc
 800bd16:	2101      	movs	r1, #1
 800bd18:	428b      	cmp	r3, r1
 800bd1a:	da2c      	bge.n	800bd76 <__kernel_rem_pio2f+0x496>
 800bd1c:	f1b8 0f00 	cmp.w	r8, #0
 800bd20:	d001      	beq.n	800bd26 <__kernel_rem_pio2f+0x446>
 800bd22:	eef1 7a67 	vneg.f32	s15, s15
 800bd26:	edc6 7a01 	vstr	s15, [r6, #4]
 800bd2a:	e00d      	b.n	800bd48 <__kernel_rem_pio2f+0x468>
 800bd2c:	aa56      	add	r2, sp, #344	; 0x158
 800bd2e:	4411      	add	r1, r2
 800bd30:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800bbf8 <__kernel_rem_pio2f+0x318>
 800bd34:	399c      	subs	r1, #156	; 0x9c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	da0e      	bge.n	800bd58 <__kernel_rem_pio2f+0x478>
 800bd3a:	f1b8 0f00 	cmp.w	r8, #0
 800bd3e:	d001      	beq.n	800bd44 <__kernel_rem_pio2f+0x464>
 800bd40:	eef1 7a67 	vneg.f32	s15, s15
 800bd44:	edc6 7a00 	vstr	s15, [r6]
 800bd48:	9b01      	ldr	r3, [sp, #4]
 800bd4a:	f003 0007 	and.w	r0, r3, #7
 800bd4e:	b057      	add	sp, #348	; 0x15c
 800bd50:	ecbd 8b04 	vpop	{d8-d9}
 800bd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd58:	ed31 7a01 	vldmdb	r1!, {s14}
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd62:	e7e8      	b.n	800bd36 <__kernel_rem_pio2f+0x456>
 800bd64:	ed71 7a01 	vldmdb	r1!, {s15}
 800bd68:	3801      	subs	r0, #1
 800bd6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd6e:	e7c4      	b.n	800bcfa <__kernel_rem_pio2f+0x41a>
 800bd70:	eef0 7a47 	vmov.f32	s15, s14
 800bd74:	e7c8      	b.n	800bd08 <__kernel_rem_pio2f+0x428>
 800bd76:	ecb0 7a01 	vldmia	r0!, {s14}
 800bd7a:	3101      	adds	r1, #1
 800bd7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd80:	e7ca      	b.n	800bd18 <__kernel_rem_pio2f+0x438>
 800bd82:	ed50 7a02 	vldr	s15, [r0, #-8]
 800bd86:	ed70 6a01 	vldmdb	r0!, {s13}
 800bd8a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bd8e:	3c01      	subs	r4, #1
 800bd90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd94:	ed00 7a01 	vstr	s14, [r0, #-4]
 800bd98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd9c:	edc0 7a00 	vstr	s15, [r0]
 800bda0:	e78d      	b.n	800bcbe <__kernel_rem_pio2f+0x3de>
 800bda2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800bda6:	ed70 6a01 	vldmdb	r0!, {s13}
 800bdaa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bdae:	3c01      	subs	r4, #1
 800bdb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdb4:	ed00 7a01 	vstr	s14, [r0, #-4]
 800bdb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdbc:	edc0 7a00 	vstr	s15, [r0]
 800bdc0:	e781      	b.n	800bcc6 <__kernel_rem_pio2f+0x3e6>
 800bdc2:	ed31 7a01 	vldmdb	r1!, {s14}
 800bdc6:	3b01      	subs	r3, #1
 800bdc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdcc:	e77f      	b.n	800bcce <__kernel_rem_pio2f+0x3ee>
 800bdce:	eef1 6a66 	vneg.f32	s13, s13
 800bdd2:	eeb1 7a47 	vneg.f32	s14, s14
 800bdd6:	edc6 6a00 	vstr	s13, [r6]
 800bdda:	ed86 7a01 	vstr	s14, [r6, #4]
 800bdde:	eef1 7a67 	vneg.f32	s15, s15
 800bde2:	e781      	b.n	800bce8 <__kernel_rem_pio2f+0x408>

0800bde4 <__kernel_tanf>:
 800bde4:	b508      	push	{r3, lr}
 800bde6:	ee10 3a10 	vmov	r3, s0
 800bdea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bdee:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800bdf2:	eef0 7a40 	vmov.f32	s15, s0
 800bdf6:	da17      	bge.n	800be28 <__kernel_tanf+0x44>
 800bdf8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800bdfc:	ee17 1a10 	vmov	r1, s14
 800be00:	bb41      	cbnz	r1, 800be54 <__kernel_tanf+0x70>
 800be02:	1c43      	adds	r3, r0, #1
 800be04:	4313      	orrs	r3, r2
 800be06:	d108      	bne.n	800be1a <__kernel_tanf+0x36>
 800be08:	f7fe fcd4 	bl	800a7b4 <fabsf>
 800be0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be10:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800be14:	eeb0 0a67 	vmov.f32	s0, s15
 800be18:	bd08      	pop	{r3, pc}
 800be1a:	2801      	cmp	r0, #1
 800be1c:	d0fa      	beq.n	800be14 <__kernel_tanf+0x30>
 800be1e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800be22:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800be26:	e7f5      	b.n	800be14 <__kernel_tanf+0x30>
 800be28:	494e      	ldr	r1, [pc, #312]	; (800bf64 <__kernel_tanf+0x180>)
 800be2a:	428a      	cmp	r2, r1
 800be2c:	dd12      	ble.n	800be54 <__kernel_tanf+0x70>
 800be2e:	2b00      	cmp	r3, #0
 800be30:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800bf68 <__kernel_tanf+0x184>
 800be34:	bfb8      	it	lt
 800be36:	eef1 7a40 	vneglt.f32	s15, s0
 800be3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be3e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800bf6c <__kernel_tanf+0x188>
 800be42:	bfb8      	it	lt
 800be44:	eef1 0a60 	vneglt.f32	s1, s1
 800be48:	ee77 0a60 	vsub.f32	s1, s14, s1
 800be4c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800be50:	eddf 0a47 	vldr	s1, [pc, #284]	; 800bf70 <__kernel_tanf+0x18c>
 800be54:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800bf74 <__kernel_tanf+0x190>
 800be58:	eddf 5a47 	vldr	s11, [pc, #284]	; 800bf78 <__kernel_tanf+0x194>
 800be5c:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800bf7c <__kernel_tanf+0x198>
 800be60:	4940      	ldr	r1, [pc, #256]	; (800bf64 <__kernel_tanf+0x180>)
 800be62:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800be66:	428a      	cmp	r2, r1
 800be68:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800be6c:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800be70:	eee7 5a06 	vfma.f32	s11, s14, s12
 800be74:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800bf80 <__kernel_tanf+0x19c>
 800be78:	eea5 6a87 	vfma.f32	s12, s11, s14
 800be7c:	eddf 5a41 	vldr	s11, [pc, #260]	; 800bf84 <__kernel_tanf+0x1a0>
 800be80:	eee6 5a07 	vfma.f32	s11, s12, s14
 800be84:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800bf88 <__kernel_tanf+0x1a4>
 800be88:	eea5 6a87 	vfma.f32	s12, s11, s14
 800be8c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800bf8c <__kernel_tanf+0x1a8>
 800be90:	eee6 5a07 	vfma.f32	s11, s12, s14
 800be94:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800bf90 <__kernel_tanf+0x1ac>
 800be98:	eea7 6a05 	vfma.f32	s12, s14, s10
 800be9c:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800bf94 <__kernel_tanf+0x1b0>
 800bea0:	eea6 5a07 	vfma.f32	s10, s12, s14
 800bea4:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800bf98 <__kernel_tanf+0x1b4>
 800bea8:	eea5 6a07 	vfma.f32	s12, s10, s14
 800beac:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800bf9c <__kernel_tanf+0x1b8>
 800beb0:	eea6 5a07 	vfma.f32	s10, s12, s14
 800beb4:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800bfa0 <__kernel_tanf+0x1bc>
 800beb8:	eea5 6a07 	vfma.f32	s12, s10, s14
 800bebc:	eeb0 7a46 	vmov.f32	s14, s12
 800bec0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bec4:	eeb0 6a60 	vmov.f32	s12, s1
 800bec8:	eea7 6a24 	vfma.f32	s12, s14, s9
 800becc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800bfa4 <__kernel_tanf+0x1c0>
 800bed0:	eee6 0a26 	vfma.f32	s1, s12, s13
 800bed4:	eee4 0a87 	vfma.f32	s1, s9, s14
 800bed8:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800bedc:	dd1d      	ble.n	800bf1a <__kernel_tanf+0x136>
 800bede:	ee07 0a10 	vmov	s14, r0
 800bee2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bee6:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800beea:	ee76 6a87 	vadd.f32	s13, s13, s14
 800beee:	179b      	asrs	r3, r3, #30
 800bef0:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800bef4:	f003 0302 	and.w	r3, r3, #2
 800bef8:	f1c3 0301 	rsb	r3, r3, #1
 800befc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bf00:	ee76 0a60 	vsub.f32	s1, s12, s1
 800bf04:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bf08:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800bf0c:	ee07 3a90 	vmov	s15, r3
 800bf10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf18:	e77c      	b.n	800be14 <__kernel_tanf+0x30>
 800bf1a:	2801      	cmp	r0, #1
 800bf1c:	d01f      	beq.n	800bf5e <__kernel_tanf+0x17a>
 800bf1e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bf22:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800bf26:	4b20      	ldr	r3, [pc, #128]	; (800bfa8 <__kernel_tanf+0x1c4>)
 800bf28:	ee16 2a90 	vmov	r2, s13
 800bf2c:	401a      	ands	r2, r3
 800bf2e:	ee06 2a10 	vmov	s12, r2
 800bf32:	ee15 2a90 	vmov	r2, s11
 800bf36:	4013      	ands	r3, r2
 800bf38:	ee07 3a10 	vmov	s14, r3
 800bf3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf40:	eee6 6a07 	vfma.f32	s13, s12, s14
 800bf44:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bf48:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800bf4c:	eef0 7a66 	vmov.f32	s15, s13
 800bf50:	eee7 7a20 	vfma.f32	s15, s14, s1
 800bf54:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bf58:	eef0 7a47 	vmov.f32	s15, s14
 800bf5c:	e75a      	b.n	800be14 <__kernel_tanf+0x30>
 800bf5e:	eef0 7a66 	vmov.f32	s15, s13
 800bf62:	e757      	b.n	800be14 <__kernel_tanf+0x30>
 800bf64:	3f2ca13f 	.word	0x3f2ca13f
 800bf68:	3f490fda 	.word	0x3f490fda
 800bf6c:	33222168 	.word	0x33222168
 800bf70:	00000000 	.word	0x00000000
 800bf74:	37d95384 	.word	0x37d95384
 800bf78:	3895c07a 	.word	0x3895c07a
 800bf7c:	b79bae5f 	.word	0xb79bae5f
 800bf80:	398137b9 	.word	0x398137b9
 800bf84:	3abede48 	.word	0x3abede48
 800bf88:	3c11371f 	.word	0x3c11371f
 800bf8c:	3d5d0dd1 	.word	0x3d5d0dd1
 800bf90:	38a3f445 	.word	0x38a3f445
 800bf94:	3a1a26c8 	.word	0x3a1a26c8
 800bf98:	3b6b6916 	.word	0x3b6b6916
 800bf9c:	3cb327a4 	.word	0x3cb327a4
 800bfa0:	3e088889 	.word	0x3e088889
 800bfa4:	3eaaaaab 	.word	0x3eaaaaab
 800bfa8:	fffff000 	.word	0xfffff000

0800bfac <with_errnof>:
 800bfac:	b510      	push	{r4, lr}
 800bfae:	ed2d 8b02 	vpush	{d8}
 800bfb2:	eeb0 8a40 	vmov.f32	s16, s0
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	f7fe fb22 	bl	800a600 <__errno>
 800bfbc:	eeb0 0a48 	vmov.f32	s0, s16
 800bfc0:	ecbd 8b02 	vpop	{d8}
 800bfc4:	6004      	str	r4, [r0, #0]
 800bfc6:	bd10      	pop	{r4, pc}

0800bfc8 <xflowf>:
 800bfc8:	b130      	cbz	r0, 800bfd8 <xflowf+0x10>
 800bfca:	eef1 7a40 	vneg.f32	s15, s0
 800bfce:	2022      	movs	r0, #34	; 0x22
 800bfd0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bfd4:	f7ff bfea 	b.w	800bfac <with_errnof>
 800bfd8:	eef0 7a40 	vmov.f32	s15, s0
 800bfdc:	e7f7      	b.n	800bfce <xflowf+0x6>
	...

0800bfe0 <__math_uflowf>:
 800bfe0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bfe8 <__math_uflowf+0x8>
 800bfe4:	f7ff bff0 	b.w	800bfc8 <xflowf>
 800bfe8:	10000000 	.word	0x10000000

0800bfec <__math_may_uflowf>:
 800bfec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bff4 <__math_may_uflowf+0x8>
 800bff0:	f7ff bfea 	b.w	800bfc8 <xflowf>
 800bff4:	1a200000 	.word	0x1a200000

0800bff8 <__math_oflowf>:
 800bff8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c000 <__math_oflowf+0x8>
 800bffc:	f7ff bfe4 	b.w	800bfc8 <xflowf>
 800c000:	70000000 	.word	0x70000000

0800c004 <__math_divzerof>:
 800c004:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c008:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c00c:	2800      	cmp	r0, #0
 800c00e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800c012:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c020 <__math_divzerof+0x1c>
 800c016:	2022      	movs	r0, #34	; 0x22
 800c018:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c01c:	f7ff bfc6 	b.w	800bfac <with_errnof>
 800c020:	00000000 	.word	0x00000000

0800c024 <__math_invalidf>:
 800c024:	eef0 7a40 	vmov.f32	s15, s0
 800c028:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c02c:	eef4 7a67 	vcmp.f32	s15, s15
 800c030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c034:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800c038:	d602      	bvs.n	800c040 <__math_invalidf+0x1c>
 800c03a:	2021      	movs	r0, #33	; 0x21
 800c03c:	f7ff bfb6 	b.w	800bfac <with_errnof>
 800c040:	4770      	bx	lr

0800c042 <fabs>:
 800c042:	ec51 0b10 	vmov	r0, r1, d0
 800c046:	ee10 2a10 	vmov	r2, s0
 800c04a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c04e:	ec43 2b10 	vmov	d0, r2, r3
 800c052:	4770      	bx	lr

0800c054 <finite>:
 800c054:	ee10 3a90 	vmov	r3, s1
 800c058:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800c05c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c060:	0fc0      	lsrs	r0, r0, #31
 800c062:	4770      	bx	lr

0800c064 <matherr>:
 800c064:	2000      	movs	r0, #0
 800c066:	4770      	bx	lr

0800c068 <nan>:
 800c068:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c070 <nan+0x8>
 800c06c:	4770      	bx	lr
 800c06e:	bf00      	nop
 800c070:	00000000 	.word	0x00000000
 800c074:	7ff80000 	.word	0x7ff80000

0800c078 <rint>:
 800c078:	b530      	push	{r4, r5, lr}
 800c07a:	b085      	sub	sp, #20
 800c07c:	ed8d 0b00 	vstr	d0, [sp]
 800c080:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c084:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800c088:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 800c08c:	2813      	cmp	r0, #19
 800c08e:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800c092:	dc5a      	bgt.n	800c14a <rint+0xd2>
 800c094:	2800      	cmp	r0, #0
 800c096:	da2f      	bge.n	800c0f8 <rint+0x80>
 800c098:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c09c:	4311      	orrs	r1, r2
 800c09e:	d027      	beq.n	800c0f0 <rint+0x78>
 800c0a0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800c0a4:	4315      	orrs	r5, r2
 800c0a6:	426a      	negs	r2, r5
 800c0a8:	432a      	orrs	r2, r5
 800c0aa:	0b12      	lsrs	r2, r2, #12
 800c0ac:	0c5b      	lsrs	r3, r3, #17
 800c0ae:	045b      	lsls	r3, r3, #17
 800c0b0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800c0b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0b8:	ea42 0103 	orr.w	r1, r2, r3
 800c0bc:	4b31      	ldr	r3, [pc, #196]	; (800c184 <rint+0x10c>)
 800c0be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c0c2:	ed93 6b00 	vldr	d6, [r3]
 800c0c6:	ec41 0b17 	vmov	d7, r0, r1
 800c0ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c0ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c0da:	ed8d 7b00 	vstr	d7, [sp]
 800c0de:	9b01      	ldr	r3, [sp, #4]
 800c0e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0e8:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800c0ec:	e9cd 0100 	strd	r0, r1, [sp]
 800c0f0:	ed9d 0b00 	vldr	d0, [sp]
 800c0f4:	b005      	add	sp, #20
 800c0f6:	bd30      	pop	{r4, r5, pc}
 800c0f8:	4923      	ldr	r1, [pc, #140]	; (800c188 <rint+0x110>)
 800c0fa:	4101      	asrs	r1, r0
 800c0fc:	ea03 0501 	and.w	r5, r3, r1
 800c100:	4315      	orrs	r5, r2
 800c102:	d0f5      	beq.n	800c0f0 <rint+0x78>
 800c104:	0849      	lsrs	r1, r1, #1
 800c106:	ea03 0501 	and.w	r5, r3, r1
 800c10a:	432a      	orrs	r2, r5
 800c10c:	d00b      	beq.n	800c126 <rint+0xae>
 800c10e:	ea23 0101 	bic.w	r1, r3, r1
 800c112:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c116:	2813      	cmp	r0, #19
 800c118:	fa43 f300 	asr.w	r3, r3, r0
 800c11c:	bf0c      	ite	eq
 800c11e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800c122:	2200      	movne	r2, #0
 800c124:	430b      	orrs	r3, r1
 800c126:	4619      	mov	r1, r3
 800c128:	4b16      	ldr	r3, [pc, #88]	; (800c184 <rint+0x10c>)
 800c12a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c12e:	ed94 6b00 	vldr	d6, [r4]
 800c132:	4610      	mov	r0, r2
 800c134:	ec41 0b17 	vmov	d7, r0, r1
 800c138:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c13c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c140:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c144:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c148:	e008      	b.n	800c15c <rint+0xe4>
 800c14a:	2833      	cmp	r0, #51	; 0x33
 800c14c:	dd09      	ble.n	800c162 <rint+0xea>
 800c14e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800c152:	d1cd      	bne.n	800c0f0 <rint+0x78>
 800c154:	ed9d 7b00 	vldr	d7, [sp]
 800c158:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c15c:	ed8d 7b00 	vstr	d7, [sp]
 800c160:	e7c6      	b.n	800c0f0 <rint+0x78>
 800c162:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 800c166:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c16a:	40c1      	lsrs	r1, r0
 800c16c:	420a      	tst	r2, r1
 800c16e:	d0bf      	beq.n	800c0f0 <rint+0x78>
 800c170:	0849      	lsrs	r1, r1, #1
 800c172:	420a      	tst	r2, r1
 800c174:	bf1f      	itttt	ne
 800c176:	ea22 0101 	bicne.w	r1, r2, r1
 800c17a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800c17e:	4102      	asrne	r2, r0
 800c180:	430a      	orrne	r2, r1
 800c182:	e7d0      	b.n	800c126 <rint+0xae>
 800c184:	08028d38 	.word	0x08028d38
 800c188:	000fffff 	.word	0x000fffff
 800c18c:	00000000 	.word	0x00000000

0800c190 <scalbn>:
 800c190:	b500      	push	{lr}
 800c192:	ed2d 8b02 	vpush	{d8}
 800c196:	b083      	sub	sp, #12
 800c198:	ed8d 0b00 	vstr	d0, [sp]
 800c19c:	9b01      	ldr	r3, [sp, #4]
 800c19e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c1a2:	b9a2      	cbnz	r2, 800c1ce <scalbn+0x3e>
 800c1a4:	9a00      	ldr	r2, [sp, #0]
 800c1a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	d03a      	beq.n	800c224 <scalbn+0x94>
 800c1ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800c268 <scalbn+0xd8>
 800c1b2:	4b35      	ldr	r3, [pc, #212]	; (800c288 <scalbn+0xf8>)
 800c1b4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c1b8:	4298      	cmp	r0, r3
 800c1ba:	ed8d 7b00 	vstr	d7, [sp]
 800c1be:	da11      	bge.n	800c1e4 <scalbn+0x54>
 800c1c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800c270 <scalbn+0xe0>
 800c1c4:	ed9d 6b00 	vldr	d6, [sp]
 800c1c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c1cc:	e007      	b.n	800c1de <scalbn+0x4e>
 800c1ce:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c1d2:	428a      	cmp	r2, r1
 800c1d4:	d10a      	bne.n	800c1ec <scalbn+0x5c>
 800c1d6:	ed9d 7b00 	vldr	d7, [sp]
 800c1da:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c1de:	ed8d 7b00 	vstr	d7, [sp]
 800c1e2:	e01f      	b.n	800c224 <scalbn+0x94>
 800c1e4:	9b01      	ldr	r3, [sp, #4]
 800c1e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c1ea:	3a36      	subs	r2, #54	; 0x36
 800c1ec:	4402      	add	r2, r0
 800c1ee:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c1f2:	428a      	cmp	r2, r1
 800c1f4:	dd0a      	ble.n	800c20c <scalbn+0x7c>
 800c1f6:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800c278 <scalbn+0xe8>
 800c1fa:	eeb0 0b48 	vmov.f64	d0, d8
 800c1fe:	ed9d 1b00 	vldr	d1, [sp]
 800c202:	f000 fa19 	bl	800c638 <copysign>
 800c206:	ee20 7b08 	vmul.f64	d7, d0, d8
 800c20a:	e7e8      	b.n	800c1de <scalbn+0x4e>
 800c20c:	2a00      	cmp	r2, #0
 800c20e:	dd10      	ble.n	800c232 <scalbn+0xa2>
 800c210:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c214:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c218:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c21c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c220:	e9cd 0100 	strd	r0, r1, [sp]
 800c224:	ed9d 0b00 	vldr	d0, [sp]
 800c228:	b003      	add	sp, #12
 800c22a:	ecbd 8b02 	vpop	{d8}
 800c22e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c232:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c236:	da06      	bge.n	800c246 <scalbn+0xb6>
 800c238:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c23c:	4298      	cmp	r0, r3
 800c23e:	dcda      	bgt.n	800c1f6 <scalbn+0x66>
 800c240:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800c270 <scalbn+0xe0>
 800c244:	e7d9      	b.n	800c1fa <scalbn+0x6a>
 800c246:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c24a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c24e:	3236      	adds	r2, #54	; 0x36
 800c250:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c254:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c258:	ec41 0b17 	vmov	d7, r0, r1
 800c25c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800c280 <scalbn+0xf0>
 800c260:	e7b2      	b.n	800c1c8 <scalbn+0x38>
 800c262:	bf00      	nop
 800c264:	f3af 8000 	nop.w
 800c268:	00000000 	.word	0x00000000
 800c26c:	43500000 	.word	0x43500000
 800c270:	c2f8f359 	.word	0xc2f8f359
 800c274:	01a56e1f 	.word	0x01a56e1f
 800c278:	8800759c 	.word	0x8800759c
 800c27c:	7e37e43c 	.word	0x7e37e43c
 800c280:	00000000 	.word	0x00000000
 800c284:	3c900000 	.word	0x3c900000
 800c288:	ffff3cb0 	.word	0xffff3cb0

0800c28c <expm1f>:
 800c28c:	ee10 2a10 	vmov	r2, s0
 800c290:	4984      	ldr	r1, [pc, #528]	; (800c4a4 <expm1f+0x218>)
 800c292:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c296:	428b      	cmp	r3, r1
 800c298:	d923      	bls.n	800c2e2 <expm1f+0x56>
 800c29a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c29e:	d902      	bls.n	800c2a6 <expm1f+0x1a>
 800c2a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2a4:	4770      	bx	lr
 800c2a6:	d105      	bne.n	800c2b4 <expm1f+0x28>
 800c2a8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c2ac:	2a00      	cmp	r2, #0
 800c2ae:	fe20 0a27 	vselge.f32	s0, s0, s15
 800c2b2:	4770      	bx	lr
 800c2b4:	2a00      	cmp	r2, #0
 800c2b6:	db08      	blt.n	800c2ca <expm1f+0x3e>
 800c2b8:	4a7b      	ldr	r2, [pc, #492]	; (800c4a8 <expm1f+0x21c>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	f240 80ea 	bls.w	800c494 <expm1f+0x208>
 800c2c0:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800c4ac <expm1f+0x220>
 800c2c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c2c8:	4770      	bx	lr
 800c2ca:	eddf 7a79 	vldr	s15, [pc, #484]	; 800c4b0 <expm1f+0x224>
 800c2ce:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c2d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2da:	d554      	bpl.n	800c386 <expm1f+0xfa>
 800c2dc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c2e0:	4770      	bx	lr
 800c2e2:	4974      	ldr	r1, [pc, #464]	; (800c4b4 <expm1f+0x228>)
 800c2e4:	428b      	cmp	r3, r1
 800c2e6:	d96c      	bls.n	800c3c2 <expm1f+0x136>
 800c2e8:	4973      	ldr	r1, [pc, #460]	; (800c4b8 <expm1f+0x22c>)
 800c2ea:	428b      	cmp	r3, r1
 800c2ec:	d84b      	bhi.n	800c386 <expm1f+0xfa>
 800c2ee:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c4bc <expm1f+0x230>
 800c2f2:	2a00      	cmp	r2, #0
 800c2f4:	bfa7      	ittee	ge
 800c2f6:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800c2fa:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800c4c0 <expm1f+0x234>
 800c2fe:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800c4c4 <expm1f+0x238>
 800c302:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800c306:	bfac      	ite	ge
 800c308:	2301      	movge	r3, #1
 800c30a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c30e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c312:	ee37 7a40 	vsub.f32	s14, s14, s0
 800c316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c31a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800c31e:	ee20 5a25 	vmul.f32	s10, s0, s11
 800c322:	eddf 6a69 	vldr	s13, [pc, #420]	; 800c4c8 <expm1f+0x23c>
 800c326:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800c4cc <expm1f+0x240>
 800c32a:	ee20 7a05 	vmul.f32	s14, s0, s10
 800c32e:	eea7 6a26 	vfma.f32	s12, s14, s13
 800c332:	eddf 6a67 	vldr	s13, [pc, #412]	; 800c4d0 <expm1f+0x244>
 800c336:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c33a:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800c4d4 <expm1f+0x248>
 800c33e:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c342:	eddf 6a65 	vldr	s13, [pc, #404]	; 800c4d8 <expm1f+0x24c>
 800c346:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c34a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c34e:	eef0 4a46 	vmov.f32	s9, s12
 800c352:	eee6 4a87 	vfma.f32	s9, s13, s14
 800c356:	eef0 6a64 	vmov.f32	s13, s9
 800c35a:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800c35e:	eee5 4a66 	vfms.f32	s9, s10, s13
 800c362:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800c366:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800c36a:	eee0 6a64 	vfms.f32	s13, s0, s9
 800c36e:	eef0 4a66 	vmov.f32	s9, s13
 800c372:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800c376:	ee66 6a87 	vmul.f32	s13, s13, s14
 800c37a:	bb83      	cbnz	r3, 800c3de <expm1f+0x152>
 800c37c:	eef0 7a47 	vmov.f32	s15, s14
 800c380:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800c384:	e026      	b.n	800c3d4 <expm1f+0x148>
 800c386:	eddf 7a55 	vldr	s15, [pc, #340]	; 800c4dc <expm1f+0x250>
 800c38a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c38e:	ee20 7a27 	vmul.f32	s14, s0, s15
 800c392:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800c396:	2a00      	cmp	r2, #0
 800c398:	fe66 7aa7 	vselge.f32	s15, s13, s15
 800c39c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3a0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800c4bc <expm1f+0x230>
 800c3a4:	eddf 6a46 	vldr	s13, [pc, #280]	; 800c4c0 <expm1f+0x234>
 800c3a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3ac:	ee17 3a90 	vmov	r3, s15
 800c3b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3b4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c3b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3bc:	eeb0 7a40 	vmov.f32	s14, s0
 800c3c0:	e7a5      	b.n	800c30e <expm1f+0x82>
 800c3c2:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800c3c6:	d208      	bcs.n	800c3da <expm1f+0x14e>
 800c3c8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800c4ac <expm1f+0x220>
 800c3cc:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c3d0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800c3d4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c3d8:	4770      	bx	lr
 800c3da:	2300      	movs	r3, #0
 800c3dc:	e79d      	b.n	800c31a <expm1f+0x8e>
 800c3de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c3e2:	1c5a      	adds	r2, r3, #1
 800c3e4:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800c3e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3ec:	d106      	bne.n	800c3fc <expm1f+0x170>
 800c3ee:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c3f2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800c3f6:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800c3fa:	4770      	bx	lr
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d118      	bne.n	800c432 <expm1f+0x1a6>
 800c400:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800c404:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c40c:	bf41      	itttt	mi
 800c40e:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800c412:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800c416:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800c41a:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800c41e:	bf5f      	itttt	pl
 800c420:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800c424:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800c428:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800c42c:	eeb0 0a46 	vmovpl.f32	s0, s12
 800c430:	4770      	bx	lr
 800c432:	1c5a      	adds	r2, r3, #1
 800c434:	2a39      	cmp	r2, #57	; 0x39
 800c436:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800c43a:	d90b      	bls.n	800c454 <expm1f+0x1c8>
 800c43c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c440:	ee36 0a40 	vsub.f32	s0, s12, s0
 800c444:	ee10 3a10 	vmov	r3, s0
 800c448:	440b      	add	r3, r1
 800c44a:	ee00 3a10 	vmov	s0, r3
 800c44e:	ee30 0a46 	vsub.f32	s0, s0, s12
 800c452:	4770      	bx	lr
 800c454:	2b16      	cmp	r3, #22
 800c456:	dc11      	bgt.n	800c47c <expm1f+0x1f0>
 800c458:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c45c:	fa42 f303 	asr.w	r3, r2, r3
 800c460:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800c464:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c468:	ee07 3a90 	vmov	s15, r3
 800c46c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c470:	ee10 3a10 	vmov	r3, s0
 800c474:	440b      	add	r3, r1
 800c476:	ee00 3a10 	vmov	s0, r3
 800c47a:	4770      	bx	lr
 800c47c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800c480:	05db      	lsls	r3, r3, #23
 800c482:	ee07 3a10 	vmov	s14, r3
 800c486:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c48a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c48e:	ee30 0a06 	vadd.f32	s0, s0, s12
 800c492:	e7ed      	b.n	800c470 <expm1f+0x1e4>
 800c494:	eddf 7a11 	vldr	s15, [pc, #68]	; 800c4dc <expm1f+0x250>
 800c498:	ee20 7a27 	vmul.f32	s14, s0, s15
 800c49c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c4a0:	e77c      	b.n	800c39c <expm1f+0x110>
 800c4a2:	bf00      	nop
 800c4a4:	4195b843 	.word	0x4195b843
 800c4a8:	42b17217 	.word	0x42b17217
 800c4ac:	7149f2ca 	.word	0x7149f2ca
 800c4b0:	0da24260 	.word	0x0da24260
 800c4b4:	3eb17218 	.word	0x3eb17218
 800c4b8:	3f851591 	.word	0x3f851591
 800c4bc:	3f317180 	.word	0x3f317180
 800c4c0:	3717f7d1 	.word	0x3717f7d1
 800c4c4:	b717f7d1 	.word	0xb717f7d1
 800c4c8:	b457edbb 	.word	0xb457edbb
 800c4cc:	36867e54 	.word	0x36867e54
 800c4d0:	b8a670cd 	.word	0xb8a670cd
 800c4d4:	3ad00d01 	.word	0x3ad00d01
 800c4d8:	bd088889 	.word	0xbd088889
 800c4dc:	3fb8aa3b 	.word	0x3fb8aa3b

0800c4e0 <finitef>:
 800c4e0:	ee10 3a10 	vmov	r3, s0
 800c4e4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800c4e8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c4ec:	bfac      	ite	ge
 800c4ee:	2000      	movge	r0, #0
 800c4f0:	2001      	movlt	r0, #1
 800c4f2:	4770      	bx	lr

0800c4f4 <floorf>:
 800c4f4:	ee10 3a10 	vmov	r3, s0
 800c4f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c4fc:	0dca      	lsrs	r2, r1, #23
 800c4fe:	3a7f      	subs	r2, #127	; 0x7f
 800c500:	2a16      	cmp	r2, #22
 800c502:	dc2a      	bgt.n	800c55a <floorf+0x66>
 800c504:	2a00      	cmp	r2, #0
 800c506:	da11      	bge.n	800c52c <floorf+0x38>
 800c508:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c56c <floorf+0x78>
 800c50c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c510:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c518:	dd05      	ble.n	800c526 <floorf+0x32>
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	da23      	bge.n	800c566 <floorf+0x72>
 800c51e:	4a14      	ldr	r2, [pc, #80]	; (800c570 <floorf+0x7c>)
 800c520:	2900      	cmp	r1, #0
 800c522:	bf18      	it	ne
 800c524:	4613      	movne	r3, r2
 800c526:	ee00 3a10 	vmov	s0, r3
 800c52a:	4770      	bx	lr
 800c52c:	4911      	ldr	r1, [pc, #68]	; (800c574 <floorf+0x80>)
 800c52e:	4111      	asrs	r1, r2
 800c530:	420b      	tst	r3, r1
 800c532:	d0fa      	beq.n	800c52a <floorf+0x36>
 800c534:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c56c <floorf+0x78>
 800c538:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c53c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c544:	ddef      	ble.n	800c526 <floorf+0x32>
 800c546:	2b00      	cmp	r3, #0
 800c548:	bfbe      	ittt	lt
 800c54a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c54e:	fa40 f202 	asrlt.w	r2, r0, r2
 800c552:	189b      	addlt	r3, r3, r2
 800c554:	ea23 0301 	bic.w	r3, r3, r1
 800c558:	e7e5      	b.n	800c526 <floorf+0x32>
 800c55a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c55e:	d3e4      	bcc.n	800c52a <floorf+0x36>
 800c560:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c564:	4770      	bx	lr
 800c566:	2300      	movs	r3, #0
 800c568:	e7dd      	b.n	800c526 <floorf+0x32>
 800c56a:	bf00      	nop
 800c56c:	7149f2ca 	.word	0x7149f2ca
 800c570:	bf800000 	.word	0xbf800000
 800c574:	007fffff 	.word	0x007fffff

0800c578 <scalbnf>:
 800c578:	b508      	push	{r3, lr}
 800c57a:	ee10 2a10 	vmov	r2, s0
 800c57e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800c582:	ed2d 8b02 	vpush	{d8}
 800c586:	eef0 0a40 	vmov.f32	s1, s0
 800c58a:	d004      	beq.n	800c596 <scalbnf+0x1e>
 800c58c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c590:	d306      	bcc.n	800c5a0 <scalbnf+0x28>
 800c592:	ee70 0a00 	vadd.f32	s1, s0, s0
 800c596:	ecbd 8b02 	vpop	{d8}
 800c59a:	eeb0 0a60 	vmov.f32	s0, s1
 800c59e:	bd08      	pop	{r3, pc}
 800c5a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5a4:	d21c      	bcs.n	800c5e0 <scalbnf+0x68>
 800c5a6:	4b1f      	ldr	r3, [pc, #124]	; (800c624 <scalbnf+0xac>)
 800c5a8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c628 <scalbnf+0xb0>
 800c5ac:	4298      	cmp	r0, r3
 800c5ae:	ee60 0a27 	vmul.f32	s1, s0, s15
 800c5b2:	db10      	blt.n	800c5d6 <scalbnf+0x5e>
 800c5b4:	ee10 2a90 	vmov	r2, s1
 800c5b8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800c5bc:	3b19      	subs	r3, #25
 800c5be:	4403      	add	r3, r0
 800c5c0:	2bfe      	cmp	r3, #254	; 0xfe
 800c5c2:	dd0f      	ble.n	800c5e4 <scalbnf+0x6c>
 800c5c4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800c62c <scalbnf+0xb4>
 800c5c8:	eeb0 0a48 	vmov.f32	s0, s16
 800c5cc:	f000 f843 	bl	800c656 <copysignf>
 800c5d0:	ee60 0a08 	vmul.f32	s1, s0, s16
 800c5d4:	e7df      	b.n	800c596 <scalbnf+0x1e>
 800c5d6:	eddf 7a16 	vldr	s15, [pc, #88]	; 800c630 <scalbnf+0xb8>
 800c5da:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c5de:	e7da      	b.n	800c596 <scalbnf+0x1e>
 800c5e0:	0ddb      	lsrs	r3, r3, #23
 800c5e2:	e7ec      	b.n	800c5be <scalbnf+0x46>
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	dd06      	ble.n	800c5f6 <scalbnf+0x7e>
 800c5e8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c5ec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c5f0:	ee00 3a90 	vmov	s1, r3
 800c5f4:	e7cf      	b.n	800c596 <scalbnf+0x1e>
 800c5f6:	f113 0f16 	cmn.w	r3, #22
 800c5fa:	da06      	bge.n	800c60a <scalbnf+0x92>
 800c5fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c600:	4298      	cmp	r0, r3
 800c602:	dcdf      	bgt.n	800c5c4 <scalbnf+0x4c>
 800c604:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800c630 <scalbnf+0xb8>
 800c608:	e7de      	b.n	800c5c8 <scalbnf+0x50>
 800c60a:	3319      	adds	r3, #25
 800c60c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c610:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c614:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c634 <scalbnf+0xbc>
 800c618:	ee07 3a10 	vmov	s14, r3
 800c61c:	ee67 0a27 	vmul.f32	s1, s14, s15
 800c620:	e7b9      	b.n	800c596 <scalbnf+0x1e>
 800c622:	bf00      	nop
 800c624:	ffff3cb0 	.word	0xffff3cb0
 800c628:	4c000000 	.word	0x4c000000
 800c62c:	7149f2ca 	.word	0x7149f2ca
 800c630:	0da24260 	.word	0x0da24260
 800c634:	33000000 	.word	0x33000000

0800c638 <copysign>:
 800c638:	ec51 0b10 	vmov	r0, r1, d0
 800c63c:	ee11 0a90 	vmov	r0, s3
 800c640:	ee10 2a10 	vmov	r2, s0
 800c644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c648:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c64c:	ea41 0300 	orr.w	r3, r1, r0
 800c650:	ec43 2b10 	vmov	d0, r2, r3
 800c654:	4770      	bx	lr

0800c656 <copysignf>:
 800c656:	ee10 3a10 	vmov	r3, s0
 800c65a:	ee10 2a90 	vmov	r2, s1
 800c65e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c662:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c666:	4313      	orrs	r3, r2
 800c668:	ee00 3a10 	vmov	s0, r3
 800c66c:	4770      	bx	lr
	...

0800c670 <_init>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	bf00      	nop
 800c674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c676:	bc08      	pop	{r3}
 800c678:	469e      	mov	lr, r3
 800c67a:	4770      	bx	lr

0800c67c <_fini>:
 800c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67e:	bf00      	nop
 800c680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c682:	bc08      	pop	{r3}
 800c684:	469e      	mov	lr, r3
 800c686:	4770      	bx	lr
