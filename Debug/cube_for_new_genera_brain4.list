
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da1c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000202c  0800dcb4  0800dcb4  0001dcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fce0  0800fce0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800fce0  0800fce0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fce0  0800fce0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fce0  0800fce0  0001fce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fce4  0800fce4  0001fce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800fce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014d68  20000018  0800fd00  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20014d80  0800fd00  00024d80  2**0
                  ALLOC
 11 .RAM_D1       0007eb58  24000000  24000000  00030000  2**5
                  ALLOC
 12 .RAM_D2       00001000  30000000  30000000  00030000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00030000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 15 .debug_info   00040251  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00006881  00000000  00000000  00060297  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001f18  00000000  00000000  00066b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001c80  00000000  00000000  00068a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003eb62  00000000  00000000  0006a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   000238dd  00000000  00000000  000a9212  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    001772c9  00000000  00000000  000ccaef  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  00243db8  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000080ec  00000000  00000000  00243e34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000018 	.word	0x20000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800dc9c 	.word	0x0800dc9c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000001c 	.word	0x2000001c
 80002d4:	0800dc9c 	.word	0x0800dc9c

080002d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002de:	2003      	movs	r0, #3
 80002e0:	f001 f9ca 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80002e4:	f005 f8e2 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 80002e8:	4601      	mov	r1, r0
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <HAL_Init+0x68>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	f003 030f 	and.w	r3, r3, #15
 80002f4:	4a13      	ldr	r2, [pc, #76]	; (8000344 <HAL_Init+0x6c>)
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	f003 031f 	and.w	r3, r3, #31
 80002fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000300:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_Init+0x68>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 030f 	and.w	r3, r3, #15
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_Init+0x6c>)
 800030c:	5cd3      	ldrb	r3, [r2, r3]
 800030e:	f003 031f 	and.w	r3, r3, #31
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	fa22 f303 	lsr.w	r3, r2, r3
 8000318:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <HAL_Init+0x70>)
 800031a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800031c:	4a0b      	ldr	r2, [pc, #44]	; (800034c <HAL_Init+0x74>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f814 	bl	8000350 <HAL_InitTick>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800032e:	2301      	movs	r3, #1
 8000330:	e002      	b.n	8000338 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000332:	f00d fb59 	bl	800d9e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000336:	2300      	movs	r3, #0
}
 8000338:	4618      	mov	r0, r3
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	58024400 	.word	0x58024400
 8000344:	0800fcd0 	.word	0x0800fcd0
 8000348:	20000014 	.word	0x20000014
 800034c:	20000010 	.word	0x20000010

08000350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <HAL_InitTick+0x60>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d101      	bne.n	8000364 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000360:	2301      	movs	r3, #1
 8000362:	e021      	b.n	80003a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <HAL_InitTick+0x64>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <HAL_InitTick+0x60>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	4619      	mov	r1, r3
 800036e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000372:	fbb3 f3f1 	udiv	r3, r3, r1
 8000376:	fbb2 f3f3 	udiv	r3, r2, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f001 f9af 	bl	80016de <HAL_SYSTICK_Config>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000386:	2301      	movs	r3, #1
 8000388:	e00e      	b.n	80003a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b0f      	cmp	r3, #15
 800038e:	d80a      	bhi.n	80003a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000390:	2200      	movs	r2, #0
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000398:	f001 f979 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800039c:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <HAL_InitTick+0x68>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003a2:	2300      	movs	r3, #0
 80003a4:	e000      	b.n	80003a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80003a6:	2301      	movs	r3, #1
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000004 	.word	0x20000004
 80003b4:	20000010 	.word	0x20000010
 80003b8:	20000000 	.word	0x20000000

080003bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <HAL_IncTick+0x20>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_IncTick+0x24>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4413      	add	r3, r2
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <HAL_IncTick+0x24>)
 80003ce:	6013      	str	r3, [r2, #0]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000004 	.word	0x20000004
 80003e0:	20000050 	.word	0x20000050

080003e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  return uwTick;
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <HAL_GetTick+0x14>)
 80003ea:	681b      	ldr	r3, [r3, #0]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	20000050 	.word	0x20000050

080003fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000404:	f7ff ffee 	bl	80003e4 <HAL_GetTick>
 8000408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000414:	d005      	beq.n	8000422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <HAL_Delay+0x40>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	461a      	mov	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4413      	add	r3, r2
 8000420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000422:	bf00      	nop
 8000424:	f7ff ffde 	bl	80003e4 <HAL_GetTick>
 8000428:	4602      	mov	r2, r0
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	429a      	cmp	r2, r3
 8000432:	d8f7      	bhi.n	8000424 <HAL_Delay+0x28>
  {
  }
}
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000004 	.word	0x20000004

08000440 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <HAL_GetREVID+0x14>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	0c1b      	lsrs	r3, r3, #16
}
 800044a:	4618      	mov	r0, r3
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	5c001000 	.word	0x5c001000

08000458 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <HAL_SetFMCMemorySwappingConfig+0x24>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8000468:	4904      	ldr	r1, [pc, #16]	; (800047c <HAL_SetFMCMemorySwappingConfig+0x24>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4313      	orrs	r3, r2
 800046e:	600b      	str	r3, [r1, #0]
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	52004000 	.word	0x52004000

08000480 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	431a      	orrs	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	609a      	str	r2, [r3, #8]
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b083      	sub	sp, #12
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
 80004ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	431a      	orrs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	609a      	str	r2, [r3, #8]
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80004dc:	4618      	mov	r0, r3
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80004e8:	b490      	push	{r4, r7}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
 80004f4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	3360      	adds	r3, #96	; 0x60
 80004fa:	461a      	mov	r2, r3
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	4413      	add	r3, r2
 8000502:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000504:	6823      	ldr	r3, [r4, #0]
 8000506:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	430b      	orrs	r3, r1
 8000514:	4313      	orrs	r3, r2
 8000516:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bc90      	pop	{r4, r7}
 8000520:	4770      	bx	lr

08000522 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000522:	b480      	push	{r7}
 8000524:	b085      	sub	sp, #20
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	f003 031f 	and.w	r3, r3, #31
 800053c:	6879      	ldr	r1, [r7, #4]
 800053e:	fa01 f303 	lsl.w	r3, r1, r3
 8000542:	431a      	orrs	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	611a      	str	r2, [r3, #16]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000554:	b490      	push	{r4, r7}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3360      	adds	r3, #96	; 0x60
 8000564:	461a      	mov	r2, r3
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4313      	orrs	r3, r2
 8000578:	6023      	str	r3, [r4, #0]
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bc90      	pop	{r4, r7}
 8000582:	4770      	bx	lr

08000584 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000584:	b490      	push	{r4, r7}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3330      	adds	r3, #48	; 0x30
 8000594:	461a      	mov	r2, r3
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	0a1b      	lsrs	r3, r3, #8
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	f003 030c 	and.w	r3, r3, #12
 80005a0:	4413      	add	r3, r2
 80005a2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80005a4:	6822      	ldr	r2, [r4, #0]
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	f003 031f 	and.w	r3, r3, #31
 80005ac:	211f      	movs	r1, #31
 80005ae:	fa01 f303 	lsl.w	r3, r1, r3
 80005b2:	43db      	mvns	r3, r3
 80005b4:	401a      	ands	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	0e9b      	lsrs	r3, r3, #26
 80005ba:	f003 011f 	and.w	r1, r3, #31
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	f003 031f 	and.w	r3, r3, #31
 80005c4:	fa01 f303 	lsl.w	r3, r1, r3
 80005c8:	4313      	orrs	r3, r2
 80005ca:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc90      	pop	{r4, r7}
 80005d4:	4770      	bx	lr

080005d6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80005d6:	b490      	push	{r4, r7}
 80005d8:	b084      	sub	sp, #16
 80005da:	af00      	add	r7, sp, #0
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3314      	adds	r3, #20
 80005e6:	461a      	mov	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	0e5b      	lsrs	r3, r3, #25
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	4413      	add	r3, r2
 80005f4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80005f6:	6822      	ldr	r2, [r4, #0]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	0d1b      	lsrs	r3, r3, #20
 80005fc:	f003 031f 	and.w	r3, r3, #31
 8000600:	2107      	movs	r1, #7
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	43db      	mvns	r3, r3
 8000608:	401a      	ands	r2, r3
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	0d1b      	lsrs	r3, r3, #20
 800060e:	f003 031f 	and.w	r3, r3, #31
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	fa01 f303 	lsl.w	r3, r1, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bc90      	pop	{r4, r7}
 8000624:	4770      	bx	lr
	...

08000628 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000640:	43db      	mvns	r3, r3
 8000642:	401a      	ands	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0318 	and.w	r3, r3, #24
 800064a:	4908      	ldr	r1, [pc, #32]	; (800066c <LL_ADC_SetChannelSingleDiff+0x44>)
 800064c:	40d9      	lsrs	r1, r3
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	400b      	ands	r3, r1
 8000652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000656:	431a      	orrs	r2, r3
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	000fffff 	.word	0x000fffff

08000670 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	689a      	ldr	r2, [r3, #8]
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <LL_ADC_DisableDeepPowerDown+0x20>)
 800067e:	4013      	ands	r3, r2
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	6093      	str	r3, [r2, #8]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	5fffffc0 	.word	0x5fffffc0

08000694 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006a8:	d101      	bne.n	80006ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80006aa:	2301      	movs	r3, #1
 80006ac:	e000      	b.n	80006b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80006ae:	2300      	movs	r3, #0
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	6fffffc0 	.word	0x6fffffc0

080006e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006f8:	d101      	bne.n	80006fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	2b01      	cmp	r3, #1
 800071e:	d101      	bne.n	8000724 <LL_ADC_IsEnabled+0x18>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <LL_ADC_IsEnabled+0x1a>
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	2b04      	cmp	r3, #4
 8000744:	d101      	bne.n	800074a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000746:	2301      	movs	r3, #1
 8000748:	e000      	b.n	800074c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	f003 0308 	and.w	r3, r3, #8
 8000768:	2b08      	cmp	r3, #8
 800076a:	d101      	bne.n	8000770 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800076c:	2301      	movs	r3, #1
 800076e:	e000      	b.n	8000772 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000788:	2300      	movs	r3, #0
 800078a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e18e      	b.n	8000ab8 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d109      	bne.n	80007bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f00b fb0b 	bl	800bdc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff67 	bl	8000694 <LL_ADC_IsDeepPowerDownEnabled>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d004      	beq.n	80007d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff4d 	bl	8000670 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff82 	bl	80006e4 <LL_ADC_IsInternalRegulatorEnabled>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d113      	bne.n	800080e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff66 	bl	80006bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80007f0:	4b9a      	ldr	r3, [pc, #616]	; (8000a5c <HAL_ADC_Init+0x2dc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	099b      	lsrs	r3, r3, #6
 80007f6:	4a9a      	ldr	r2, [pc, #616]	; (8000a60 <HAL_ADC_Init+0x2e0>)
 80007f8:	fba2 2303 	umull	r2, r3, r2, r3
 80007fc:	099b      	lsrs	r3, r3, #6
 80007fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000800:	e002      	b.n	8000808 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	3b01      	subs	r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f9      	bne.n	8000802 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff66 	bl	80006e4 <LL_ADC_IsInternalRegulatorEnabled>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d10d      	bne.n	800083a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000822:	f043 0210 	orr.w	r2, r3, #16
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082e:	f043 0201 	orr.w	r2, r3, #1
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff77 	bl	8000732 <LL_ADC_REG_IsConversionOngoing>
 8000844:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	2b00      	cmp	r3, #0
 8000850:	f040 8129 	bne.w	8000aa6 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	f040 8125 	bne.w	8000aa6 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000860:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000864:	f043 0202 	orr.w	r2, r3, #2
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff4b 	bl	800070c <LL_ADC_IsEnabled>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d136      	bne.n	80008ea <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a78      	ldr	r2, [pc, #480]	; (8000a64 <HAL_ADC_Init+0x2e4>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d004      	beq.n	8000890 <HAL_ADC_Init+0x110>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a77      	ldr	r2, [pc, #476]	; (8000a68 <HAL_ADC_Init+0x2e8>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d10e      	bne.n	80008ae <HAL_ADC_Init+0x12e>
 8000890:	4874      	ldr	r0, [pc, #464]	; (8000a64 <HAL_ADC_Init+0x2e4>)
 8000892:	f7ff ff3b 	bl	800070c <LL_ADC_IsEnabled>
 8000896:	4604      	mov	r4, r0
 8000898:	4873      	ldr	r0, [pc, #460]	; (8000a68 <HAL_ADC_Init+0x2e8>)
 800089a:	f7ff ff37 	bl	800070c <LL_ADC_IsEnabled>
 800089e:	4603      	mov	r3, r0
 80008a0:	4323      	orrs	r3, r4
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	bf0c      	ite	eq
 80008a6:	2301      	moveq	r3, #1
 80008a8:	2300      	movne	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	e008      	b.n	80008c0 <HAL_ADC_Init+0x140>
 80008ae:	486f      	ldr	r0, [pc, #444]	; (8000a6c <HAL_ADC_Init+0x2ec>)
 80008b0:	f7ff ff2c 	bl	800070c <LL_ADC_IsEnabled>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf0c      	ite	eq
 80008ba:	2301      	moveq	r3, #1
 80008bc:	2300      	movne	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d012      	beq.n	80008ea <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a66      	ldr	r2, [pc, #408]	; (8000a64 <HAL_ADC_Init+0x2e4>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d004      	beq.n	80008d8 <HAL_ADC_Init+0x158>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a65      	ldr	r2, [pc, #404]	; (8000a68 <HAL_ADC_Init+0x2e8>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d101      	bne.n	80008dc <HAL_ADC_Init+0x15c>
 80008d8:	4a65      	ldr	r2, [pc, #404]	; (8000a70 <HAL_ADC_Init+0x2f0>)
 80008da:	e000      	b.n	80008de <HAL_ADC_Init+0x15e>
 80008dc:	4a65      	ldr	r2, [pc, #404]	; (8000a74 <HAL_ADC_Init+0x2f4>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4610      	mov	r0, r2
 80008e6:	f7ff fdcb 	bl	8000480 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80008ea:	f7ff fda9 	bl	8000440 <HAL_GetREVID>
 80008ee:	4602      	mov	r2, r0
 80008f0:	f241 0303 	movw	r3, #4099	; 0x1003
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d914      	bls.n	8000922 <HAL_ADC_Init+0x1a2>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	2b10      	cmp	r3, #16
 80008fe:	d110      	bne.n	8000922 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7d5b      	ldrb	r3, [r3, #21]
 8000904:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800090a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000910:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	7f1b      	ldrb	r3, [r3, #28]
 8000916:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000918:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800091a:	f043 030c 	orr.w	r3, r3, #12
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	e00d      	b.n	800093e <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7d5b      	ldrb	r3, [r3, #21]
 8000926:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800092c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000932:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7f1b      	ldrb	r3, [r3, #28]
 8000938:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800093a:	4313      	orrs	r3, r2
 800093c:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	7f1b      	ldrb	r3, [r3, #28]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d106      	bne.n	8000954 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6a1b      	ldr	r3, [r3, #32]
 800094a:	3b01      	subs	r3, #1
 800094c:	045b      	lsls	r3, r3, #17
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4313      	orrs	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000958:	2b00      	cmp	r3, #0
 800095a:	d009      	beq.n	8000970 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000960:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000968:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	4313      	orrs	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	68da      	ldr	r2, [r3, #12]
 8000976:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <HAL_ADC_Init+0x2f8>)
 8000978:	4013      	ands	r3, r2
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	6812      	ldr	r2, [r2, #0]
 800097e:	69b9      	ldr	r1, [r7, #24]
 8000980:	430b      	orrs	r3, r1
 8000982:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fed2 	bl	8000732 <LL_ADC_REG_IsConversionOngoing>
 800098e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fedf 	bl	8000758 <LL_ADC_INJ_IsConversionOngoing>
 800099a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d14a      	bne.n	8000a38 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d147      	bne.n	8000a38 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7d1b      	ldrb	r3, [r3, #20]
 80009ac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80009b2:	4313      	orrs	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68da      	ldr	r2, [r3, #12]
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <HAL_ADC_Init+0x2fc>)
 80009be:	4013      	ands	r3, r2
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	6812      	ldr	r2, [r2, #0]
 80009c4:	69b9      	ldr	r1, [r7, #24]
 80009c6:	430b      	orrs	r3, r1
 80009c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d11b      	bne.n	8000a0c <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d8:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	691a      	ldr	r2, [r3, #16]
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <HAL_ADC_Init+0x300>)
 80009e2:	4013      	ands	r3, r2
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80009e8:	3a01      	subs	r2, #1
 80009ea:	0411      	lsls	r1, r2, #16
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80009f0:	4311      	orrs	r1, r2
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80009f6:	4311      	orrs	r1, r2
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80009fc:	430a      	orrs	r2, r1
 80009fe:	431a      	orrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f042 0201 	orr.w	r2, r2, #1
 8000a08:	611a      	str	r2, [r3, #16]
 8000a0a:	e007      	b.n	8000a1c <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	691a      	ldr	r2, [r3, #16]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 0201 	bic.w	r2, r2, #1
 8000a1a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 fb58 	bl	80010e8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d121      	bne.n	8000a84 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f023 010f 	bic.w	r1, r3, #15
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	1e5a      	subs	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	430a      	orrs	r2, r1
 8000a56:	631a      	str	r2, [r3, #48]	; 0x30
 8000a58:	e01c      	b.n	8000a94 <HAL_ADC_Init+0x314>
 8000a5a:	bf00      	nop
 8000a5c:	20000010 	.word	0x20000010
 8000a60:	053e2d63 	.word	0x053e2d63
 8000a64:	40022000 	.word	0x40022000
 8000a68:	40022100 	.word	0x40022100
 8000a6c:	58026000 	.word	0x58026000
 8000a70:	40022300 	.word	0x40022300
 8000a74:	58026300 	.word	0x58026300
 8000a78:	fff0c003 	.word	0xfff0c003
 8000a7c:	ffffbffc 	.word	0xffffbffc
 8000a80:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f022 020f 	bic.w	r2, r2, #15
 8000a92:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a98:	f023 0303 	bic.w	r3, r3, #3
 8000a9c:	f043 0201 	orr.w	r2, r3, #1
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	655a      	str	r2, [r3, #84]	; 0x54
 8000aa4:	e007      	b.n	8000ab6 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aaa:	f043 0210 	orr.w	r2, r3, #16
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3724      	adds	r7, #36	; 0x24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd90      	pop	{r4, r7, pc}

08000ac0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b099      	sub	sp, #100	; 0x64
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	4a99      	ldr	r2, [pc, #612]	; (8000d40 <HAL_ADC_ConfigChannel+0x280>)
 8000ada:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d101      	bne.n	8000aea <HAL_ADC_ConfigChannel+0x2a>
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	e2e6      	b.n	80010b8 <HAL_ADC_ConfigChannel+0x5f8>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2201      	movs	r2, #1
 8000aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe1b 	bl	8000732 <LL_ADC_REG_IsConversionOngoing>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f040 82cb 	bne.w	800109a <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d108      	bne.n	8000b22 <HAL_ADC_ConfigChannel+0x62>
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	0e9b      	lsrs	r3, r3, #26
 8000b16:	f003 031f 	and.w	r3, r3, #31
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	e00f      	b.n	8000b42 <HAL_ADC_ConfigChannel+0x82>
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b2a:	fa93 f3a3 	rbit	r3, r3
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b32:	fab3 f383 	clz	r3, r3
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f003 031f 	and.w	r3, r3, #31
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	69d1      	ldr	r1, [r2, #28]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	6812      	ldr	r2, [r2, #0]
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	6859      	ldr	r1, [r3, #4]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	f7ff fd11 	bl	8000584 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fde3 	bl	8000732 <LL_ADC_REG_IsConversionOngoing>
 8000b6c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fdf0 	bl	8000758 <LL_ADC_INJ_IsConversionOngoing>
 8000b78:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f040 80b3 	bne.w	8000ce8 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f040 80af 	bne.w	8000ce8 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	461a      	mov	r2, r3
 8000b98:	f7ff fd1d 	bl	80005d6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000b9c:	4b69      	ldr	r3, [pc, #420]	; (8000d44 <HAL_ADC_ConfigChannel+0x284>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000ba4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ba8:	d10b      	bne.n	8000bc2 <HAL_ADC_ConfigChannel+0x102>
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	e01d      	b.n	8000bfe <HAL_ADC_ConfigChannel+0x13e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10b      	bne.n	8000be8 <HAL_ADC_ConfigChannel+0x128>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	695a      	ldr	r2, [r3, #20]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	f003 0307 	and.w	r3, r3, #7
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	e00a      	b.n	8000bfe <HAL_ADC_ConfigChannel+0x13e>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	695a      	ldr	r2, [r3, #20]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d027      	beq.n	8000c58 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6818      	ldr	r0, [r3, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	6919      	ldr	r1, [r3, #16]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c16:	f7ff fc67 	bl	80004e8 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	6919      	ldr	r1, [r3, #16]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	7e5b      	ldrb	r3, [r3, #25]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <HAL_ADC_ConfigChannel+0x170>
 8000c2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000c2e:	e000      	b.n	8000c32 <HAL_ADC_ConfigChannel+0x172>
 8000c30:	2300      	movs	r3, #0
 8000c32:	461a      	mov	r2, r3
 8000c34:	f7ff fc8e 	bl	8000554 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	6919      	ldr	r1, [r3, #16]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	7e1b      	ldrb	r3, [r3, #24]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d102      	bne.n	8000c4e <HAL_ADC_ConfigChannel+0x18e>
 8000c48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c4c:	e000      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x190>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	461a      	mov	r2, r3
 8000c52:	f7ff fc66 	bl	8000522 <LL_ADC_SetDataRightShift>
 8000c56:	e047      	b.n	8000ce8 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	069b      	lsls	r3, r3, #26
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d107      	bne.n	8000c7c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c7a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000c82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	069b      	lsls	r3, r3, #26
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d107      	bne.n	8000ca0 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c9e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ca6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	069b      	lsls	r3, r3, #26
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d107      	bne.n	8000cc4 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000cc2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	069b      	lsls	r3, r3, #26
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d107      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ce6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fd0d 	bl	800070c <LL_ADC_IsEnabled>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f040 81d9 	bne.w	80010ac <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	6819      	ldr	r1, [r3, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	461a      	mov	r2, r3
 8000d08:	f7ff fc8e 	bl	8000628 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <HAL_ADC_ConfigChannel+0x280>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	f040 8101 	bne.w	8000f1a <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10f      	bne.n	8000d48 <HAL_ADC_ConfigChannel+0x288>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	0e9b      	lsrs	r3, r3, #26
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f003 031f 	and.w	r3, r3, #31
 8000d34:	2b09      	cmp	r3, #9
 8000d36:	bf94      	ite	ls
 8000d38:	2301      	movls	r3, #1
 8000d3a:	2300      	movhi	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	e016      	b.n	8000d6e <HAL_ADC_ConfigChannel+0x2ae>
 8000d40:	47ff0000 	.word	0x47ff0000
 8000d44:	5c001000 	.word	0x5c001000
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d58:	fab3 f383 	clz	r3, r3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	3301      	adds	r3, #1
 8000d60:	f003 031f 	and.w	r3, r3, #31
 8000d64:	2b09      	cmp	r3, #9
 8000d66:	bf94      	ite	ls
 8000d68:	2301      	movls	r3, #1
 8000d6a:	2300      	movhi	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d064      	beq.n	8000e3c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d107      	bne.n	8000d8e <HAL_ADC_ConfigChannel+0x2ce>
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	0e9b      	lsrs	r3, r3, #26
 8000d84:	3301      	adds	r3, #1
 8000d86:	069b      	lsls	r3, r3, #26
 8000d88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000d8c:	e00e      	b.n	8000dac <HAL_ADC_ConfigChannel+0x2ec>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d96:	fa93 f3a3 	rbit	r3, r3
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9e:	fab3 f383 	clz	r3, r3
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	3301      	adds	r3, #1
 8000da6:	069b      	lsls	r3, r3, #26
 8000da8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d109      	bne.n	8000dcc <HAL_ADC_ConfigChannel+0x30c>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	0e9b      	lsrs	r3, r3, #26
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	e010      	b.n	8000dee <HAL_ADC_ConfigChannel+0x32e>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd4:	fa93 f3a3 	rbit	r3, r3
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ddc:	fab3 f383 	clz	r3, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	3301      	adds	r3, #1
 8000de4:	f003 031f 	and.w	r3, r3, #31
 8000de8:	2101      	movs	r1, #1
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	ea42 0103 	orr.w	r1, r2, r3
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10a      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x354>
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	0e9b      	lsrs	r3, r3, #26
 8000e04:	3301      	adds	r3, #1
 8000e06:	f003 021f 	and.w	r2, r3, #31
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	051b      	lsls	r3, r3, #20
 8000e12:	e011      	b.n	8000e38 <HAL_ADC_ConfigChannel+0x378>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1c:	fa93 f3a3 	rbit	r3, r3
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	fab3 f383 	clz	r3, r3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f003 021f 	and.w	r2, r3, #31
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e38:	430b      	orrs	r3, r1
 8000e3a:	e069      	b.n	8000f10 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d107      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x398>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	0e9b      	lsrs	r3, r3, #26
 8000e4e:	3301      	adds	r3, #1
 8000e50:	069b      	lsls	r3, r3, #26
 8000e52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e56:	e00e      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x3b6>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	fa93 f3a3 	rbit	r3, r3
 8000e64:	61fb      	str	r3, [r7, #28]
  return result;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fab3 f383 	clz	r3, r3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	3301      	adds	r3, #1
 8000e70:	069b      	lsls	r3, r3, #26
 8000e72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d109      	bne.n	8000e96 <HAL_ADC_ConfigChannel+0x3d6>
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	0e9b      	lsrs	r3, r3, #26
 8000e88:	3301      	adds	r3, #1
 8000e8a:	f003 031f 	and.w	r3, r3, #31
 8000e8e:	2101      	movs	r1, #1
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	e010      	b.n	8000eb8 <HAL_ADC_ConfigChannel+0x3f8>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa93 f3a3 	rbit	r3, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  return result;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fab3 f383 	clz	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	3301      	adds	r3, #1
 8000eae:	f003 031f 	and.w	r3, r3, #31
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	ea42 0103 	orr.w	r1, r2, r3
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10d      	bne.n	8000ee4 <HAL_ADC_ConfigChannel+0x424>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	0e9b      	lsrs	r3, r3, #26
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	3b1e      	subs	r3, #30
 8000edc:	051b      	lsls	r3, r3, #20
 8000ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	e014      	b.n	8000f0e <HAL_ADC_ConfigChannel+0x44e>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	fa93 f3a3 	rbit	r3, r3
 8000ef0:	60fb      	str	r3, [r7, #12]
  return result;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4613      	mov	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	3b1e      	subs	r3, #30
 8000f08:	051b      	lsls	r3, r3, #20
 8000f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f0e:	430b      	orrs	r3, r1
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	6892      	ldr	r2, [r2, #8]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f7ff fb5e 	bl	80005d6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f280 80c4 	bge.w	80010ac <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a65      	ldr	r2, [pc, #404]	; (80010c0 <HAL_ADC_ConfigChannel+0x600>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d004      	beq.n	8000f38 <HAL_ADC_ConfigChannel+0x478>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a64      	ldr	r2, [pc, #400]	; (80010c4 <HAL_ADC_ConfigChannel+0x604>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d101      	bne.n	8000f3c <HAL_ADC_ConfigChannel+0x47c>
 8000f38:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_ADC_ConfigChannel+0x608>)
 8000f3a:	e000      	b.n	8000f3e <HAL_ADC_ConfigChannel+0x47e>
 8000f3c:	4b63      	ldr	r3, [pc, #396]	; (80010cc <HAL_ADC_ConfigChannel+0x60c>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fac4 	bl	80004cc <LL_ADC_GetCommonPathInternalCh>
 8000f44:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a5d      	ldr	r2, [pc, #372]	; (80010c0 <HAL_ADC_ConfigChannel+0x600>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d004      	beq.n	8000f5a <HAL_ADC_ConfigChannel+0x49a>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a5b      	ldr	r2, [pc, #364]	; (80010c4 <HAL_ADC_ConfigChannel+0x604>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10e      	bne.n	8000f78 <HAL_ADC_ConfigChannel+0x4b8>
 8000f5a:	4859      	ldr	r0, [pc, #356]	; (80010c0 <HAL_ADC_ConfigChannel+0x600>)
 8000f5c:	f7ff fbd6 	bl	800070c <LL_ADC_IsEnabled>
 8000f60:	4604      	mov	r4, r0
 8000f62:	4858      	ldr	r0, [pc, #352]	; (80010c4 <HAL_ADC_ConfigChannel+0x604>)
 8000f64:	f7ff fbd2 	bl	800070c <LL_ADC_IsEnabled>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4323      	orrs	r3, r4
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf0c      	ite	eq
 8000f70:	2301      	moveq	r3, #1
 8000f72:	2300      	movne	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	e008      	b.n	8000f8a <HAL_ADC_ConfigChannel+0x4ca>
 8000f78:	4855      	ldr	r0, [pc, #340]	; (80010d0 <HAL_ADC_ConfigChannel+0x610>)
 8000f7a:	f7ff fbc7 	bl	800070c <LL_ADC_IsEnabled>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf0c      	ite	eq
 8000f84:	2301      	moveq	r3, #1
 8000f86:	2300      	movne	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d07b      	beq.n	8001086 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a50      	ldr	r2, [pc, #320]	; (80010d4 <HAL_ADC_ConfigChannel+0x614>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d12e      	bne.n	8000ff6 <HAL_ADC_ConfigChannel+0x536>
 8000f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d129      	bne.n	8000ff6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a4a      	ldr	r2, [pc, #296]	; (80010d0 <HAL_ADC_ConfigChannel+0x610>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d17f      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a43      	ldr	r2, [pc, #268]	; (80010c0 <HAL_ADC_ConfigChannel+0x600>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d004      	beq.n	8000fc0 <HAL_ADC_ConfigChannel+0x500>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a42      	ldr	r2, [pc, #264]	; (80010c4 <HAL_ADC_ConfigChannel+0x604>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d101      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x504>
 8000fc0:	4a41      	ldr	r2, [pc, #260]	; (80010c8 <HAL_ADC_ConfigChannel+0x608>)
 8000fc2:	e000      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x506>
 8000fc4:	4a41      	ldr	r2, [pc, #260]	; (80010cc <HAL_ADC_ConfigChannel+0x60c>)
 8000fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4610      	mov	r0, r2
 8000fd0:	f7ff fa69 	bl	80004a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000fd4:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <HAL_ADC_ConfigChannel+0x618>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	099b      	lsrs	r3, r3, #6
 8000fda:	4a40      	ldr	r2, [pc, #256]	; (80010dc <HAL_ADC_ConfigChannel+0x61c>)
 8000fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe0:	099b      	lsrs	r3, r3, #6
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8000fe6:	e002      	b.n	8000fee <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f9      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000ff4:	e05a      	b.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a39      	ldr	r2, [pc, #228]	; (80010e0 <HAL_ADC_ConfigChannel+0x620>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d11e      	bne.n	800103e <HAL_ADC_ConfigChannel+0x57e>
 8001000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d119      	bne.n	800103e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a30      	ldr	r2, [pc, #192]	; (80010d0 <HAL_ADC_ConfigChannel+0x610>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d14b      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a29      	ldr	r2, [pc, #164]	; (80010c0 <HAL_ADC_ConfigChannel+0x600>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d004      	beq.n	8001028 <HAL_ADC_ConfigChannel+0x568>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a28      	ldr	r2, [pc, #160]	; (80010c4 <HAL_ADC_ConfigChannel+0x604>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d101      	bne.n	800102c <HAL_ADC_ConfigChannel+0x56c>
 8001028:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <HAL_ADC_ConfigChannel+0x608>)
 800102a:	e000      	b.n	800102e <HAL_ADC_ConfigChannel+0x56e>
 800102c:	4a27      	ldr	r2, [pc, #156]	; (80010cc <HAL_ADC_ConfigChannel+0x60c>)
 800102e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001030:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001034:	4619      	mov	r1, r3
 8001036:	4610      	mov	r0, r2
 8001038:	f7ff fa35 	bl	80004a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800103c:	e036      	b.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a28      	ldr	r2, [pc, #160]	; (80010e4 <HAL_ADC_ConfigChannel+0x624>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d131      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
 8001048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800104a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d12c      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_ADC_ConfigChannel+0x610>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d127      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <HAL_ADC_ConfigChannel+0x600>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d004      	beq.n	8001070 <HAL_ADC_ConfigChannel+0x5b0>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <HAL_ADC_ConfigChannel+0x604>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d101      	bne.n	8001074 <HAL_ADC_ConfigChannel+0x5b4>
 8001070:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <HAL_ADC_ConfigChannel+0x608>)
 8001072:	e000      	b.n	8001076 <HAL_ADC_ConfigChannel+0x5b6>
 8001074:	4a15      	ldr	r2, [pc, #84]	; (80010cc <HAL_ADC_ConfigChannel+0x60c>)
 8001076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001078:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800107c:	4619      	mov	r1, r3
 800107e:	4610      	mov	r0, r2
 8001080:	f7ff fa11 	bl	80004a6 <LL_ADC_SetCommonPathInternalCh>
 8001084:	e012      	b.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108a:	f043 0220 	orr.w	r2, r3, #32
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001098:	e008      	b.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109e:	f043 0220 	orr.w	r2, r3, #32
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80010b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3764      	adds	r7, #100	; 0x64
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	40022000 	.word	0x40022000
 80010c4:	40022100 	.word	0x40022100
 80010c8:	40022300 	.word	0x40022300
 80010cc:	58026300 	.word	0x58026300
 80010d0:	58026000 	.word	0x58026000
 80010d4:	cb840000 	.word	0xcb840000
 80010d8:	20000010 	.word	0x20000010
 80010dc:	053e2d63 	.word	0x053e2d63
 80010e0:	c7520000 	.word	0xc7520000
 80010e4:	cfb80000 	.word	0xcfb80000

080010e8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a70      	ldr	r2, [pc, #448]	; (80012b8 <ADC_ConfigureBoostMode+0x1d0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d004      	beq.n	8001104 <ADC_ConfigureBoostMode+0x1c>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6f      	ldr	r2, [pc, #444]	; (80012bc <ADC_ConfigureBoostMode+0x1d4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d109      	bne.n	8001118 <ADC_ConfigureBoostMode+0x30>
 8001104:	4b6e      	ldr	r3, [pc, #440]	; (80012c0 <ADC_ConfigureBoostMode+0x1d8>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800110c:	2b00      	cmp	r3, #0
 800110e:	bf14      	ite	ne
 8001110:	2301      	movne	r3, #1
 8001112:	2300      	moveq	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	e008      	b.n	800112a <ADC_ConfigureBoostMode+0x42>
 8001118:	4b6a      	ldr	r3, [pc, #424]	; (80012c4 <ADC_ConfigureBoostMode+0x1dc>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001120:	2b00      	cmp	r3, #0
 8001122:	bf14      	ite	ne
 8001124:	2301      	movne	r3, #1
 8001126:	2300      	moveq	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d01a      	beq.n	8001164 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800112e:	f004 fb2f 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 8001132:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800113c:	d006      	beq.n	800114c <ADC_ConfigureBoostMode+0x64>
 800113e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001142:	d00b      	beq.n	800115c <ADC_ConfigureBoostMode+0x74>
 8001144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001148:	d000      	beq.n	800114c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800114a:	e05d      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	0c1b      	lsrs	r3, r3, #16
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	fbb2 f3f3 	udiv	r3, r2, r3
 8001158:	60fb      	str	r3, [r7, #12]
        break;
 800115a:	e055      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	60fb      	str	r3, [r7, #12]
        break;
 8001162:	e051      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001164:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001168:	f005 fa20 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 800116c:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001176:	d02a      	beq.n	80011ce <ADC_ConfigureBoostMode+0xe6>
 8001178:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800117c:	d813      	bhi.n	80011a6 <ADC_ConfigureBoostMode+0xbe>
 800117e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001182:	d024      	beq.n	80011ce <ADC_ConfigureBoostMode+0xe6>
 8001184:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001188:	d806      	bhi.n	8001198 <ADC_ConfigureBoostMode+0xb0>
 800118a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800118e:	d01e      	beq.n	80011ce <ADC_ConfigureBoostMode+0xe6>
 8001190:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001194:	d01b      	beq.n	80011ce <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8001196:	e037      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800119c:	d017      	beq.n	80011ce <ADC_ConfigureBoostMode+0xe6>
 800119e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80011a2:	d014      	beq.n	80011ce <ADC_ConfigureBoostMode+0xe6>
        break;
 80011a4:	e030      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80011a6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80011aa:	d021      	beq.n	80011f0 <ADC_ConfigureBoostMode+0x108>
 80011ac:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80011b0:	d806      	bhi.n	80011c0 <ADC_ConfigureBoostMode+0xd8>
 80011b2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80011b6:	d013      	beq.n	80011e0 <ADC_ConfigureBoostMode+0xf8>
 80011b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80011bc:	d014      	beq.n	80011e8 <ADC_ConfigureBoostMode+0x100>
        break;
 80011be:	e023      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80011c0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80011c4:	d018      	beq.n	80011f8 <ADC_ConfigureBoostMode+0x110>
 80011c6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80011ca:	d019      	beq.n	8001200 <ADC_ConfigureBoostMode+0x118>
        break;
 80011cc:	e01c      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	0c9b      	lsrs	r3, r3, #18
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011dc:	60fb      	str	r3, [r7, #12]
        break;
 80011de:	e013      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	60fb      	str	r3, [r7, #12]
      break;
 80011e6:	e00f      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	60fb      	str	r3, [r7, #12]
        break;
 80011ee:	e00b      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	099b      	lsrs	r3, r3, #6
 80011f4:	60fb      	str	r3, [r7, #12]
        break;
 80011f6:	e007      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	09db      	lsrs	r3, r3, #7
 80011fc:	60fb      	str	r3, [r7, #12]
        break;
 80011fe:	e003      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	0a1b      	lsrs	r3, r3, #8
 8001204:	60fb      	str	r3, [r7, #12]
        break;
 8001206:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001208:	f7ff f91a 	bl	8000440 <HAL_GetREVID>
 800120c:	4602      	mov	r2, r0
 800120e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001212:	429a      	cmp	r2, r3
 8001214:	d815      	bhi.n	8001242 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <ADC_ConfigureBoostMode+0x1e0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d908      	bls.n	8001230 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800122c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800122e:	e03e      	b.n	80012ae <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800123e:	609a      	str	r2, [r3, #8]
}
 8001240:	e035      	b.n	80012ae <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	085b      	lsrs	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4a20      	ldr	r2, [pc, #128]	; (80012cc <ADC_ConfigureBoostMode+0x1e4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d808      	bhi.n	8001262 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800125e:	609a      	str	r2, [r3, #8]
}
 8001260:	e025      	b.n	80012ae <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <ADC_ConfigureBoostMode+0x1e8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d80a      	bhi.n	8001280 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800127c:	609a      	str	r2, [r3, #8]
}
 800127e:	e016      	b.n	80012ae <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <ADC_ConfigureBoostMode+0x1ec>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d80a      	bhi.n	800129e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800129a:	609a      	str	r2, [r3, #8]
}
 800129c:	e007      	b.n	80012ae <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80012ac:	609a      	str	r2, [r3, #8]
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40022000 	.word	0x40022000
 80012bc:	40022100 	.word	0x40022100
 80012c0:	40022300 	.word	0x40022300
 80012c4:	58026300 	.word	0x58026300
 80012c8:	01312d00 	.word	0x01312d00
 80012cc:	005f5e10 	.word	0x005f5e10
 80012d0:	00bebc20 	.word	0x00bebc20
 80012d4:	017d7840 	.word	0x017d7840

080012d8 <LL_ADC_IsEnabled>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <LL_ADC_IsEnabled+0x18>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <LL_ADC_IsEnabled+0x1a>
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_REG_IsConversionOngoing>:
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	2b04      	cmp	r3, #4
 8001310:	d101      	bne.n	8001316 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b09f      	sub	sp, #124	; 0x7c
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800133e:	2302      	movs	r3, #2
 8001340:	e0ba      	b.n	80014b8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a5c      	ldr	r2, [pc, #368]	; (80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d102      	bne.n	800135a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001354:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	e001      	b.n	800135e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10b      	bne.n	800137c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001368:	f043 0220 	orr.w	r2, r3, #32
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e09d      	b.n	80014b8 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ffbd 	bl	80012fe <LL_ADC_REG_IsConversionOngoing>
 8001384:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ffb7 	bl	80012fe <LL_ADC_REG_IsConversionOngoing>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d17f      	bne.n	8001496 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001398:	2b00      	cmp	r3, #0
 800139a:	d17c      	bne.n	8001496 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a47      	ldr	r2, [pc, #284]	; (80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d004      	beq.n	80013b0 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a46      	ldr	r2, [pc, #280]	; (80014c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80013b2:	e000      	b.n	80013b6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80013b4:	4b45      	ldr	r3, [pc, #276]	; (80014cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80013b6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d039      	beq.n	8001434 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80013c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	431a      	orrs	r2, r3
 80013ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013d0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a3a      	ldr	r2, [pc, #232]	; (80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d004      	beq.n	80013e6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a38      	ldr	r2, [pc, #224]	; (80014c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d10e      	bne.n	8001404 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80013e6:	4836      	ldr	r0, [pc, #216]	; (80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80013e8:	f7ff ff76 	bl	80012d8 <LL_ADC_IsEnabled>
 80013ec:	4604      	mov	r4, r0
 80013ee:	4835      	ldr	r0, [pc, #212]	; (80014c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80013f0:	f7ff ff72 	bl	80012d8 <LL_ADC_IsEnabled>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4323      	orrs	r3, r4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf0c      	ite	eq
 80013fc:	2301      	moveq	r3, #1
 80013fe:	2300      	movne	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	e008      	b.n	8001416 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8001404:	4832      	ldr	r0, [pc, #200]	; (80014d0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001406:	f7ff ff67 	bl	80012d8 <LL_ADC_IsEnabled>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d047      	beq.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800141a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001420:	4013      	ands	r3, r2
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	6811      	ldr	r1, [r2, #0]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6892      	ldr	r2, [r2, #8]
 800142a:	430a      	orrs	r2, r1
 800142c:	431a      	orrs	r2, r3
 800142e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001430:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001432:	e03a      	b.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800143c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800143e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d004      	beq.n	8001454 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d10e      	bne.n	8001472 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8001454:	481a      	ldr	r0, [pc, #104]	; (80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001456:	f7ff ff3f 	bl	80012d8 <LL_ADC_IsEnabled>
 800145a:	4604      	mov	r4, r0
 800145c:	4819      	ldr	r0, [pc, #100]	; (80014c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800145e:	f7ff ff3b 	bl	80012d8 <LL_ADC_IsEnabled>
 8001462:	4603      	mov	r3, r0
 8001464:	4323      	orrs	r3, r4
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf0c      	ite	eq
 800146a:	2301      	moveq	r3, #1
 800146c:	2300      	movne	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	e008      	b.n	8001484 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8001472:	4817      	ldr	r0, [pc, #92]	; (80014d0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001474:	f7ff ff30 	bl	80012d8 <LL_ADC_IsEnabled>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf0c      	ite	eq
 800147e:	2301      	moveq	r3, #1
 8001480:	2300      	movne	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d010      	beq.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800148e:	4013      	ands	r3, r2
 8001490:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001492:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001494:	e009      	b.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	f043 0220 	orr.w	r2, r3, #32
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80014a8:	e000      	b.n	80014ac <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80014aa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80014b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	377c      	adds	r7, #124	; 0x7c
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	40022000 	.word	0x40022000
 80014c4:	40022100 	.word	0x40022100
 80014c8:	40022300 	.word	0x40022300
 80014cc:	58026300 	.word	0x58026300
 80014d0:	58026000 	.word	0x58026000
 80014d4:	fffff0e0 	.word	0xfffff0e0

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	4313      	orrs	r3, r2
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	05fa0000 	.word	0x05fa0000

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	; (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff29 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff40 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff90 	bl	80015cc <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5f 	bl	8001578 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff33 	bl	800153c <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa4 	bl	8001634 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80016fc:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_MPU_Disable+0x24>)
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	4a05      	ldr	r2, [pc, #20]	; (800171c <HAL_MPU_Disable+0x24>)
 8001706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170a:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <HAL_MPU_Disable+0x28>)
 800170e:	2200      	movs	r2, #0
 8001710:	605a      	str	r2, [r3, #4]
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00
 8001720:	e000ed90 	.word	0xe000ed90

08001724 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_MPU_Enable+0x34>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_MPU_Enable+0x38>)
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <HAL_MPU_Enable+0x38>)
 800173c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001740:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001742:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001746:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed90 	.word	0xe000ed90
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	785a      	ldrb	r2, [r3, #1]
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_MPU_ConfigRegion+0x84>)
 800176e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d029      	beq.n	80017cc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001778:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <HAL_MPU_ConfigRegion+0x84>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7b1b      	ldrb	r3, [r3, #12]
 8001784:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7adb      	ldrb	r3, [r3, #11]
 800178a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800178c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7a9b      	ldrb	r3, [r3, #10]
 8001792:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001794:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7b5b      	ldrb	r3, [r3, #13]
 800179a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800179c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7b9b      	ldrb	r3, [r3, #14]
 80017a2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7bdb      	ldrb	r3, [r3, #15]
 80017aa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7a5b      	ldrb	r3, [r3, #9]
 80017b2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7a1b      	ldrb	r3, [r3, #8]
 80017ba:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017bc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017c6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017c8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80017ca:	e005      	b.n	80017d8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_MPU_ConfigRegion+0x84>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <HAL_MPU_ConfigRegion+0x84>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed90 	.word	0xe000ed90

080017e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7fe fdf8 	bl	80003e4 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e316      	b.n	8001e2e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a66      	ldr	r2, [pc, #408]	; (80019a0 <HAL_DMA_Init+0x1b8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d04a      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a65      	ldr	r2, [pc, #404]	; (80019a4 <HAL_DMA_Init+0x1bc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d045      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a63      	ldr	r2, [pc, #396]	; (80019a8 <HAL_DMA_Init+0x1c0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d040      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a62      	ldr	r2, [pc, #392]	; (80019ac <HAL_DMA_Init+0x1c4>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d03b      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a60      	ldr	r2, [pc, #384]	; (80019b0 <HAL_DMA_Init+0x1c8>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d036      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a5f      	ldr	r2, [pc, #380]	; (80019b4 <HAL_DMA_Init+0x1cc>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d031      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a5d      	ldr	r2, [pc, #372]	; (80019b8 <HAL_DMA_Init+0x1d0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d02c      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a5c      	ldr	r2, [pc, #368]	; (80019bc <HAL_DMA_Init+0x1d4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d027      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a5a      	ldr	r2, [pc, #360]	; (80019c0 <HAL_DMA_Init+0x1d8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d022      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a59      	ldr	r2, [pc, #356]	; (80019c4 <HAL_DMA_Init+0x1dc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d01d      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a57      	ldr	r2, [pc, #348]	; (80019c8 <HAL_DMA_Init+0x1e0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d018      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a56      	ldr	r2, [pc, #344]	; (80019cc <HAL_DMA_Init+0x1e4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d013      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a54      	ldr	r2, [pc, #336]	; (80019d0 <HAL_DMA_Init+0x1e8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00e      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a53      	ldr	r2, [pc, #332]	; (80019d4 <HAL_DMA_Init+0x1ec>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d009      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a51      	ldr	r2, [pc, #324]	; (80019d8 <HAL_DMA_Init+0x1f0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d004      	beq.n	80018a0 <HAL_DMA_Init+0xb8>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a50      	ldr	r2, [pc, #320]	; (80019dc <HAL_DMA_Init+0x1f4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d101      	bne.n	80018a4 <HAL_DMA_Init+0xbc>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_DMA_Init+0xbe>
 80018a4:	2300      	movs	r3, #0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 813b 	beq.w	8001b22 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a37      	ldr	r2, [pc, #220]	; (80019a0 <HAL_DMA_Init+0x1b8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d04a      	beq.n	800195c <HAL_DMA_Init+0x174>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a36      	ldr	r2, [pc, #216]	; (80019a4 <HAL_DMA_Init+0x1bc>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d045      	beq.n	800195c <HAL_DMA_Init+0x174>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a34      	ldr	r2, [pc, #208]	; (80019a8 <HAL_DMA_Init+0x1c0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d040      	beq.n	800195c <HAL_DMA_Init+0x174>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a33      	ldr	r2, [pc, #204]	; (80019ac <HAL_DMA_Init+0x1c4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d03b      	beq.n	800195c <HAL_DMA_Init+0x174>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a31      	ldr	r2, [pc, #196]	; (80019b0 <HAL_DMA_Init+0x1c8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d036      	beq.n	800195c <HAL_DMA_Init+0x174>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a30      	ldr	r2, [pc, #192]	; (80019b4 <HAL_DMA_Init+0x1cc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d031      	beq.n	800195c <HAL_DMA_Init+0x174>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2e      	ldr	r2, [pc, #184]	; (80019b8 <HAL_DMA_Init+0x1d0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d02c      	beq.n	800195c <HAL_DMA_Init+0x174>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a2d      	ldr	r2, [pc, #180]	; (80019bc <HAL_DMA_Init+0x1d4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d027      	beq.n	800195c <HAL_DMA_Init+0x174>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a2b      	ldr	r2, [pc, #172]	; (80019c0 <HAL_DMA_Init+0x1d8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d022      	beq.n	800195c <HAL_DMA_Init+0x174>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a2a      	ldr	r2, [pc, #168]	; (80019c4 <HAL_DMA_Init+0x1dc>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d01d      	beq.n	800195c <HAL_DMA_Init+0x174>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a28      	ldr	r2, [pc, #160]	; (80019c8 <HAL_DMA_Init+0x1e0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d018      	beq.n	800195c <HAL_DMA_Init+0x174>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a27      	ldr	r2, [pc, #156]	; (80019cc <HAL_DMA_Init+0x1e4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d013      	beq.n	800195c <HAL_DMA_Init+0x174>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <HAL_DMA_Init+0x1e8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00e      	beq.n	800195c <HAL_DMA_Init+0x174>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a24      	ldr	r2, [pc, #144]	; (80019d4 <HAL_DMA_Init+0x1ec>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d009      	beq.n	800195c <HAL_DMA_Init+0x174>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <HAL_DMA_Init+0x1f0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d004      	beq.n	800195c <HAL_DMA_Init+0x174>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a21      	ldr	r2, [pc, #132]	; (80019dc <HAL_DMA_Init+0x1f4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d108      	bne.n	800196e <HAL_DMA_Init+0x186>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0201 	bic.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e007      	b.n	800197e <HAL_DMA_Init+0x196>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0201 	bic.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800197e:	e02f      	b.n	80019e0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001980:	f7fe fd30 	bl	80003e4 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b05      	cmp	r3, #5
 800198c:	d928      	bls.n	80019e0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2220      	movs	r2, #32
 8001992:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2203      	movs	r2, #3
 8001998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e246      	b.n	8001e2e <HAL_DMA_Init+0x646>
 80019a0:	40020010 	.word	0x40020010
 80019a4:	40020028 	.word	0x40020028
 80019a8:	40020040 	.word	0x40020040
 80019ac:	40020058 	.word	0x40020058
 80019b0:	40020070 	.word	0x40020070
 80019b4:	40020088 	.word	0x40020088
 80019b8:	400200a0 	.word	0x400200a0
 80019bc:	400200b8 	.word	0x400200b8
 80019c0:	40020410 	.word	0x40020410
 80019c4:	40020428 	.word	0x40020428
 80019c8:	40020440 	.word	0x40020440
 80019cc:	40020458 	.word	0x40020458
 80019d0:	40020470 	.word	0x40020470
 80019d4:	40020488 	.word	0x40020488
 80019d8:	400204a0 	.word	0x400204a0
 80019dc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1c8      	bne.n	8001980 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4b83      	ldr	r3, [pc, #524]	; (8001c08 <HAL_DMA_Init+0x420>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d107      	bne.n	8001a44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001a44:	4b71      	ldr	r3, [pc, #452]	; (8001c0c <HAL_DMA_Init+0x424>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b71      	ldr	r3, [pc, #452]	; (8001c10 <HAL_DMA_Init+0x428>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a50:	d328      	bcc.n	8001aa4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b28      	cmp	r3, #40	; 0x28
 8001a58:	d903      	bls.n	8001a62 <HAL_DMA_Init+0x27a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8001a60:	d917      	bls.n	8001a92 <HAL_DMA_Init+0x2aa>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b3e      	cmp	r3, #62	; 0x3e
 8001a68:	d903      	bls.n	8001a72 <HAL_DMA_Init+0x28a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b42      	cmp	r3, #66	; 0x42
 8001a70:	d90f      	bls.n	8001a92 <HAL_DMA_Init+0x2aa>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b46      	cmp	r3, #70	; 0x46
 8001a78:	d903      	bls.n	8001a82 <HAL_DMA_Init+0x29a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b48      	cmp	r3, #72	; 0x48
 8001a80:	d907      	bls.n	8001a92 <HAL_DMA_Init+0x2aa>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b4e      	cmp	r3, #78	; 0x4e
 8001a88:	d905      	bls.n	8001a96 <HAL_DMA_Init+0x2ae>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b52      	cmp	r3, #82	; 0x52
 8001a90:	d801      	bhi.n	8001a96 <HAL_DMA_Init+0x2ae>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_DMA_Init+0x2b0>
 8001a96:	2300      	movs	r3, #0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001aa2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f023 0307 	bic.w	r3, r3, #7
 8001aba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d117      	bne.n	8001afe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00e      	beq.n	8001afe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f002 f81f 	bl	8003b24 <DMA_CheckFifoParam>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2240      	movs	r2, #64	; 0x40
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e197      	b.n	8001e2e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f001 ff5a 	bl	80039c0 <DMA_CalcBaseAndBitshift>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	223f      	movs	r2, #63	; 0x3f
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	e0cd      	b.n	8001cbe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a3b      	ldr	r2, [pc, #236]	; (8001c14 <HAL_DMA_Init+0x42c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d022      	beq.n	8001b72 <HAL_DMA_Init+0x38a>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a39      	ldr	r2, [pc, #228]	; (8001c18 <HAL_DMA_Init+0x430>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01d      	beq.n	8001b72 <HAL_DMA_Init+0x38a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a38      	ldr	r2, [pc, #224]	; (8001c1c <HAL_DMA_Init+0x434>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d018      	beq.n	8001b72 <HAL_DMA_Init+0x38a>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a36      	ldr	r2, [pc, #216]	; (8001c20 <HAL_DMA_Init+0x438>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_DMA_Init+0x38a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a35      	ldr	r2, [pc, #212]	; (8001c24 <HAL_DMA_Init+0x43c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00e      	beq.n	8001b72 <HAL_DMA_Init+0x38a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a33      	ldr	r2, [pc, #204]	; (8001c28 <HAL_DMA_Init+0x440>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d009      	beq.n	8001b72 <HAL_DMA_Init+0x38a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a32      	ldr	r2, [pc, #200]	; (8001c2c <HAL_DMA_Init+0x444>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d004      	beq.n	8001b72 <HAL_DMA_Init+0x38a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a30      	ldr	r2, [pc, #192]	; (8001c30 <HAL_DMA_Init+0x448>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_DMA_Init+0x38e>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_DMA_Init+0x390>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 8097 	beq.w	8001cac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a24      	ldr	r2, [pc, #144]	; (8001c14 <HAL_DMA_Init+0x42c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d021      	beq.n	8001bcc <HAL_DMA_Init+0x3e4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a22      	ldr	r2, [pc, #136]	; (8001c18 <HAL_DMA_Init+0x430>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01c      	beq.n	8001bcc <HAL_DMA_Init+0x3e4>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <HAL_DMA_Init+0x434>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d017      	beq.n	8001bcc <HAL_DMA_Init+0x3e4>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <HAL_DMA_Init+0x438>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d012      	beq.n	8001bcc <HAL_DMA_Init+0x3e4>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <HAL_DMA_Init+0x43c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00d      	beq.n	8001bcc <HAL_DMA_Init+0x3e4>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_DMA_Init+0x440>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d008      	beq.n	8001bcc <HAL_DMA_Init+0x3e4>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1b      	ldr	r2, [pc, #108]	; (8001c2c <HAL_DMA_Init+0x444>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d003      	beq.n	8001bcc <HAL_DMA_Init+0x3e4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_DMA_Init+0x448>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_DMA_Init+0x44c>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b40      	cmp	r3, #64	; 0x40
 8001bf4:	d020      	beq.n	8001c38 <HAL_DMA_Init+0x450>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b80      	cmp	r3, #128	; 0x80
 8001bfc:	d102      	bne.n	8001c04 <HAL_DMA_Init+0x41c>
 8001bfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c02:	e01a      	b.n	8001c3a <HAL_DMA_Init+0x452>
 8001c04:	2300      	movs	r3, #0
 8001c06:	e018      	b.n	8001c3a <HAL_DMA_Init+0x452>
 8001c08:	fe10803f 	.word	0xfe10803f
 8001c0c:	5c001000 	.word	0x5c001000
 8001c10:	ffff0000 	.word	0xffff0000
 8001c14:	58025408 	.word	0x58025408
 8001c18:	5802541c 	.word	0x5802541c
 8001c1c:	58025430 	.word	0x58025430
 8001c20:	58025444 	.word	0x58025444
 8001c24:	58025458 	.word	0x58025458
 8001c28:	5802546c 	.word	0x5802546c
 8001c2c:	58025480 	.word	0x58025480
 8001c30:	58025494 	.word	0x58025494
 8001c34:	fffe000f 	.word	0xfffe000f
 8001c38:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68d2      	ldr	r2, [r2, #12]
 8001c3e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c68:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b6e      	ldr	r3, [pc, #440]	; (8001e38 <HAL_DMA_Init+0x650>)
 8001c80:	4413      	add	r3, r2
 8001c82:	4a6e      	ldr	r2, [pc, #440]	; (8001e3c <HAL_DMA_Init+0x654>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	009a      	lsls	r2, r3, #2
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f001 fe95 	bl	80039c0 <DMA_CalcBaseAndBitshift>
 8001c96:	4603      	mov	r3, r0
 8001c98:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	e008      	b.n	8001cbe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2240      	movs	r2, #64	; 0x40
 8001cb0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0b7      	b.n	8001e2e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a5f      	ldr	r2, [pc, #380]	; (8001e40 <HAL_DMA_Init+0x658>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d072      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a5d      	ldr	r2, [pc, #372]	; (8001e44 <HAL_DMA_Init+0x65c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d06d      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a5c      	ldr	r2, [pc, #368]	; (8001e48 <HAL_DMA_Init+0x660>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d068      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a5a      	ldr	r2, [pc, #360]	; (8001e4c <HAL_DMA_Init+0x664>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d063      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a59      	ldr	r2, [pc, #356]	; (8001e50 <HAL_DMA_Init+0x668>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d05e      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a57      	ldr	r2, [pc, #348]	; (8001e54 <HAL_DMA_Init+0x66c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d059      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a56      	ldr	r2, [pc, #344]	; (8001e58 <HAL_DMA_Init+0x670>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d054      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a54      	ldr	r2, [pc, #336]	; (8001e5c <HAL_DMA_Init+0x674>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d04f      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a53      	ldr	r2, [pc, #332]	; (8001e60 <HAL_DMA_Init+0x678>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d04a      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a51      	ldr	r2, [pc, #324]	; (8001e64 <HAL_DMA_Init+0x67c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d045      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a50      	ldr	r2, [pc, #320]	; (8001e68 <HAL_DMA_Init+0x680>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d040      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a4e      	ldr	r2, [pc, #312]	; (8001e6c <HAL_DMA_Init+0x684>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d03b      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a4d      	ldr	r2, [pc, #308]	; (8001e70 <HAL_DMA_Init+0x688>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d036      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a4b      	ldr	r2, [pc, #300]	; (8001e74 <HAL_DMA_Init+0x68c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d031      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a4a      	ldr	r2, [pc, #296]	; (8001e78 <HAL_DMA_Init+0x690>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d02c      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a48      	ldr	r2, [pc, #288]	; (8001e7c <HAL_DMA_Init+0x694>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d027      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a47      	ldr	r2, [pc, #284]	; (8001e80 <HAL_DMA_Init+0x698>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d022      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a45      	ldr	r2, [pc, #276]	; (8001e84 <HAL_DMA_Init+0x69c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01d      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a44      	ldr	r2, [pc, #272]	; (8001e88 <HAL_DMA_Init+0x6a0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d018      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a42      	ldr	r2, [pc, #264]	; (8001e8c <HAL_DMA_Init+0x6a4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a41      	ldr	r2, [pc, #260]	; (8001e90 <HAL_DMA_Init+0x6a8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00e      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a3f      	ldr	r2, [pc, #252]	; (8001e94 <HAL_DMA_Init+0x6ac>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d009      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a3e      	ldr	r2, [pc, #248]	; (8001e98 <HAL_DMA_Init+0x6b0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d004      	beq.n	8001dae <HAL_DMA_Init+0x5c6>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a3c      	ldr	r2, [pc, #240]	; (8001e9c <HAL_DMA_Init+0x6b4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <HAL_DMA_Init+0x5ca>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_DMA_Init+0x5cc>
 8001db2:	2300      	movs	r3, #0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d032      	beq.n	8001e1e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f001 ff2f 	bl	8003c1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b80      	cmp	r3, #128	; 0x80
 8001dc4:	d102      	bne.n	8001dcc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001de0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d010      	beq.n	8001e0c <HAL_DMA_Init+0x624>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d80c      	bhi.n	8001e0c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f001 ffac 	bl	8003d50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	e008      	b.n	8001e1e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	a7fdabf8 	.word	0xa7fdabf8
 8001e3c:	cccccccd 	.word	0xcccccccd
 8001e40:	40020010 	.word	0x40020010
 8001e44:	40020028 	.word	0x40020028
 8001e48:	40020040 	.word	0x40020040
 8001e4c:	40020058 	.word	0x40020058
 8001e50:	40020070 	.word	0x40020070
 8001e54:	40020088 	.word	0x40020088
 8001e58:	400200a0 	.word	0x400200a0
 8001e5c:	400200b8 	.word	0x400200b8
 8001e60:	40020410 	.word	0x40020410
 8001e64:	40020428 	.word	0x40020428
 8001e68:	40020440 	.word	0x40020440
 8001e6c:	40020458 	.word	0x40020458
 8001e70:	40020470 	.word	0x40020470
 8001e74:	40020488 	.word	0x40020488
 8001e78:	400204a0 	.word	0x400204a0
 8001e7c:	400204b8 	.word	0x400204b8
 8001e80:	58025408 	.word	0x58025408
 8001e84:	5802541c 	.word	0x5802541c
 8001e88:	58025430 	.word	0x58025430
 8001e8c:	58025444 	.word	0x58025444
 8001e90:	58025458 	.word	0x58025458
 8001e94:	5802546c 	.word	0x5802546c
 8001e98:	58025480 	.word	0x58025480
 8001e9c:	58025494 	.word	0x58025494

08001ea0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e226      	b.n	800230a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_DMA_Start_IT+0x2a>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e21f      	b.n	800230a <HAL_DMA_Start_IT+0x46a>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	f040 820a 	bne.w	80022f4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a68      	ldr	r2, [pc, #416]	; (8002094 <HAL_DMA_Start_IT+0x1f4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d04a      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a66      	ldr	r2, [pc, #408]	; (8002098 <HAL_DMA_Start_IT+0x1f8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d045      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a65      	ldr	r2, [pc, #404]	; (800209c <HAL_DMA_Start_IT+0x1fc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d040      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a63      	ldr	r2, [pc, #396]	; (80020a0 <HAL_DMA_Start_IT+0x200>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d03b      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a62      	ldr	r2, [pc, #392]	; (80020a4 <HAL_DMA_Start_IT+0x204>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d036      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <HAL_DMA_Start_IT+0x208>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d031      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a5f      	ldr	r2, [pc, #380]	; (80020ac <HAL_DMA_Start_IT+0x20c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d02c      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a5d      	ldr	r2, [pc, #372]	; (80020b0 <HAL_DMA_Start_IT+0x210>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d027      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a5c      	ldr	r2, [pc, #368]	; (80020b4 <HAL_DMA_Start_IT+0x214>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d022      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a5a      	ldr	r2, [pc, #360]	; (80020b8 <HAL_DMA_Start_IT+0x218>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d01d      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a59      	ldr	r2, [pc, #356]	; (80020bc <HAL_DMA_Start_IT+0x21c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d018      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a57      	ldr	r2, [pc, #348]	; (80020c0 <HAL_DMA_Start_IT+0x220>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a56      	ldr	r2, [pc, #344]	; (80020c4 <HAL_DMA_Start_IT+0x224>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00e      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a54      	ldr	r2, [pc, #336]	; (80020c8 <HAL_DMA_Start_IT+0x228>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d009      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a53      	ldr	r2, [pc, #332]	; (80020cc <HAL_DMA_Start_IT+0x22c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d004      	beq.n	8001f8e <HAL_DMA_Start_IT+0xee>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a51      	ldr	r2, [pc, #324]	; (80020d0 <HAL_DMA_Start_IT+0x230>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d108      	bne.n	8001fa0 <HAL_DMA_Start_IT+0x100>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0201 	bic.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e007      	b.n	8001fb0 <HAL_DMA_Start_IT+0x110>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f001 fb56 	bl	8003668 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a34      	ldr	r2, [pc, #208]	; (8002094 <HAL_DMA_Start_IT+0x1f4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d04a      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a33      	ldr	r2, [pc, #204]	; (8002098 <HAL_DMA_Start_IT+0x1f8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d045      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a31      	ldr	r2, [pc, #196]	; (800209c <HAL_DMA_Start_IT+0x1fc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d040      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a30      	ldr	r2, [pc, #192]	; (80020a0 <HAL_DMA_Start_IT+0x200>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d03b      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a2e      	ldr	r2, [pc, #184]	; (80020a4 <HAL_DMA_Start_IT+0x204>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d036      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a2d      	ldr	r2, [pc, #180]	; (80020a8 <HAL_DMA_Start_IT+0x208>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d031      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a2b      	ldr	r2, [pc, #172]	; (80020ac <HAL_DMA_Start_IT+0x20c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d02c      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a2a      	ldr	r2, [pc, #168]	; (80020b0 <HAL_DMA_Start_IT+0x210>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d027      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <HAL_DMA_Start_IT+0x214>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d022      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <HAL_DMA_Start_IT+0x218>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d01d      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a25      	ldr	r2, [pc, #148]	; (80020bc <HAL_DMA_Start_IT+0x21c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d018      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a24      	ldr	r2, [pc, #144]	; (80020c0 <HAL_DMA_Start_IT+0x220>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a22      	ldr	r2, [pc, #136]	; (80020c4 <HAL_DMA_Start_IT+0x224>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00e      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a21      	ldr	r2, [pc, #132]	; (80020c8 <HAL_DMA_Start_IT+0x228>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <HAL_DMA_Start_IT+0x22c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_DMA_Start_IT+0x1bc>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <HAL_DMA_Start_IT+0x230>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_DMA_Start_IT+0x1c0>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_DMA_Start_IT+0x1c2>
 8002060:	2300      	movs	r3, #0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d036      	beq.n	80020d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 021e 	bic.w	r2, r3, #30
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0216 	orr.w	r2, r2, #22
 8002078:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d03e      	beq.n	8002100 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0208 	orr.w	r2, r2, #8
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	e035      	b.n	8002100 <HAL_DMA_Start_IT+0x260>
 8002094:	40020010 	.word	0x40020010
 8002098:	40020028 	.word	0x40020028
 800209c:	40020040 	.word	0x40020040
 80020a0:	40020058 	.word	0x40020058
 80020a4:	40020070 	.word	0x40020070
 80020a8:	40020088 	.word	0x40020088
 80020ac:	400200a0 	.word	0x400200a0
 80020b0:	400200b8 	.word	0x400200b8
 80020b4:	40020410 	.word	0x40020410
 80020b8:	40020428 	.word	0x40020428
 80020bc:	40020440 	.word	0x40020440
 80020c0:	40020458 	.word	0x40020458
 80020c4:	40020470 	.word	0x40020470
 80020c8:	40020488 	.word	0x40020488
 80020cc:	400204a0 	.word	0x400204a0
 80020d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 020e 	bic.w	r2, r3, #14
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 020a 	orr.w	r2, r2, #10
 80020e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0204 	orr.w	r2, r2, #4
 80020fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a83      	ldr	r2, [pc, #524]	; (8002314 <HAL_DMA_Start_IT+0x474>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d072      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a82      	ldr	r2, [pc, #520]	; (8002318 <HAL_DMA_Start_IT+0x478>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d06d      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a80      	ldr	r2, [pc, #512]	; (800231c <HAL_DMA_Start_IT+0x47c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d068      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7f      	ldr	r2, [pc, #508]	; (8002320 <HAL_DMA_Start_IT+0x480>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d063      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a7d      	ldr	r2, [pc, #500]	; (8002324 <HAL_DMA_Start_IT+0x484>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d05e      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a7c      	ldr	r2, [pc, #496]	; (8002328 <HAL_DMA_Start_IT+0x488>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d059      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a7a      	ldr	r2, [pc, #488]	; (800232c <HAL_DMA_Start_IT+0x48c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d054      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a79      	ldr	r2, [pc, #484]	; (8002330 <HAL_DMA_Start_IT+0x490>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d04f      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a77      	ldr	r2, [pc, #476]	; (8002334 <HAL_DMA_Start_IT+0x494>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d04a      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a76      	ldr	r2, [pc, #472]	; (8002338 <HAL_DMA_Start_IT+0x498>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d045      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a74      	ldr	r2, [pc, #464]	; (800233c <HAL_DMA_Start_IT+0x49c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d040      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a73      	ldr	r2, [pc, #460]	; (8002340 <HAL_DMA_Start_IT+0x4a0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d03b      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a71      	ldr	r2, [pc, #452]	; (8002344 <HAL_DMA_Start_IT+0x4a4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d036      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a70      	ldr	r2, [pc, #448]	; (8002348 <HAL_DMA_Start_IT+0x4a8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d031      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a6e      	ldr	r2, [pc, #440]	; (800234c <HAL_DMA_Start_IT+0x4ac>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d02c      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a6d      	ldr	r2, [pc, #436]	; (8002350 <HAL_DMA_Start_IT+0x4b0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d027      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a6b      	ldr	r2, [pc, #428]	; (8002354 <HAL_DMA_Start_IT+0x4b4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d022      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a6a      	ldr	r2, [pc, #424]	; (8002358 <HAL_DMA_Start_IT+0x4b8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d01d      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a68      	ldr	r2, [pc, #416]	; (800235c <HAL_DMA_Start_IT+0x4bc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d018      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a67      	ldr	r2, [pc, #412]	; (8002360 <HAL_DMA_Start_IT+0x4c0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d013      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a65      	ldr	r2, [pc, #404]	; (8002364 <HAL_DMA_Start_IT+0x4c4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00e      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a64      	ldr	r2, [pc, #400]	; (8002368 <HAL_DMA_Start_IT+0x4c8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d009      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a62      	ldr	r2, [pc, #392]	; (800236c <HAL_DMA_Start_IT+0x4cc>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d004      	beq.n	80021f0 <HAL_DMA_Start_IT+0x350>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a61      	ldr	r2, [pc, #388]	; (8002370 <HAL_DMA_Start_IT+0x4d0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d101      	bne.n	80021f4 <HAL_DMA_Start_IT+0x354>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_DMA_Start_IT+0x356>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01a      	beq.n	8002230 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002216:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800222a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800222e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a37      	ldr	r2, [pc, #220]	; (8002314 <HAL_DMA_Start_IT+0x474>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d04a      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a36      	ldr	r2, [pc, #216]	; (8002318 <HAL_DMA_Start_IT+0x478>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d045      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a34      	ldr	r2, [pc, #208]	; (800231c <HAL_DMA_Start_IT+0x47c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d040      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a33      	ldr	r2, [pc, #204]	; (8002320 <HAL_DMA_Start_IT+0x480>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d03b      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a31      	ldr	r2, [pc, #196]	; (8002324 <HAL_DMA_Start_IT+0x484>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d036      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a30      	ldr	r2, [pc, #192]	; (8002328 <HAL_DMA_Start_IT+0x488>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d031      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a2e      	ldr	r2, [pc, #184]	; (800232c <HAL_DMA_Start_IT+0x48c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d02c      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a2d      	ldr	r2, [pc, #180]	; (8002330 <HAL_DMA_Start_IT+0x490>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d027      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a2b      	ldr	r2, [pc, #172]	; (8002334 <HAL_DMA_Start_IT+0x494>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d022      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a2a      	ldr	r2, [pc, #168]	; (8002338 <HAL_DMA_Start_IT+0x498>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d01d      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a28      	ldr	r2, [pc, #160]	; (800233c <HAL_DMA_Start_IT+0x49c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d018      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a27      	ldr	r2, [pc, #156]	; (8002340 <HAL_DMA_Start_IT+0x4a0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d013      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a25      	ldr	r2, [pc, #148]	; (8002344 <HAL_DMA_Start_IT+0x4a4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00e      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a24      	ldr	r2, [pc, #144]	; (8002348 <HAL_DMA_Start_IT+0x4a8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d009      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a22      	ldr	r2, [pc, #136]	; (800234c <HAL_DMA_Start_IT+0x4ac>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d004      	beq.n	80022d0 <HAL_DMA_Start_IT+0x430>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a21      	ldr	r2, [pc, #132]	; (8002350 <HAL_DMA_Start_IT+0x4b0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d108      	bne.n	80022e2 <HAL_DMA_Start_IT+0x442>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e012      	b.n	8002308 <HAL_DMA_Start_IT+0x468>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e009      	b.n	8002308 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002302:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002308:	7dfb      	ldrb	r3, [r7, #23]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40020010 	.word	0x40020010
 8002318:	40020028 	.word	0x40020028
 800231c:	40020040 	.word	0x40020040
 8002320:	40020058 	.word	0x40020058
 8002324:	40020070 	.word	0x40020070
 8002328:	40020088 	.word	0x40020088
 800232c:	400200a0 	.word	0x400200a0
 8002330:	400200b8 	.word	0x400200b8
 8002334:	40020410 	.word	0x40020410
 8002338:	40020428 	.word	0x40020428
 800233c:	40020440 	.word	0x40020440
 8002340:	40020458 	.word	0x40020458
 8002344:	40020470 	.word	0x40020470
 8002348:	40020488 	.word	0x40020488
 800234c:	400204a0 	.word	0x400204a0
 8002350:	400204b8 	.word	0x400204b8
 8002354:	58025408 	.word	0x58025408
 8002358:	5802541c 	.word	0x5802541c
 800235c:	58025430 	.word	0x58025430
 8002360:	58025444 	.word	0x58025444
 8002364:	58025458 	.word	0x58025458
 8002368:	5802546c 	.word	0x5802546c
 800236c:	58025480 	.word	0x58025480
 8002370:	58025494 	.word	0x58025494

08002374 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e205      	b.n	8002792 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d004      	beq.n	800239c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2280      	movs	r2, #128	; 0x80
 8002396:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e1fa      	b.n	8002792 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a8c      	ldr	r2, [pc, #560]	; (80025d4 <HAL_DMA_Abort_IT+0x260>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d04a      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a8b      	ldr	r2, [pc, #556]	; (80025d8 <HAL_DMA_Abort_IT+0x264>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d045      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a89      	ldr	r2, [pc, #548]	; (80025dc <HAL_DMA_Abort_IT+0x268>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d040      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a88      	ldr	r2, [pc, #544]	; (80025e0 <HAL_DMA_Abort_IT+0x26c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d03b      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a86      	ldr	r2, [pc, #536]	; (80025e4 <HAL_DMA_Abort_IT+0x270>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d036      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a85      	ldr	r2, [pc, #532]	; (80025e8 <HAL_DMA_Abort_IT+0x274>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d031      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a83      	ldr	r2, [pc, #524]	; (80025ec <HAL_DMA_Abort_IT+0x278>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d02c      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a82      	ldr	r2, [pc, #520]	; (80025f0 <HAL_DMA_Abort_IT+0x27c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d027      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a80      	ldr	r2, [pc, #512]	; (80025f4 <HAL_DMA_Abort_IT+0x280>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d022      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7f      	ldr	r2, [pc, #508]	; (80025f8 <HAL_DMA_Abort_IT+0x284>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d01d      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a7d      	ldr	r2, [pc, #500]	; (80025fc <HAL_DMA_Abort_IT+0x288>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d018      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7c      	ldr	r2, [pc, #496]	; (8002600 <HAL_DMA_Abort_IT+0x28c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a7a      	ldr	r2, [pc, #488]	; (8002604 <HAL_DMA_Abort_IT+0x290>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00e      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a79      	ldr	r2, [pc, #484]	; (8002608 <HAL_DMA_Abort_IT+0x294>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d009      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a77      	ldr	r2, [pc, #476]	; (800260c <HAL_DMA_Abort_IT+0x298>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d004      	beq.n	800243c <HAL_DMA_Abort_IT+0xc8>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a76      	ldr	r2, [pc, #472]	; (8002610 <HAL_DMA_Abort_IT+0x29c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d101      	bne.n	8002440 <HAL_DMA_Abort_IT+0xcc>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <HAL_DMA_Abort_IT+0xce>
 8002440:	2300      	movs	r3, #0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d065      	beq.n	8002512 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2204      	movs	r2, #4
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a60      	ldr	r2, [pc, #384]	; (80025d4 <HAL_DMA_Abort_IT+0x260>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d04a      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a5e      	ldr	r2, [pc, #376]	; (80025d8 <HAL_DMA_Abort_IT+0x264>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d045      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a5d      	ldr	r2, [pc, #372]	; (80025dc <HAL_DMA_Abort_IT+0x268>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d040      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a5b      	ldr	r2, [pc, #364]	; (80025e0 <HAL_DMA_Abort_IT+0x26c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d03b      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a5a      	ldr	r2, [pc, #360]	; (80025e4 <HAL_DMA_Abort_IT+0x270>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d036      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_DMA_Abort_IT+0x274>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d031      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a57      	ldr	r2, [pc, #348]	; (80025ec <HAL_DMA_Abort_IT+0x278>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d02c      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a55      	ldr	r2, [pc, #340]	; (80025f0 <HAL_DMA_Abort_IT+0x27c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d027      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a54      	ldr	r2, [pc, #336]	; (80025f4 <HAL_DMA_Abort_IT+0x280>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d022      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a52      	ldr	r2, [pc, #328]	; (80025f8 <HAL_DMA_Abort_IT+0x284>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d01d      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a51      	ldr	r2, [pc, #324]	; (80025fc <HAL_DMA_Abort_IT+0x288>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d018      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a4f      	ldr	r2, [pc, #316]	; (8002600 <HAL_DMA_Abort_IT+0x28c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a4e      	ldr	r2, [pc, #312]	; (8002604 <HAL_DMA_Abort_IT+0x290>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00e      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a4c      	ldr	r2, [pc, #304]	; (8002608 <HAL_DMA_Abort_IT+0x294>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d009      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a4b      	ldr	r2, [pc, #300]	; (800260c <HAL_DMA_Abort_IT+0x298>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d004      	beq.n	80024ee <HAL_DMA_Abort_IT+0x17a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a49      	ldr	r2, [pc, #292]	; (8002610 <HAL_DMA_Abort_IT+0x29c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d108      	bne.n	8002500 <HAL_DMA_Abort_IT+0x18c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e147      	b.n	8002790 <HAL_DMA_Abort_IT+0x41c>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e13e      	b.n	8002790 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 020e 	bic.w	r2, r2, #14
 8002520:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2b      	ldr	r2, [pc, #172]	; (80025d4 <HAL_DMA_Abort_IT+0x260>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d04a      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a29      	ldr	r2, [pc, #164]	; (80025d8 <HAL_DMA_Abort_IT+0x264>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d045      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a28      	ldr	r2, [pc, #160]	; (80025dc <HAL_DMA_Abort_IT+0x268>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d040      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <HAL_DMA_Abort_IT+0x26c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d03b      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a25      	ldr	r2, [pc, #148]	; (80025e4 <HAL_DMA_Abort_IT+0x270>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d036      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <HAL_DMA_Abort_IT+0x274>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d031      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a22      	ldr	r2, [pc, #136]	; (80025ec <HAL_DMA_Abort_IT+0x278>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d02c      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a20      	ldr	r2, [pc, #128]	; (80025f0 <HAL_DMA_Abort_IT+0x27c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d027      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1f      	ldr	r2, [pc, #124]	; (80025f4 <HAL_DMA_Abort_IT+0x280>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d022      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <HAL_DMA_Abort_IT+0x284>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d01d      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <HAL_DMA_Abort_IT+0x288>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d018      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1a      	ldr	r2, [pc, #104]	; (8002600 <HAL_DMA_Abort_IT+0x28c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a19      	ldr	r2, [pc, #100]	; (8002604 <HAL_DMA_Abort_IT+0x290>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00e      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a17      	ldr	r2, [pc, #92]	; (8002608 <HAL_DMA_Abort_IT+0x294>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d009      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a16      	ldr	r2, [pc, #88]	; (800260c <HAL_DMA_Abort_IT+0x298>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d004      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x24e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_DMA_Abort_IT+0x29c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d128      	bne.n	8002614 <HAL_DMA_Abort_IT+0x2a0>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0201 	bic.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e027      	b.n	8002624 <HAL_DMA_Abort_IT+0x2b0>
 80025d4:	40020010 	.word	0x40020010
 80025d8:	40020028 	.word	0x40020028
 80025dc:	40020040 	.word	0x40020040
 80025e0:	40020058 	.word	0x40020058
 80025e4:	40020070 	.word	0x40020070
 80025e8:	40020088 	.word	0x40020088
 80025ec:	400200a0 	.word	0x400200a0
 80025f0:	400200b8 	.word	0x400200b8
 80025f4:	40020410 	.word	0x40020410
 80025f8:	40020428 	.word	0x40020428
 80025fc:	40020440 	.word	0x40020440
 8002600:	40020458 	.word	0x40020458
 8002604:	40020470 	.word	0x40020470
 8002608:	40020488 	.word	0x40020488
 800260c:	400204a0 	.word	0x400204a0
 8002610:	400204b8 	.word	0x400204b8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a5c      	ldr	r2, [pc, #368]	; (800279c <HAL_DMA_Abort_IT+0x428>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d072      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a5b      	ldr	r2, [pc, #364]	; (80027a0 <HAL_DMA_Abort_IT+0x42c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d06d      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a59      	ldr	r2, [pc, #356]	; (80027a4 <HAL_DMA_Abort_IT+0x430>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d068      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a58      	ldr	r2, [pc, #352]	; (80027a8 <HAL_DMA_Abort_IT+0x434>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d063      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a56      	ldr	r2, [pc, #344]	; (80027ac <HAL_DMA_Abort_IT+0x438>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d05e      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a55      	ldr	r2, [pc, #340]	; (80027b0 <HAL_DMA_Abort_IT+0x43c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d059      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a53      	ldr	r2, [pc, #332]	; (80027b4 <HAL_DMA_Abort_IT+0x440>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d054      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a52      	ldr	r2, [pc, #328]	; (80027b8 <HAL_DMA_Abort_IT+0x444>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d04f      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a50      	ldr	r2, [pc, #320]	; (80027bc <HAL_DMA_Abort_IT+0x448>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d04a      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a4f      	ldr	r2, [pc, #316]	; (80027c0 <HAL_DMA_Abort_IT+0x44c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d045      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a4d      	ldr	r2, [pc, #308]	; (80027c4 <HAL_DMA_Abort_IT+0x450>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d040      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a4c      	ldr	r2, [pc, #304]	; (80027c8 <HAL_DMA_Abort_IT+0x454>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d03b      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a4a      	ldr	r2, [pc, #296]	; (80027cc <HAL_DMA_Abort_IT+0x458>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d036      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a49      	ldr	r2, [pc, #292]	; (80027d0 <HAL_DMA_Abort_IT+0x45c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d031      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a47      	ldr	r2, [pc, #284]	; (80027d4 <HAL_DMA_Abort_IT+0x460>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d02c      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a46      	ldr	r2, [pc, #280]	; (80027d8 <HAL_DMA_Abort_IT+0x464>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d027      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a44      	ldr	r2, [pc, #272]	; (80027dc <HAL_DMA_Abort_IT+0x468>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d022      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a43      	ldr	r2, [pc, #268]	; (80027e0 <HAL_DMA_Abort_IT+0x46c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d01d      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a41      	ldr	r2, [pc, #260]	; (80027e4 <HAL_DMA_Abort_IT+0x470>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d018      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a40      	ldr	r2, [pc, #256]	; (80027e8 <HAL_DMA_Abort_IT+0x474>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d013      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a3e      	ldr	r2, [pc, #248]	; (80027ec <HAL_DMA_Abort_IT+0x478>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00e      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a3d      	ldr	r2, [pc, #244]	; (80027f0 <HAL_DMA_Abort_IT+0x47c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d009      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a3b      	ldr	r2, [pc, #236]	; (80027f4 <HAL_DMA_Abort_IT+0x480>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d004      	beq.n	8002714 <HAL_DMA_Abort_IT+0x3a0>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a3a      	ldr	r2, [pc, #232]	; (80027f8 <HAL_DMA_Abort_IT+0x484>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d101      	bne.n	8002718 <HAL_DMA_Abort_IT+0x3a4>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <HAL_DMA_Abort_IT+0x3a6>
 8002718:	2300      	movs	r3, #0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d028      	beq.n	8002770 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800272c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	2201      	movs	r2, #1
 800273e:	409a      	lsls	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800274c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00c      	beq.n	8002770 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002764:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800276e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40020010 	.word	0x40020010
 80027a0:	40020028 	.word	0x40020028
 80027a4:	40020040 	.word	0x40020040
 80027a8:	40020058 	.word	0x40020058
 80027ac:	40020070 	.word	0x40020070
 80027b0:	40020088 	.word	0x40020088
 80027b4:	400200a0 	.word	0x400200a0
 80027b8:	400200b8 	.word	0x400200b8
 80027bc:	40020410 	.word	0x40020410
 80027c0:	40020428 	.word	0x40020428
 80027c4:	40020440 	.word	0x40020440
 80027c8:	40020458 	.word	0x40020458
 80027cc:	40020470 	.word	0x40020470
 80027d0:	40020488 	.word	0x40020488
 80027d4:	400204a0 	.word	0x400204a0
 80027d8:	400204b8 	.word	0x400204b8
 80027dc:	58025408 	.word	0x58025408
 80027e0:	5802541c 	.word	0x5802541c
 80027e4:	58025430 	.word	0x58025430
 80027e8:	58025444 	.word	0x58025444
 80027ec:	58025458 	.word	0x58025458
 80027f0:	5802546c 	.word	0x5802546c
 80027f4:	58025480 	.word	0x58025480
 80027f8:	58025494 	.word	0x58025494

080027fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002808:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <HAL_DMA_IRQHandler+0x1ac>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a67      	ldr	r2, [pc, #412]	; (80029ac <HAL_DMA_IRQHandler+0x1b0>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0a9b      	lsrs	r3, r3, #10
 8002814:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a5f      	ldr	r2, [pc, #380]	; (80029b0 <HAL_DMA_IRQHandler+0x1b4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d04a      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a5d      	ldr	r2, [pc, #372]	; (80029b4 <HAL_DMA_IRQHandler+0x1b8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d045      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a5c      	ldr	r2, [pc, #368]	; (80029b8 <HAL_DMA_IRQHandler+0x1bc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d040      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a5a      	ldr	r2, [pc, #360]	; (80029bc <HAL_DMA_IRQHandler+0x1c0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d03b      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a59      	ldr	r2, [pc, #356]	; (80029c0 <HAL_DMA_IRQHandler+0x1c4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d036      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a57      	ldr	r2, [pc, #348]	; (80029c4 <HAL_DMA_IRQHandler+0x1c8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d031      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a56      	ldr	r2, [pc, #344]	; (80029c8 <HAL_DMA_IRQHandler+0x1cc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d02c      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a54      	ldr	r2, [pc, #336]	; (80029cc <HAL_DMA_IRQHandler+0x1d0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d027      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a53      	ldr	r2, [pc, #332]	; (80029d0 <HAL_DMA_IRQHandler+0x1d4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d022      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a51      	ldr	r2, [pc, #324]	; (80029d4 <HAL_DMA_IRQHandler+0x1d8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d01d      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a50      	ldr	r2, [pc, #320]	; (80029d8 <HAL_DMA_IRQHandler+0x1dc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d018      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a4e      	ldr	r2, [pc, #312]	; (80029dc <HAL_DMA_IRQHandler+0x1e0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a4d      	ldr	r2, [pc, #308]	; (80029e0 <HAL_DMA_IRQHandler+0x1e4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00e      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a4b      	ldr	r2, [pc, #300]	; (80029e4 <HAL_DMA_IRQHandler+0x1e8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d009      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a4a      	ldr	r2, [pc, #296]	; (80029e8 <HAL_DMA_IRQHandler+0x1ec>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d004      	beq.n	80028ce <HAL_DMA_IRQHandler+0xd2>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a48      	ldr	r2, [pc, #288]	; (80029ec <HAL_DMA_IRQHandler+0x1f0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d101      	bne.n	80028d2 <HAL_DMA_IRQHandler+0xd6>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_DMA_IRQHandler+0xd8>
 80028d2:	2300      	movs	r3, #0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 842b 	beq.w	8003130 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	2208      	movs	r2, #8
 80028e4:	409a      	lsls	r2, r3
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80a2 	beq.w	8002a34 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a2e      	ldr	r2, [pc, #184]	; (80029b0 <HAL_DMA_IRQHandler+0x1b4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d04a      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <HAL_DMA_IRQHandler+0x1b8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d045      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <HAL_DMA_IRQHandler+0x1bc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d040      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a2a      	ldr	r2, [pc, #168]	; (80029bc <HAL_DMA_IRQHandler+0x1c0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d03b      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a28      	ldr	r2, [pc, #160]	; (80029c0 <HAL_DMA_IRQHandler+0x1c4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d036      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <HAL_DMA_IRQHandler+0x1c8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d031      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a25      	ldr	r2, [pc, #148]	; (80029c8 <HAL_DMA_IRQHandler+0x1cc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d02c      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a24      	ldr	r2, [pc, #144]	; (80029cc <HAL_DMA_IRQHandler+0x1d0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d027      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a22      	ldr	r2, [pc, #136]	; (80029d0 <HAL_DMA_IRQHandler+0x1d4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d022      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a21      	ldr	r2, [pc, #132]	; (80029d4 <HAL_DMA_IRQHandler+0x1d8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d01d      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <HAL_DMA_IRQHandler+0x1dc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d018      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <HAL_DMA_IRQHandler+0x1e0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d013      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <HAL_DMA_IRQHandler+0x1e4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00e      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_DMA_IRQHandler+0x1e8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d009      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a19      	ldr	r2, [pc, #100]	; (80029e8 <HAL_DMA_IRQHandler+0x1ec>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d004      	beq.n	8002990 <HAL_DMA_IRQHandler+0x194>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a18      	ldr	r2, [pc, #96]	; (80029ec <HAL_DMA_IRQHandler+0x1f0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d12f      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x1f4>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	bf14      	ite	ne
 800299e:	2301      	movne	r3, #1
 80029a0:	2300      	moveq	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	e02e      	b.n	8002a04 <HAL_DMA_IRQHandler+0x208>
 80029a6:	bf00      	nop
 80029a8:	20000010 	.word	0x20000010
 80029ac:	1b4e81b5 	.word	0x1b4e81b5
 80029b0:	40020010 	.word	0x40020010
 80029b4:	40020028 	.word	0x40020028
 80029b8:	40020040 	.word	0x40020040
 80029bc:	40020058 	.word	0x40020058
 80029c0:	40020070 	.word	0x40020070
 80029c4:	40020088 	.word	0x40020088
 80029c8:	400200a0 	.word	0x400200a0
 80029cc:	400200b8 	.word	0x400200b8
 80029d0:	40020410 	.word	0x40020410
 80029d4:	40020428 	.word	0x40020428
 80029d8:	40020440 	.word	0x40020440
 80029dc:	40020458 	.word	0x40020458
 80029e0:	40020470 	.word	0x40020470
 80029e4:	40020488 	.word	0x40020488
 80029e8:	400204a0 	.word	0x400204a0
 80029ec:	400204b8 	.word	0x400204b8
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	bf14      	ite	ne
 80029fe:	2301      	movne	r3, #1
 8002a00:	2300      	moveq	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0204 	bic.w	r2, r2, #4
 8002a16:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2208      	movs	r2, #8
 8002a22:	409a      	lsls	r2, r3
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	f043 0201 	orr.w	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d06e      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a69      	ldr	r2, [pc, #420]	; (8002bf4 <HAL_DMA_IRQHandler+0x3f8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d04a      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a67      	ldr	r2, [pc, #412]	; (8002bf8 <HAL_DMA_IRQHandler+0x3fc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d045      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a66      	ldr	r2, [pc, #408]	; (8002bfc <HAL_DMA_IRQHandler+0x400>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d040      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a64      	ldr	r2, [pc, #400]	; (8002c00 <HAL_DMA_IRQHandler+0x404>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d03b      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a63      	ldr	r2, [pc, #396]	; (8002c04 <HAL_DMA_IRQHandler+0x408>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d036      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a61      	ldr	r2, [pc, #388]	; (8002c08 <HAL_DMA_IRQHandler+0x40c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d031      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a60      	ldr	r2, [pc, #384]	; (8002c0c <HAL_DMA_IRQHandler+0x410>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d02c      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a5e      	ldr	r2, [pc, #376]	; (8002c10 <HAL_DMA_IRQHandler+0x414>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d027      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a5d      	ldr	r2, [pc, #372]	; (8002c14 <HAL_DMA_IRQHandler+0x418>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d022      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5b      	ldr	r2, [pc, #364]	; (8002c18 <HAL_DMA_IRQHandler+0x41c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01d      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5a      	ldr	r2, [pc, #360]	; (8002c1c <HAL_DMA_IRQHandler+0x420>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d018      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a58      	ldr	r2, [pc, #352]	; (8002c20 <HAL_DMA_IRQHandler+0x424>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a57      	ldr	r2, [pc, #348]	; (8002c24 <HAL_DMA_IRQHandler+0x428>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a55      	ldr	r2, [pc, #340]	; (8002c28 <HAL_DMA_IRQHandler+0x42c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a54      	ldr	r2, [pc, #336]	; (8002c2c <HAL_DMA_IRQHandler+0x430>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2ee>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a52      	ldr	r2, [pc, #328]	; (8002c30 <HAL_DMA_IRQHandler+0x434>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10a      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x304>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e003      	b.n	8002b08 <HAL_DMA_IRQHandler+0x30c>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2201      	movs	r2, #1
 8002b16:	409a      	lsls	r2, r3
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	f043 0202 	orr.w	r2, r3, #2
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	2204      	movs	r2, #4
 8002b32:	409a      	lsls	r2, r3
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 808f 	beq.w	8002c5c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2c      	ldr	r2, [pc, #176]	; (8002bf4 <HAL_DMA_IRQHandler+0x3f8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d04a      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a2a      	ldr	r2, [pc, #168]	; (8002bf8 <HAL_DMA_IRQHandler+0x3fc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d045      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <HAL_DMA_IRQHandler+0x400>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d040      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a27      	ldr	r2, [pc, #156]	; (8002c00 <HAL_DMA_IRQHandler+0x404>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d03b      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a26      	ldr	r2, [pc, #152]	; (8002c04 <HAL_DMA_IRQHandler+0x408>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d036      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <HAL_DMA_IRQHandler+0x40c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d031      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a23      	ldr	r2, [pc, #140]	; (8002c0c <HAL_DMA_IRQHandler+0x410>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d02c      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <HAL_DMA_IRQHandler+0x414>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d027      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a20      	ldr	r2, [pc, #128]	; (8002c14 <HAL_DMA_IRQHandler+0x418>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d022      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1e      	ldr	r2, [pc, #120]	; (8002c18 <HAL_DMA_IRQHandler+0x41c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d01d      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <HAL_DMA_IRQHandler+0x420>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d018      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <HAL_DMA_IRQHandler+0x424>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <HAL_DMA_IRQHandler+0x428>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00e      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a18      	ldr	r2, [pc, #96]	; (8002c28 <HAL_DMA_IRQHandler+0x42c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d009      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <HAL_DMA_IRQHandler+0x430>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_DMA_IRQHandler+0x3e2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <HAL_DMA_IRQHandler+0x434>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d12a      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x438>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf14      	ite	ne
 8002bec:	2301      	movne	r3, #1
 8002bee:	2300      	moveq	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	e023      	b.n	8002c3c <HAL_DMA_IRQHandler+0x440>
 8002bf4:	40020010 	.word	0x40020010
 8002bf8:	40020028 	.word	0x40020028
 8002bfc:	40020040 	.word	0x40020040
 8002c00:	40020058 	.word	0x40020058
 8002c04:	40020070 	.word	0x40020070
 8002c08:	40020088 	.word	0x40020088
 8002c0c:	400200a0 	.word	0x400200a0
 8002c10:	400200b8 	.word	0x400200b8
 8002c14:	40020410 	.word	0x40020410
 8002c18:	40020428 	.word	0x40020428
 8002c1c:	40020440 	.word	0x40020440
 8002c20:	40020458 	.word	0x40020458
 8002c24:	40020470 	.word	0x40020470
 8002c28:	40020488 	.word	0x40020488
 8002c2c:	400204a0 	.word	0x400204a0
 8002c30:	400204b8 	.word	0x400204b8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00d      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2204      	movs	r2, #4
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	f043 0204 	orr.w	r2, r3, #4
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2210      	movs	r2, #16
 8002c66:	409a      	lsls	r2, r3
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80a6 	beq.w	8002dbe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a85      	ldr	r2, [pc, #532]	; (8002e8c <HAL_DMA_IRQHandler+0x690>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d04a      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a83      	ldr	r2, [pc, #524]	; (8002e90 <HAL_DMA_IRQHandler+0x694>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d045      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a82      	ldr	r2, [pc, #520]	; (8002e94 <HAL_DMA_IRQHandler+0x698>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d040      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a80      	ldr	r2, [pc, #512]	; (8002e98 <HAL_DMA_IRQHandler+0x69c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d03b      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7f      	ldr	r2, [pc, #508]	; (8002e9c <HAL_DMA_IRQHandler+0x6a0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d036      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a7d      	ldr	r2, [pc, #500]	; (8002ea0 <HAL_DMA_IRQHandler+0x6a4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d031      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7c      	ldr	r2, [pc, #496]	; (8002ea4 <HAL_DMA_IRQHandler+0x6a8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d02c      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a7a      	ldr	r2, [pc, #488]	; (8002ea8 <HAL_DMA_IRQHandler+0x6ac>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d027      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a79      	ldr	r2, [pc, #484]	; (8002eac <HAL_DMA_IRQHandler+0x6b0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d022      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a77      	ldr	r2, [pc, #476]	; (8002eb0 <HAL_DMA_IRQHandler+0x6b4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01d      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a76      	ldr	r2, [pc, #472]	; (8002eb4 <HAL_DMA_IRQHandler+0x6b8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d018      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a74      	ldr	r2, [pc, #464]	; (8002eb8 <HAL_DMA_IRQHandler+0x6bc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a73      	ldr	r2, [pc, #460]	; (8002ebc <HAL_DMA_IRQHandler+0x6c0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a71      	ldr	r2, [pc, #452]	; (8002ec0 <HAL_DMA_IRQHandler+0x6c4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a70      	ldr	r2, [pc, #448]	; (8002ec4 <HAL_DMA_IRQHandler+0x6c8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x516>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a6e      	ldr	r2, [pc, #440]	; (8002ec8 <HAL_DMA_IRQHandler+0x6cc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d10a      	bne.n	8002d28 <HAL_DMA_IRQHandler+0x52c>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e009      	b.n	8002d3c <HAL_DMA_IRQHandler+0x540>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf14      	ite	ne
 8002d36:	2301      	movne	r3, #1
 8002d38:	2300      	moveq	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d03e      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	2210      	movs	r2, #16
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d018      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d108      	bne.n	8002d7e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d024      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	4798      	blx	r3
 8002d7c:	e01f      	b.n	8002dbe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01b      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
 8002d8e:	e016      	b.n	8002dbe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d107      	bne.n	8002dae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0208 	bic.w	r2, r2, #8
 8002dac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8110 	beq.w	8002ff4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a2c      	ldr	r2, [pc, #176]	; (8002e8c <HAL_DMA_IRQHandler+0x690>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d04a      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a2b      	ldr	r2, [pc, #172]	; (8002e90 <HAL_DMA_IRQHandler+0x694>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d045      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a29      	ldr	r2, [pc, #164]	; (8002e94 <HAL_DMA_IRQHandler+0x698>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d040      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a28      	ldr	r2, [pc, #160]	; (8002e98 <HAL_DMA_IRQHandler+0x69c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d03b      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a26      	ldr	r2, [pc, #152]	; (8002e9c <HAL_DMA_IRQHandler+0x6a0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d036      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a25      	ldr	r2, [pc, #148]	; (8002ea0 <HAL_DMA_IRQHandler+0x6a4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d031      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a23      	ldr	r2, [pc, #140]	; (8002ea4 <HAL_DMA_IRQHandler+0x6a8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d02c      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a22      	ldr	r2, [pc, #136]	; (8002ea8 <HAL_DMA_IRQHandler+0x6ac>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d027      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a20      	ldr	r2, [pc, #128]	; (8002eac <HAL_DMA_IRQHandler+0x6b0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d022      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <HAL_DMA_IRQHandler+0x6b4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d01d      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <HAL_DMA_IRQHandler+0x6b8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d018      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <HAL_DMA_IRQHandler+0x6bc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d013      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1a      	ldr	r2, [pc, #104]	; (8002ebc <HAL_DMA_IRQHandler+0x6c0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00e      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a19      	ldr	r2, [pc, #100]	; (8002ec0 <HAL_DMA_IRQHandler+0x6c4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d009      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <HAL_DMA_IRQHandler+0x6c8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d004      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x678>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a16      	ldr	r2, [pc, #88]	; (8002ec8 <HAL_DMA_IRQHandler+0x6cc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d12b      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x6d0>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bf14      	ite	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	2300      	moveq	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	e02a      	b.n	8002ee0 <HAL_DMA_IRQHandler+0x6e4>
 8002e8a:	bf00      	nop
 8002e8c:	40020010 	.word	0x40020010
 8002e90:	40020028 	.word	0x40020028
 8002e94:	40020040 	.word	0x40020040
 8002e98:	40020058 	.word	0x40020058
 8002e9c:	40020070 	.word	0x40020070
 8002ea0:	40020088 	.word	0x40020088
 8002ea4:	400200a0 	.word	0x400200a0
 8002ea8:	400200b8 	.word	0x400200b8
 8002eac:	40020410 	.word	0x40020410
 8002eb0:	40020428 	.word	0x40020428
 8002eb4:	40020440 	.word	0x40020440
 8002eb8:	40020458 	.word	0x40020458
 8002ebc:	40020470 	.word	0x40020470
 8002ec0:	40020488 	.word	0x40020488
 8002ec4:	400204a0 	.word	0x400204a0
 8002ec8:	400204b8 	.word	0x400204b8
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bf14      	ite	ne
 8002eda:	2301      	movne	r3, #1
 8002edc:	2300      	moveq	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8087 	beq.w	8002ff4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2220      	movs	r2, #32
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d139      	bne.n	8002f76 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0216 	bic.w	r2, r2, #22
 8002f10:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f20:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <HAL_DMA_IRQHandler+0x736>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0208 	bic.w	r2, r2, #8
 8002f40:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	223f      	movs	r2, #63	; 0x3f
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 834a 	beq.w	8003600 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
          }
          return;
 8002f74:	e344      	b.n	8003600 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d018      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d108      	bne.n	8002fa4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d02c      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4798      	blx	r3
 8002fa2:	e027      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d023      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
 8002fb4:	e01e      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10f      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0210 	bic.w	r2, r2, #16
 8002fd2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8306 	beq.w	800360a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8088 	beq.w	800311c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2204      	movs	r2, #4
 8003010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a7a      	ldr	r2, [pc, #488]	; (8003204 <HAL_DMA_IRQHandler+0xa08>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d04a      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a79      	ldr	r2, [pc, #484]	; (8003208 <HAL_DMA_IRQHandler+0xa0c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d045      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a77      	ldr	r2, [pc, #476]	; (800320c <HAL_DMA_IRQHandler+0xa10>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d040      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a76      	ldr	r2, [pc, #472]	; (8003210 <HAL_DMA_IRQHandler+0xa14>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d03b      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a74      	ldr	r2, [pc, #464]	; (8003214 <HAL_DMA_IRQHandler+0xa18>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d036      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a73      	ldr	r2, [pc, #460]	; (8003218 <HAL_DMA_IRQHandler+0xa1c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d031      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a71      	ldr	r2, [pc, #452]	; (800321c <HAL_DMA_IRQHandler+0xa20>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d02c      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a70      	ldr	r2, [pc, #448]	; (8003220 <HAL_DMA_IRQHandler+0xa24>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d027      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a6e      	ldr	r2, [pc, #440]	; (8003224 <HAL_DMA_IRQHandler+0xa28>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d022      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a6d      	ldr	r2, [pc, #436]	; (8003228 <HAL_DMA_IRQHandler+0xa2c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d01d      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a6b      	ldr	r2, [pc, #428]	; (800322c <HAL_DMA_IRQHandler+0xa30>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d018      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a6a      	ldr	r2, [pc, #424]	; (8003230 <HAL_DMA_IRQHandler+0xa34>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d013      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a68      	ldr	r2, [pc, #416]	; (8003234 <HAL_DMA_IRQHandler+0xa38>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00e      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a67      	ldr	r2, [pc, #412]	; (8003238 <HAL_DMA_IRQHandler+0xa3c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d009      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a65      	ldr	r2, [pc, #404]	; (800323c <HAL_DMA_IRQHandler+0xa40>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d004      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x8b8>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a64      	ldr	r2, [pc, #400]	; (8003240 <HAL_DMA_IRQHandler+0xa44>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d108      	bne.n	80030c6 <HAL_DMA_IRQHandler+0x8ca>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e007      	b.n	80030d6 <HAL_DMA_IRQHandler+0x8da>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3301      	adds	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030de:	429a      	cmp	r2, r3
 80030e0:	d307      	bcc.n	80030f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f2      	bne.n	80030d6 <HAL_DMA_IRQHandler+0x8da>
 80030f0:	e000      	b.n	80030f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80030f2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2203      	movs	r2, #3
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003112:	e003      	b.n	800311c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8272 	beq.w	800360a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	4798      	blx	r3
 800312e:	e26c      	b.n	800360a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a43      	ldr	r2, [pc, #268]	; (8003244 <HAL_DMA_IRQHandler+0xa48>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d022      	beq.n	8003180 <HAL_DMA_IRQHandler+0x984>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a42      	ldr	r2, [pc, #264]	; (8003248 <HAL_DMA_IRQHandler+0xa4c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d01d      	beq.n	8003180 <HAL_DMA_IRQHandler+0x984>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a40      	ldr	r2, [pc, #256]	; (800324c <HAL_DMA_IRQHandler+0xa50>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d018      	beq.n	8003180 <HAL_DMA_IRQHandler+0x984>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a3f      	ldr	r2, [pc, #252]	; (8003250 <HAL_DMA_IRQHandler+0xa54>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d013      	beq.n	8003180 <HAL_DMA_IRQHandler+0x984>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3d      	ldr	r2, [pc, #244]	; (8003254 <HAL_DMA_IRQHandler+0xa58>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00e      	beq.n	8003180 <HAL_DMA_IRQHandler+0x984>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a3c      	ldr	r2, [pc, #240]	; (8003258 <HAL_DMA_IRQHandler+0xa5c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d009      	beq.n	8003180 <HAL_DMA_IRQHandler+0x984>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a3a      	ldr	r2, [pc, #232]	; (800325c <HAL_DMA_IRQHandler+0xa60>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d004      	beq.n	8003180 <HAL_DMA_IRQHandler+0x984>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a39      	ldr	r2, [pc, #228]	; (8003260 <HAL_DMA_IRQHandler+0xa64>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <HAL_DMA_IRQHandler+0x988>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_DMA_IRQHandler+0x98a>
 8003184:	2300      	movs	r3, #0
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 823f 	beq.w	800360a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	2204      	movs	r2, #4
 800319e:	409a      	lsls	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80cd 	beq.w	8003344 <HAL_DMA_IRQHandler+0xb48>
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80c7 	beq.w	8003344 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	2204      	movs	r2, #4
 80031c0:	409a      	lsls	r2, r3
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d049      	beq.n	8003264 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8210 	beq.w	8003604 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031ec:	e20a      	b.n	8003604 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8206 	beq.w	8003604 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003200:	e200      	b.n	8003604 <HAL_DMA_IRQHandler+0xe08>
 8003202:	bf00      	nop
 8003204:	40020010 	.word	0x40020010
 8003208:	40020028 	.word	0x40020028
 800320c:	40020040 	.word	0x40020040
 8003210:	40020058 	.word	0x40020058
 8003214:	40020070 	.word	0x40020070
 8003218:	40020088 	.word	0x40020088
 800321c:	400200a0 	.word	0x400200a0
 8003220:	400200b8 	.word	0x400200b8
 8003224:	40020410 	.word	0x40020410
 8003228:	40020428 	.word	0x40020428
 800322c:	40020440 	.word	0x40020440
 8003230:	40020458 	.word	0x40020458
 8003234:	40020470 	.word	0x40020470
 8003238:	40020488 	.word	0x40020488
 800323c:	400204a0 	.word	0x400204a0
 8003240:	400204b8 	.word	0x400204b8
 8003244:	58025408 	.word	0x58025408
 8003248:	5802541c 	.word	0x5802541c
 800324c:	58025430 	.word	0x58025430
 8003250:	58025444 	.word	0x58025444
 8003254:	58025458 	.word	0x58025458
 8003258:	5802546c 	.word	0x5802546c
 800325c:	58025480 	.word	0x58025480
 8003260:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d160      	bne.n	8003330 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a8c      	ldr	r2, [pc, #560]	; (80034a4 <HAL_DMA_IRQHandler+0xca8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d04a      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a8a      	ldr	r2, [pc, #552]	; (80034a8 <HAL_DMA_IRQHandler+0xcac>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d045      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a89      	ldr	r2, [pc, #548]	; (80034ac <HAL_DMA_IRQHandler+0xcb0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d040      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a87      	ldr	r2, [pc, #540]	; (80034b0 <HAL_DMA_IRQHandler+0xcb4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d03b      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a86      	ldr	r2, [pc, #536]	; (80034b4 <HAL_DMA_IRQHandler+0xcb8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d036      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a84      	ldr	r2, [pc, #528]	; (80034b8 <HAL_DMA_IRQHandler+0xcbc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d031      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a83      	ldr	r2, [pc, #524]	; (80034bc <HAL_DMA_IRQHandler+0xcc0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d02c      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a81      	ldr	r2, [pc, #516]	; (80034c0 <HAL_DMA_IRQHandler+0xcc4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d027      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a80      	ldr	r2, [pc, #512]	; (80034c4 <HAL_DMA_IRQHandler+0xcc8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d022      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a7e      	ldr	r2, [pc, #504]	; (80034c8 <HAL_DMA_IRQHandler+0xccc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01d      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a7d      	ldr	r2, [pc, #500]	; (80034cc <HAL_DMA_IRQHandler+0xcd0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d018      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a7b      	ldr	r2, [pc, #492]	; (80034d0 <HAL_DMA_IRQHandler+0xcd4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a7a      	ldr	r2, [pc, #488]	; (80034d4 <HAL_DMA_IRQHandler+0xcd8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00e      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a78      	ldr	r2, [pc, #480]	; (80034d8 <HAL_DMA_IRQHandler+0xcdc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d009      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a77      	ldr	r2, [pc, #476]	; (80034dc <HAL_DMA_IRQHandler+0xce0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <HAL_DMA_IRQHandler+0xb12>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a75      	ldr	r2, [pc, #468]	; (80034e0 <HAL_DMA_IRQHandler+0xce4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <HAL_DMA_IRQHandler+0xb24>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0208 	bic.w	r2, r2, #8
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e007      	b.n	8003330 <HAL_DMA_IRQHandler+0xb34>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0204 	bic.w	r2, r2, #4
 800332e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8165 	beq.w	8003604 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003342:	e15f      	b.n	8003604 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2202      	movs	r2, #2
 800334e:	409a      	lsls	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	4013      	ands	r3, r2
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80c5 	beq.w	80034e4 <HAL_DMA_IRQHandler+0xce8>
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80bf 	beq.w	80034e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2202      	movs	r2, #2
 8003370:	409a      	lsls	r2, r3
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d018      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 813a 	beq.w	8003608 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800339c:	e134      	b.n	8003608 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8130 	beq.w	8003608 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033b0:	e12a      	b.n	8003608 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d168      	bne.n	800348e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a38      	ldr	r2, [pc, #224]	; (80034a4 <HAL_DMA_IRQHandler+0xca8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d04a      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a37      	ldr	r2, [pc, #220]	; (80034a8 <HAL_DMA_IRQHandler+0xcac>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d045      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a35      	ldr	r2, [pc, #212]	; (80034ac <HAL_DMA_IRQHandler+0xcb0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d040      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a34      	ldr	r2, [pc, #208]	; (80034b0 <HAL_DMA_IRQHandler+0xcb4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d03b      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a32      	ldr	r2, [pc, #200]	; (80034b4 <HAL_DMA_IRQHandler+0xcb8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d036      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a31      	ldr	r2, [pc, #196]	; (80034b8 <HAL_DMA_IRQHandler+0xcbc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d031      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a2f      	ldr	r2, [pc, #188]	; (80034bc <HAL_DMA_IRQHandler+0xcc0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d02c      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2e      	ldr	r2, [pc, #184]	; (80034c0 <HAL_DMA_IRQHandler+0xcc4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d027      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <HAL_DMA_IRQHandler+0xcc8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d022      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2b      	ldr	r2, [pc, #172]	; (80034c8 <HAL_DMA_IRQHandler+0xccc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d01d      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a29      	ldr	r2, [pc, #164]	; (80034cc <HAL_DMA_IRQHandler+0xcd0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d018      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <HAL_DMA_IRQHandler+0xcd4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d013      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <HAL_DMA_IRQHandler+0xcd8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00e      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <HAL_DMA_IRQHandler+0xcdc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d009      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a23      	ldr	r2, [pc, #140]	; (80034dc <HAL_DMA_IRQHandler+0xce0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d004      	beq.n	800345c <HAL_DMA_IRQHandler+0xc60>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a22      	ldr	r2, [pc, #136]	; (80034e0 <HAL_DMA_IRQHandler+0xce4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d108      	bne.n	800346e <HAL_DMA_IRQHandler+0xc72>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0214 	bic.w	r2, r2, #20
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e007      	b.n	800347e <HAL_DMA_IRQHandler+0xc82>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 020a 	bic.w	r2, r2, #10
 800347c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80b8 	beq.w	8003608 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034a0:	e0b2      	b.n	8003608 <HAL_DMA_IRQHandler+0xe0c>
 80034a2:	bf00      	nop
 80034a4:	40020010 	.word	0x40020010
 80034a8:	40020028 	.word	0x40020028
 80034ac:	40020040 	.word	0x40020040
 80034b0:	40020058 	.word	0x40020058
 80034b4:	40020070 	.word	0x40020070
 80034b8:	40020088 	.word	0x40020088
 80034bc:	400200a0 	.word	0x400200a0
 80034c0:	400200b8 	.word	0x400200b8
 80034c4:	40020410 	.word	0x40020410
 80034c8:	40020428 	.word	0x40020428
 80034cc:	40020440 	.word	0x40020440
 80034d0:	40020458 	.word	0x40020458
 80034d4:	40020470 	.word	0x40020470
 80034d8:	40020488 	.word	0x40020488
 80034dc:	400204a0 	.word	0x400204a0
 80034e0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2208      	movs	r2, #8
 80034ee:	409a      	lsls	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8088 	beq.w	800360a <HAL_DMA_IRQHandler+0xe0e>
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8082 	beq.w	800360a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a41      	ldr	r2, [pc, #260]	; (8003610 <HAL_DMA_IRQHandler+0xe14>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d04a      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a3f      	ldr	r2, [pc, #252]	; (8003614 <HAL_DMA_IRQHandler+0xe18>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d045      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a3e      	ldr	r2, [pc, #248]	; (8003618 <HAL_DMA_IRQHandler+0xe1c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d040      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a3c      	ldr	r2, [pc, #240]	; (800361c <HAL_DMA_IRQHandler+0xe20>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d03b      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a3b      	ldr	r2, [pc, #236]	; (8003620 <HAL_DMA_IRQHandler+0xe24>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d036      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a39      	ldr	r2, [pc, #228]	; (8003624 <HAL_DMA_IRQHandler+0xe28>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d031      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a38      	ldr	r2, [pc, #224]	; (8003628 <HAL_DMA_IRQHandler+0xe2c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d02c      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a36      	ldr	r2, [pc, #216]	; (800362c <HAL_DMA_IRQHandler+0xe30>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d027      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a35      	ldr	r2, [pc, #212]	; (8003630 <HAL_DMA_IRQHandler+0xe34>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d022      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a33      	ldr	r2, [pc, #204]	; (8003634 <HAL_DMA_IRQHandler+0xe38>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01d      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a32      	ldr	r2, [pc, #200]	; (8003638 <HAL_DMA_IRQHandler+0xe3c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d018      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a30      	ldr	r2, [pc, #192]	; (800363c <HAL_DMA_IRQHandler+0xe40>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2f      	ldr	r2, [pc, #188]	; (8003640 <HAL_DMA_IRQHandler+0xe44>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00e      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2d      	ldr	r2, [pc, #180]	; (8003644 <HAL_DMA_IRQHandler+0xe48>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <HAL_DMA_IRQHandler+0xe4c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xdaa>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2a      	ldr	r2, [pc, #168]	; (800364c <HAL_DMA_IRQHandler+0xe50>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d108      	bne.n	80035b8 <HAL_DMA_IRQHandler+0xdbc>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 021c 	bic.w	r2, r2, #28
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e007      	b.n	80035c8 <HAL_DMA_IRQHandler+0xdcc>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 020e 	bic.w	r2, r2, #14
 80035c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	2201      	movs	r2, #1
 80035d2:	409a      	lsls	r2, r3
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
 80035fe:	e004      	b.n	800360a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003600:	bf00      	nop
 8003602:	e002      	b.n	800360a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003604:	bf00      	nop
 8003606:	e000      	b.n	800360a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003608:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800360a:	3728      	adds	r7, #40	; 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40020010 	.word	0x40020010
 8003614:	40020028 	.word	0x40020028
 8003618:	40020040 	.word	0x40020040
 800361c:	40020058 	.word	0x40020058
 8003620:	40020070 	.word	0x40020070
 8003624:	40020088 	.word	0x40020088
 8003628:	400200a0 	.word	0x400200a0
 800362c:	400200b8 	.word	0x400200b8
 8003630:	40020410 	.word	0x40020410
 8003634:	40020428 	.word	0x40020428
 8003638:	40020440 	.word	0x40020440
 800363c:	40020458 	.word	0x40020458
 8003640:	40020470 	.word	0x40020470
 8003644:	40020488 	.word	0x40020488
 8003648:	400204a0 	.word	0x400204a0
 800364c:	400204b8 	.word	0x400204b8

08003650 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003680:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a84      	ldr	r2, [pc, #528]	; (8003898 <DMA_SetConfig+0x230>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d072      	beq.n	8003772 <DMA_SetConfig+0x10a>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a82      	ldr	r2, [pc, #520]	; (800389c <DMA_SetConfig+0x234>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d06d      	beq.n	8003772 <DMA_SetConfig+0x10a>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a81      	ldr	r2, [pc, #516]	; (80038a0 <DMA_SetConfig+0x238>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d068      	beq.n	8003772 <DMA_SetConfig+0x10a>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a7f      	ldr	r2, [pc, #508]	; (80038a4 <DMA_SetConfig+0x23c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d063      	beq.n	8003772 <DMA_SetConfig+0x10a>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7e      	ldr	r2, [pc, #504]	; (80038a8 <DMA_SetConfig+0x240>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d05e      	beq.n	8003772 <DMA_SetConfig+0x10a>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a7c      	ldr	r2, [pc, #496]	; (80038ac <DMA_SetConfig+0x244>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d059      	beq.n	8003772 <DMA_SetConfig+0x10a>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a7b      	ldr	r2, [pc, #492]	; (80038b0 <DMA_SetConfig+0x248>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d054      	beq.n	8003772 <DMA_SetConfig+0x10a>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a79      	ldr	r2, [pc, #484]	; (80038b4 <DMA_SetConfig+0x24c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d04f      	beq.n	8003772 <DMA_SetConfig+0x10a>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a78      	ldr	r2, [pc, #480]	; (80038b8 <DMA_SetConfig+0x250>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d04a      	beq.n	8003772 <DMA_SetConfig+0x10a>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a76      	ldr	r2, [pc, #472]	; (80038bc <DMA_SetConfig+0x254>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d045      	beq.n	8003772 <DMA_SetConfig+0x10a>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a75      	ldr	r2, [pc, #468]	; (80038c0 <DMA_SetConfig+0x258>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d040      	beq.n	8003772 <DMA_SetConfig+0x10a>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a73      	ldr	r2, [pc, #460]	; (80038c4 <DMA_SetConfig+0x25c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d03b      	beq.n	8003772 <DMA_SetConfig+0x10a>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a72      	ldr	r2, [pc, #456]	; (80038c8 <DMA_SetConfig+0x260>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d036      	beq.n	8003772 <DMA_SetConfig+0x10a>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a70      	ldr	r2, [pc, #448]	; (80038cc <DMA_SetConfig+0x264>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d031      	beq.n	8003772 <DMA_SetConfig+0x10a>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a6f      	ldr	r2, [pc, #444]	; (80038d0 <DMA_SetConfig+0x268>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d02c      	beq.n	8003772 <DMA_SetConfig+0x10a>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6d      	ldr	r2, [pc, #436]	; (80038d4 <DMA_SetConfig+0x26c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d027      	beq.n	8003772 <DMA_SetConfig+0x10a>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6c      	ldr	r2, [pc, #432]	; (80038d8 <DMA_SetConfig+0x270>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d022      	beq.n	8003772 <DMA_SetConfig+0x10a>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a6a      	ldr	r2, [pc, #424]	; (80038dc <DMA_SetConfig+0x274>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01d      	beq.n	8003772 <DMA_SetConfig+0x10a>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a69      	ldr	r2, [pc, #420]	; (80038e0 <DMA_SetConfig+0x278>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d018      	beq.n	8003772 <DMA_SetConfig+0x10a>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a67      	ldr	r2, [pc, #412]	; (80038e4 <DMA_SetConfig+0x27c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d013      	beq.n	8003772 <DMA_SetConfig+0x10a>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a66      	ldr	r2, [pc, #408]	; (80038e8 <DMA_SetConfig+0x280>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00e      	beq.n	8003772 <DMA_SetConfig+0x10a>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a64      	ldr	r2, [pc, #400]	; (80038ec <DMA_SetConfig+0x284>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d009      	beq.n	8003772 <DMA_SetConfig+0x10a>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a63      	ldr	r2, [pc, #396]	; (80038f0 <DMA_SetConfig+0x288>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d004      	beq.n	8003772 <DMA_SetConfig+0x10a>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a61      	ldr	r2, [pc, #388]	; (80038f4 <DMA_SetConfig+0x28c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d101      	bne.n	8003776 <DMA_SetConfig+0x10e>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <DMA_SetConfig+0x110>
 8003776:	2300      	movs	r3, #0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00d      	beq.n	8003798 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003784:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d004      	beq.n	8003798 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003796:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a3e      	ldr	r2, [pc, #248]	; (8003898 <DMA_SetConfig+0x230>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d04a      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a3d      	ldr	r2, [pc, #244]	; (800389c <DMA_SetConfig+0x234>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d045      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a3b      	ldr	r2, [pc, #236]	; (80038a0 <DMA_SetConfig+0x238>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d040      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a3a      	ldr	r2, [pc, #232]	; (80038a4 <DMA_SetConfig+0x23c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d03b      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a38      	ldr	r2, [pc, #224]	; (80038a8 <DMA_SetConfig+0x240>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d036      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a37      	ldr	r2, [pc, #220]	; (80038ac <DMA_SetConfig+0x244>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d031      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a35      	ldr	r2, [pc, #212]	; (80038b0 <DMA_SetConfig+0x248>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d02c      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a34      	ldr	r2, [pc, #208]	; (80038b4 <DMA_SetConfig+0x24c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d027      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a32      	ldr	r2, [pc, #200]	; (80038b8 <DMA_SetConfig+0x250>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d022      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a31      	ldr	r2, [pc, #196]	; (80038bc <DMA_SetConfig+0x254>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d01d      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2f      	ldr	r2, [pc, #188]	; (80038c0 <DMA_SetConfig+0x258>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d018      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2e      	ldr	r2, [pc, #184]	; (80038c4 <DMA_SetConfig+0x25c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a2c      	ldr	r2, [pc, #176]	; (80038c8 <DMA_SetConfig+0x260>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00e      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a2b      	ldr	r2, [pc, #172]	; (80038cc <DMA_SetConfig+0x264>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d009      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a29      	ldr	r2, [pc, #164]	; (80038d0 <DMA_SetConfig+0x268>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <DMA_SetConfig+0x1d0>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a28      	ldr	r2, [pc, #160]	; (80038d4 <DMA_SetConfig+0x26c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d101      	bne.n	800383c <DMA_SetConfig+0x1d4>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <DMA_SetConfig+0x1d6>
 800383c:	2300      	movs	r3, #0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d05a      	beq.n	80038f8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	223f      	movs	r2, #63	; 0x3f
 800384c:	409a      	lsls	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003860:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d108      	bne.n	8003884 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003882:	e087      	b.n	8003994 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	60da      	str	r2, [r3, #12]
}
 8003894:	e07e      	b.n	8003994 <DMA_SetConfig+0x32c>
 8003896:	bf00      	nop
 8003898:	40020010 	.word	0x40020010
 800389c:	40020028 	.word	0x40020028
 80038a0:	40020040 	.word	0x40020040
 80038a4:	40020058 	.word	0x40020058
 80038a8:	40020070 	.word	0x40020070
 80038ac:	40020088 	.word	0x40020088
 80038b0:	400200a0 	.word	0x400200a0
 80038b4:	400200b8 	.word	0x400200b8
 80038b8:	40020410 	.word	0x40020410
 80038bc:	40020428 	.word	0x40020428
 80038c0:	40020440 	.word	0x40020440
 80038c4:	40020458 	.word	0x40020458
 80038c8:	40020470 	.word	0x40020470
 80038cc:	40020488 	.word	0x40020488
 80038d0:	400204a0 	.word	0x400204a0
 80038d4:	400204b8 	.word	0x400204b8
 80038d8:	58025408 	.word	0x58025408
 80038dc:	5802541c 	.word	0x5802541c
 80038e0:	58025430 	.word	0x58025430
 80038e4:	58025444 	.word	0x58025444
 80038e8:	58025458 	.word	0x58025458
 80038ec:	5802546c 	.word	0x5802546c
 80038f0:	58025480 	.word	0x58025480
 80038f4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <DMA_SetConfig+0x338>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d022      	beq.n	8003948 <DMA_SetConfig+0x2e0>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <DMA_SetConfig+0x33c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d01d      	beq.n	8003948 <DMA_SetConfig+0x2e0>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <DMA_SetConfig+0x340>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d018      	beq.n	8003948 <DMA_SetConfig+0x2e0>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a24      	ldr	r2, [pc, #144]	; (80039ac <DMA_SetConfig+0x344>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d013      	beq.n	8003948 <DMA_SetConfig+0x2e0>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a22      	ldr	r2, [pc, #136]	; (80039b0 <DMA_SetConfig+0x348>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00e      	beq.n	8003948 <DMA_SetConfig+0x2e0>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a21      	ldr	r2, [pc, #132]	; (80039b4 <DMA_SetConfig+0x34c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d009      	beq.n	8003948 <DMA_SetConfig+0x2e0>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1f      	ldr	r2, [pc, #124]	; (80039b8 <DMA_SetConfig+0x350>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d004      	beq.n	8003948 <DMA_SetConfig+0x2e0>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <DMA_SetConfig+0x354>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d101      	bne.n	800394c <DMA_SetConfig+0x2e4>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <DMA_SetConfig+0x2e6>
 800394c:	2300      	movs	r3, #0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d020      	beq.n	8003994 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2201      	movs	r2, #1
 800395c:	409a      	lsls	r2, r3
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b40      	cmp	r3, #64	; 0x40
 8003970:	d108      	bne.n	8003984 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	60da      	str	r2, [r3, #12]
}
 8003982:	e007      	b.n	8003994 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]
}
 8003994:	bf00      	nop
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	58025408 	.word	0x58025408
 80039a4:	5802541c 	.word	0x5802541c
 80039a8:	58025430 	.word	0x58025430
 80039ac:	58025444 	.word	0x58025444
 80039b0:	58025458 	.word	0x58025458
 80039b4:	5802546c 	.word	0x5802546c
 80039b8:	58025480 	.word	0x58025480
 80039bc:	58025494 	.word	0x58025494

080039c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a42      	ldr	r2, [pc, #264]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x118>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d04a      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a41      	ldr	r2, [pc, #260]	; (8003adc <DMA_CalcBaseAndBitshift+0x11c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d045      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a3f      	ldr	r2, [pc, #252]	; (8003ae0 <DMA_CalcBaseAndBitshift+0x120>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d040      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a3e      	ldr	r2, [pc, #248]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x124>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d03b      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a3c      	ldr	r2, [pc, #240]	; (8003ae8 <DMA_CalcBaseAndBitshift+0x128>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d036      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a3b      	ldr	r2, [pc, #236]	; (8003aec <DMA_CalcBaseAndBitshift+0x12c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d031      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a39      	ldr	r2, [pc, #228]	; (8003af0 <DMA_CalcBaseAndBitshift+0x130>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d02c      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a38      	ldr	r2, [pc, #224]	; (8003af4 <DMA_CalcBaseAndBitshift+0x134>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d027      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a36      	ldr	r2, [pc, #216]	; (8003af8 <DMA_CalcBaseAndBitshift+0x138>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d022      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a35      	ldr	r2, [pc, #212]	; (8003afc <DMA_CalcBaseAndBitshift+0x13c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d01d      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a33      	ldr	r2, [pc, #204]	; (8003b00 <DMA_CalcBaseAndBitshift+0x140>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d018      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a32      	ldr	r2, [pc, #200]	; (8003b04 <DMA_CalcBaseAndBitshift+0x144>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d013      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a30      	ldr	r2, [pc, #192]	; (8003b08 <DMA_CalcBaseAndBitshift+0x148>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00e      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2f      	ldr	r2, [pc, #188]	; (8003b0c <DMA_CalcBaseAndBitshift+0x14c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d009      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a2d      	ldr	r2, [pc, #180]	; (8003b10 <DMA_CalcBaseAndBitshift+0x150>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <DMA_CalcBaseAndBitshift+0xa8>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2c      	ldr	r2, [pc, #176]	; (8003b14 <DMA_CalcBaseAndBitshift+0x154>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d101      	bne.n	8003a6c <DMA_CalcBaseAndBitshift+0xac>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <DMA_CalcBaseAndBitshift+0xae>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d024      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	3b10      	subs	r3, #16
 8003a7a:	4a27      	ldr	r2, [pc, #156]	; (8003b18 <DMA_CalcBaseAndBitshift+0x158>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	4a24      	ldr	r2, [pc, #144]	; (8003b1c <DMA_CalcBaseAndBitshift+0x15c>)
 8003a8c:	5cd3      	ldrb	r3, [r2, r3]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d908      	bls.n	8003aac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	4b1f      	ldr	r3, [pc, #124]	; (8003b20 <DMA_CalcBaseAndBitshift+0x160>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	1d1a      	adds	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	659a      	str	r2, [r3, #88]	; 0x58
 8003aaa:	e00d      	b.n	8003ac8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <DMA_CalcBaseAndBitshift+0x160>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8003aba:	e005      	b.n	8003ac8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40020010 	.word	0x40020010
 8003adc:	40020028 	.word	0x40020028
 8003ae0:	40020040 	.word	0x40020040
 8003ae4:	40020058 	.word	0x40020058
 8003ae8:	40020070 	.word	0x40020070
 8003aec:	40020088 	.word	0x40020088
 8003af0:	400200a0 	.word	0x400200a0
 8003af4:	400200b8 	.word	0x400200b8
 8003af8:	40020410 	.word	0x40020410
 8003afc:	40020428 	.word	0x40020428
 8003b00:	40020440 	.word	0x40020440
 8003b04:	40020458 	.word	0x40020458
 8003b08:	40020470 	.word	0x40020470
 8003b0c:	40020488 	.word	0x40020488
 8003b10:	400204a0 	.word	0x400204a0
 8003b14:	400204b8 	.word	0x400204b8
 8003b18:	aaaaaaab 	.word	0xaaaaaaab
 8003b1c:	0800dcb4 	.word	0x0800dcb4
 8003b20:	fffffc00 	.word	0xfffffc00

08003b24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d120      	bne.n	8003b7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d858      	bhi.n	8003bf2 <DMA_CheckFifoParam+0xce>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <DMA_CheckFifoParam+0x24>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b59 	.word	0x08003b59
 8003b4c:	08003b6b 	.word	0x08003b6b
 8003b50:	08003b59 	.word	0x08003b59
 8003b54:	08003bf3 	.word	0x08003bf3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d048      	beq.n	8003bf6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b68:	e045      	b.n	8003bf6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b72:	d142      	bne.n	8003bfa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b78:	e03f      	b.n	8003bfa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b82:	d123      	bne.n	8003bcc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d838      	bhi.n	8003bfe <DMA_CheckFifoParam+0xda>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <DMA_CheckFifoParam+0x70>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bab 	.word	0x08003bab
 8003b9c:	08003ba5 	.word	0x08003ba5
 8003ba0:	08003bbd 	.word	0x08003bbd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
        break;
 8003ba8:	e030      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d025      	beq.n	8003c02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bba:	e022      	b.n	8003c02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bc4:	d11f      	bne.n	8003c06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bca:	e01c      	b.n	8003c06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d902      	bls.n	8003bda <DMA_CheckFifoParam+0xb6>
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d003      	beq.n	8003be0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003bd8:	e018      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
        break;
 8003bde:	e015      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
    break;
 8003bf0:	e00b      	b.n	8003c0a <DMA_CheckFifoParam+0xe6>
        break;
 8003bf2:	bf00      	nop
 8003bf4:	e00a      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
        break;
 8003bf6:	bf00      	nop
 8003bf8:	e008      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
        break;
 8003bfa:	bf00      	nop
 8003bfc:	e006      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
        break;
 8003bfe:	bf00      	nop
 8003c00:	e004      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
        break;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
        break;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
    break;
 8003c0a:	bf00      	nop
    }
  }

  return status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop

08003c1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a38      	ldr	r2, [pc, #224]	; (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a36      	ldr	r2, [pc, #216]	; (8003d14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01d      	beq.n	8003c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a35      	ldr	r2, [pc, #212]	; (8003d18 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a33      	ldr	r2, [pc, #204]	; (8003d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a32      	ldr	r2, [pc, #200]	; (8003d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a30      	ldr	r2, [pc, #192]	; (8003d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a2f      	ldr	r2, [pc, #188]	; (8003d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a2d      	ldr	r2, [pc, #180]	; (8003d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d101      	bne.n	8003c7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01a      	beq.n	8003cba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	3b08      	subs	r3, #8
 8003c8c:	4a28      	ldr	r2, [pc, #160]	; (8003d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a24      	ldr	r2, [pc, #144]	; (8003d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003ca8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003cb8:	e024      	b.n	8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	3b10      	subs	r3, #16
 8003cc2:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4a1c      	ldr	r2, [pc, #112]	; (8003d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d806      	bhi.n	8003ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4a1b      	ldr	r2, [pc, #108]	; (8003d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d902      	bls.n	8003ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	3308      	adds	r3, #8
 8003ce0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4b18      	ldr	r3, [pc, #96]	; (8003d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	461a      	mov	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a16      	ldr	r2, [pc, #88]	; (8003d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003cf4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	58025408 	.word	0x58025408
 8003d14:	5802541c 	.word	0x5802541c
 8003d18:	58025430 	.word	0x58025430
 8003d1c:	58025444 	.word	0x58025444
 8003d20:	58025458 	.word	0x58025458
 8003d24:	5802546c 	.word	0x5802546c
 8003d28:	58025480 	.word	0x58025480
 8003d2c:	58025494 	.word	0x58025494
 8003d30:	cccccccd 	.word	0xcccccccd
 8003d34:	16009600 	.word	0x16009600
 8003d38:	58025880 	.word	0x58025880
 8003d3c:	aaaaaaab 	.word	0xaaaaaaab
 8003d40:	400204b8 	.word	0x400204b8
 8003d44:	4002040f 	.word	0x4002040f
 8003d48:	10008200 	.word	0x10008200
 8003d4c:	40020880 	.word	0x40020880

08003d50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d04a      	beq.n	8003dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d847      	bhi.n	8003dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d022      	beq.n	8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a24      	ldr	r2, [pc, #144]	; (8003e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d01d      	beq.n	8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a22      	ldr	r2, [pc, #136]	; (8003e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d018      	beq.n	8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a21      	ldr	r2, [pc, #132]	; (8003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d013      	beq.n	8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1f      	ldr	r2, [pc, #124]	; (8003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00e      	beq.n	8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1e      	ldr	r2, [pc, #120]	; (8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d009      	beq.n	8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1b      	ldr	r2, [pc, #108]	; (8003e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d101      	bne.n	8003dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	461a      	mov	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003dd8:	671a      	str	r2, [r3, #112]	; 0x70
 8003dda:	e009      	b.n	8003df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	461a      	mov	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003dee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	2201      	movs	r2, #1
 8003df6:	409a      	lsls	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	58025408 	.word	0x58025408
 8003e0c:	5802541c 	.word	0x5802541c
 8003e10:	58025430 	.word	0x58025430
 8003e14:	58025444 	.word	0x58025444
 8003e18:	58025458 	.word	0x58025458
 8003e1c:	5802546c 	.word	0x5802546c
 8003e20:	58025480 	.word	0x58025480
 8003e24:	58025494 	.word	0x58025494
 8003e28:	1600963f 	.word	0x1600963f
 8003e2c:	58025940 	.word	0x58025940
 8003e30:	1000823f 	.word	0x1000823f
 8003e34:	40020940 	.word	0x40020940

08003e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	; 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003e46:	4b89      	ldr	r3, [pc, #548]	; (800406c <HAL_GPIO_Init+0x234>)
 8003e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e4a:	e194      	b.n	8004176 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	2101      	movs	r1, #1
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	fa01 f303 	lsl.w	r3, r1, r3
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8186 	beq.w	8004170 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d00b      	beq.n	8003e84 <HAL_GPIO_Init+0x4c>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d007      	beq.n	8003e84 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e78:	2b11      	cmp	r3, #17
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b12      	cmp	r3, #18
 8003e82:	d130      	bne.n	8003ee6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	2203      	movs	r2, #3
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eba:	2201      	movs	r2, #1
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	091b      	lsrs	r3, r3, #4
 8003ed0:	f003 0201 	and.w	r2, r3, #1
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0xee>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b12      	cmp	r3, #18
 8003f24:	d123      	bne.n	8003f6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	08da      	lsrs	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3208      	adds	r2, #8
 8003f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	220f      	movs	r2, #15
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	08da      	lsrs	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3208      	adds	r2, #8
 8003f68:	69b9      	ldr	r1, [r7, #24]
 8003f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	2203      	movs	r2, #3
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0203 	and.w	r2, r3, #3
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80e0 	beq.w	8004170 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb0:	4b2f      	ldr	r3, [pc, #188]	; (8004070 <HAL_GPIO_Init+0x238>)
 8003fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fb6:	4a2e      	ldr	r2, [pc, #184]	; (8004070 <HAL_GPIO_Init+0x238>)
 8003fb8:	f043 0302 	orr.w	r3, r3, #2
 8003fbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <HAL_GPIO_Init+0x238>)
 8003fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fce:	4a29      	ldr	r2, [pc, #164]	; (8004074 <HAL_GPIO_Init+0x23c>)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	089b      	lsrs	r3, r3, #2
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	220f      	movs	r2, #15
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a20      	ldr	r2, [pc, #128]	; (8004078 <HAL_GPIO_Init+0x240>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d052      	beq.n	80040a0 <HAL_GPIO_Init+0x268>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1f      	ldr	r2, [pc, #124]	; (800407c <HAL_GPIO_Init+0x244>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d031      	beq.n	8004066 <HAL_GPIO_Init+0x22e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <HAL_GPIO_Init+0x248>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d02b      	beq.n	8004062 <HAL_GPIO_Init+0x22a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <HAL_GPIO_Init+0x24c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d025      	beq.n	800405e <HAL_GPIO_Init+0x226>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <HAL_GPIO_Init+0x250>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01f      	beq.n	800405a <HAL_GPIO_Init+0x222>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a1b      	ldr	r2, [pc, #108]	; (800408c <HAL_GPIO_Init+0x254>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d019      	beq.n	8004056 <HAL_GPIO_Init+0x21e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <HAL_GPIO_Init+0x258>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <HAL_GPIO_Init+0x21a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a19      	ldr	r2, [pc, #100]	; (8004094 <HAL_GPIO_Init+0x25c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00d      	beq.n	800404e <HAL_GPIO_Init+0x216>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_GPIO_Init+0x260>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d007      	beq.n	800404a <HAL_GPIO_Init+0x212>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a17      	ldr	r2, [pc, #92]	; (800409c <HAL_GPIO_Init+0x264>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_GPIO_Init+0x20e>
 8004042:	2309      	movs	r3, #9
 8004044:	e02d      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 8004046:	230a      	movs	r3, #10
 8004048:	e02b      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 800404a:	2308      	movs	r3, #8
 800404c:	e029      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 800404e:	2307      	movs	r3, #7
 8004050:	e027      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 8004052:	2306      	movs	r3, #6
 8004054:	e025      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 8004056:	2305      	movs	r3, #5
 8004058:	e023      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 800405a:	2304      	movs	r3, #4
 800405c:	e021      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 800405e:	2303      	movs	r3, #3
 8004060:	e01f      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 8004062:	2302      	movs	r3, #2
 8004064:	e01d      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 8004066:	2301      	movs	r3, #1
 8004068:	e01b      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 800406a:	bf00      	nop
 800406c:	58000080 	.word	0x58000080
 8004070:	58024400 	.word	0x58024400
 8004074:	58000400 	.word	0x58000400
 8004078:	58020000 	.word	0x58020000
 800407c:	58020400 	.word	0x58020400
 8004080:	58020800 	.word	0x58020800
 8004084:	58020c00 	.word	0x58020c00
 8004088:	58021000 	.word	0x58021000
 800408c:	58021400 	.word	0x58021400
 8004090:	58021800 	.word	0x58021800
 8004094:	58021c00 	.word	0x58021c00
 8004098:	58022000 	.word	0x58022000
 800409c:	58022400 	.word	0x58022400
 80040a0:	2300      	movs	r3, #0
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	f002 0203 	and.w	r2, r2, #3
 80040a8:	0092      	lsls	r2, r2, #2
 80040aa:	4093      	lsls	r3, r2
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b2:	4938      	ldr	r1, [pc, #224]	; (8004194 <HAL_GPIO_Init+0x35c>)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	3302      	adds	r3, #2
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800413a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004168:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	3301      	adds	r3, #1
 8004174:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	f47f ae63 	bne.w	8003e4c <HAL_GPIO_Init+0x14>
  }
}
 8004186:	bf00      	nop
 8004188:	3724      	adds	r7, #36	; 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	58000400 	.word	0x58000400

08004198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	887b      	ldrh	r3, [r7, #2]
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
 80041b4:	e001      	b.n	80041ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	807b      	strh	r3, [r7, #2]
 80041d4:	4613      	mov	r3, r2
 80041d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041d8:	787b      	ldrb	r3, [r7, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041de:	887a      	ldrh	r2, [r7, #2]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80041e4:	e003      	b.n	80041ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80041e6:	887b      	ldrh	r3, [r7, #2]
 80041e8:	041a      	lsls	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	619a      	str	r2, [r3, #24]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e07f      	b.n	800430e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f008 fbee 	bl	800ca04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2224      	movs	r2, #36	; 0x24
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800424c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800425c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d107      	bne.n	8004276 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	e006      	b.n	8004284 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004282:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d104      	bne.n	8004296 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004294:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6859      	ldr	r1, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <HAL_I2C_Init+0x11c>)
 80042a2:	430b      	orrs	r3, r1
 80042a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	ea42 0103 	orr.w	r1, r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	021a      	lsls	r2, r3, #8
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69d9      	ldr	r1, [r3, #28]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1a      	ldr	r2, [r3, #32]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	02008000 	.word	0x02008000

0800431c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	461a      	mov	r2, r3
 8004328:	460b      	mov	r3, r1
 800432a:	817b      	strh	r3, [r7, #10]
 800432c:	4613      	mov	r3, r2
 800432e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b20      	cmp	r3, #32
 800433a:	f040 80da 	bne.w	80044f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_I2C_Master_Transmit+0x30>
 8004348:	2302      	movs	r3, #2
 800434a:	e0d3      	b.n	80044f4 <HAL_I2C_Master_Transmit+0x1d8>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004354:	f7fc f846 	bl	80003e4 <HAL_GetTick>
 8004358:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2319      	movs	r3, #25
 8004360:	2201      	movs	r2, #1
 8004362:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f8f0 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e0be      	b.n	80044f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2221      	movs	r2, #33	; 0x21
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2210      	movs	r2, #16
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	893a      	ldrh	r2, [r7, #8]
 8004396:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2bff      	cmp	r3, #255	; 0xff
 80043a6:	d90e      	bls.n	80043c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	22ff      	movs	r2, #255	; 0xff
 80043ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	8979      	ldrh	r1, [r7, #10]
 80043b6:	4b51      	ldr	r3, [pc, #324]	; (80044fc <HAL_I2C_Master_Transmit+0x1e0>)
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f9e6 	bl	8004790 <I2C_TransferConfig>
 80043c4:	e06c      	b.n	80044a0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	8979      	ldrh	r1, [r7, #10]
 80043d8:	4b48      	ldr	r3, [pc, #288]	; (80044fc <HAL_I2C_Master_Transmit+0x1e0>)
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f9d5 	bl	8004790 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80043e6:	e05b      	b.n	80044a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	6a39      	ldr	r1, [r7, #32]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f8ed 	bl	80045cc <I2C_WaitOnTXISFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e07b      	b.n	80044f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d034      	beq.n	80044a0 <HAL_I2C_Master_Transmit+0x184>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443a:	2b00      	cmp	r3, #0
 800443c:	d130      	bne.n	80044a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	2200      	movs	r2, #0
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f87f 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e04d      	b.n	80044f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	2bff      	cmp	r3, #255	; 0xff
 8004460:	d90e      	bls.n	8004480 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	22ff      	movs	r2, #255	; 0xff
 8004466:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446c:	b2da      	uxtb	r2, r3
 800446e:	8979      	ldrh	r1, [r7, #10]
 8004470:	2300      	movs	r3, #0
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f989 	bl	8004790 <I2C_TransferConfig>
 800447e:	e00f      	b.n	80044a0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448e:	b2da      	uxtb	r2, r3
 8004490:	8979      	ldrh	r1, [r7, #10]
 8004492:	2300      	movs	r3, #0
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f978 	bl	8004790 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d19e      	bne.n	80043e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	6a39      	ldr	r1, [r7, #32]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f8cc 	bl	800464c <I2C_WaitOnSTOPFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e01a      	b.n	80044f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2220      	movs	r2, #32
 80044c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_I2C_Master_Transmit+0x1e4>)
 80044d2:	400b      	ands	r3, r1
 80044d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e000      	b.n	80044f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80044f2:	2302      	movs	r3, #2
  }
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	80002000 	.word	0x80002000
 8004500:	fe00e800 	.word	0xfe00e800

08004504 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	d103      	bne.n	8004522 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2200      	movs	r2, #0
 8004520:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b01      	cmp	r3, #1
 800452e:	d007      	beq.n	8004540 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	619a      	str	r2, [r3, #24]
  }
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800455c:	e022      	b.n	80045a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004564:	d01e      	beq.n	80045a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004566:	f7fb ff3d 	bl	80003e4 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d113      	bne.n	80045a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e00f      	b.n	80045c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4013      	ands	r3, r2
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d0cd      	beq.n	800455e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045d8:	e02c      	b.n	8004634 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f870 	bl	80046c4 <I2C_IsAcknowledgeFailed>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e02a      	b.n	8004644 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045f4:	d01e      	beq.n	8004634 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f6:	f7fb fef5 	bl	80003e4 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	429a      	cmp	r2, r3
 8004604:	d302      	bcc.n	800460c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d113      	bne.n	8004634 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e007      	b.n	8004644 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b02      	cmp	r3, #2
 8004640:	d1cb      	bne.n	80045da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004658:	e028      	b.n	80046ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f830 	bl	80046c4 <I2C_IsAcknowledgeFailed>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e026      	b.n	80046bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466e:	f7fb feb9 	bl	80003e4 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d113      	bne.n	80046ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e007      	b.n	80046bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d1cf      	bne.n	800465a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d151      	bne.n	8004782 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046de:	e022      	b.n	8004726 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046e6:	d01e      	beq.n	8004726 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e8:	f7fb fe7c 	bl	80003e4 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d302      	bcc.n	80046fe <I2C_IsAcknowledgeFailed+0x3a>
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d113      	bne.n	8004726 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	f043 0220 	orr.w	r2, r3, #32
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e02e      	b.n	8004784 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b20      	cmp	r3, #32
 8004732:	d1d5      	bne.n	80046e0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2210      	movs	r2, #16
 800473a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2220      	movs	r2, #32
 8004742:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7ff fedd 	bl	8004504 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6859      	ldr	r1, [r3, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4b0d      	ldr	r3, [pc, #52]	; (800478c <I2C_IsAcknowledgeFailed+0xc8>)
 8004756:	400b      	ands	r3, r1
 8004758:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	f043 0204 	orr.w	r2, r3, #4
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	fe00e800 	.word	0xfe00e800

08004790 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	607b      	str	r3, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	817b      	strh	r3, [r7, #10]
 800479e:	4613      	mov	r3, r2
 80047a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	0d5b      	lsrs	r3, r3, #21
 80047ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80047b0:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <I2C_TransferConfig+0x58>)
 80047b2:	430b      	orrs	r3, r1
 80047b4:	43db      	mvns	r3, r3
 80047b6:	ea02 0103 	and.w	r1, r2, r3
 80047ba:	897b      	ldrh	r3, [r7, #10]
 80047bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047c0:	7a7b      	ldrb	r3, [r7, #9]
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80047da:	bf00      	nop
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	03ff63ff 	.word	0x03ff63ff

080047ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d138      	bne.n	8004874 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800480c:	2302      	movs	r3, #2
 800480e:	e032      	b.n	8004876 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2224      	movs	r2, #36	; 0x24
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800483e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004874:	2302      	movs	r3, #2
  }
}
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004882:	b480      	push	{r7}
 8004884:	b085      	sub	sp, #20
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b20      	cmp	r3, #32
 8004896:	d139      	bne.n	800490c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e033      	b.n	800490e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2224      	movs	r2, #36	; 0x24
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e000      	b.n	800490e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
  }
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004924:	4b19      	ldr	r3, [pc, #100]	; (800498c <HAL_PWREx_ConfigSupply+0x70>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b04      	cmp	r3, #4
 800492e:	d00a      	beq.n	8004946 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004930:	4b16      	ldr	r3, [pc, #88]	; (800498c <HAL_PWREx_ConfigSupply+0x70>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	429a      	cmp	r2, r3
 800493c:	d001      	beq.n	8004942 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e01f      	b.n	8004982 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	e01d      	b.n	8004982 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <HAL_PWREx_ConfigSupply+0x70>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f023 0207 	bic.w	r2, r3, #7
 800494e:	490f      	ldr	r1, [pc, #60]	; (800498c <HAL_PWREx_ConfigSupply+0x70>)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4313      	orrs	r3, r2
 8004954:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004956:	f7fb fd45 	bl	80003e4 <HAL_GetTick>
 800495a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800495c:	e009      	b.n	8004972 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800495e:	f7fb fd41 	bl	80003e4 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800496c:	d901      	bls.n	8004972 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e007      	b.n	8004982 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_PWREx_ConfigSupply+0x70>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800497a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800497e:	d1ee      	bne.n	800495e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	58024800 	.word	0x58024800

08004990 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08c      	sub	sp, #48	; 0x30
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e3c4      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 8087 	beq.w	8004abe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049b0:	4ba2      	ldr	r3, [pc, #648]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049ba:	4ba0      	ldr	r3, [pc, #640]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d007      	beq.n	80049d6 <HAL_RCC_OscConfig+0x46>
 80049c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c8:	2b18      	cmp	r3, #24
 80049ca:	d110      	bne.n	80049ee <HAL_RCC_OscConfig+0x5e>
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d10b      	bne.n	80049ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d6:	4b99      	ldr	r3, [pc, #612]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d06c      	beq.n	8004abc <HAL_RCC_OscConfig+0x12c>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d168      	bne.n	8004abc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e39e      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f6:	d106      	bne.n	8004a06 <HAL_RCC_OscConfig+0x76>
 80049f8:	4b90      	ldr	r3, [pc, #576]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a8f      	ldr	r2, [pc, #572]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 80049fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	e02e      	b.n	8004a64 <HAL_RCC_OscConfig+0xd4>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x98>
 8004a0e:	4b8b      	ldr	r3, [pc, #556]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a8a      	ldr	r2, [pc, #552]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	4b88      	ldr	r3, [pc, #544]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a87      	ldr	r2, [pc, #540]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e01d      	b.n	8004a64 <HAL_RCC_OscConfig+0xd4>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a30:	d10c      	bne.n	8004a4c <HAL_RCC_OscConfig+0xbc>
 8004a32:	4b82      	ldr	r3, [pc, #520]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a81      	ldr	r2, [pc, #516]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	4b7f      	ldr	r3, [pc, #508]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a7e      	ldr	r2, [pc, #504]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e00b      	b.n	8004a64 <HAL_RCC_OscConfig+0xd4>
 8004a4c:	4b7b      	ldr	r3, [pc, #492]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a7a      	ldr	r2, [pc, #488]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b78      	ldr	r3, [pc, #480]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a77      	ldr	r2, [pc, #476]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d013      	beq.n	8004a94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fb fcba 	bl	80003e4 <HAL_GetTick>
 8004a70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fb fcb6 	bl	80003e4 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e352      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a86:	4b6d      	ldr	r3, [pc, #436]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0xe4>
 8004a92:	e014      	b.n	8004abe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fb fca6 	bl	80003e4 <HAL_GetTick>
 8004a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fb fca2 	bl	80003e4 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e33e      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aae:	4b63      	ldr	r3, [pc, #396]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0x10c>
 8004aba:	e000      	b.n	8004abe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 8092 	beq.w	8004bf0 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004acc:	4b5b      	ldr	r3, [pc, #364]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ad4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ad6:	4b59      	ldr	r3, [pc, #356]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <HAL_RCC_OscConfig+0x162>
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	2b18      	cmp	r3, #24
 8004ae6:	d12d      	bne.n	8004b44 <HAL_RCC_OscConfig+0x1b4>
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d128      	bne.n	8004b44 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af2:	4b52      	ldr	r3, [pc, #328]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_RCC_OscConfig+0x17a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e310      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0a:	f7fb fc99 	bl	8000440 <HAL_GetREVID>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	f241 0303 	movw	r3, #4099	; 0x1003
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d80a      	bhi.n	8004b2e <HAL_RCC_OscConfig+0x19e>
 8004b18:	4b48      	ldr	r3, [pc, #288]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	031b      	lsls	r3, r3, #12
 8004b26:	4945      	ldr	r1, [pc, #276]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b2c:	e060      	b.n	8004bf0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2e:	4b43      	ldr	r3, [pc, #268]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	061b      	lsls	r3, r3, #24
 8004b3c:	493f      	ldr	r1, [pc, #252]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b42:	e055      	b.n	8004bf0 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d038      	beq.n	8004bbe <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b4c:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f023 0219 	bic.w	r2, r3, #25
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4938      	ldr	r1, [pc, #224]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fb fc41 	bl	80003e4 <HAL_GetTick>
 8004b62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b66:	f7fb fc3d 	bl	80003e4 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e2d9      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b78:	4b30      	ldr	r3, [pc, #192]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b84:	f7fb fc5c 	bl	8000440 <HAL_GetREVID>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	f241 0303 	movw	r3, #4099	; 0x1003
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d80a      	bhi.n	8004ba8 <HAL_RCC_OscConfig+0x218>
 8004b92:	4b2a      	ldr	r3, [pc, #168]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	031b      	lsls	r3, r3, #12
 8004ba0:	4926      	ldr	r1, [pc, #152]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
 8004ba6:	e023      	b.n	8004bf0 <HAL_RCC_OscConfig+0x260>
 8004ba8:	4b24      	ldr	r3, [pc, #144]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	4921      	ldr	r1, [pc, #132]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
 8004bbc:	e018      	b.n	8004bf0 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bbe:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1e      	ldr	r2, [pc, #120]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fb fc0b 	bl	80003e4 <HAL_GetTick>
 8004bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd2:	f7fb fc07 	bl	80003e4 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e2a3      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004be4:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8091 	beq.w	8004d20 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d007      	beq.n	8004c24 <HAL_RCC_OscConfig+0x294>
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b18      	cmp	r3, #24
 8004c18:	d12f      	bne.n	8004c7a <HAL_RCC_OscConfig+0x2ea>
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d12a      	bne.n	8004c7a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d007      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2b0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	2b80      	cmp	r3, #128	; 0x80
 8004c36:	d003      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e277      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
 8004c3c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c40:	f7fb fbfe 	bl	8000440 <HAL_GetREVID>
 8004c44:	4602      	mov	r2, r0
 8004c46:	f241 0303 	movw	r3, #4099	; 0x1003
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d80a      	bhi.n	8004c64 <HAL_RCC_OscConfig+0x2d4>
 8004c4e:	4ba2      	ldr	r3, [pc, #648]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	069b      	lsls	r3, r3, #26
 8004c5c:	499e      	ldr	r1, [pc, #632]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c62:	e05d      	b.n	8004d20 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c64:	4b9c      	ldr	r3, [pc, #624]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	061b      	lsls	r3, r3, #24
 8004c72:	4999      	ldr	r1, [pc, #612]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c78:	e052      	b.n	8004d20 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d035      	beq.n	8004cee <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c82:	4b95      	ldr	r3, [pc, #596]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a94      	ldr	r2, [pc, #592]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fb fba9 	bl	80003e4 <HAL_GetTick>
 8004c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c96:	f7fb fba5 	bl	80003e4 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e241      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ca8:	4b8b      	ldr	r3, [pc, #556]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cb4:	f7fb fbc4 	bl	8000440 <HAL_GetREVID>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	f241 0303 	movw	r3, #4099	; 0x1003
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d80a      	bhi.n	8004cd8 <HAL_RCC_OscConfig+0x348>
 8004cc2:	4b85      	ldr	r3, [pc, #532]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	069b      	lsls	r3, r3, #26
 8004cd0:	4981      	ldr	r1, [pc, #516]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	604b      	str	r3, [r1, #4]
 8004cd6:	e023      	b.n	8004d20 <HAL_RCC_OscConfig+0x390>
 8004cd8:	4b7f      	ldr	r3, [pc, #508]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	061b      	lsls	r3, r3, #24
 8004ce6:	497c      	ldr	r1, [pc, #496]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60cb      	str	r3, [r1, #12]
 8004cec:	e018      	b.n	8004d20 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004cee:	4b7a      	ldr	r3, [pc, #488]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a79      	ldr	r2, [pc, #484]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fb fb73 	bl	80003e4 <HAL_GetTick>
 8004cfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d02:	f7fb fb6f 	bl	80003e4 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e20b      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d14:	4b70      	ldr	r3, [pc, #448]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f0      	bne.n	8004d02 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d036      	beq.n	8004d9a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d019      	beq.n	8004d68 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d34:	4b68      	ldr	r3, [pc, #416]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d38:	4a67      	ldr	r2, [pc, #412]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fb fb50 	bl	80003e4 <HAL_GetTick>
 8004d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d48:	f7fb fb4c 	bl	80003e4 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e1e8      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d5a:	4b5f      	ldr	r3, [pc, #380]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0x3b8>
 8004d66:	e018      	b.n	8004d9a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d68:	4b5b      	ldr	r3, [pc, #364]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6c:	4a5a      	ldr	r2, [pc, #360]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d6e:	f023 0301 	bic.w	r3, r3, #1
 8004d72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d74:	f7fb fb36 	bl	80003e4 <HAL_GetTick>
 8004d78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d7c:	f7fb fb32 	bl	80003e4 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e1ce      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d8e:	4b52      	ldr	r3, [pc, #328]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d036      	beq.n	8004e14 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d019      	beq.n	8004de2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dae:	4b4a      	ldr	r3, [pc, #296]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a49      	ldr	r2, [pc, #292]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004db8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dba:	f7fb fb13 	bl	80003e4 <HAL_GetTick>
 8004dbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004dc2:	f7fb fb0f 	bl	80003e4 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e1ab      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dd4:	4b40      	ldr	r3, [pc, #256]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x432>
 8004de0:	e018      	b.n	8004e14 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004de2:	4b3d      	ldr	r3, [pc, #244]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dee:	f7fb faf9 	bl	80003e4 <HAL_GetTick>
 8004df2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004df6:	f7fb faf5 	bl	80003e4 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e191      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e08:	4b33      	ldr	r3, [pc, #204]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f0      	bne.n	8004df6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8086 	beq.w	8004f2e <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e22:	4b2e      	ldr	r3, [pc, #184]	; (8004edc <HAL_RCC_OscConfig+0x54c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a2d      	ldr	r2, [pc, #180]	; (8004edc <HAL_RCC_OscConfig+0x54c>)
 8004e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e2e:	f7fb fad9 	bl	80003e4 <HAL_GetTick>
 8004e32:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e36:	f7fb fad5 	bl	80003e4 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b64      	cmp	r3, #100	; 0x64
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e171      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e48:	4b24      	ldr	r3, [pc, #144]	; (8004edc <HAL_RCC_OscConfig+0x54c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d106      	bne.n	8004e6a <HAL_RCC_OscConfig+0x4da>
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	4a1d      	ldr	r2, [pc, #116]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	6713      	str	r3, [r2, #112]	; 0x70
 8004e68:	e02d      	b.n	8004ec6 <HAL_RCC_OscConfig+0x536>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCC_OscConfig+0x4fc>
 8004e72:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7e:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e84:	f023 0304 	bic.w	r3, r3, #4
 8004e88:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8a:	e01c      	b.n	8004ec6 <HAL_RCC_OscConfig+0x536>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b05      	cmp	r3, #5
 8004e92:	d10c      	bne.n	8004eae <HAL_RCC_OscConfig+0x51e>
 8004e94:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	4a0f      	ldr	r2, [pc, #60]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e9a:	f043 0304 	orr.w	r3, r3, #4
 8004e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea0:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	4a0c      	ldr	r2, [pc, #48]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004eac:	e00b      	b.n	8004ec6 <HAL_RCC_OscConfig+0x536>
 8004eae:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	4a06      	ldr	r2, [pc, #24]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004ec0:	f023 0304 	bic.w	r3, r3, #4
 8004ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01a      	beq.n	8004f04 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ece:	f7fb fa89 	bl	80003e4 <HAL_GetTick>
 8004ed2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ed4:	e00f      	b.n	8004ef6 <HAL_RCC_OscConfig+0x566>
 8004ed6:	bf00      	nop
 8004ed8:	58024400 	.word	0x58024400
 8004edc:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fb fa80 	bl	80003e4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e11a      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ef6:	4b8f      	ldr	r3, [pc, #572]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0ee      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x550>
 8004f02:	e014      	b.n	8004f2e <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f04:	f7fb fa6e 	bl	80003e4 <HAL_GetTick>
 8004f08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f0c:	f7fb fa6a 	bl	80003e4 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e104      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f22:	4b84      	ldr	r3, [pc, #528]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1ee      	bne.n	8004f0c <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 80f9 	beq.w	800512a <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f38:	4b7e      	ldr	r3, [pc, #504]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f40:	2b18      	cmp	r3, #24
 8004f42:	f000 80b4 	beq.w	80050ae <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	f040 8095 	bne.w	800507a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f50:	4b78      	ldr	r3, [pc, #480]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a77      	ldr	r2, [pc, #476]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5c:	f7fb fa42 	bl	80003e4 <HAL_GetTick>
 8004f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f64:	f7fb fa3e 	bl	80003e4 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e0da      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f76:	4b6f      	ldr	r3, [pc, #444]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f82:	4b6c      	ldr	r3, [pc, #432]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f86:	4b6c      	ldr	r3, [pc, #432]	; (8005138 <HAL_RCC_OscConfig+0x7a8>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f92:	0112      	lsls	r2, r2, #4
 8004f94:	430a      	orrs	r2, r1
 8004f96:	4967      	ldr	r1, [pc, #412]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	628b      	str	r3, [r1, #40]	; 0x28
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004faa:	3b01      	subs	r3, #1
 8004fac:	025b      	lsls	r3, r3, #9
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	041b      	lsls	r3, r3, #16
 8004fba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	061b      	lsls	r3, r3, #24
 8004fc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fcc:	4959      	ldr	r1, [pc, #356]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004fd2:	4b58      	ldr	r3, [pc, #352]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	4a57      	ldr	r2, [pc, #348]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fde:	4b55      	ldr	r3, [pc, #340]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe2:	4b56      	ldr	r3, [pc, #344]	; (800513c <HAL_RCC_OscConfig+0x7ac>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fea:	00d2      	lsls	r2, r2, #3
 8004fec:	4951      	ldr	r1, [pc, #324]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ff2:	4b50      	ldr	r3, [pc, #320]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	f023 020c 	bic.w	r2, r3, #12
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	494d      	ldr	r1, [pc, #308]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005000:	4313      	orrs	r3, r2
 8005002:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005004:	4b4b      	ldr	r3, [pc, #300]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	f023 0202 	bic.w	r2, r3, #2
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005010:	4948      	ldr	r1, [pc, #288]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005012:	4313      	orrs	r3, r2
 8005014:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005016:	4b47      	ldr	r3, [pc, #284]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	4a46      	ldr	r2, [pc, #280]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005022:	4b44      	ldr	r3, [pc, #272]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	4a43      	ldr	r2, [pc, #268]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800502e:	4b41      	ldr	r3, [pc, #260]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	4a40      	ldr	r2, [pc, #256]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800503a:	4b3e      	ldr	r3, [pc, #248]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 800503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503e:	4a3d      	ldr	r2, [pc, #244]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005046:	4b3b      	ldr	r3, [pc, #236]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3a      	ldr	r2, [pc, #232]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 800504c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005052:	f7fb f9c7 	bl	80003e4 <HAL_GetTick>
 8005056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800505a:	f7fb f9c3 	bl	80003e4 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e05f      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800506c:	4b31      	ldr	r3, [pc, #196]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x6ca>
 8005078:	e057      	b.n	800512a <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507a:	4b2e      	ldr	r3, [pc, #184]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a2d      	ldr	r2, [pc, #180]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005086:	f7fb f9ad 	bl	80003e4 <HAL_GetTick>
 800508a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800508e:	f7fb f9a9 	bl	80003e4 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e045      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050a0:	4b24      	ldr	r3, [pc, #144]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1f0      	bne.n	800508e <HAL_RCC_OscConfig+0x6fe>
 80050ac:	e03d      	b.n	800512a <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80050ae:	4b21      	ldr	r3, [pc, #132]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050b4:	4b1f      	ldr	r3, [pc, #124]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d031      	beq.n	8005126 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f003 0203 	and.w	r2, r3, #3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d12a      	bne.n	8005126 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	091b      	lsrs	r3, r3, #4
 80050d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050dc:	429a      	cmp	r2, r3
 80050de:	d122      	bne.n	8005126 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d11a      	bne.n	8005126 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	0a5b      	lsrs	r3, r3, #9
 80050f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d111      	bne.n	8005126 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	0c1b      	lsrs	r3, r3, #16
 8005106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005110:	429a      	cmp	r2, r3
 8005112:	d108      	bne.n	8005126 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	0e1b      	lsrs	r3, r3, #24
 8005118:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005120:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d001      	beq.n	800512a <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3730      	adds	r7, #48	; 0x30
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	58024400 	.word	0x58024400
 8005138:	fffffc0c 	.word	0xfffffc0c
 800513c:	ffff0007 	.word	0xffff0007

08005140 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e19c      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005154:	4b8a      	ldr	r3, [pc, #552]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d910      	bls.n	8005184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005162:	4b87      	ldr	r3, [pc, #540]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 020f 	bic.w	r2, r3, #15
 800516a:	4985      	ldr	r1, [pc, #532]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005172:	4b83      	ldr	r3, [pc, #524]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d001      	beq.n	8005184 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e184      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d010      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	4b7b      	ldr	r3, [pc, #492]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800519c:	429a      	cmp	r2, r3
 800519e:	d908      	bls.n	80051b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051a0:	4b78      	ldr	r3, [pc, #480]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	4975      	ldr	r1, [pc, #468]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d010      	beq.n	80051e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695a      	ldr	r2, [r3, #20]
 80051c2:	4b70      	ldr	r3, [pc, #448]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d908      	bls.n	80051e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051ce:	4b6d      	ldr	r3, [pc, #436]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	496a      	ldr	r1, [pc, #424]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d010      	beq.n	800520e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699a      	ldr	r2, [r3, #24]
 80051f0:	4b64      	ldr	r3, [pc, #400]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d908      	bls.n	800520e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051fc:	4b61      	ldr	r3, [pc, #388]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	495e      	ldr	r1, [pc, #376]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 800520a:	4313      	orrs	r3, r2
 800520c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b00      	cmp	r3, #0
 8005218:	d010      	beq.n	800523c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69da      	ldr	r2, [r3, #28]
 800521e:	4b59      	ldr	r3, [pc, #356]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005226:	429a      	cmp	r2, r3
 8005228:	d908      	bls.n	800523c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800522a:	4b56      	ldr	r3, [pc, #344]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	4953      	ldr	r1, [pc, #332]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005238:	4313      	orrs	r3, r2
 800523a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d010      	beq.n	800526a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	4b4d      	ldr	r3, [pc, #308]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	429a      	cmp	r2, r3
 8005256:	d908      	bls.n	800526a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005258:	4b4a      	ldr	r3, [pc, #296]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f023 020f 	bic.w	r2, r3, #15
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	4947      	ldr	r1, [pc, #284]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005266:	4313      	orrs	r3, r2
 8005268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d055      	beq.n	8005322 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005276:	4b43      	ldr	r3, [pc, #268]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	4940      	ldr	r1, [pc, #256]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005284:	4313      	orrs	r3, r2
 8005286:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d107      	bne.n	80052a0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005290:	4b3c      	ldr	r3, [pc, #240]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d121      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0f6      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052a8:	4b36      	ldr	r3, [pc, #216]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d115      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0ea      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052c0:	4b30      	ldr	r3, [pc, #192]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0de      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052d0:	4b2c      	ldr	r3, [pc, #176]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0d6      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052e0:	4b28      	ldr	r3, [pc, #160]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f023 0207 	bic.w	r2, r3, #7
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	4925      	ldr	r1, [pc, #148]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f2:	f7fb f877 	bl	80003e4 <HAL_GetTick>
 80052f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f8:	e00a      	b.n	8005310 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052fa:	f7fb f873 	bl	80003e4 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f241 3288 	movw	r2, #5000	; 0x1388
 8005308:	4293      	cmp	r3, r2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e0be      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005310:	4b1c      	ldr	r3, [pc, #112]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	429a      	cmp	r2, r3
 8005320:	d1eb      	bne.n	80052fa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d010      	beq.n	8005350 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	4b14      	ldr	r3, [pc, #80]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	429a      	cmp	r2, r3
 800533c:	d208      	bcs.n	8005350 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800533e:	4b11      	ldr	r3, [pc, #68]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f023 020f 	bic.w	r2, r3, #15
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	490e      	ldr	r1, [pc, #56]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 800534c:	4313      	orrs	r3, r2
 800534e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d214      	bcs.n	8005388 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b08      	ldr	r3, [pc, #32]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 020f 	bic.w	r2, r3, #15
 8005366:	4906      	ldr	r1, [pc, #24]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	4313      	orrs	r3, r2
 800536c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800536e:	4b04      	ldr	r3, [pc, #16]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d005      	beq.n	8005388 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e086      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
 8005380:	52002000 	.word	0x52002000
 8005384:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d010      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	4b3f      	ldr	r3, [pc, #252]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d208      	bcs.n	80053b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053a4:	4b3c      	ldr	r3, [pc, #240]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	4939      	ldr	r1, [pc, #228]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d010      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695a      	ldr	r2, [r3, #20]
 80053c6:	4b34      	ldr	r3, [pc, #208]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d208      	bcs.n	80053e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053d2:	4b31      	ldr	r3, [pc, #196]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	492e      	ldr	r1, [pc, #184]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d010      	beq.n	8005412 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	4b28      	ldr	r3, [pc, #160]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d208      	bcs.n	8005412 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005400:	4b25      	ldr	r3, [pc, #148]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	4922      	ldr	r1, [pc, #136]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 800540e:	4313      	orrs	r3, r2
 8005410:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d010      	beq.n	8005440 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69da      	ldr	r2, [r3, #28]
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800542a:	429a      	cmp	r2, r3
 800542c:	d208      	bcs.n	8005440 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800542e:	4b1a      	ldr	r3, [pc, #104]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	4917      	ldr	r1, [pc, #92]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 800543c:	4313      	orrs	r3, r2
 800543e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005440:	f000 f834 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 8005444:	4601      	mov	r1, r0
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	f003 030f 	and.w	r3, r3, #15
 8005450:	4a12      	ldr	r2, [pc, #72]	; (800549c <HAL_RCC_ClockConfig+0x35c>)
 8005452:	5cd3      	ldrb	r3, [r2, r3]
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	fa21 f303 	lsr.w	r3, r1, r3
 800545c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800545e:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	4a0d      	ldr	r2, [pc, #52]	; (800549c <HAL_RCC_ClockConfig+0x35c>)
 8005468:	5cd3      	ldrb	r3, [r2, r3]
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
 8005474:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <HAL_RCC_ClockConfig+0x360>)
 8005476:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005478:	4a0a      	ldr	r2, [pc, #40]	; (80054a4 <HAL_RCC_ClockConfig+0x364>)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800547e:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <HAL_RCC_ClockConfig+0x368>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fa ff64 	bl	8000350 <HAL_InitTick>
 8005488:	4603      	mov	r3, r0
 800548a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	58024400 	.word	0x58024400
 800549c:	0800fcd0 	.word	0x0800fcd0
 80054a0:	20000014 	.word	0x20000014
 80054a4:	20000010 	.word	0x20000010
 80054a8:	20000000 	.word	0x20000000

080054ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b089      	sub	sp, #36	; 0x24
 80054b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054b2:	4baf      	ldr	r3, [pc, #700]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054ba:	2b18      	cmp	r3, #24
 80054bc:	f200 814e 	bhi.w	800575c <HAL_RCC_GetSysClockFreq+0x2b0>
 80054c0:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c6:	bf00      	nop
 80054c8:	0800552d 	.word	0x0800552d
 80054cc:	0800575d 	.word	0x0800575d
 80054d0:	0800575d 	.word	0x0800575d
 80054d4:	0800575d 	.word	0x0800575d
 80054d8:	0800575d 	.word	0x0800575d
 80054dc:	0800575d 	.word	0x0800575d
 80054e0:	0800575d 	.word	0x0800575d
 80054e4:	0800575d 	.word	0x0800575d
 80054e8:	08005553 	.word	0x08005553
 80054ec:	0800575d 	.word	0x0800575d
 80054f0:	0800575d 	.word	0x0800575d
 80054f4:	0800575d 	.word	0x0800575d
 80054f8:	0800575d 	.word	0x0800575d
 80054fc:	0800575d 	.word	0x0800575d
 8005500:	0800575d 	.word	0x0800575d
 8005504:	0800575d 	.word	0x0800575d
 8005508:	08005559 	.word	0x08005559
 800550c:	0800575d 	.word	0x0800575d
 8005510:	0800575d 	.word	0x0800575d
 8005514:	0800575d 	.word	0x0800575d
 8005518:	0800575d 	.word	0x0800575d
 800551c:	0800575d 	.word	0x0800575d
 8005520:	0800575d 	.word	0x0800575d
 8005524:	0800575d 	.word	0x0800575d
 8005528:	0800555f 	.word	0x0800555f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800552c:	4b90      	ldr	r3, [pc, #576]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d009      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005538:	4b8d      	ldr	r3, [pc, #564]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	08db      	lsrs	r3, r3, #3
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	4a8c      	ldr	r2, [pc, #560]	; (8005774 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
 8005548:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800554a:	e10a      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800554c:	4b89      	ldr	r3, [pc, #548]	; (8005774 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800554e:	61bb      	str	r3, [r7, #24]
    break;
 8005550:	e107      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005552:	4b89      	ldr	r3, [pc, #548]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005554:	61bb      	str	r3, [r7, #24]
    break;
 8005556:	e104      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005558:	4b88      	ldr	r3, [pc, #544]	; (800577c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800555a:	61bb      	str	r3, [r7, #24]
    break;
 800555c:	e101      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800555e:	4b84      	ldr	r3, [pc, #528]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005568:	4b81      	ldr	r3, [pc, #516]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005572:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005574:	4b7e      	ldr	r3, [pc, #504]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800557e:	4b7c      	ldr	r3, [pc, #496]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005582:	08db      	lsrs	r3, r3, #3
 8005584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	fb02 f303 	mul.w	r3, r2, r3
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005596:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80da 	beq.w	8005756 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d05a      	beq.n	800565e <HAL_RCC_GetSysClockFreq+0x1b2>
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d302      	bcc.n	80055b2 <HAL_RCC_GetSysClockFreq+0x106>
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d078      	beq.n	80056a2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80055b0:	e099      	b.n	80056e6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055b2:	4b6f      	ldr	r3, [pc, #444]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d02d      	beq.n	800561a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055be:	4b6c      	ldr	r3, [pc, #432]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	08db      	lsrs	r3, r3, #3
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	4a6a      	ldr	r2, [pc, #424]	; (8005774 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80055ca:	fa22 f303 	lsr.w	r3, r2, r3
 80055ce:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	ee07 3a90 	vmov	s15, r3
 80055e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e8:	4b61      	ldr	r3, [pc, #388]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f0:	ee07 3a90 	vmov	s15, r3
 80055f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80055fc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005780 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005614:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005618:	e087      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005624:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005784 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562c:	4b50      	ldr	r3, [pc, #320]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005634:	ee07 3a90 	vmov	s15, r3
 8005638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005640:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005780 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800565c:	e065      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005668:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005788 <HAL_RCC_GetSysClockFreq+0x2dc>
 800566c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005670:	4b3f      	ldr	r3, [pc, #252]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005678:	ee07 3a90 	vmov	s15, r3
 800567c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005680:	ed97 6a02 	vldr	s12, [r7, #8]
 8005684:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005780 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056a0:	e043      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ac:	eddf 6a37 	vldr	s13, [pc, #220]	; 800578c <HAL_RCC_GetSysClockFreq+0x2e0>
 80056b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b4:	4b2e      	ldr	r3, [pc, #184]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005780 <HAL_RCC_GetSysClockFreq+0x2d4>
 80056cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056e4:	e021      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	ee07 3a90 	vmov	s15, r3
 80056ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005788 <HAL_RCC_GetSysClockFreq+0x2dc>
 80056f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f8:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005700:	ee07 3a90 	vmov	s15, r3
 8005704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005708:	ed97 6a02 	vldr	s12, [r7, #8]
 800570c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005780 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800571c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005724:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005728:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800572a:	4b11      	ldr	r3, [pc, #68]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	0a5b      	lsrs	r3, r3, #9
 8005730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005734:	3301      	adds	r3, #1
 8005736:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005742:	edd7 6a07 	vldr	s13, [r7, #28]
 8005746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800574a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800574e:	ee17 3a90 	vmov	r3, s15
 8005752:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005754:	e005      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	61bb      	str	r3, [r7, #24]
    break;
 800575a:	e002      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800575e:	61bb      	str	r3, [r7, #24]
    break;
 8005760:	bf00      	nop
  }

  return sysclockfreq;
 8005762:	69bb      	ldr	r3, [r7, #24]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3724      	adds	r7, #36	; 0x24
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	58024400 	.word	0x58024400
 8005774:	03d09000 	.word	0x03d09000
 8005778:	003d0900 	.word	0x003d0900
 800577c:	017d7840 	.word	0x017d7840
 8005780:	46000000 	.word	0x46000000
 8005784:	4c742400 	.word	0x4c742400
 8005788:	4a742400 	.word	0x4a742400
 800578c:	4bbebc20 	.word	0x4bbebc20

08005790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005796:	f7ff fe89 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 800579a:	4601      	mov	r1, r0
 800579c:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	4a0f      	ldr	r2, [pc, #60]	; (80057e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80057a8:	5cd3      	ldrb	r3, [r2, r3]
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	fa21 f303 	lsr.w	r3, r1, r3
 80057b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057b4:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	4a09      	ldr	r2, [pc, #36]	; (80057e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80057be:	5cd3      	ldrb	r3, [r2, r3]
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ca:	4a07      	ldr	r2, [pc, #28]	; (80057e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80057cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057ce:	4a07      	ldr	r2, [pc, #28]	; (80057ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80057d6:	681b      	ldr	r3, [r3, #0]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	58024400 	.word	0x58024400
 80057e4:	0800fcd0 	.word	0x0800fcd0
 80057e8:	20000014 	.word	0x20000014
 80057ec:	20000010 	.word	0x20000010

080057f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057f8:	2300      	movs	r3, #0
 80057fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057fc:	2300      	movs	r3, #0
 80057fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d03d      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005814:	d013      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581a:	d802      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800581c:	2b00      	cmp	r3, #0
 800581e:	d007      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005820:	e01f      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005826:	d013      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005828:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800582c:	d01c      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800582e:	e018      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005830:	4baf      	ldr	r3, [pc, #700]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	4aae      	ldr	r2, [pc, #696]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800583a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800583c:	e015      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3304      	adds	r3, #4
 8005842:	2102      	movs	r1, #2
 8005844:	4618      	mov	r0, r3
 8005846:	f001 fd23 	bl	8007290 <RCCEx_PLL2_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800584e:	e00c      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3324      	adds	r3, #36	; 0x24
 8005854:	2102      	movs	r1, #2
 8005856:	4618      	mov	r0, r3
 8005858:	f001 fdcc 	bl	80073f4 <RCCEx_PLL3_Config>
 800585c:	4603      	mov	r3, r0
 800585e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005860:	e003      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	75fb      	strb	r3, [r7, #23]
      break;
 8005866:	e000      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d109      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005870:	4b9f      	ldr	r3, [pc, #636]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005874:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800587c:	499c      	ldr	r1, [pc, #624]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800587e:	4313      	orrs	r3, r2
 8005880:	650b      	str	r3, [r1, #80]	; 0x50
 8005882:	e001      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005890:	2b00      	cmp	r3, #0
 8005892:	d03d      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005898:	2b04      	cmp	r3, #4
 800589a:	d826      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800589c:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058b9 	.word	0x080058b9
 80058a8:	080058c7 	.word	0x080058c7
 80058ac:	080058d9 	.word	0x080058d9
 80058b0:	080058f1 	.word	0x080058f1
 80058b4:	080058f1 	.word	0x080058f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b8:	4b8d      	ldr	r3, [pc, #564]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	4a8c      	ldr	r2, [pc, #560]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058c4:	e015      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3304      	adds	r3, #4
 80058ca:	2100      	movs	r1, #0
 80058cc:	4618      	mov	r0, r3
 80058ce:	f001 fcdf 	bl	8007290 <RCCEx_PLL2_Config>
 80058d2:	4603      	mov	r3, r0
 80058d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058d6:	e00c      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3324      	adds	r3, #36	; 0x24
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f001 fd88 	bl	80073f4 <RCCEx_PLL3_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058e8:	e003      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	75fb      	strb	r3, [r7, #23]
      break;
 80058ee:	e000      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80058f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058f8:	4b7d      	ldr	r3, [pc, #500]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fc:	f023 0207 	bic.w	r2, r3, #7
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005904:	497a      	ldr	r1, [pc, #488]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005906:	4313      	orrs	r3, r2
 8005908:	650b      	str	r3, [r1, #80]	; 0x50
 800590a:	e001      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590c:	7dfb      	ldrb	r3, [r7, #23]
 800590e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005918:	2b00      	cmp	r3, #0
 800591a:	d03e      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005920:	2b80      	cmp	r3, #128	; 0x80
 8005922:	d01c      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005924:	2b80      	cmp	r3, #128	; 0x80
 8005926:	d804      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d00d      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005930:	e01e      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005932:	2bc0      	cmp	r3, #192	; 0xc0
 8005934:	d01f      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593a:	d01e      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800593c:	e018      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800593e:	4b6c      	ldr	r3, [pc, #432]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	4a6b      	ldr	r2, [pc, #428]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005948:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800594a:	e017      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	2100      	movs	r1, #0
 8005952:	4618      	mov	r0, r3
 8005954:	f001 fc9c 	bl	8007290 <RCCEx_PLL2_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800595c:	e00e      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3324      	adds	r3, #36	; 0x24
 8005962:	2100      	movs	r1, #0
 8005964:	4618      	mov	r0, r3
 8005966:	f001 fd45 	bl	80073f4 <RCCEx_PLL3_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800596e:	e005      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	75fb      	strb	r3, [r7, #23]
      break;
 8005974:	e002      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005976:	bf00      	nop
 8005978:	e000      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800597a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005982:	4b5b      	ldr	r3, [pc, #364]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005986:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598e:	4958      	ldr	r1, [pc, #352]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005990:	4313      	orrs	r3, r2
 8005992:	650b      	str	r3, [r1, #80]	; 0x50
 8005994:	e001      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d044      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b0:	d01f      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80059b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b6:	d805      	bhi.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80059bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059c0:	d00e      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80059c2:	e01f      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80059c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059c8:	d01f      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80059ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059ce:	d01e      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059d0:	e018      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d2:	4b47      	ldr	r3, [pc, #284]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d6:	4a46      	ldr	r2, [pc, #280]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059de:	e017      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3304      	adds	r3, #4
 80059e4:	2100      	movs	r1, #0
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 fc52 	bl	8007290 <RCCEx_PLL2_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80059f0:	e00e      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3324      	adds	r3, #36	; 0x24
 80059f6:	2100      	movs	r1, #0
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 fcfb 	bl	80073f4 <RCCEx_PLL3_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a02:	e005      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	75fb      	strb	r3, [r7, #23]
      break;
 8005a08:	e002      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005a0a:	bf00      	nop
 8005a0c:	e000      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a16:	4b36      	ldr	r3, [pc, #216]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a24:	4932      	ldr	r1, [pc, #200]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	658b      	str	r3, [r1, #88]	; 0x58
 8005a2a:	e001      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d044      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a46:	d01f      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005a48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a4c:	d805      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005a52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a56:	d00e      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a58:	e01f      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005a5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a5e:	d01f      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a64:	d01e      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005a66:	e018      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a68:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	4a20      	ldr	r2, [pc, #128]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a74:	e017      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f001 fc07 	bl	8007290 <RCCEx_PLL2_Config>
 8005a82:	4603      	mov	r3, r0
 8005a84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a86:	e00e      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3324      	adds	r3, #36	; 0x24
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 fcb0 	bl	80073f4 <RCCEx_PLL3_Config>
 8005a94:	4603      	mov	r3, r0
 8005a96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a98:	e005      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a9e:	e002      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005aa0:	bf00      	nop
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005aac:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005aba:	490d      	ldr	r1, [pc, #52]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	658b      	str	r3, [r1, #88]	; 0x58
 8005ac0:	e001      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
 8005ac4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d035      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad6:	2b10      	cmp	r3, #16
 8005ad8:	d00c      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005ada:	2b10      	cmp	r3, #16
 8005adc:	d802      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d01b      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005ae2:	e017      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d00c      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005ae8:	2b30      	cmp	r3, #48	; 0x30
 8005aea:	d018      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005aec:	e012      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005aee:	bf00      	nop
 8005af0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af4:	4baf      	ldr	r3, [pc, #700]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	4aae      	ldr	r2, [pc, #696]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b00:	e00e      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3304      	adds	r3, #4
 8005b06:	2102      	movs	r1, #2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f001 fbc1 	bl	8007290 <RCCEx_PLL2_Config>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b12:	e005      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	75fb      	strb	r3, [r7, #23]
      break;
 8005b18:	e002      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005b1a:	bf00      	nop
 8005b1c:	e000      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b26:	4ba3      	ldr	r3, [pc, #652]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b32:	49a0      	ldr	r1, [pc, #640]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b38:	e001      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3a:	7dfb      	ldrb	r3, [r7, #23]
 8005b3c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d042      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b52:	d01f      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b58:	d805      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b62:	d00e      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005b64:	e01f      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005b66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b6a:	d01f      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b70:	d01e      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005b72:	e018      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b74:	4b8f      	ldr	r3, [pc, #572]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	4a8e      	ldr	r2, [pc, #568]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b80:	e017      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3304      	adds	r3, #4
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fb81 	bl	8007290 <RCCEx_PLL2_Config>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b92:	e00e      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3324      	adds	r3, #36	; 0x24
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 fc2a 	bl	80073f4 <RCCEx_PLL3_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ba4:	e005      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8005baa:	e002      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005bac:	bf00      	nop
 8005bae:	e000      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d109      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005bb8:	4b7e      	ldr	r3, [pc, #504]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc4:	497b      	ldr	r1, [pc, #492]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	650b      	str	r3, [r1, #80]	; 0x50
 8005bca:	e001      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d042      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005be4:	d01b      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005be6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bea:	d805      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d022      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf4:	d00a      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005bf6:	e01b      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005bf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bfc:	d01d      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005bfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c02:	d01c      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005c04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c08:	d01b      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005c0a:	e011      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	2101      	movs	r1, #1
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fb3c 	bl	8007290 <RCCEx_PLL2_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c1c:	e012      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3324      	adds	r3, #36	; 0x24
 8005c22:	2101      	movs	r1, #1
 8005c24:	4618      	mov	r0, r3
 8005c26:	f001 fbe5 	bl	80073f4 <RCCEx_PLL3_Config>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c2e:	e009      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	75fb      	strb	r3, [r7, #23]
      break;
 8005c34:	e006      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005c36:	bf00      	nop
 8005c38:	e004      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005c3a:	bf00      	nop
 8005c3c:	e002      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005c3e:	bf00      	nop
 8005c40:	e000      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c4a:	4b5a      	ldr	r3, [pc, #360]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c56:	4957      	ldr	r1, [pc, #348]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	650b      	str	r3, [r1, #80]	; 0x50
 8005c5c:	e001      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d044      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c78:	d01b      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c7e:	d805      	bhi.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d022      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c88:	d00a      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005c8a:	e01b      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c90:	d01d      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c96:	d01c      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005c98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c9c:	d01b      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005c9e:	e011      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 faf2 	bl	8007290 <RCCEx_PLL2_Config>
 8005cac:	4603      	mov	r3, r0
 8005cae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005cb0:	e012      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3324      	adds	r3, #36	; 0x24
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 fb9b 	bl	80073f4 <RCCEx_PLL3_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005cc2:	e009      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc8:	e006      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005cca:	bf00      	nop
 8005ccc:	e004      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005cce:	bf00      	nop
 8005cd0:	e002      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005cd2:	bf00      	nop
 8005cd4:	e000      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005cde:	4b35      	ldr	r3, [pc, #212]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005cec:	4931      	ldr	r1, [pc, #196]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	658b      	str	r3, [r1, #88]	; 0x58
 8005cf2:	e001      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d02d      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d0c:	d005      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d12:	d009      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d013      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005d18:	e00f      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d1a:	4b26      	ldr	r3, [pc, #152]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	4a25      	ldr	r2, [pc, #148]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d26:	e00c      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 faae 	bl	8007290 <RCCEx_PLL2_Config>
 8005d34:	4603      	mov	r3, r0
 8005d36:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d38:	e003      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d3e:	e000      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d109      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d48:	4b1a      	ldr	r3, [pc, #104]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d54:	4917      	ldr	r1, [pc, #92]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	650b      	str	r3, [r1, #80]	; 0x50
 8005d5a:	e001      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
 8005d5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d035      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d81b      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005db9 	.word	0x08005db9
 8005d80:	08005d8d 	.word	0x08005d8d
 8005d84:	08005d9b 	.word	0x08005d9b
 8005d88:	08005db9 	.word	0x08005db9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	4a08      	ldr	r2, [pc, #32]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d98:	e00f      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	2102      	movs	r1, #2
 8005da0:	4618      	mov	r0, r3
 8005da2:	f001 fa75 	bl	8007290 <RCCEx_PLL2_Config>
 8005da6:	4603      	mov	r3, r0
 8005da8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005daa:	e006      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	75fb      	strb	r3, [r7, #23]
      break;
 8005db0:	e003      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005db2:	bf00      	nop
 8005db4:	58024400 	.word	0x58024400
      break;
 8005db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d109      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005dc0:	4bba      	ldr	r3, [pc, #744]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc4:	f023 0203 	bic.w	r2, r3, #3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dcc:	49b7      	ldr	r1, [pc, #732]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005dd2:	e001      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8086 	beq.w	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005de6:	4bb2      	ldr	r3, [pc, #712]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4ab1      	ldr	r2, [pc, #708]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005df2:	f7fa faf7 	bl	80003e4 <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005df8:	e009      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dfa:	f7fa faf3 	bl	80003e4 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b64      	cmp	r3, #100	; 0x64
 8005e06:	d902      	bls.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	75fb      	strb	r3, [r7, #23]
        break;
 8005e0c:	e005      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e0e:	4ba8      	ldr	r3, [pc, #672]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0ef      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d166      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e20:	4ba2      	ldr	r3, [pc, #648]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e2a:	4053      	eors	r3, r2
 8005e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d013      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e34:	4b9d      	ldr	r3, [pc, #628]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e3e:	4b9b      	ldr	r3, [pc, #620]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e42:	4a9a      	ldr	r2, [pc, #616]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e48:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e4a:	4b98      	ldr	r3, [pc, #608]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	4a97      	ldr	r2, [pc, #604]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e54:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e56:	4a95      	ldr	r2, [pc, #596]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e66:	d115      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e68:	f7fa fabc 	bl	80003e4 <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e6e:	e00b      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e70:	f7fa fab8 	bl	80003e4 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d902      	bls.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	75fb      	strb	r3, [r7, #23]
            break;
 8005e86:	e005      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e88:	4b88      	ldr	r3, [pc, #544]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0ed      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d126      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ea8:	d10d      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005eaa:	4b80      	ldr	r3, [pc, #512]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005eb8:	0919      	lsrs	r1, r3, #4
 8005eba:	4b7e      	ldr	r3, [pc, #504]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005ebc:	400b      	ands	r3, r1
 8005ebe:	497b      	ldr	r1, [pc, #492]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	610b      	str	r3, [r1, #16]
 8005ec4:	e005      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005ec6:	4b79      	ldr	r3, [pc, #484]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	4a78      	ldr	r2, [pc, #480]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ecc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ed0:	6113      	str	r3, [r2, #16]
 8005ed2:	4b76      	ldr	r3, [pc, #472]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ed4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee0:	4972      	ldr	r1, [pc, #456]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	670b      	str	r3, [r1, #112]	; 0x70
 8005ee6:	e004      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	75bb      	strb	r3, [r7, #22]
 8005eec:	e001      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
 8005ef0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d07d      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f02:	2b28      	cmp	r3, #40	; 0x28
 8005f04:	d866      	bhi.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005f06:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005fdb 	.word	0x08005fdb
 8005f10:	08005fd5 	.word	0x08005fd5
 8005f14:	08005fd5 	.word	0x08005fd5
 8005f18:	08005fd5 	.word	0x08005fd5
 8005f1c:	08005fd5 	.word	0x08005fd5
 8005f20:	08005fd5 	.word	0x08005fd5
 8005f24:	08005fd5 	.word	0x08005fd5
 8005f28:	08005fd5 	.word	0x08005fd5
 8005f2c:	08005fb1 	.word	0x08005fb1
 8005f30:	08005fd5 	.word	0x08005fd5
 8005f34:	08005fd5 	.word	0x08005fd5
 8005f38:	08005fd5 	.word	0x08005fd5
 8005f3c:	08005fd5 	.word	0x08005fd5
 8005f40:	08005fd5 	.word	0x08005fd5
 8005f44:	08005fd5 	.word	0x08005fd5
 8005f48:	08005fd5 	.word	0x08005fd5
 8005f4c:	08005fc3 	.word	0x08005fc3
 8005f50:	08005fd5 	.word	0x08005fd5
 8005f54:	08005fd5 	.word	0x08005fd5
 8005f58:	08005fd5 	.word	0x08005fd5
 8005f5c:	08005fd5 	.word	0x08005fd5
 8005f60:	08005fd5 	.word	0x08005fd5
 8005f64:	08005fd5 	.word	0x08005fd5
 8005f68:	08005fd5 	.word	0x08005fd5
 8005f6c:	08005fdb 	.word	0x08005fdb
 8005f70:	08005fd5 	.word	0x08005fd5
 8005f74:	08005fd5 	.word	0x08005fd5
 8005f78:	08005fd5 	.word	0x08005fd5
 8005f7c:	08005fd5 	.word	0x08005fd5
 8005f80:	08005fd5 	.word	0x08005fd5
 8005f84:	08005fd5 	.word	0x08005fd5
 8005f88:	08005fd5 	.word	0x08005fd5
 8005f8c:	08005fdb 	.word	0x08005fdb
 8005f90:	08005fd5 	.word	0x08005fd5
 8005f94:	08005fd5 	.word	0x08005fd5
 8005f98:	08005fd5 	.word	0x08005fd5
 8005f9c:	08005fd5 	.word	0x08005fd5
 8005fa0:	08005fd5 	.word	0x08005fd5
 8005fa4:	08005fd5 	.word	0x08005fd5
 8005fa8:	08005fd5 	.word	0x08005fd5
 8005fac:	08005fdb 	.word	0x08005fdb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f001 f96a 	bl	8007290 <RCCEx_PLL2_Config>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fc0:	e00c      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3324      	adds	r3, #36	; 0x24
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 fa13 	bl	80073f4 <RCCEx_PLL3_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fd2:	e003      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd8:	e000      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005fe2:	4b32      	ldr	r3, [pc, #200]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fee:	492f      	ldr	r1, [pc, #188]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	654b      	str	r3, [r1, #84]	; 0x54
 8005ff4:	e001      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
 8005ff8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d037      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800600a:	2b05      	cmp	r3, #5
 800600c:	d820      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800600e:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	08006057 	.word	0x08006057
 8006018:	0800602d 	.word	0x0800602d
 800601c:	0800603f 	.word	0x0800603f
 8006020:	08006057 	.word	0x08006057
 8006024:	08006057 	.word	0x08006057
 8006028:	08006057 	.word	0x08006057
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	2101      	movs	r1, #1
 8006032:	4618      	mov	r0, r3
 8006034:	f001 f92c 	bl	8007290 <RCCEx_PLL2_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800603c:	e00c      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3324      	adds	r3, #36	; 0x24
 8006042:	2101      	movs	r1, #1
 8006044:	4618      	mov	r0, r3
 8006046:	f001 f9d5 	bl	80073f4 <RCCEx_PLL3_Config>
 800604a:	4603      	mov	r3, r0
 800604c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800604e:	e003      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	75fb      	strb	r3, [r7, #23]
      break;
 8006054:	e000      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006058:	7dfb      	ldrb	r3, [r7, #23]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800605e:	4b13      	ldr	r3, [pc, #76]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	f023 0207 	bic.w	r2, r3, #7
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800606a:	4910      	ldr	r1, [pc, #64]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800606c:	4313      	orrs	r3, r2
 800606e:	654b      	str	r3, [r1, #84]	; 0x54
 8006070:	e001      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	d040      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006088:	2b05      	cmp	r3, #5
 800608a:	d827      	bhi.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800608c:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800608e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006092:	bf00      	nop
 8006094:	080060e3 	.word	0x080060e3
 8006098:	080060b9 	.word	0x080060b9
 800609c:	080060cb 	.word	0x080060cb
 80060a0:	080060e3 	.word	0x080060e3
 80060a4:	080060e3 	.word	0x080060e3
 80060a8:	080060e3 	.word	0x080060e3
 80060ac:	58024400 	.word	0x58024400
 80060b0:	58024800 	.word	0x58024800
 80060b4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3304      	adds	r3, #4
 80060bc:	2101      	movs	r1, #1
 80060be:	4618      	mov	r0, r3
 80060c0:	f001 f8e6 	bl	8007290 <RCCEx_PLL2_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060c8:	e00c      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3324      	adds	r3, #36	; 0x24
 80060ce:	2101      	movs	r1, #1
 80060d0:	4618      	mov	r0, r3
 80060d2:	f001 f98f 	bl	80073f4 <RCCEx_PLL3_Config>
 80060d6:	4603      	mov	r3, r0
 80060d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060da:	e003      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	75fb      	strb	r3, [r7, #23]
      break;
 80060e0:	e000      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80060e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10a      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060ea:	4bb2      	ldr	r3, [pc, #712]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80060ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ee:	f023 0207 	bic.w	r2, r3, #7
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f8:	49ae      	ldr	r1, [pc, #696]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	658b      	str	r3, [r1, #88]	; 0x58
 80060fe:	e001      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d044      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800611a:	d01b      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800611c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006120:	d805      	bhi.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d022      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800612a:	d00a      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800612c:	e01b      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800612e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006132:	d01d      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006138:	d01c      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800613a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800613e:	d01b      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006140:	e011      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3304      	adds	r3, #4
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f001 f8a1 	bl	8007290 <RCCEx_PLL2_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006152:	e012      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3324      	adds	r3, #36	; 0x24
 8006158:	2102      	movs	r1, #2
 800615a:	4618      	mov	r0, r3
 800615c:	f001 f94a 	bl	80073f4 <RCCEx_PLL3_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006164:	e009      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	75fb      	strb	r3, [r7, #23]
      break;
 800616a:	e006      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800616c:	bf00      	nop
 800616e:	e004      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006170:	bf00      	nop
 8006172:	e002      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006174:	bf00      	nop
 8006176:	e000      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800617a:	7dfb      	ldrb	r3, [r7, #23]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10a      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006180:	4b8c      	ldr	r3, [pc, #560]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006184:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800618e:	4989      	ldr	r1, [pc, #548]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006190:	4313      	orrs	r3, r2
 8006192:	654b      	str	r3, [r1, #84]	; 0x54
 8006194:	e001      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d044      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b0:	d01b      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80061b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b6:	d805      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d022      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80061bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c0:	d00a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80061c2:	e01b      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80061c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c8:	d01d      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80061ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061ce:	d01c      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80061d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061d4:	d01b      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80061d6:	e011      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	2100      	movs	r1, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	f001 f856 	bl	8007290 <RCCEx_PLL2_Config>
 80061e4:	4603      	mov	r3, r0
 80061e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061e8:	e012      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	3324      	adds	r3, #36	; 0x24
 80061ee:	2102      	movs	r1, #2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f001 f8ff 	bl	80073f4 <RCCEx_PLL3_Config>
 80061f6:	4603      	mov	r3, r0
 80061f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061fa:	e009      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006200:	e006      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006202:	bf00      	nop
 8006204:	e004      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006206:	bf00      	nop
 8006208:	e002      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800620a:	bf00      	nop
 800620c:	e000      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800620e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006210:	7dfb      	ldrb	r3, [r7, #23]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006216:	4b67      	ldr	r3, [pc, #412]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006224:	4963      	ldr	r1, [pc, #396]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006226:	4313      	orrs	r3, r2
 8006228:	658b      	str	r3, [r1, #88]	; 0x58
 800622a:	e001      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622c:	7dfb      	ldrb	r3, [r7, #23]
 800622e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006238:	2b00      	cmp	r3, #0
 800623a:	d044      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006246:	d01b      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800624c:	d805      	bhi.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d022      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006256:	d00a      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006258:	e01b      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800625a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800625e:	d01d      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006260:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006264:	d01c      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006266:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800626a:	d01b      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800626c:	e011      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3304      	adds	r3, #4
 8006272:	2100      	movs	r1, #0
 8006274:	4618      	mov	r0, r3
 8006276:	f001 f80b 	bl	8007290 <RCCEx_PLL2_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800627e:	e012      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3324      	adds	r3, #36	; 0x24
 8006284:	2102      	movs	r1, #2
 8006286:	4618      	mov	r0, r3
 8006288:	f001 f8b4 	bl	80073f4 <RCCEx_PLL3_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006290:	e009      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	75fb      	strb	r3, [r7, #23]
      break;
 8006296:	e006      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006298:	bf00      	nop
 800629a:	e004      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800629c:	bf00      	nop
 800629e:	e002      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80062a0:	bf00      	nop
 80062a2:	e000      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80062a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10a      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062ac:	4b41      	ldr	r3, [pc, #260]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80062ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062ba:	493e      	ldr	r1, [pc, #248]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	658b      	str	r3, [r1, #88]	; 0x58
 80062c0:	e001      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d01a      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062dc:	d10a      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3324      	adds	r3, #36	; 0x24
 80062e2:	2102      	movs	r1, #2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 f885 	bl	80073f4 <RCCEx_PLL3_Config>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062f4:	4b2f      	ldr	r3, [pc, #188]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80062f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006302:	492c      	ldr	r1, [pc, #176]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006304:	4313      	orrs	r3, r2
 8006306:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800631a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631e:	d10a      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3324      	adds	r3, #36	; 0x24
 8006324:	2102      	movs	r1, #2
 8006326:	4618      	mov	r0, r3
 8006328:	f001 f864 	bl	80073f4 <RCCEx_PLL3_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006336:	4b1f      	ldr	r3, [pc, #124]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006344:	491b      	ldr	r1, [pc, #108]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006346:	4313      	orrs	r3, r2
 8006348:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d032      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800635c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006360:	d00d      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006362:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006366:	d016      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006368:	2b00      	cmp	r3, #0
 800636a:	d111      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3304      	adds	r3, #4
 8006370:	2100      	movs	r1, #0
 8006372:	4618      	mov	r0, r3
 8006374:	f000 ff8c 	bl	8007290 <RCCEx_PLL2_Config>
 8006378:	4603      	mov	r3, r0
 800637a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800637c:	e00c      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3324      	adds	r3, #36	; 0x24
 8006382:	2102      	movs	r1, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f001 f835 	bl	80073f4 <RCCEx_PLL3_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800638e:	e003      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	75fb      	strb	r3, [r7, #23]
      break;
 8006394:	e000      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10c      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800639e:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80063a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063ac:	4901      	ldr	r1, [pc, #4]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	658b      	str	r3, [r1, #88]	; 0x58
 80063b2:	e003      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80063b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d02f      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063d2:	d00c      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80063d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063d8:	d015      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80063da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063de:	d10f      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063e0:	4b71      	ldr	r3, [pc, #452]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	4a70      	ldr	r2, [pc, #448]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80063e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80063ec:	e00c      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3324      	adds	r3, #36	; 0x24
 80063f2:	2101      	movs	r1, #1
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 fffd 	bl	80073f4 <RCCEx_PLL3_Config>
 80063fa:	4603      	mov	r3, r0
 80063fc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80063fe:	e003      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	75fb      	strb	r3, [r7, #23]
      break;
 8006404:	e000      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800640e:	4b66      	ldr	r3, [pc, #408]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006412:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800641c:	4962      	ldr	r1, [pc, #392]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800641e:	4313      	orrs	r3, r2
 8006420:	654b      	str	r3, [r1, #84]	; 0x54
 8006422:	e001      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d029      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800643c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006440:	d007      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006442:	e00f      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006444:	4b58      	ldr	r3, [pc, #352]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	4a57      	ldr	r2, [pc, #348]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800644a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800644e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006450:	e00b      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3304      	adds	r3, #4
 8006456:	2102      	movs	r1, #2
 8006458:	4618      	mov	r0, r3
 800645a:	f000 ff19 	bl	8007290 <RCCEx_PLL2_Config>
 800645e:	4603      	mov	r3, r0
 8006460:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006462:	e002      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	75fb      	strb	r3, [r7, #23]
      break;
 8006468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d109      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006470:	4b4d      	ldr	r3, [pc, #308]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800647c:	494a      	ldr	r1, [pc, #296]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800647e:	4313      	orrs	r3, r2
 8006480:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006482:	e001      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3324      	adds	r3, #36	; 0x24
 8006498:	2102      	movs	r1, #2
 800649a:	4618      	mov	r0, r3
 800649c:	f000 ffaa 	bl	80073f4 <RCCEx_PLL3_Config>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d02f      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064be:	d00c      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80064c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c4:	d802      	bhi.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d011      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80064ca:	e00d      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80064cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d0:	d00f      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80064d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064d6:	d00e      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80064d8:	e006      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064da:	4b33      	ldr	r3, [pc, #204]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	4a32      	ldr	r2, [pc, #200]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80064e6:	e007      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
      break;
 80064ec:	e004      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80064ee:	bf00      	nop
 80064f0:	e002      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80064f2:	bf00      	nop
 80064f4:	e000      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80064f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d109      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064fe:	4b2a      	ldr	r3, [pc, #168]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800650a:	4927      	ldr	r1, [pc, #156]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800650c:	4313      	orrs	r3, r2
 800650e:	654b      	str	r3, [r1, #84]	; 0x54
 8006510:	e001      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006522:	4b21      	ldr	r3, [pc, #132]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006526:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652e:	491e      	ldr	r1, [pc, #120]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006530:	4313      	orrs	r3, r2
 8006532:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006540:	4b19      	ldr	r3, [pc, #100]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006544:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800654c:	4916      	ldr	r1, [pc, #88]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800654e:	4313      	orrs	r3, r2
 8006550:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00d      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800655e:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	4a11      	ldr	r2, [pc, #68]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006564:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006568:	6113      	str	r3, [r2, #16]
 800656a:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006574:	490c      	ldr	r1, [pc, #48]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006576:	4313      	orrs	r3, r2
 8006578:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	da08      	bge.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006582:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006586:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658e:	4906      	ldr	r1, [pc, #24]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006590:	4313      	orrs	r3, r2
 8006592:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006594:	7dbb      	ldrb	r3, [r7, #22]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	e000      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	58024400 	.word	0x58024400

080065ac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b090      	sub	sp, #64	; 0x40
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ba:	d150      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80065bc:	4ba1      	ldr	r3, [pc, #644]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80065be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c0:	f003 0307 	and.w	r3, r3, #7
 80065c4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d844      	bhi.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80065cc:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	080065e9 	.word	0x080065e9
 80065d8:	080065f9 	.word	0x080065f9
 80065dc:	08006609 	.word	0x08006609
 80065e0:	08006651 	.word	0x08006651
 80065e4:	08006619 	.word	0x08006619
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fd03 	bl	8006ff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065f6:	e241      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f8:	f107 0318 	add.w	r3, r7, #24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fa63 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006606:	e239      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006608:	f107 030c 	add.w	r3, r7, #12
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fba7 	bl	8006d60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006616:	e231      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006618:	4b8a      	ldr	r3, [pc, #552]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800661a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006620:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006624:	2b00      	cmp	r3, #0
 8006626:	d102      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006628:	4b87      	ldr	r3, [pc, #540]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800662a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800662c:	e226      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006634:	d102      	bne.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006636:	4b85      	ldr	r3, [pc, #532]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006638:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800663a:	e21f      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800663c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006642:	d102      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006644:	4b82      	ldr	r3, [pc, #520]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006646:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006648:	e218      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800664e:	e215      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006650:	4b80      	ldr	r3, [pc, #512]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006654:	e212      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800665a:	bf00      	nop
 800665c:	e20e      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006664:	d14f      	bne.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006666:	4b77      	ldr	r3, [pc, #476]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800666e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	2b80      	cmp	r3, #128	; 0x80
 8006674:	d01c      	beq.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006676:	2b80      	cmp	r3, #128	; 0x80
 8006678:	d804      	bhi.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d008      	beq.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d00e      	beq.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006682:	e03c      	b.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006684:	2bc0      	cmp	r3, #192	; 0xc0
 8006686:	d037      	beq.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668c:	d018      	beq.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800668e:	e036      	b.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fcaf 	bl	8006ff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800669e:	e1ed      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066a0:	f107 0318 	add.w	r3, r7, #24
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 fa0f 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066ae:	e1e5      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066b0:	f107 030c 	add.w	r3, r7, #12
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 fb53 	bl	8006d60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066be:	e1dd      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066c0:	4b60      	ldr	r3, [pc, #384]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80066c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066c8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80066ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d102      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80066d0:	4b5d      	ldr	r3, [pc, #372]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80066d4:	e1d2      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80066d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066dc:	d102      	bne.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80066de:	4b5b      	ldr	r3, [pc, #364]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80066e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066e2:	e1cb      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80066e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ea:	d102      	bne.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80066ec:	4b58      	ldr	r3, [pc, #352]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066f0:	e1c4      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066f6:	e1c1      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80066f8:	4b56      	ldr	r3, [pc, #344]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066fc:	e1be      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006702:	bf00      	nop
 8006704:	e1ba      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670c:	d153      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800670e:	4b4d      	ldr	r3, [pc, #308]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006712:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006716:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800671e:	d01f      	beq.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006724:	d805      	bhi.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800672a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800672e:	d00f      	beq.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006730:	e03d      	b.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006732:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006736:	d037      	beq.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006738:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800673c:	d018      	beq.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800673e:	e036      	b.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fc57 	bl	8006ff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800674e:	e195      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006750:	f107 0318 	add.w	r3, r7, #24
 8006754:	4618      	mov	r0, r3
 8006756:	f000 f9b7 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800675e:	e18d      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006760:	f107 030c 	add.w	r3, r7, #12
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fafb 	bl	8006d60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800676e:	e185      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006770:	4b34      	ldr	r3, [pc, #208]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006774:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006778:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800677a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677c:	2b00      	cmp	r3, #0
 800677e:	d102      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006780:	4b31      	ldr	r3, [pc, #196]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006782:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006784:	e17a      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800678c:	d102      	bne.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800678e:	4b2f      	ldr	r3, [pc, #188]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006790:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006792:	e173      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800679a:	d102      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800679c:	4b2c      	ldr	r3, [pc, #176]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067a0:	e16c      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067a6:	e169      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80067a8:	4b2a      	ldr	r3, [pc, #168]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80067aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ac:	e166      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067b2:	bf00      	nop
 80067b4:	e162      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067bc:	d15d      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80067be:	4b21      	ldr	r3, [pc, #132]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80067c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80067c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067ce:	d01f      	beq.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80067d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067d4:	d805      	bhi.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80067da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067de:	d00f      	beq.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80067e0:	e047      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80067e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067e6:	d041      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80067e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067ec:	d018      	beq.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80067ee:	e040      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fbff 	bl	8006ff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067fe:	e13d      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006800:	f107 0318 	add.w	r3, r7, #24
 8006804:	4618      	mov	r0, r3
 8006806:	f000 f95f 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800680e:	e135      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006810:	f107 030c 	add.w	r3, r7, #12
 8006814:	4618      	mov	r0, r3
 8006816:	f000 faa3 	bl	8006d60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800681e:	e12d      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006820:	4b08      	ldr	r3, [pc, #32]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006824:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006828:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800682a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682c:	2b00      	cmp	r3, #0
 800682e:	d102      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006830:	4b05      	ldr	r3, [pc, #20]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006832:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006834:	e122      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800683c:	d10c      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800683e:	4b03      	ldr	r3, [pc, #12]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006842:	e11b      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006844:	58024400 	.word	0x58024400
 8006848:	03d09000 	.word	0x03d09000
 800684c:	003d0900 	.word	0x003d0900
 8006850:	017d7840 	.word	0x017d7840
 8006854:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800685e:	d102      	bne.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8006860:	4b89      	ldr	r3, [pc, #548]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006862:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006864:	e10a      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006866:	2300      	movs	r3, #0
 8006868:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800686a:	e107      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800686c:	4b87      	ldr	r3, [pc, #540]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800686e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006870:	e104      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006876:	bf00      	nop
 8006878:	e100      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006880:	d153      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006882:	4b83      	ldr	r3, [pc, #524]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006886:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800688a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006892:	d01f      	beq.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006898:	d805      	bhi.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800689e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a2:	d00f      	beq.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80068a4:	e03d      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80068a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068aa:	d037      	beq.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80068ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068b0:	d018      	beq.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80068b2:	e036      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fb9d 	bl	8006ff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068c2:	e0db      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068c4:	f107 0318 	add.w	r3, r7, #24
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 f8fd 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068d2:	e0d3      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068d4:	f107 030c 	add.w	r3, r7, #12
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fa41 	bl	8006d60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068e2:	e0cb      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068e4:	4b6a      	ldr	r3, [pc, #424]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80068e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068ec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80068ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d102      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80068f4:	4b67      	ldr	r3, [pc, #412]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80068f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80068f8:	e0c0      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80068fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006900:	d102      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8006902:	4b65      	ldr	r3, [pc, #404]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006906:	e0b9      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800690e:	d102      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8006910:	4b5d      	ldr	r3, [pc, #372]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006914:	e0b2      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800691a:	e0af      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800691c:	4b5b      	ldr	r3, [pc, #364]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006920:	e0ac      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006926:	bf00      	nop
 8006928:	e0a8      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006930:	d13d      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006932:	4b57      	ldr	r3, [pc, #348]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006936:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800693a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006942:	d00c      	beq.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006948:	d011      	beq.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d12b      	bne.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800694e:	f107 0318 	add.w	r3, r7, #24
 8006952:	4618      	mov	r0, r3
 8006954:	f000 f8b8 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800695c:	e08e      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800695e:	f107 030c 	add.w	r3, r7, #12
 8006962:	4618      	mov	r0, r3
 8006964:	f000 f9fc 	bl	8006d60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800696c:	e086      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800696e:	4b48      	ldr	r3, [pc, #288]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006976:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800697e:	4b45      	ldr	r3, [pc, #276]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006982:	e07b      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800698a:	d102      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800698c:	4b42      	ldr	r3, [pc, #264]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800698e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006990:	e074      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006998:	d102      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800699a:	4b3b      	ldr	r3, [pc, #236]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800699e:	e06d      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069a4:	e06a      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069aa:	bf00      	nop
 80069ac:	e066      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b4:	d11f      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80069b6:	4b36      	ldr	r3, [pc, #216]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80069b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069be:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80069c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ca:	d008      	beq.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80069cc:	e00f      	b.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fb10 	bl	8006ff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069dc:	e04e      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069de:	f107 0318 	add.w	r3, r7, #24
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 f870 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069ec:	e046      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069f2:	bf00      	nop
 80069f4:	e042      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069fc:	d13c      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80069fe:	4b24      	ldr	r3, [pc, #144]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a02:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006a06:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a0e:	d01e      	beq.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8006a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a14:	d805      	bhi.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00d      	beq.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a1e:	d00e      	beq.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8006a20:	e026      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8006a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a26:	d01d      	beq.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8006a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a2c:	d01d      	beq.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006a2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a32:	d014      	beq.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006a34:	e01c      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a36:	f000 f831 	bl	8006a9c <HAL_RCCEx_GetD3PCLK1Freq>
 8006a3a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006a3c:	e01e      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a3e:	f107 0318 	add.w	r3, r7, #24
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f840 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a4c:	e016      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a4e:	f107 030c 	add.w	r3, r7, #12
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 f984 	bl	8006d60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a5c:	e00e      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a62:	e00b      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8006a64:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006a66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a68:	e008      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8006a6a:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a6e:	e005      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a74:	bf00      	nop
 8006a76:	e001      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3740      	adds	r7, #64	; 0x40
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	017d7840 	.word	0x017d7840
 8006a8c:	00bb8000 	.word	0x00bb8000
 8006a90:	58024400 	.word	0x58024400
 8006a94:	03d09000 	.word	0x03d09000
 8006a98:	003d0900 	.word	0x003d0900

08006a9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006aa0:	f7fe fe76 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 8006aa4:	4601      	mov	r1, r0
 8006aa6:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	091b      	lsrs	r3, r3, #4
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	4a04      	ldr	r2, [pc, #16]	; (8006ac4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ab2:	5cd3      	ldrb	r3, [r2, r3]
 8006ab4:	f003 031f 	and.w	r3, r3, #31
 8006ab8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	58024400 	.word	0x58024400
 8006ac4:	0800fcd0 	.word	0x0800fcd0

08006ac8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b089      	sub	sp, #36	; 0x24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ad0:	4b9d      	ldr	r3, [pc, #628]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad4:	f003 0303 	and.w	r3, r3, #3
 8006ad8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006ada:	4b9b      	ldr	r3, [pc, #620]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	0b1b      	lsrs	r3, r3, #12
 8006ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ae4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ae6:	4b98      	ldr	r3, [pc, #608]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	091b      	lsrs	r3, r3, #4
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006af2:	4b95      	ldr	r3, [pc, #596]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	08db      	lsrs	r3, r3, #3
 8006af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	fb02 f303 	mul.w	r3, r2, r3
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 810a 	beq.w	8006d2a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d05a      	beq.n	8006bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d302      	bcc.n	8006b26 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d078      	beq.n	8006c16 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006b24:	e099      	b.n	8006c5a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b26:	4b88      	ldr	r3, [pc, #544]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d02d      	beq.n	8006b8e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b32:	4b85      	ldr	r3, [pc, #532]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	08db      	lsrs	r3, r3, #3
 8006b38:	f003 0303 	and.w	r3, r3, #3
 8006b3c:	4a83      	ldr	r2, [pc, #524]	; (8006d4c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b42:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	ee07 3a90 	vmov	s15, r3
 8006b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5c:	4b7a      	ldr	r3, [pc, #488]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b64:	ee07 3a90 	vmov	s15, r3
 8006b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b70:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006b74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b88:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b8c:	e087      	b.n	8006c9e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	ee07 3a90 	vmov	s15, r3
 8006b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b98:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006d54 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006b9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba0:	4b69      	ldr	r3, [pc, #420]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba8:	ee07 3a90 	vmov	s15, r3
 8006bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bb4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006bb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bd0:	e065      	b.n	8006c9e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	ee07 3a90 	vmov	s15, r3
 8006bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bdc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006be0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be4:	4b58      	ldr	r3, [pc, #352]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bec:	ee07 3a90 	vmov	s15, r3
 8006bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006bfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c14:	e043      	b.n	8006c9e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	ee07 3a90 	vmov	s15, r3
 8006c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c28:	4b47      	ldr	r3, [pc, #284]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c30:	ee07 3a90 	vmov	s15, r3
 8006c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c38:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c3c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c58:	e021      	b.n	8006c9e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	ee07 3a90 	vmov	s15, r3
 8006c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c64:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006c68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6c:	4b36      	ldr	r3, [pc, #216]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c74:	ee07 3a90 	vmov	s15, r3
 8006c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c80:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006c84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c9c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006c9e:	4b2a      	ldr	r3, [pc, #168]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	0a5b      	lsrs	r3, r3, #9
 8006ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ca8:	ee07 3a90 	vmov	s15, r3
 8006cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cc4:	ee17 2a90 	vmov	r2, s15
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006ccc:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	0c1b      	lsrs	r3, r3, #16
 8006cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ce6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf2:	ee17 2a90 	vmov	r2, s15
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006cfa:	4b13      	ldr	r3, [pc, #76]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	0e1b      	lsrs	r3, r3, #24
 8006d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d04:	ee07 3a90 	vmov	s15, r3
 8006d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d14:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d20:	ee17 2a90 	vmov	r2, s15
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d28:	e008      	b.n	8006d3c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	609a      	str	r2, [r3, #8]
}
 8006d3c:	bf00      	nop
 8006d3e:	3724      	adds	r7, #36	; 0x24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	58024400 	.word	0x58024400
 8006d4c:	03d09000 	.word	0x03d09000
 8006d50:	46000000 	.word	0x46000000
 8006d54:	4c742400 	.word	0x4c742400
 8006d58:	4a742400 	.word	0x4a742400
 8006d5c:	4bbebc20 	.word	0x4bbebc20

08006d60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b089      	sub	sp, #36	; 0x24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d68:	4b9d      	ldr	r3, [pc, #628]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6c:	f003 0303 	and.w	r3, r3, #3
 8006d70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006d72:	4b9b      	ldr	r3, [pc, #620]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	0d1b      	lsrs	r3, r3, #20
 8006d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d7e:	4b98      	ldr	r3, [pc, #608]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006d8a:	4b95      	ldr	r3, [pc, #596]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8e:	08db      	lsrs	r3, r3, #3
 8006d90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	fb02 f303 	mul.w	r3, r2, r3
 8006d9a:	ee07 3a90 	vmov	s15, r3
 8006d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 810a 	beq.w	8006fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d05a      	beq.n	8006e6a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d302      	bcc.n	8006dbe <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d078      	beq.n	8006eae <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006dbc:	e099      	b.n	8006ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dbe:	4b88      	ldr	r3, [pc, #544]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d02d      	beq.n	8006e26 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dca:	4b85      	ldr	r3, [pc, #532]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	08db      	lsrs	r3, r3, #3
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	4a83      	ldr	r2, [pc, #524]	; (8006fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dda:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	ee07 3a90 	vmov	s15, r3
 8006dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df4:	4b7a      	ldr	r3, [pc, #488]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfc:	ee07 3a90 	vmov	s15, r3
 8006e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e08:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e20:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e24:	e087      	b.n	8006f36 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	ee07 3a90 	vmov	s15, r3
 8006e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e30:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006fec <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e38:	4b69      	ldr	r3, [pc, #420]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e4c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e68:	e065      	b.n	8006f36 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	ee07 3a90 	vmov	s15, r3
 8006e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e74:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7c:	4b58      	ldr	r3, [pc, #352]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e84:	ee07 3a90 	vmov	s15, r3
 8006e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e90:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006eac:	e043      	b.n	8006f36 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	ee07 3a90 	vmov	s15, r3
 8006eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec0:	4b47      	ldr	r3, [pc, #284]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec8:	ee07 3a90 	vmov	s15, r3
 8006ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ed4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ef0:	e021      	b.n	8006f36 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	ee07 3a90 	vmov	s15, r3
 8006ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f04:	4b36      	ldr	r3, [pc, #216]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0c:	ee07 3a90 	vmov	s15, r3
 8006f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f14:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f18:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f34:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006f36:	4b2a      	ldr	r3, [pc, #168]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	0a5b      	lsrs	r3, r3, #9
 8006f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f5c:	ee17 2a90 	vmov	r2, s15
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006f64:	4b1e      	ldr	r3, [pc, #120]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f8a:	ee17 2a90 	vmov	r2, s15
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006f92:	4b13      	ldr	r3, [pc, #76]	; (8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	0e1b      	lsrs	r3, r3, #24
 8006f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fb8:	ee17 2a90 	vmov	r2, s15
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	609a      	str	r2, [r3, #8]
}
 8006fd4:	bf00      	nop
 8006fd6:	3724      	adds	r7, #36	; 0x24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	58024400 	.word	0x58024400
 8006fe4:	03d09000 	.word	0x03d09000
 8006fe8:	46000000 	.word	0x46000000
 8006fec:	4c742400 	.word	0x4c742400
 8006ff0:	4a742400 	.word	0x4a742400
 8006ff4:	4bbebc20 	.word	0x4bbebc20

08006ff8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b089      	sub	sp, #36	; 0x24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007000:	4b9d      	ldr	r3, [pc, #628]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800700a:	4b9b      	ldr	r3, [pc, #620]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	091b      	lsrs	r3, r3, #4
 8007010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007014:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007016:	4b98      	ldr	r3, [pc, #608]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007020:	4b95      	ldr	r3, [pc, #596]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007024:	08db      	lsrs	r3, r3, #3
 8007026:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	fb02 f303 	mul.w	r3, r2, r3
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007038:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 810a 	beq.w	8007258 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d05a      	beq.n	8007100 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800704a:	2b01      	cmp	r3, #1
 800704c:	d302      	bcc.n	8007054 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800704e:	2b02      	cmp	r3, #2
 8007050:	d078      	beq.n	8007144 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007052:	e099      	b.n	8007188 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007054:	4b88      	ldr	r3, [pc, #544]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0320 	and.w	r3, r3, #32
 800705c:	2b00      	cmp	r3, #0
 800705e:	d02d      	beq.n	80070bc <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007060:	4b85      	ldr	r3, [pc, #532]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	08db      	lsrs	r3, r3, #3
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	4a84      	ldr	r2, [pc, #528]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
 8007070:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	ee07 3a90 	vmov	s15, r3
 8007078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708a:	4b7b      	ldr	r3, [pc, #492]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709a:	ed97 6a03 	vldr	s12, [r7, #12]
 800709e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80070a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070ba:	e087      	b.n	80071cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80070ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ce:	4b6a      	ldr	r3, [pc, #424]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80070d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070de:	ed97 6a03 	vldr	s12, [r7, #12]
 80070e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80070e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070fe:	e065      	b.n	80071cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007288 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800710e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007112:	4b59      	ldr	r3, [pc, #356]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007122:	ed97 6a03 	vldr	s12, [r7, #12]
 8007126:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800712a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007142:	e043      	b.n	80071cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800728c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007156:	4b48      	ldr	r3, [pc, #288]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007166:	ed97 6a03 	vldr	s12, [r7, #12]
 800716a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800716e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007182:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007186:	e021      	b.n	80071cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007192:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007288 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719a:	4b37      	ldr	r3, [pc, #220]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80071b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071ca:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80071cc:	4b2a      	ldr	r3, [pc, #168]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80071ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d0:	0a5b      	lsrs	r3, r3, #9
 80071d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f2:	ee17 2a90 	vmov	r2, s15
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80071fa:	4b1f      	ldr	r3, [pc, #124]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	0c1b      	lsrs	r3, r3, #16
 8007200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007204:	ee07 3a90 	vmov	s15, r3
 8007208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007210:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007214:	edd7 6a07 	vldr	s13, [r7, #28]
 8007218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800721c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007220:	ee17 2a90 	vmov	r2, s15
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007228:	4b13      	ldr	r3, [pc, #76]	; (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800722a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722c:	0e1b      	lsrs	r3, r3, #24
 800722e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800723e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007242:	edd7 6a07 	vldr	s13, [r7, #28]
 8007246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800724a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800724e:	ee17 2a90 	vmov	r2, s15
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007256:	e008      	b.n	800726a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	609a      	str	r2, [r3, #8]
}
 800726a:	bf00      	nop
 800726c:	3724      	adds	r7, #36	; 0x24
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	58024400 	.word	0x58024400
 800727c:	03d09000 	.word	0x03d09000
 8007280:	46000000 	.word	0x46000000
 8007284:	4c742400 	.word	0x4c742400
 8007288:	4a742400 	.word	0x4a742400
 800728c:	4bbebc20 	.word	0x4bbebc20

08007290 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800729e:	4b53      	ldr	r3, [pc, #332]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	f003 0303 	and.w	r3, r3, #3
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d101      	bne.n	80072ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e099      	b.n	80073e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80072ae:	4b4f      	ldr	r3, [pc, #316]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a4e      	ldr	r2, [pc, #312]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 80072b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ba:	f7f9 f893 	bl	80003e4 <HAL_GetTick>
 80072be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072c0:	e008      	b.n	80072d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80072c2:	f7f9 f88f 	bl	80003e4 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d901      	bls.n	80072d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e086      	b.n	80073e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072d4:	4b45      	ldr	r3, [pc, #276]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1f0      	bne.n	80072c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80072e0:	4b42      	ldr	r3, [pc, #264]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 80072e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	031b      	lsls	r3, r3, #12
 80072ee:	493f      	ldr	r1, [pc, #252]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	628b      	str	r3, [r1, #40]	; 0x28
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	3b01      	subs	r3, #1
 8007304:	025b      	lsls	r3, r3, #9
 8007306:	b29b      	uxth	r3, r3
 8007308:	431a      	orrs	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	3b01      	subs	r3, #1
 8007310:	041b      	lsls	r3, r3, #16
 8007312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	3b01      	subs	r3, #1
 800731e:	061b      	lsls	r3, r3, #24
 8007320:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007324:	4931      	ldr	r1, [pc, #196]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 8007326:	4313      	orrs	r3, r2
 8007328:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800732a:	4b30      	ldr	r3, [pc, #192]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	492d      	ldr	r1, [pc, #180]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 8007338:	4313      	orrs	r3, r2
 800733a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800733c:	4b2b      	ldr	r3, [pc, #172]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	f023 0220 	bic.w	r2, r3, #32
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	4928      	ldr	r1, [pc, #160]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 800734a:	4313      	orrs	r3, r2
 800734c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800734e:	4b27      	ldr	r3, [pc, #156]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	4a26      	ldr	r2, [pc, #152]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 8007354:	f023 0310 	bic.w	r3, r3, #16
 8007358:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800735a:	4b24      	ldr	r3, [pc, #144]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 800735c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <RCCEx_PLL2_Config+0x160>)
 8007360:	4013      	ands	r3, r2
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	69d2      	ldr	r2, [r2, #28]
 8007366:	00d2      	lsls	r2, r2, #3
 8007368:	4920      	ldr	r1, [pc, #128]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 800736a:	4313      	orrs	r3, r2
 800736c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800736e:	4b1f      	ldr	r3, [pc, #124]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 8007370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007372:	4a1e      	ldr	r2, [pc, #120]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 8007374:	f043 0310 	orr.w	r3, r3, #16
 8007378:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d106      	bne.n	800738e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007380:	4b1a      	ldr	r3, [pc, #104]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	4a19      	ldr	r2, [pc, #100]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 8007386:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800738a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800738c:	e00f      	b.n	80073ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d106      	bne.n	80073a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007394:	4b15      	ldr	r3, [pc, #84]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	4a14      	ldr	r2, [pc, #80]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 800739a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800739e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073a0:	e005      	b.n	80073ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80073a2:	4b12      	ldr	r3, [pc, #72]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 80073a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a6:	4a11      	ldr	r2, [pc, #68]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 80073a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80073ae:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a0e      	ldr	r2, [pc, #56]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 80073b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ba:	f7f9 f813 	bl	80003e4 <HAL_GetTick>
 80073be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073c0:	e008      	b.n	80073d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073c2:	f7f9 f80f 	bl	80003e4 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d901      	bls.n	80073d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e006      	b.n	80073e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073d4:	4b05      	ldr	r3, [pc, #20]	; (80073ec <RCCEx_PLL2_Config+0x15c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0f0      	beq.n	80073c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	58024400 	.word	0x58024400
 80073f0:	ffff0007 	.word	0xffff0007

080073f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007402:	4b53      	ldr	r3, [pc, #332]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 8007404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	2b03      	cmp	r3, #3
 800740c:	d101      	bne.n	8007412 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e099      	b.n	8007546 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007412:	4b4f      	ldr	r3, [pc, #316]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a4e      	ldr	r2, [pc, #312]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 8007418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800741c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800741e:	f7f8 ffe1 	bl	80003e4 <HAL_GetTick>
 8007422:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007424:	e008      	b.n	8007438 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007426:	f7f8 ffdd 	bl	80003e4 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b02      	cmp	r3, #2
 8007432:	d901      	bls.n	8007438 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e086      	b.n	8007546 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007438:	4b45      	ldr	r3, [pc, #276]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1f0      	bne.n	8007426 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007444:	4b42      	ldr	r3, [pc, #264]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	051b      	lsls	r3, r3, #20
 8007452:	493f      	ldr	r1, [pc, #252]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 8007454:	4313      	orrs	r3, r2
 8007456:	628b      	str	r3, [r1, #40]	; 0x28
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	3b01      	subs	r3, #1
 800745e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	3b01      	subs	r3, #1
 8007468:	025b      	lsls	r3, r3, #9
 800746a:	b29b      	uxth	r3, r3
 800746c:	431a      	orrs	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	3b01      	subs	r3, #1
 8007474:	041b      	lsls	r3, r3, #16
 8007476:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	3b01      	subs	r3, #1
 8007482:	061b      	lsls	r3, r3, #24
 8007484:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007488:	4931      	ldr	r1, [pc, #196]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 800748a:	4313      	orrs	r3, r2
 800748c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800748e:	4b30      	ldr	r3, [pc, #192]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 8007490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007492:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	492d      	ldr	r1, [pc, #180]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 800749c:	4313      	orrs	r3, r2
 800749e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80074a0:	4b2b      	ldr	r3, [pc, #172]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	4928      	ldr	r1, [pc, #160]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074b2:	4b27      	ldr	r3, [pc, #156]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 80074b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b6:	4a26      	ldr	r2, [pc, #152]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 80074b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074be:	4b24      	ldr	r3, [pc, #144]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 80074c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074c2:	4b24      	ldr	r3, [pc, #144]	; (8007554 <RCCEx_PLL3_Config+0x160>)
 80074c4:	4013      	ands	r3, r2
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	69d2      	ldr	r2, [r2, #28]
 80074ca:	00d2      	lsls	r2, r2, #3
 80074cc:	4920      	ldr	r1, [pc, #128]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80074d2:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 80074d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d106      	bne.n	80074f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80074e4:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	4a19      	ldr	r2, [pc, #100]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 80074ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074f0:	e00f      	b.n	8007512 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d106      	bne.n	8007506 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80074f8:	4b15      	ldr	r3, [pc, #84]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	4a14      	ldr	r2, [pc, #80]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 80074fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007502:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007504:	e005      	b.n	8007512 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007506:	4b12      	ldr	r3, [pc, #72]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	4a11      	ldr	r2, [pc, #68]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 800750c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007510:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007512:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a0e      	ldr	r2, [pc, #56]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 8007518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800751c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751e:	f7f8 ff61 	bl	80003e4 <HAL_GetTick>
 8007522:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007524:	e008      	b.n	8007538 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007526:	f7f8 ff5d 	bl	80003e4 <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b02      	cmp	r3, #2
 8007532:	d901      	bls.n	8007538 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e006      	b.n	8007546 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007538:	4b05      	ldr	r3, [pc, #20]	; (8007550 <RCCEx_PLL3_Config+0x15c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0f0      	beq.n	8007526 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	58024400 	.word	0x58024400
 8007554:	ffff0007 	.word	0xffff0007

08007558 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e04d      	b.n	8007606 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	7a5b      	ldrb	r3, [r3, #9]
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d105      	bne.n	8007580 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f005 fd1e 	bl	800cfbc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f023 0120 	bic.w	r1, r3, #32
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0204 	orr.w	r2, r2, #4
 80075aa:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b6:	2b40      	cmp	r3, #64	; 0x40
 80075b8:	d104      	bne.n	80075c4 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2204      	movs	r2, #4
 80075be:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e020      	b.n	8007606 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80075c4:	f7f8 ff0e 	bl	80003e4 <HAL_GetTick>
 80075c8:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80075ca:	e00e      	b.n	80075ea <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80075cc:	f7f8 ff0a 	bl	80003e4 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d907      	bls.n	80075ea <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2204      	movs	r2, #4
 80075de:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e00d      	b.n	8007606 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d0e9      	beq.n	80075cc <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	7a1b      	ldrb	r3, [r3, #8]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d101      	bne.n	8007628 <HAL_RNG_GenerateRandomNumber+0x1a>
 8007624:	2302      	movs	r3, #2
 8007626:	e03d      	b.n	80076a4 <HAL_RNG_GenerateRandomNumber+0x96>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	7a5b      	ldrb	r3, [r3, #9]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b01      	cmp	r3, #1
 8007636:	d12c      	bne.n	8007692 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 800763e:	f7f8 fed1 	bl	80003e4 <HAL_GetTick>
 8007642:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007644:	e011      	b.n	800766a <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007646:	f7f8 fecd 	bl	80003e4 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	2b02      	cmp	r3, #2
 8007652:	d90a      	bls.n	800766a <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2202      	movs	r2, #2
 800765e:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e01c      	b.n	80076a4 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b01      	cmp	r3, #1
 8007676:	d1e6      	bne.n	8007646 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	725a      	strb	r2, [r3, #9]
 8007690:	e004      	b.n	800769c <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2204      	movs	r2, #4
 8007696:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	721a      	strb	r2, [r3, #8]

  return status;
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b04      	cmp	r3, #4
 80076be:	d81f      	bhi.n	8007700 <HAL_SAI_InitProtocol+0x54>
 80076c0:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <HAL_SAI_InitProtocol+0x1c>)
 80076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	080076dd 	.word	0x080076dd
 80076cc:	080076dd 	.word	0x080076dd
 80076d0:	080076dd 	.word	0x080076dd
 80076d4:	080076ef 	.word	0x080076ef
 80076d8:	080076ef 	.word	0x080076ef
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	68b9      	ldr	r1, [r7, #8]
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 fbea 	bl	8007ebc <SAI_InitI2S>
 80076e8:	4603      	mov	r3, r0
 80076ea:	75fb      	strb	r3, [r7, #23]
      break;
 80076ec:	e00b      	b.n	8007706 <HAL_SAI_InitProtocol+0x5a>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 fc93 	bl	8008020 <SAI_InitPCM>
 80076fa:	4603      	mov	r3, r0
 80076fc:	75fb      	strb	r3, [r7, #23]
      break;
 80076fe:	e002      	b.n	8007706 <HAL_SAI_InitProtocol+0x5a>
    default :
      status = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	bf00      	nop
  }

  if (status == HAL_OK)
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d104      	bne.n	8007716 <HAL_SAI_InitProtocol+0x6a>
  {
    status = HAL_SAI_Init(hsai);
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f807 	bl	8007720 <HAL_SAI_Init>
 8007712:	4603      	mov	r3, r0
 8007714:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007716:	7dfb      	ldrb	r3, [r7, #23]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	; 0x28
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e268      	b.n	8007c04 <HAL_SAI_Init+0x4e4>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007732:	f7f8 fe85 	bl	8000440 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800773c:	2b01      	cmp	r3, #1
 800773e:	d113      	bne.n	8007768 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a8b      	ldr	r2, [pc, #556]	; (8007974 <HAL_SAI_Init+0x254>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d004      	beq.n	8007754 <HAL_SAI_Init+0x34>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a8a      	ldr	r2, [pc, #552]	; (8007978 <HAL_SAI_Init+0x258>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d107      	bne.n	8007764 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007758:	2b01      	cmp	r3, #1
 800775a:	d103      	bne.n	8007764 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e24d      	b.n	8007c04 <HAL_SAI_Init+0x4e4>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a81      	ldr	r2, [pc, #516]	; (8007974 <HAL_SAI_Init+0x254>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d004      	beq.n	800777c <HAL_SAI_Init+0x5c>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a81      	ldr	r2, [pc, #516]	; (800797c <HAL_SAI_Init+0x25c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d102      	bne.n	8007782 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800777c:	4b80      	ldr	r3, [pc, #512]	; (8007980 <HAL_SAI_Init+0x260>)
 800777e:	61bb      	str	r3, [r7, #24]
 8007780:	e028      	b.n	80077d4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a7f      	ldr	r2, [pc, #508]	; (8007984 <HAL_SAI_Init+0x264>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d004      	beq.n	8007796 <HAL_SAI_Init+0x76>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a7d      	ldr	r2, [pc, #500]	; (8007988 <HAL_SAI_Init+0x268>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d102      	bne.n	800779c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007796:	4b7d      	ldr	r3, [pc, #500]	; (800798c <HAL_SAI_Init+0x26c>)
 8007798:	61bb      	str	r3, [r7, #24]
 800779a:	e01b      	b.n	80077d4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a7b      	ldr	r2, [pc, #492]	; (8007990 <HAL_SAI_Init+0x270>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d004      	beq.n	80077b0 <HAL_SAI_Init+0x90>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a7a      	ldr	r2, [pc, #488]	; (8007994 <HAL_SAI_Init+0x274>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d102      	bne.n	80077b6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 80077b0:	4b79      	ldr	r3, [pc, #484]	; (8007998 <HAL_SAI_Init+0x278>)
 80077b2:	61bb      	str	r3, [r7, #24]
 80077b4:	e00e      	b.n	80077d4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a6f      	ldr	r2, [pc, #444]	; (8007978 <HAL_SAI_Init+0x258>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d004      	beq.n	80077ca <HAL_SAI_Init+0xaa>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a75      	ldr	r2, [pc, #468]	; (800799c <HAL_SAI_Init+0x27c>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d102      	bne.n	80077d0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 80077ca:	4b75      	ldr	r3, [pc, #468]	; (80079a0 <HAL_SAI_Init+0x280>)
 80077cc:	61bb      	str	r3, [r7, #24]
 80077ce:	e001      	b.n	80077d4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e217      	b.n	8007c04 <HAL_SAI_Init+0x4e4>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d106      	bne.n	80077ee <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f005 fc69 	bl	800d0c0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fcd0 	bl	8008194 <SAI_Disable>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e202      	b.n	8007c04 <HAL_SAI_Init+0x4e4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d007      	beq.n	800781e <HAL_SAI_Init+0xfe>
 800780e:	2b01      	cmp	r3, #1
 8007810:	d302      	bcc.n	8007818 <HAL_SAI_Init+0xf8>
 8007812:	2b02      	cmp	r3, #2
 8007814:	d006      	beq.n	8007824 <HAL_SAI_Init+0x104>
 8007816:	e008      	b.n	800782a <HAL_SAI_Init+0x10a>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800781c:	e008      	b.n	8007830 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800781e:	2310      	movs	r3, #16
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007822:	e005      	b.n	8007830 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007824:	2320      	movs	r3, #32
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007828:	e002      	b.n	8007830 <HAL_SAI_Init+0x110>
    default:
      tmpregisterGCR = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800782e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	2b05      	cmp	r3, #5
 8007836:	d832      	bhi.n	800789e <HAL_SAI_Init+0x17e>
 8007838:	a201      	add	r2, pc, #4	; (adr r2, 8007840 <HAL_SAI_Init+0x120>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	08007859 	.word	0x08007859
 8007844:	0800785f 	.word	0x0800785f
 8007848:	08007867 	.word	0x08007867
 800784c:	0800786f 	.word	0x0800786f
 8007850:	0800787f 	.word	0x0800787f
 8007854:	0800788f 	.word	0x0800788f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	61fb      	str	r3, [r7, #28]
      break;
 800785c:	e022      	b.n	80078a4 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800785e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007862:	61fb      	str	r3, [r7, #28]
      break;
 8007864:	e01e      	b.n	80078a4 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800786a:	61fb      	str	r3, [r7, #28]
      break;
 800786c:	e01a      	b.n	80078a4 <HAL_SAI_Init+0x184>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800786e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007872:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800787c:	e012      	b.n	80078a4 <HAL_SAI_Init+0x184>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800787e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007882:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	f043 0302 	orr.w	r3, r3, #2
 800788a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800788c:	e00a      	b.n	80078a4 <HAL_SAI_Init+0x184>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800788e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007892:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	f043 0303 	orr.w	r3, r3, #3
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800789c:	e002      	b.n	80078a4 <HAL_SAI_Init+0x184>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	61fb      	str	r3, [r7, #28]
      break;
 80078a2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 80a1 	beq.w	80079f6 <HAL_SAI_Init+0x2d6>
  {
    uint32_t freq = 0;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a2d      	ldr	r2, [pc, #180]	; (8007974 <HAL_SAI_Init+0x254>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d004      	beq.n	80078cc <HAL_SAI_Init+0x1ac>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a2d      	ldr	r2, [pc, #180]	; (800797c <HAL_SAI_Init+0x25c>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d104      	bne.n	80078d6 <HAL_SAI_Init+0x1b6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80078cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80078d0:	f7fe fe6c 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 80078d4:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a2a      	ldr	r2, [pc, #168]	; (8007984 <HAL_SAI_Init+0x264>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d004      	beq.n	80078ea <HAL_SAI_Init+0x1ca>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a28      	ldr	r2, [pc, #160]	; (8007988 <HAL_SAI_Init+0x268>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d104      	bne.n	80078f4 <HAL_SAI_Init+0x1d4>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80078ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80078ee:	f7fe fe5d 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 80078f2:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a25      	ldr	r2, [pc, #148]	; (8007990 <HAL_SAI_Init+0x270>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d004      	beq.n	8007908 <HAL_SAI_Init+0x1e8>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a24      	ldr	r2, [pc, #144]	; (8007994 <HAL_SAI_Init+0x274>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d104      	bne.n	8007912 <HAL_SAI_Init+0x1f2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8007908:	f44f 7000 	mov.w	r0, #512	; 0x200
 800790c:	f7fe fe4e 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007910:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a18      	ldr	r2, [pc, #96]	; (8007978 <HAL_SAI_Init+0x258>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d104      	bne.n	8007926 <HAL_SAI_Init+0x206>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800791c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007920:	f7fe fe44 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007924:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a1c      	ldr	r2, [pc, #112]	; (800799c <HAL_SAI_Init+0x27c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d104      	bne.n	800793a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007930:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007934:	f7fe fe3a 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007938:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007942:	d10f      	bne.n	8007964 <HAL_SAI_Init+0x244>
    {
      /* NODIV = 1 */
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	4619      	mov	r1, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007958:	fb02 f303 	mul.w	r3, r2, r3
 800795c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	e030      	b.n	80079c6 <HAL_SAI_Init+0x2a6>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800796c:	d11a      	bne.n	80079a4 <HAL_SAI_Init+0x284>
 800796e:	2302      	movs	r3, #2
 8007970:	e019      	b.n	80079a6 <HAL_SAI_Init+0x286>
 8007972:	bf00      	nop
 8007974:	40015804 	.word	0x40015804
 8007978:	58005404 	.word	0x58005404
 800797c:	40015824 	.word	0x40015824
 8007980:	40015800 	.word	0x40015800
 8007984:	40015c04 	.word	0x40015c04
 8007988:	40015c24 	.word	0x40015c24
 800798c:	40015c00 	.word	0x40015c00
 8007990:	40016004 	.word	0x40016004
 8007994:	40016024 	.word	0x40016024
 8007998:	40016000 	.word	0x40016000
 800799c:	58005424 	.word	0x58005424
 80079a0:	58005400 	.word	0x58005400
 80079a4:	2301      	movs	r3, #1
 80079a6:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	4619      	mov	r1, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	fb02 f303 	mul.w	r3, r2, r3
 80079be:	021b      	lsls	r3, r3, #8
 80079c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80079c4:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	4a90      	ldr	r2, [pc, #576]	; (8007c0c <HAL_SAI_Init+0x4ec>)
 80079ca:	fba2 2303 	umull	r2, r3, r2, r3
 80079ce:	08da      	lsrs	r2, r3, #3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80079d4:	6939      	ldr	r1, [r7, #16]
 80079d6:	4b8d      	ldr	r3, [pc, #564]	; (8007c0c <HAL_SAI_Init+0x4ec>)
 80079d8:	fba3 2301 	umull	r2, r3, r3, r1
 80079dc:	08da      	lsrs	r2, r3, #3
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	1aca      	subs	r2, r1, r3
 80079e8:	2a08      	cmp	r2, #8
 80079ea:	d904      	bls.n	80079f6 <HAL_SAI_Init+0x2d6>
    {
      hsai->Init.Mckdiv += 1U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <HAL_SAI_Init+0x2e6>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d109      	bne.n	8007a1a <HAL_SAI_Init+0x2fa>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d101      	bne.n	8007a12 <HAL_SAI_Init+0x2f2>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e001      	b.n	8007a16 <HAL_SAI_Init+0x2f6>
 8007a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a16:	623b      	str	r3, [r7, #32]
 8007a18:	e008      	b.n	8007a2c <HAL_SAI_Init+0x30c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d102      	bne.n	8007a28 <HAL_SAI_Init+0x308>
 8007a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a26:	e000      	b.n	8007a2a <HAL_SAI_Init+0x30a>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007a2c:	f7f8 fd08 	bl	8000440 <HAL_GetREVID>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a36:	d331      	bcc.n	8007a9c <HAL_SAI_Init+0x37c>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6819      	ldr	r1, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	4b73      	ldr	r3, [pc, #460]	; (8007c10 <HAL_SAI_Init+0x4f0>)
 8007a44:	400b      	ands	r3, r1
 8007a46:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6819      	ldr	r1, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a56:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a5c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a62:	431a      	orrs	r2, r3
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007a70:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a7c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a82:	051b      	lsls	r3, r3, #20
 8007a84:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a8a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	e02d      	b.n	8007af8 <HAL_SAI_Init+0x3d8>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6819      	ldr	r1, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4b5b      	ldr	r3, [pc, #364]	; (8007c14 <HAL_SAI_Init+0x4f4>)
 8007aa8:	400b      	ands	r3, r1
 8007aaa:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6819      	ldr	r1, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aba:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007ac0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007ad4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007ae0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	051b      	lsls	r3, r3, #20
 8007ae8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007aee:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6859      	ldr	r1, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	4b45      	ldr	r3, [pc, #276]	; (8007c18 <HAL_SAI_Init+0x4f8>)
 8007b04:	400b      	ands	r3, r1
 8007b06:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6859      	ldr	r1, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69da      	ldr	r2, [r3, #28]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6899      	ldr	r1, [r3, #8]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	4b3a      	ldr	r3, [pc, #232]	; (8007c1c <HAL_SAI_Init+0x4fc>)
 8007b32:	400b      	ands	r3, r1
 8007b34:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6899      	ldr	r1, [r3, #8]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b40:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b46:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8007b4c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007b52:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007b5c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68d9      	ldr	r1, [r3, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007b74:	400b      	ands	r3, r1
 8007b76:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68d9      	ldr	r1, [r3, #12]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b86:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b8c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b8e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b94:	3b01      	subs	r3, #1
 8007b96:	021b      	lsls	r3, r3, #8
 8007b98:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a1e      	ldr	r2, [pc, #120]	; (8007c20 <HAL_SAI_Init+0x500>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d004      	beq.n	8007bb6 <HAL_SAI_Init+0x496>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a1c      	ldr	r2, [pc, #112]	; (8007c24 <HAL_SAI_Init+0x504>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d119      	bne.n	8007bea <HAL_SAI_Init+0x4ca>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bba:	f023 0201 	bic.w	r2, r3, #1
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d10e      	bne.n	8007bea <HAL_SAI_Init+0x4ca>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be2:	f043 0201 	orr.w	r2, r3, #1
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3728      	adds	r7, #40	; 0x28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	cccccccd 	.word	0xcccccccd
 8007c10:	f005c010 	.word	0xf005c010
 8007c14:	f805c010 	.word	0xf805c010
 8007c18:	ffff1ff0 	.word	0xffff1ff0
 8007c1c:	fff88000 	.word	0xfff88000
 8007c20:	40015804 	.word	0x40015804
 8007c24:	58005404 	.word	0x58005404

08007c28 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4613      	mov	r3, r2
 8007c34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007c36:	f7f8 fbd5 	bl	80003e4 <HAL_GetTick>
 8007c3a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <HAL_SAI_Transmit_DMA+0x20>
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e098      	b.n	8007d7e <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	f040 8091 	bne.w	8007d7c <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d101      	bne.n	8007c68 <HAL_SAI_Transmit_DMA+0x40>
 8007c64:	2302      	movs	r3, #2
 8007c66:	e08a      	b.n	8007d7e <HAL_SAI_Transmit_DMA+0x156>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	88fa      	ldrh	r2, [r7, #6]
 8007c7a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	88fa      	ldrh	r2, [r7, #6]
 8007c82:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2212      	movs	r2, #18
 8007c92:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c9c:	4a3a      	ldr	r2, [pc, #232]	; (8007d88 <HAL_SAI_Transmit_DMA+0x160>)
 8007c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ca6:	4a39      	ldr	r2, [pc, #228]	; (8007d8c <HAL_SAI_Transmit_DMA+0x164>)
 8007ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cb0:	4a37      	ldr	r2, [pc, #220]	; (8007d90 <HAL_SAI_Transmit_DMA+0x168>)
 8007cb2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cba:	2200      	movs	r2, #0
 8007cbc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cc8:	4619      	mov	r1, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	331c      	adds	r3, #28
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007cd8:	f7fa f8e2 	bl	8001ea0 <HAL_DMA_Start_IT>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e047      	b.n	8007d7e <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007cee:	2100      	movs	r1, #0
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 fa17 	bl	8008124 <SAI_InterruptFlag>
 8007cf6:	4601      	mov	r1, r0
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007d14:	601a      	str	r2, [r3, #0]

    /* Wait untill FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007d16:	e015      	b.n	8007d44 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007d18:	f7f8 fb64 	bl	80003e4 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d26:	d90d      	bls.n	8007d44 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e01c      	b.n	8007d7e <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0e2      	beq.n	8007d18 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d107      	bne.n	8007d70 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d6e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	e000      	b.n	8007d7e <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8007d7c:	2302      	movs	r3, #2
  }
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	0800825d 	.word	0x0800825d
 8007d8c:	080081fd 	.word	0x080081fd
 8007d90:	080082f5 	.word	0x080082f5

08007d94 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <HAL_SAI_Receive_DMA+0x1a>
 8007da8:	88fb      	ldrh	r3, [r7, #6]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e079      	b.n	8007ea6 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d172      	bne.n	8007ea4 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d101      	bne.n	8007dcc <HAL_SAI_Receive_DMA+0x38>
 8007dc8:	2302      	movs	r3, #2
 8007dca:	e06c      	b.n	8007ea6 <HAL_SAI_Receive_DMA+0x112>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	88fa      	ldrh	r2, [r7, #6]
 8007dde:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	88fa      	ldrh	r2, [r7, #6]
 8007de6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2222      	movs	r2, #34	; 0x22
 8007df6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e00:	4a2b      	ldr	r2, [pc, #172]	; (8007eb0 <HAL_SAI_Receive_DMA+0x11c>)
 8007e02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e0a:	4a2a      	ldr	r2, [pc, #168]	; (8007eb4 <HAL_SAI_Receive_DMA+0x120>)
 8007e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e14:	4a28      	ldr	r2, [pc, #160]	; (8007eb8 <HAL_SAI_Receive_DMA+0x124>)
 8007e16:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e1e:	2200      	movs	r2, #0
 8007e20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	331c      	adds	r3, #28
 8007e2e:	4619      	mov	r1, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e34:	461a      	mov	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007e3c:	f7fa f830 	bl	8001ea0 <HAL_DMA_Start_IT>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d005      	beq.n	8007e52 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e029      	b.n	8007ea6 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007e52:	2100      	movs	r1, #0
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f965 	bl	8008124 <SAI_InterruptFlag>
 8007e5a:	4601      	mov	r1, r0
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007e78:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d107      	bne.n	8007e98 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007e96:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	e000      	b.n	8007ea6 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8007ea4:	2302      	movs	r3, #2
  }
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	080082d9 	.word	0x080082d9
 8007eb4:	08008279 	.word	0x08008279
 8007eb8:	080082f5 	.word	0x080082f5

08007ebc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <SAI_InitI2S+0x2e>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d103      	bne.n	8007ef2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	651a      	str	r2, [r3, #80]	; 0x50
 8007ef0:	e002      	b.n	8007ef8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007efe:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f06:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e077      	b.n	8008012 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d107      	bne.n	8007f38 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007f34:	665a      	str	r2, [r3, #100]	; 0x64
 8007f36:	e006      	b.n	8007f46 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f3e:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d84f      	bhi.n	8007fec <SAI_InitI2S+0x130>
 8007f4c:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <SAI_InitI2S+0x98>)
 8007f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f52:	bf00      	nop
 8007f54:	08007f65 	.word	0x08007f65
 8007f58:	08007f87 	.word	0x08007f87
 8007f5c:	08007fa9 	.word	0x08007fa9
 8007f60:	08007fcb 	.word	0x08007fcb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2280      	movs	r2, #128	; 0x80
 8007f68:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	085b      	lsrs	r3, r3, #1
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	085b      	lsrs	r3, r3, #1
 8007f78:	011a      	lsls	r2, r3, #4
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2240      	movs	r2, #64	; 0x40
 8007f82:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f84:	e035      	b.n	8007ff2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2280      	movs	r2, #128	; 0x80
 8007f8a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	019a      	lsls	r2, r3, #6
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	085b      	lsrs	r3, r3, #1
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2280      	movs	r2, #128	; 0x80
 8007fa4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007fa6:	e024      	b.n	8007ff2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	22c0      	movs	r2, #192	; 0xc0
 8007fac:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	085b      	lsrs	r3, r3, #1
 8007fb2:	019a      	lsls	r2, r3, #6
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	085b      	lsrs	r3, r3, #1
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2280      	movs	r2, #128	; 0x80
 8007fc6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007fc8:	e013      	b.n	8007ff2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	22e0      	movs	r2, #224	; 0xe0
 8007fce:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	085b      	lsrs	r3, r3, #1
 8007fd4:	019a      	lsls	r2, r3, #6
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	085b      	lsrs	r3, r3, #1
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2280      	movs	r2, #128	; 0x80
 8007fe8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007fea:	e002      	b.n	8007ff2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d10b      	bne.n	8008010 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d102      	bne.n	8008004 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2210      	movs	r2, #16
 8008002:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d102      	bne.n	8008010 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2208      	movs	r2, #8
 800800e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8008010:	7dfb      	ldrb	r3, [r7, #23]
}
 8008012:	4618      	mov	r0, r3
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop

08008020 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <SAI_InitPCM+0x2e>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d103      	bne.n	8008056 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	651a      	str	r2, [r3, #80]	; 0x50
 8008054:	e002      	b.n	800805c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008068:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008070:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008084:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2b04      	cmp	r3, #4
 800808a:	d103      	bne.n	8008094 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2201      	movs	r2, #1
 8008090:	659a      	str	r2, [r3, #88]	; 0x58
 8008092:	e002      	b.n	800809a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	220d      	movs	r2, #13
 8008098:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b03      	cmp	r3, #3
 800809e:	d837      	bhi.n	8008110 <SAI_InitPCM+0xf0>
 80080a0:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <SAI_InitPCM+0x88>)
 80080a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a6:	bf00      	nop
 80080a8:	080080b9 	.word	0x080080b9
 80080ac:	080080cf 	.word	0x080080cf
 80080b0:	080080e5 	.word	0x080080e5
 80080b4:	080080fb 	.word	0x080080fb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2280      	movs	r2, #128	; 0x80
 80080bc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	011a      	lsls	r2, r3, #4
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2240      	movs	r2, #64	; 0x40
 80080ca:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80080cc:	e023      	b.n	8008116 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2280      	movs	r2, #128	; 0x80
 80080d2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2280      	movs	r2, #128	; 0x80
 80080e0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80080e2:	e018      	b.n	8008116 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	22c0      	movs	r2, #192	; 0xc0
 80080e8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2280      	movs	r2, #128	; 0x80
 80080f6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80080f8:	e00d      	b.n	8008116 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	22e0      	movs	r2, #224	; 0xe0
 80080fe:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2280      	movs	r2, #128	; 0x80
 800810c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800810e:	e002      	b.n	8008116 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	75fb      	strb	r3, [r7, #23]
      break;
 8008114:	bf00      	nop
  }

  return status;
 8008116:	7dfb      	ldrb	r3, [r7, #23]
}
 8008118:	4618      	mov	r0, r3
 800811a:	371c      	adds	r7, #28
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008130:	2301      	movs	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008134:	78fb      	ldrb	r3, [r7, #3]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d103      	bne.n	8008142 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f043 0308 	orr.w	r3, r3, #8
 8008140:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008146:	2b08      	cmp	r3, #8
 8008148:	d10b      	bne.n	8008162 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800814e:	2b03      	cmp	r3, #3
 8008150:	d003      	beq.n	800815a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d103      	bne.n	8008162 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f043 0310 	orr.w	r3, r3, #16
 8008160:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	2b03      	cmp	r3, #3
 8008168:	d003      	beq.n	8008172 <SAI_InterruptFlag+0x4e>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	2b02      	cmp	r3, #2
 8008170:	d104      	bne.n	800817c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008178:	60fb      	str	r3, [r7, #12]
 800817a:	e003      	b.n	8008184 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f043 0304 	orr.w	r3, r3, #4
 8008182:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008184:	68fb      	ldr	r3, [r7, #12]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
	...

08008194 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008194:	b490      	push	{r4, r7}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800819c:	4b15      	ldr	r3, [pc, #84]	; (80081f4 <SAI_Disable+0x60>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a15      	ldr	r2, [pc, #84]	; (80081f8 <SAI_Disable+0x64>)
 80081a2:	fba2 2303 	umull	r2, r3, r2, r3
 80081a6:	0b1b      	lsrs	r3, r3, #12
 80081a8:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80081bc:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80081be:	2c00      	cmp	r4, #0
 80081c0:	d10a      	bne.n	80081d8 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	73fb      	strb	r3, [r7, #15]
      break;
 80081d6:	e007      	b.n	80081e8 <SAI_Disable+0x54>
    }
    count--;
 80081d8:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1ea      	bne.n	80081be <SAI_Disable+0x2a>

  return status;
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc90      	pop	{r4, r7}
 80081f2:	4770      	bx	lr
 80081f4:	20000010 	.word	0x20000010
 80081f8:	95cbec1b 	.word	0x95cbec1b

080081fc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008212:	d01c      	beq.n	800824e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800822a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800822c:	2100      	movs	r1, #0
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f7ff ff78 	bl	8008124 <SAI_InterruptFlag>
 8008234:	4603      	mov	r3, r0
 8008236:	43d9      	mvns	r1, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	691a      	ldr	r2, [r3, #16]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	400a      	ands	r2, r1
 8008244:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f003 ff6a 	bl	800c128 <HAL_SAI_TxCpltCallback>
#endif
}
 8008254:	bf00      	nop
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008268:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f003 ff66 	bl	800c13c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008284:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800828e:	d01c      	beq.n	80082ca <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800829e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80082a8:	2100      	movs	r1, #0
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f7ff ff3a 	bl	8008124 <SAI_InterruptFlag>
 80082b0:	4603      	mov	r3, r0
 80082b2:	43d9      	mvns	r1, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	691a      	ldr	r2, [r3, #16]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	400a      	ands	r2, r1
 80082c0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f003 ff40 	bl	800c150 <HAL_SAI_RxCpltCallback>
#endif
}
 80082d0:	bf00      	nop
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f003 ff3e 	bl	800c168 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80082ec:	bf00      	nop
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7fb f9a4 	bl	8003650 <HAL_DMA_GetError>
 8008308:	4603      	mov	r3, r0
 800830a:	2b02      	cmp	r3, #2
 800830c:	d01d      	beq.n	800834a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008314:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800832c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff ff30 	bl	8008194 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f003 fee5 	bl	800c114 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800834a:	bf00      	nop
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b08a      	sub	sp, #40	; 0x28
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e07c      	b.n	800845e <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10c      	bne.n	800838a <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d102      	bne.n	8008384 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2202      	movs	r2, #2
 8008382:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f005 f899 	bl	800d4bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2203      	movs	r2, #3
 800838e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f868 	bl	8008468 <HAL_SD_InitCard>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e05d      	b.n	800845e <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80083a2:	f107 0308 	add.w	r3, r7, #8
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 ff79 	bl	80092a0 <HAL_SD_GetCardStatus>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d001      	beq.n	80083b8 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e052      	b.n	800845e <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80083b8:	7e3b      	ldrb	r3, [r7, #24]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80083be:	7e7b      	ldrb	r3, [r7, #25]
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d10a      	bne.n	80083e2 <HAL_SD_Init+0x90>
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d102      	bne.n	80083d8 <HAL_SD_Init+0x86>
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d004      	beq.n	80083e2 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083de:	65da      	str	r2, [r3, #92]	; 0x5c
 80083e0:	e00b      	b.n	80083fa <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d104      	bne.n	80083f4 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80083f2:	e002      	b.n	80083fa <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f001 f82f 	bl	8009464 <HAL_SD_ConfigWideBusOperation>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e026      	b.n	800845e <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008410:	f7f7 ffe8 	bl	80003e4 <HAL_GetTick>
 8008414:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008416:	e011      	b.n	800843c <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008418:	f7f7 ffe4 	bl	80003e4 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008426:	d109      	bne.n	800843c <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800842e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e010      	b.n	800845e <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 f8bb 	bl	80095b8 <HAL_SD_GetCardState>
 8008442:	4603      	mov	r3, r0
 8008444:	2b04      	cmp	r3, #4
 8008446:	d1e7      	bne.n	8008418 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3728      	adds	r7, #40	; 0x28
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008468:	b5b0      	push	{r4, r5, r7, lr}
 800846a:	b08e      	sub	sp, #56	; 0x38
 800846c:	af04      	add	r7, sp, #16
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008470:	2300      	movs	r3, #0
 8008472:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008474:	2300      	movs	r3, #0
 8008476:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008478:	2300      	movs	r3, #0
 800847a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800847c:	2300      	movs	r3, #0
 800847e:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008480:	23fa      	movs	r3, #250	; 0xfa
 8008482:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	2b02      	cmp	r3, #2
 800848a:	d107      	bne.n	800849c <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0210 	orr.w	r2, r2, #16
 800849a:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681d      	ldr	r5, [r3, #0]
 80084a0:	466c      	mov	r4, sp
 80084a2:	f107 0314 	add.w	r3, r7, #20
 80084a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80084aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80084ae:	f107 0308 	add.w	r3, r7, #8
 80084b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084b4:	4628      	mov	r0, r5
 80084b6:	f002 faeb 	bl	800aa90 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f002 fb2e 	bl	800ab20 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 80084c4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80084c8:	f7fe f870 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 80084cc:	4602      	mov	r2, r0
 80084ce:	4b2d      	ldr	r3, [pc, #180]	; (8008584 <HAL_SD_InitCard+0x11c>)
 80084d0:	fba3 2302 	umull	r2, r3, r3, r2
 80084d4:	095b      	lsrs	r3, r3, #5
 80084d6:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d008      	beq.n	80084f0 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80084de:	4a2a      	ldr	r2, [pc, #168]	; (8008588 <HAL_SD_InitCard+0x120>)
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e6:	3301      	adds	r3, #1
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7f7 ff87 	bl	80003fc <HAL_Delay>
 80084ee:	e002      	b.n	80084f6 <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 80084f0:	2002      	movs	r0, #2
 80084f2:	f7f7 ff83 	bl	80003fc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f001 f93c 	bl	8009774 <SD_PowerON>
 80084fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00b      	beq.n	800851c <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	431a      	orrs	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e02e      	b.n	800857a <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 f86b 	bl	80095f8 <SD_InitCard>
 8008522:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00b      	beq.n	8008542 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	431a      	orrs	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e01b      	b.n	800857a <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800854a:	4618      	mov	r0, r3
 800854c:	f002 fb7e 	bl	800ac4c <SDMMC_CmdBlockLength>
 8008550:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00f      	beq.n	8008578 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a0b      	ldr	r2, [pc, #44]	; (800858c <HAL_SD_InitCard+0x124>)
 800855e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	431a      	orrs	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e000      	b.n	800857a <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3728      	adds	r7, #40	; 0x28
 800857e:	46bd      	mov	sp, r7
 8008580:	bdb0      	pop	{r4, r5, r7, pc}
 8008582:	bf00      	nop
 8008584:	10624dd3 	.word	0x10624dd3
 8008588:	00012110 	.word	0x00012110
 800858c:	1fe00fff 	.word	0x1fe00fff

08008590 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b092      	sub	sp, #72	; 0x48
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
 800859c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800859e:	f7f7 ff21 	bl	80003e4 <HAL_GetTick>
 80085a2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d107      	bne.n	80085c2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e167      	b.n	8008892 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	f040 815a 	bne.w	8008884 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	441a      	add	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d907      	bls.n	80085f4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e14e      	b.n	8008892 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2203      	movs	r2, #3
 80085f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2200      	movs	r2, #0
 8008602:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008608:	2b01      	cmp	r3, #1
 800860a:	d002      	beq.n	8008612 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	025b      	lsls	r3, r3, #9
 8008610:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008616:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	025b      	lsls	r3, r3, #9
 800861c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800861e:	2390      	movs	r3, #144	; 0x90
 8008620:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008622:	2302      	movs	r3, #2
 8008624:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008626:	2300      	movs	r3, #0
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800862a:	2300      	movs	r3, #0
 800862c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f107 0214 	add.w	r2, r7, #20
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f002 fadb 	bl	800abf4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800864c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d90a      	bls.n	800866a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2202      	movs	r2, #2
 8008658:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008660:	4618      	mov	r0, r3
 8008662:	f002 fb39 	bl	800acd8 <SDMMC_CmdReadMultiBlock>
 8008666:	6478      	str	r0, [r7, #68]	; 0x44
 8008668:	e009      	b.n	800867e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2201      	movs	r2, #1
 800866e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008676:	4618      	mov	r0, r3
 8008678:	f002 fb0b 	bl	800ac92 <SDMMC_CmdReadSingleBlock>
 800867c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800867e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008680:	2b00      	cmp	r3, #0
 8008682:	d012      	beq.n	80086aa <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a84      	ldr	r2, [pc, #528]	; (800889c <HAL_SD_ReadBlocks+0x30c>)
 800868a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008692:	431a      	orrs	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e0f3      	b.n	8008892 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80086ae:	e058      	b.n	8008762 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d033      	beq.n	8008726 <HAL_SD_ReadBlocks+0x196>
 80086be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c0:	2b1f      	cmp	r3, #31
 80086c2:	d930      	bls.n	8008726 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80086c4:	2300      	movs	r3, #0
 80086c6:	643b      	str	r3, [r7, #64]	; 0x40
 80086c8:	e027      	b.n	800871a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f002 fa08 	bl	800aae4 <SDMMC_ReadFIFO>
 80086d4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80086d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086dc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80086de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e0:	3301      	adds	r3, #1
 80086e2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80086e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e6:	0a1b      	lsrs	r3, r3, #8
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80086ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f0:	3301      	adds	r3, #1
 80086f2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f6:	0c1b      	lsrs	r3, r3, #16
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80086fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008700:	3301      	adds	r3, #1
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008706:	0e1b      	lsrs	r3, r3, #24
 8008708:	b2da      	uxtb	r2, r3
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800870e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008710:	3301      	adds	r3, #1
 8008712:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8008714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008716:	3301      	adds	r3, #1
 8008718:	643b      	str	r3, [r7, #64]	; 0x40
 800871a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800871c:	2b07      	cmp	r3, #7
 800871e:	d9d4      	bls.n	80086ca <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008722:	3b20      	subs	r3, #32
 8008724:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008726:	f7f7 fe5d 	bl	80003e4 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008732:	429a      	cmp	r2, r3
 8008734:	d902      	bls.n	800873c <HAL_SD_ReadBlocks+0x1ac>
 8008736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008738:	2b00      	cmp	r3, #0
 800873a:	d112      	bne.n	8008762 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a56      	ldr	r2, [pc, #344]	; (800889c <HAL_SD_ReadBlocks+0x30c>)
 8008742:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e097      	b.n	8008892 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008768:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800876c:	2b00      	cmp	r3, #0
 800876e:	d09f      	beq.n	80086b0 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800877e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878a:	2b00      	cmp	r3, #0
 800878c:	d022      	beq.n	80087d4 <HAL_SD_ReadBlocks+0x244>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d91f      	bls.n	80087d4 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008798:	2b03      	cmp	r3, #3
 800879a:	d01b      	beq.n	80087d4 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f002 fb03 	bl	800adac <SDMMC_CmdStopTransfer>
 80087a6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80087a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d012      	beq.n	80087d4 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a3a      	ldr	r2, [pc, #232]	; (800889c <HAL_SD_ReadBlocks+0x30c>)
 80087b4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087bc:	431a      	orrs	r2, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e05e      	b.n	8008892 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d012      	beq.n	8008808 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a2d      	ldr	r2, [pc, #180]	; (800889c <HAL_SD_ReadBlocks+0x30c>)
 80087e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ee:	f043 0208 	orr.w	r2, r3, #8
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e044      	b.n	8008892 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d012      	beq.n	800883c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a20      	ldr	r2, [pc, #128]	; (800889c <HAL_SD_ReadBlocks+0x30c>)
 800881c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	f043 0202 	orr.w	r2, r3, #2
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e02a      	b.n	8008892 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008842:	f003 0320 	and.w	r3, r3, #32
 8008846:	2b00      	cmp	r3, #0
 8008848:	d012      	beq.n	8008870 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a13      	ldr	r2, [pc, #76]	; (800889c <HAL_SD_ReadBlocks+0x30c>)
 8008850:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008856:	f043 0220 	orr.w	r2, r3, #32
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e010      	b.n	8008892 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a0a      	ldr	r2, [pc, #40]	; (80088a0 <HAL_SD_ReadBlocks+0x310>)
 8008876:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	e006      	b.n	8008892 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
  }
}
 8008892:	4618      	mov	r0, r3
 8008894:	3748      	adds	r7, #72	; 0x48
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	1fe00fff 	.word	0x1fe00fff
 80088a0:	18000f3a 	.word	0x18000f3a

080088a4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b092      	sub	sp, #72	; 0x48
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088b2:	f7f7 fd97 	bl	80003e4 <HAL_GetTick>
 80088b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d107      	bne.n	80088d6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e16b      	b.n	8008bae <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b01      	cmp	r3, #1
 80088e0:	f040 815e 	bne.w	8008ba0 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80088ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	441a      	add	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d907      	bls.n	8008908 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e152      	b.n	8008bae <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2203      	movs	r2, #3
 800890c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2200      	movs	r2, #0
 8008916:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891c:	2b01      	cmp	r3, #1
 800891e:	d002      	beq.n	8008926 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008922:	025b      	lsls	r3, r3, #9
 8008924:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800892a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	025b      	lsls	r3, r3, #9
 8008930:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008932:	2390      	movs	r3, #144	; 0x90
 8008934:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008936:	2300      	movs	r3, #0
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800893a:	2300      	movs	r3, #0
 800893c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800893e:	2300      	movs	r3, #0
 8008940:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f107 0218 	add.w	r2, r7, #24
 800894a:	4611      	mov	r1, r2
 800894c:	4618      	mov	r0, r3
 800894e:	f002 f951 	bl	800abf4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68da      	ldr	r2, [r3, #12]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008960:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d90a      	bls.n	800897e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2220      	movs	r2, #32
 800896c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008974:	4618      	mov	r0, r3
 8008976:	f002 f9f5 	bl	800ad64 <SDMMC_CmdWriteMultiBlock>
 800897a:	6478      	str	r0, [r7, #68]	; 0x44
 800897c:	e009      	b.n	8008992 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2210      	movs	r2, #16
 8008982:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800898a:	4618      	mov	r0, r3
 800898c:	f002 f9c7 	bl	800ad1e <SDMMC_CmdWriteSingleBlock>
 8008990:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008994:	2b00      	cmp	r3, #0
 8008996:	d012      	beq.n	80089be <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a86      	ldr	r2, [pc, #536]	; (8008bb8 <HAL_SD_WriteBlocks+0x314>)
 800899e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a6:	431a      	orrs	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e0f7      	b.n	8008bae <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80089c2:	e05c      	b.n	8008a7e <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d037      	beq.n	8008a42 <HAL_SD_WriteBlocks+0x19e>
 80089d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d4:	2b1f      	cmp	r3, #31
 80089d6:	d934      	bls.n	8008a42 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80089d8:	2300      	movs	r3, #0
 80089da:	643b      	str	r3, [r7, #64]	; 0x40
 80089dc:	e02b      	b.n	8008a36 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80089de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80089e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e6:	3301      	adds	r3, #1
 80089e8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80089ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	021a      	lsls	r2, r3, #8
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80089f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f8:	3301      	adds	r3, #1
 80089fa:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80089fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	041a      	lsls	r2, r3, #16
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	061a      	lsls	r2, r3, #24
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f107 0214 	add.w	r2, r7, #20
 8008a28:	4611      	mov	r1, r2
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f002 f867 	bl	800aafe <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a32:	3301      	adds	r3, #1
 8008a34:	643b      	str	r3, [r7, #64]	; 0x40
 8008a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a38:	2b07      	cmp	r3, #7
 8008a3a:	d9d0      	bls.n	80089de <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3e:	3b20      	subs	r3, #32
 8008a40:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008a42:	f7f7 fccf 	bl	80003e4 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d902      	bls.n	8008a58 <HAL_SD_WriteBlocks+0x1b4>
 8008a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d112      	bne.n	8008a7e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a56      	ldr	r2, [pc, #344]	; (8008bb8 <HAL_SD_WriteBlocks+0x314>)
 8008a5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a66:	431a      	orrs	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e097      	b.n	8008bae <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a84:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d09b      	beq.n	80089c4 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68da      	ldr	r2, [r3, #12]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a9a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d022      	beq.n	8008af0 <HAL_SD_WriteBlocks+0x24c>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d91f      	bls.n	8008af0 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d01b      	beq.n	8008af0 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f002 f975 	bl	800adac <SDMMC_CmdStopTransfer>
 8008ac2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d012      	beq.n	8008af0 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a3a      	ldr	r2, [pc, #232]	; (8008bb8 <HAL_SD_WriteBlocks+0x314>)
 8008ad0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e05e      	b.n	8008bae <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af6:	f003 0308 	and.w	r3, r3, #8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d012      	beq.n	8008b24 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a2d      	ldr	r2, [pc, #180]	; (8008bb8 <HAL_SD_WriteBlocks+0x314>)
 8008b04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0a:	f043 0208 	orr.w	r2, r3, #8
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e044      	b.n	8008bae <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d012      	beq.n	8008b58 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a20      	ldr	r2, [pc, #128]	; (8008bb8 <HAL_SD_WriteBlocks+0x314>)
 8008b38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3e:	f043 0202 	orr.w	r2, r3, #2
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e02a      	b.n	8008bae <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5e:	f003 0310 	and.w	r3, r3, #16
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d012      	beq.n	8008b8c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a13      	ldr	r2, [pc, #76]	; (8008bb8 <HAL_SD_WriteBlocks+0x314>)
 8008b6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b72:	f043 0210 	orr.w	r2, r3, #16
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e010      	b.n	8008bae <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a0a      	ldr	r2, [pc, #40]	; (8008bbc <HAL_SD_WriteBlocks+0x318>)
 8008b92:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e006      	b.n	8008bae <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
  }
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3748      	adds	r7, #72	; 0x48
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	1fe00fff 	.word	0x1fe00fff
 8008bbc:	18000f3a 	.word	0x18000f3a

08008bc0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bcc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d008      	beq.n	8008bee <HAL_SD_IRQHandler+0x2e>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f003 0308 	and.w	r3, r3, #8
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f001 f92a 	bl	8009e40 <SD_Read_IT>
 8008bec:	e19a      	b.n	8008f24 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 80ac 	beq.w	8008d56 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c06:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	4b9d      	ldr	r3, [pc, #628]	; (8008e88 <HAL_SD_IRQHandler+0x2c8>)
 8008c14:	400b      	ands	r3, r1
 8008c16:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008c26:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c36:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f003 0308 	and.w	r3, r3, #8
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d038      	beq.n	8008cb4 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f003 0302 	and.w	r3, r3, #2
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d104      	bne.n	8008c56 <HAL_SD_IRQHandler+0x96>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d011      	beq.n	8008c7a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f002 f8a6 	bl	800adac <SDMMC_CmdStopTransfer>
 8008c60:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d008      	beq.n	8008c7a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f959 	bl	8008f2c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a83      	ldr	r2, [pc, #524]	; (8008e8c <HAL_SD_IRQHandler+0x2cc>)
 8008c80:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d104      	bne.n	8008ca4 <HAL_SD_IRQHandler+0xe4>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f003 0302 	and.w	r3, r3, #2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d003      	beq.n	8008cac <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f003 faf5 	bl	800c294 <HAL_SD_RxCpltCallback>
 8008caa:	e13b      	b.n	8008f24 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f003 fae7 	bl	800c280 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008cb2:	e137      	b.n	8008f24 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 8132 	beq.w	8008f24 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d104      	bne.n	8008cec <HAL_SD_IRQHandler+0x12c>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f003 0320 	and.w	r3, r3, #32
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d011      	beq.n	8008d10 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f002 f85b 	bl	800adac <SDMMC_CmdStopTransfer>
 8008cf6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d008      	beq.n	8008d10 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	431a      	orrs	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f90e 	bl	8008f2c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f003 0310 	and.w	r3, r3, #16
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d104      	bne.n	8008d32 <HAL_SD_IRQHandler+0x172>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f003 faa4 	bl	800c280 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d105      	bne.n	8008d4e <HAL_SD_IRQHandler+0x18e>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f003 0302 	and.w	r3, r3, #2
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f000 80eb 	beq.w	8008f24 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f003 faa0 	bl	800c294 <HAL_SD_RxCpltCallback>
}
 8008d54:	e0e6      	b.n	8008f24 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d008      	beq.n	8008d76 <HAL_SD_IRQHandler+0x1b6>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f003 0308 	and.w	r3, r3, #8
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f001 f8ac 	bl	8009ecc <SD_Write_IT>
 8008d74:	e0d6      	b.n	8008f24 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d7c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 80a2 	beq.w	8008eca <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8c:	f003 0302 	and.w	r3, r3, #2
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d005      	beq.n	8008da0 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d98:	f043 0202 	orr.w	r2, r3, #2
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da6:	f003 0308 	and.w	r3, r3, #8
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d005      	beq.n	8008dba <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db2:	f043 0208 	orr.w	r2, r3, #8
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc0:	f003 0320 	and.w	r3, r3, #32
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d005      	beq.n	8008dd4 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dcc:	f043 0220 	orr.w	r2, r3, #32
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dda:	f003 0310 	and.w	r3, r3, #16
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d005      	beq.n	8008dee <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de6:	f043 0210 	orr.w	r2, r3, #16
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a26      	ldr	r2, [pc, #152]	; (8008e8c <HAL_SD_IRQHandler+0x2cc>)
 8008df4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008e04:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e14:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e24:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e34:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f001 ffb6 	bl	800adac <SDMMC_CmdStopTransfer>
 8008e40:	4602      	mov	r2, r0
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	431a      	orrs	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e5a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e64:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f003 0308 	and.w	r3, r3, #8
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00f      	beq.n	8008e90 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f854 	bl	8008f2c <HAL_SD_ErrorCallback>
}
 8008e84:	e04e      	b.n	8008f24 <HAL_SD_IRQHandler+0x364>
 8008e86:	bf00      	nop
 8008e88:	ffff3ec5 	.word	0xffff3ec5
 8008e8c:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d044      	beq.n	8008f24 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d040      	beq.n	8008f24 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008eb0:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f832 	bl	8008f2c <HAL_SD_ErrorCallback>
}
 8008ec8:	e02c      	b.n	8008f24 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d025      	beq.n	8008f24 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee0:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee8:	f003 0304 	and.w	r3, r3, #4
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10c      	bne.n	8008f0a <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f003 0320 	and.w	r3, r3, #32
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 f84e 	bl	8009f9c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008f00:	e010      	b.n	8008f24 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f001 f836 	bl	8009f74 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008f08:	e00c      	b.n	8008f24 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f003 0320 	and.w	r3, r3, #32
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f001 f837 	bl	8009f88 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8008f1a:	e003      	b.n	8008f24 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 f81f 	bl	8009f60 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008f22:	e7ff      	b.n	8008f24 <HAL_SD_IRQHandler+0x364>
 8008f24:	bf00      	nop
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8008f4a:	bf00      	nop
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
	...

08008f58 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f66:	0f9b      	lsrs	r3, r3, #30
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f72:	0e9b      	lsrs	r3, r3, #26
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	f003 030f 	and.w	r3, r3, #15
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f84:	0e1b      	lsrs	r3, r3, #24
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 0303 	and.w	r3, r3, #3
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f96:	0c1b      	lsrs	r3, r3, #16
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fa2:	0a1b      	lsrs	r3, r3, #8
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb8:	0d1b      	lsrs	r3, r3, #20
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fc4:	0c1b      	lsrs	r3, r3, #16
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	f003 030f 	and.w	r3, r3, #15
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd6:	0bdb      	lsrs	r3, r3, #15
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fe8:	0b9b      	lsrs	r3, r3, #14
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 0301 	and.w	r3, r3, #1
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ffa:	0b5b      	lsrs	r3, r3, #13
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	b2da      	uxtb	r2, r3
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800900c:	0b1b      	lsrs	r3, r3, #12
 800900e:	b2db      	uxtb	r3, r3
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	b2da      	uxtb	r2, r3
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2200      	movs	r2, #0
 800901e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009024:	2b00      	cmp	r3, #0
 8009026:	d163      	bne.n	80090f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800902c:	009a      	lsls	r2, r3, #2
 800902e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009032:	4013      	ands	r3, r2
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009038:	0f92      	lsrs	r2, r2, #30
 800903a:	431a      	orrs	r2, r3
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009044:	0edb      	lsrs	r3, r3, #27
 8009046:	b2db      	uxtb	r3, r3
 8009048:	f003 0307 	and.w	r3, r3, #7
 800904c:	b2da      	uxtb	r2, r3
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009056:	0e1b      	lsrs	r3, r3, #24
 8009058:	b2db      	uxtb	r3, r3
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	b2da      	uxtb	r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009068:	0d5b      	lsrs	r3, r3, #21
 800906a:	b2db      	uxtb	r3, r3
 800906c:	f003 0307 	and.w	r3, r3, #7
 8009070:	b2da      	uxtb	r2, r3
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800907a:	0c9b      	lsrs	r3, r3, #18
 800907c:	b2db      	uxtb	r3, r3
 800907e:	f003 0307 	and.w	r3, r3, #7
 8009082:	b2da      	uxtb	r2, r3
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800908c:	0bdb      	lsrs	r3, r3, #15
 800908e:	b2db      	uxtb	r3, r3
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	b2da      	uxtb	r2, r3
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	7e1b      	ldrb	r3, [r3, #24]
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	3302      	adds	r3, #2
 80090b0:	2201      	movs	r2, #1
 80090b2:	fa02 f303 	lsl.w	r3, r2, r3
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80090ba:	fb02 f203 	mul.w	r2, r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	7a1b      	ldrb	r3, [r3, #8]
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	2201      	movs	r2, #1
 80090ce:	409a      	lsls	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80090dc:	0a52      	lsrs	r2, r2, #9
 80090de:	fb02 f203 	mul.w	r2, r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090ec:	659a      	str	r2, [r3, #88]	; 0x58
 80090ee:	e031      	b.n	8009154 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d11d      	bne.n	8009134 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090fc:	041b      	lsls	r3, r3, #16
 80090fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009106:	0c1b      	lsrs	r3, r3, #16
 8009108:	431a      	orrs	r2, r3
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	3301      	adds	r3, #1
 8009114:	029a      	lsls	r2, r3, #10
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009128:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	659a      	str	r2, [r3, #88]	; 0x58
 8009132:	e00f      	b.n	8009154 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a58      	ldr	r2, [pc, #352]	; (800929c <HAL_SD_GetCardCSD+0x344>)
 800913a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009140:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e09d      	b.n	8009290 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009158:	0b9b      	lsrs	r3, r3, #14
 800915a:	b2db      	uxtb	r3, r3
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	b2da      	uxtb	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800916a:	09db      	lsrs	r3, r3, #7
 800916c:	b2db      	uxtb	r3, r3
 800916e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009172:	b2da      	uxtb	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800917c:	b2db      	uxtb	r3, r3
 800917e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009182:	b2da      	uxtb	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800918c:	0fdb      	lsrs	r3, r3, #31
 800918e:	b2da      	uxtb	r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009198:	0f5b      	lsrs	r3, r3, #29
 800919a:	b2db      	uxtb	r3, r3
 800919c:	f003 0303 	and.w	r3, r3, #3
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091aa:	0e9b      	lsrs	r3, r3, #26
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091bc:	0d9b      	lsrs	r3, r3, #22
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	f003 030f 	and.w	r3, r3, #15
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ce:	0d5b      	lsrs	r3, r3, #21
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ea:	0c1b      	lsrs	r3, r3, #16
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091fe:	0bdb      	lsrs	r3, r3, #15
 8009200:	b2db      	uxtb	r3, r3
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	b2da      	uxtb	r2, r3
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009212:	0b9b      	lsrs	r3, r3, #14
 8009214:	b2db      	uxtb	r3, r3
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	b2da      	uxtb	r2, r3
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009226:	0b5b      	lsrs	r3, r3, #13
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	b2da      	uxtb	r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800923a:	0b1b      	lsrs	r3, r3, #12
 800923c:	b2db      	uxtb	r3, r3
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	b2da      	uxtb	r2, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800924e:	0a9b      	lsrs	r3, r3, #10
 8009250:	b2db      	uxtb	r3, r3
 8009252:	f003 0303 	and.w	r3, r3, #3
 8009256:	b2da      	uxtb	r2, r3
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009262:	0a1b      	lsrs	r3, r3, #8
 8009264:	b2db      	uxtb	r3, r3
 8009266:	f003 0303 	and.w	r3, r3, #3
 800926a:	b2da      	uxtb	r2, r3
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009276:	085b      	lsrs	r3, r3, #1
 8009278:	b2db      	uxtb	r3, r3
 800927a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800927e:	b2da      	uxtb	r2, r3
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	1fe00fff 	.word	0x1fe00fff

080092a0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b094      	sub	sp, #80	; 0x50
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80092b0:	f107 0308 	add.w	r3, r7, #8
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fb64 	bl	8009984 <SD_SendSDStatus>
 80092bc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80092be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d011      	beq.n	80092e8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a4f      	ldr	r2, [pc, #316]	; (8009408 <HAL_SD_GetCardStatus+0x168>)
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80092e6:	e070      	b.n	80093ca <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	099b      	lsrs	r3, r3, #6
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	f003 0303 	and.w	r3, r3, #3
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	095b      	lsrs	r3, r3, #5
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	b2da      	uxtb	r2, r3
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	0a1b      	lsrs	r3, r3, #8
 800930c:	b29b      	uxth	r3, r3
 800930e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009312:	b29a      	uxth	r2, r3
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	0e1b      	lsrs	r3, r3, #24
 8009318:	b29b      	uxth	r3, r3
 800931a:	4313      	orrs	r3, r2
 800931c:	b29a      	uxth	r2, r3
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	061a      	lsls	r2, r3, #24
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	021b      	lsls	r3, r3, #8
 800932a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800932e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	0a1b      	lsrs	r3, r3, #8
 8009334:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009338:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	0e1b      	lsrs	r3, r3, #24
 800933e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	b2da      	uxtb	r2, r3
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	0a1b      	lsrs	r3, r3, #8
 8009350:	b2da      	uxtb	r2, r3
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	0d1b      	lsrs	r3, r3, #20
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 030f 	and.w	r3, r3, #15
 8009360:	b2da      	uxtb	r2, r3
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	0c1b      	lsrs	r3, r3, #16
 800936a:	b29b      	uxth	r3, r3
 800936c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009370:	b29a      	uxth	r2, r3
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	b29b      	uxth	r3, r3
 8009376:	b2db      	uxtb	r3, r3
 8009378:	b29b      	uxth	r3, r3
 800937a:	4313      	orrs	r3, r2
 800937c:	b29a      	uxth	r2, r3
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	0a9b      	lsrs	r3, r3, #10
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800938c:	b2da      	uxtb	r2, r3
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	0a1b      	lsrs	r3, r3, #8
 8009396:	b2db      	uxtb	r3, r3
 8009398:	f003 0303 	and.w	r3, r3, #3
 800939c:	b2da      	uxtb	r2, r3
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	091b      	lsrs	r3, r3, #4
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	f003 030f 	and.w	r3, r3, #15
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	f003 030f 	and.w	r3, r3, #15
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	0e1b      	lsrs	r3, r3, #24
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093d2:	4618      	mov	r0, r3
 80093d4:	f001 fc3a 	bl	800ac4c <SDMMC_CmdBlockLength>
 80093d8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80093da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00d      	beq.n	80093fc <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a08      	ldr	r2, [pc, #32]	; (8009408 <HAL_SD_GetCardStatus+0x168>)
 80093e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80093fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009400:	4618      	mov	r0, r3
 8009402:	3750      	adds	r7, #80	; 0x50
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	1fe00fff 	.word	0x1fe00fff

0800940c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009464:	b5b0      	push	{r4, r5, r7, lr}
 8009466:	b08e      	sub	sp, #56	; 0x38
 8009468:	af04      	add	r7, sp, #16
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2203      	movs	r2, #3
 8009478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009480:	2b03      	cmp	r3, #3
 8009482:	d02e      	beq.n	80094e2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800948a:	d106      	bne.n	800949a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009490:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	639a      	str	r2, [r3, #56]	; 0x38
 8009498:	e029      	b.n	80094ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094a0:	d10a      	bne.n	80094b8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fb66 	bl	8009b74 <SD_WideBus_Enable>
 80094a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ae:	6a3b      	ldr	r3, [r7, #32]
 80094b0:	431a      	orrs	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	639a      	str	r2, [r3, #56]	; 0x38
 80094b6:	e01a      	b.n	80094ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10a      	bne.n	80094d4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fba3 	bl	8009c0a <SD_WideBus_Disable>
 80094c4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ca:	6a3b      	ldr	r3, [r7, #32]
 80094cc:	431a      	orrs	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	639a      	str	r2, [r3, #56]	; 0x38
 80094d2:	e00c      	b.n	80094ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	639a      	str	r2, [r3, #56]	; 0x38
 80094e0:	e005      	b.n	80094ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d007      	beq.n	8009506 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a2e      	ldr	r2, [pc, #184]	; (80095b4 <HAL_SD_ConfigWideBusOperation+0x150>)
 80094fc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009504:	e034      	b.n	8009570 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	2b03      	cmp	r3, #3
 8009522:	d903      	bls.n	800952c <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	61bb      	str	r3, [r7, #24]
 800952a:	e012      	b.n	8009552 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009534:	d103      	bne.n	800953e <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	61bb      	str	r3, [r7, #24]
 800953c:	e009      	b.n	8009552 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009546:	d102      	bne.n	800954e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8009548:	2302      	movs	r3, #2
 800954a:	61bb      	str	r3, [r7, #24]
 800954c:	e001      	b.n	8009552 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800954e:	2304      	movs	r3, #4
 8009550:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681d      	ldr	r5, [r3, #0]
 8009556:	466c      	mov	r4, sp
 8009558:	f107 0314 	add.w	r3, r7, #20
 800955c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009564:	f107 0308 	add.w	r3, r7, #8
 8009568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800956a:	4628      	mov	r0, r5
 800956c:	f001 fa90 	bl	800aa90 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009578:	4618      	mov	r0, r3
 800957a:	f001 fb67 	bl	800ac4c <SDMMC_CmdBlockLength>
 800957e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00c      	beq.n	80095a0 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a0a      	ldr	r2, [pc, #40]	; (80095b4 <HAL_SD_ConfigWideBusOperation+0x150>)
 800958c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	431a      	orrs	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80095a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3728      	adds	r7, #40	; 0x28
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bdb0      	pop	{r4, r5, r7, pc}
 80095b4:	1fe00fff 	.word	0x1fe00fff

080095b8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80095c4:	f107 030c 	add.w	r3, r7, #12
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 faaa 	bl	8009b24 <SD_SendStatus>
 80095d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d005      	beq.n	80095e4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	431a      	orrs	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	0a5b      	lsrs	r3, r3, #9
 80095e8:	f003 030f 	and.w	r3, r3, #15
 80095ec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80095ee:	693b      	ldr	r3, [r7, #16]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3718      	adds	r7, #24
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80095f8:	b590      	push	{r4, r7, lr}
 80095fa:	b091      	sub	sp, #68	; 0x44
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009600:	2301      	movs	r3, #1
 8009602:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4618      	mov	r0, r3
 800960a:	f001 fa9a 	bl	800ab42 <SDMMC_GetPowerState>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d102      	bne.n	800961a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009614:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009618:	e0a8      	b.n	800976c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800961e:	2b03      	cmp	r3, #3
 8009620:	d02e      	beq.n	8009680 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4618      	mov	r0, r3
 8009628:	f001 fce6 	bl	800aff8 <SDMMC_CmdSendCID>
 800962c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800962e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <SD_InitCard+0x40>
    {
      return errorstate;
 8009634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009636:	e099      	b.n	800976c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2100      	movs	r1, #0
 800963e:	4618      	mov	r0, r3
 8009640:	f001 fac5 	bl	800abce <SDMMC_GetResponse>
 8009644:	4602      	mov	r2, r0
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2104      	movs	r1, #4
 8009650:	4618      	mov	r0, r3
 8009652:	f001 fabc 	bl	800abce <SDMMC_GetResponse>
 8009656:	4602      	mov	r2, r0
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2108      	movs	r1, #8
 8009662:	4618      	mov	r0, r3
 8009664:	f001 fab3 	bl	800abce <SDMMC_GetResponse>
 8009668:	4602      	mov	r2, r0
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	210c      	movs	r1, #12
 8009674:	4618      	mov	r0, r3
 8009676:	f001 faaa 	bl	800abce <SDMMC_GetResponse>
 800967a:	4602      	mov	r2, r0
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009684:	2b03      	cmp	r3, #3
 8009686:	d00d      	beq.n	80096a4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f107 020e 	add.w	r2, r7, #14
 8009690:	4611      	mov	r1, r2
 8009692:	4618      	mov	r0, r3
 8009694:	f001 fcef 	bl	800b076 <SDMMC_CmdSetRelAdd>
 8009698:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800969a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <SD_InitCard+0xac>
    {
      return errorstate;
 80096a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a2:	e063      	b.n	800976c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a8:	2b03      	cmp	r3, #3
 80096aa:	d036      	beq.n	800971a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80096ac:	89fb      	ldrh	r3, [r7, #14]
 80096ae:	461a      	mov	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096bc:	041b      	lsls	r3, r3, #16
 80096be:	4619      	mov	r1, r3
 80096c0:	4610      	mov	r0, r2
 80096c2:	f001 fcb8 	bl	800b036 <SDMMC_CmdSendCSD>
 80096c6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80096c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <SD_InitCard+0xda>
    {
      return errorstate;
 80096ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096d0:	e04c      	b.n	800976c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2100      	movs	r1, #0
 80096d8:	4618      	mov	r0, r3
 80096da:	f001 fa78 	bl	800abce <SDMMC_GetResponse>
 80096de:	4602      	mov	r2, r0
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2104      	movs	r1, #4
 80096ea:	4618      	mov	r0, r3
 80096ec:	f001 fa6f 	bl	800abce <SDMMC_GetResponse>
 80096f0:	4602      	mov	r2, r0
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2108      	movs	r1, #8
 80096fc:	4618      	mov	r0, r3
 80096fe:	f001 fa66 	bl	800abce <SDMMC_GetResponse>
 8009702:	4602      	mov	r2, r0
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	210c      	movs	r1, #12
 800970e:	4618      	mov	r0, r3
 8009710:	f001 fa5d 	bl	800abce <SDMMC_GetResponse>
 8009714:	4602      	mov	r2, r0
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2104      	movs	r1, #4
 8009720:	4618      	mov	r0, r3
 8009722:	f001 fa54 	bl	800abce <SDMMC_GetResponse>
 8009726:	4603      	mov	r3, r0
 8009728:	0d1a      	lsrs	r2, r3, #20
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800972e:	f107 0310 	add.w	r3, r7, #16
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff fc0f 	bl	8008f58 <HAL_SD_GetCardCSD>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009740:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009744:	e012      	b.n	800976c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6819      	ldr	r1, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800974e:	041b      	lsls	r3, r3, #16
 8009750:	f04f 0400 	mov.w	r4, #0
 8009754:	461a      	mov	r2, r3
 8009756:	4623      	mov	r3, r4
 8009758:	4608      	mov	r0, r1
 800975a:	f001 fb63 	bl	800ae24 <SDMMC_CmdSelDesel>
 800975e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <SD_InitCard+0x172>
  {
    return errorstate;
 8009766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009768:	e000      	b.n	800976c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3744      	adds	r7, #68	; 0x44
 8009770:	46bd      	mov	sp, r7
 8009772:	bd90      	pop	{r4, r7, pc}

08009774 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b088      	sub	sp, #32
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800977c:	2300      	movs	r3, #0
 800977e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009780:	2300      	movs	r3, #0
 8009782:	61fb      	str	r3, [r7, #28]
 8009784:	2300      	movs	r3, #0
 8009786:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8009788:	f7f6 fe2c 	bl	80003e4 <HAL_GetTick>
 800978c:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4618      	mov	r0, r3
 8009794:	f001 fb6a 	bl	800ae6c <SDMMC_CmdGoIdleState>
 8009798:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <SD_PowerON+0x30>
  {
    return errorstate;
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	e0e9      	b.n	8009978 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f001 fb7d 	bl	800aea8 <SDMMC_CmdOperCond>
 80097ae:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00d      	beq.n	80097d2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f001 fb53 	bl	800ae6c <SDMMC_CmdGoIdleState>
 80097c6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d004      	beq.n	80097d8 <SD_PowerON+0x64>
    {
      return errorstate;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	e0d2      	b.n	8009978 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d137      	bne.n	8009850 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2100      	movs	r1, #0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f001 fb7e 	bl	800aee8 <SDMMC_CmdAppCommand>
 80097ec:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d02d      	beq.n	8009850 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80097f8:	e0be      	b.n	8009978 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2100      	movs	r1, #0
 8009800:	4618      	mov	r0, r3
 8009802:	f001 fb71 	bl	800aee8 <SDMMC_CmdAppCommand>
 8009806:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <SD_PowerON+0x9e>
    {
      return errorstate;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	e0b2      	b.n	8009978 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	495a      	ldr	r1, [pc, #360]	; (8009980 <SD_PowerON+0x20c>)
 8009818:	4618      	mov	r0, r3
 800981a:	f001 fb88 	bl	800af2e <SDMMC_CmdAppOperCommand>
 800981e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009826:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800982a:	e0a5      	b.n	8009978 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2100      	movs	r1, #0
 8009832:	4618      	mov	r0, r3
 8009834:	f001 f9cb 	bl	800abce <SDMMC_GetResponse>
 8009838:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	0fdb      	lsrs	r3, r3, #31
 800983e:	2b01      	cmp	r3, #1
 8009840:	d101      	bne.n	8009846 <SD_PowerON+0xd2>
 8009842:	2301      	movs	r3, #1
 8009844:	e000      	b.n	8009848 <SD_PowerON+0xd4>
 8009846:	2300      	movs	r3, #0
 8009848:	61bb      	str	r3, [r7, #24]

    count++;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3301      	adds	r3, #1
 800984e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009856:	4293      	cmp	r3, r2
 8009858:	d802      	bhi.n	8009860 <SD_PowerON+0xec>
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d0cc      	beq.n	80097fa <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009866:	4293      	cmp	r3, r2
 8009868:	d902      	bls.n	8009870 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800986a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800986e:	e083      	b.n	8009978 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d07d      	beq.n	8009976 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2201      	movs	r2, #1
 800987e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	2b02      	cmp	r3, #2
 8009886:	d176      	bne.n	8009976 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d071      	beq.n	8009976 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009898:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f042 0208 	orr.w	r2, r2, #8
 80098a8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f001 fc48 	bl	800b144 <SDMMC_CmdVoltageSwitch>
 80098b4:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00c      	beq.n	80098d6 <SD_PowerON+0x162>
        {
          return errorstate;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	e05b      	b.n	8009978 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80098c0:	f7f6 fd90 	bl	80003e4 <HAL_GetTick>
 80098c4:	4602      	mov	r2, r0
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ce:	d102      	bne.n	80098d6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80098d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098d4:	e050      	b.n	8009978 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098e4:	d1ec      	bne.n	80098c0 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80098ee:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098fe:	d002      	beq.n	8009906 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009900:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009904:	e038      	b.n	8009978 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8009906:	2001      	movs	r0, #1
 8009908:	f7ff fb1a 	bl	8008f40 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0204 	orr.w	r2, r2, #4
 800991a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800991c:	e00a      	b.n	8009934 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800991e:	f7f6 fd61 	bl	80003e4 <HAL_GetTick>
 8009922:	4602      	mov	r2, r0
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800992c:	d102      	bne.n	8009934 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800992e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009932:	e021      	b.n	8009978 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800993e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009942:	d1ec      	bne.n	800991e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800994c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800995c:	d102      	bne.n	8009964 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800995e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009962:	e009      	b.n	8009978 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2213      	movs	r2, #19
 800996a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009974:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3720      	adds	r7, #32
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	c1100000 	.word	0xc1100000

08009984 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b08c      	sub	sp, #48	; 0x30
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800998e:	f7f6 fd29 	bl	80003e4 <HAL_GetTick>
 8009992:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2100      	movs	r1, #0
 800999e:	4618      	mov	r0, r3
 80099a0:	f001 f915 	bl	800abce <SDMMC_GetResponse>
 80099a4:	4603      	mov	r3, r0
 80099a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099ae:	d102      	bne.n	80099b6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80099b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099b4:	e0b0      	b.n	8009b18 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2140      	movs	r1, #64	; 0x40
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 f945 	bl	800ac4c <SDMMC_CmdBlockLength>
 80099c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d005      	beq.n	80099d6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	e0a0      	b.n	8009b18 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099de:	041b      	lsls	r3, r3, #16
 80099e0:	4619      	mov	r1, r3
 80099e2:	4610      	mov	r0, r2
 80099e4:	f001 fa80 	bl	800aee8 <SDMMC_CmdAppCommand>
 80099e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d005      	beq.n	80099fc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80099f8:	6a3b      	ldr	r3, [r7, #32]
 80099fa:	e08d      	b.n	8009b18 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80099fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a00:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009a02:	2340      	movs	r3, #64	; 0x40
 8009a04:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009a06:	2360      	movs	r3, #96	; 0x60
 8009a08:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009a12:	2301      	movs	r3, #1
 8009a14:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f107 0208 	add.w	r2, r7, #8
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f001 f8e7 	bl	800abf4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f001 fb68 	bl	800b100 <SDMMC_CmdStatusRegister>
 8009a30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d02b      	beq.n	8009a90 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	e069      	b.n	8009b18 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d013      	beq.n	8009a7a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009a52:	2300      	movs	r3, #0
 8009a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a56:	e00d      	b.n	8009a74 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f001 f841 	bl	800aae4 <SDMMC_ReadFIFO>
 8009a62:	4602      	mov	r2, r0
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	601a      	str	r2, [r3, #0]
        pData++;
 8009a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a70:	3301      	adds	r3, #1
 8009a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a76:	2b07      	cmp	r3, #7
 8009a78:	d9ee      	bls.n	8009a58 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009a7a:	f7f6 fcb3 	bl	80003e4 <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a88:	d102      	bne.n	8009a90 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009a8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a8e:	e043      	b.n	8009b18 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a96:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d0d2      	beq.n	8009a44 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa4:	f003 0308 	and.w	r3, r3, #8
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009aac:	2308      	movs	r3, #8
 8009aae:	e033      	b.n	8009b18 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab6:	f003 0302 	and.w	r3, r3, #2
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009abe:	2302      	movs	r3, #2
 8009ac0:	e02a      	b.n	8009b18 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac8:	f003 0320 	and.w	r3, r3, #32
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d017      	beq.n	8009b00 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009ad0:	2320      	movs	r3, #32
 8009ad2:	e021      	b.n	8009b18 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f001 f803 	bl	800aae4 <SDMMC_ReadFIFO>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae2:	601a      	str	r2, [r3, #0]
    pData++;
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009aea:	f7f6 fc7b 	bl	80003e4 <HAL_GetTick>
 8009aee:	4602      	mov	r2, r0
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009af8:	d102      	bne.n	8009b00 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009afa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009afe:	e00b      	b.n	8009b18 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1e2      	bne.n	8009ad4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a03      	ldr	r2, [pc, #12]	; (8009b20 <SD_SendSDStatus+0x19c>)
 8009b14:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3730      	adds	r7, #48	; 0x30
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	18000f3a 	.word	0x18000f3a

08009b24 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d102      	bne.n	8009b3a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009b34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b38:	e018      	b.n	8009b6c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b42:	041b      	lsls	r3, r3, #16
 8009b44:	4619      	mov	r1, r3
 8009b46:	4610      	mov	r0, r2
 8009b48:	f001 fab7 	bl	800b0ba <SDMMC_CmdSendStatus>
 8009b4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	e009      	b.n	8009b6c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f001 f835 	bl	800abce <SDMMC_GetResponse>
 8009b64:	4602      	mov	r2, r0
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60fb      	str	r3, [r7, #12]
 8009b80:	2300      	movs	r3, #0
 8009b82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2100      	movs	r1, #0
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 f81f 	bl	800abce <SDMMC_GetResponse>
 8009b90:	4603      	mov	r3, r0
 8009b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b9a:	d102      	bne.n	8009ba2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ba0:	e02f      	b.n	8009c02 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009ba2:	f107 030c 	add.w	r3, r7, #12
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f879 	bl	8009ca0 <SD_FindSCR>
 8009bae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	e023      	b.n	8009c02 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d01c      	beq.n	8009bfe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bcc:	041b      	lsls	r3, r3, #16
 8009bce:	4619      	mov	r1, r3
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	f001 f989 	bl	800aee8 <SDMMC_CmdAppCommand>
 8009bd6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	e00f      	b.n	8009c02 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2102      	movs	r1, #2
 8009be8:	4618      	mov	r0, r3
 8009bea:	f001 f9c0 	bl	800af6e <SDMMC_CmdBusWidth>
 8009bee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	e003      	b.n	8009c02 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e001      	b.n	8009c02 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bfe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b086      	sub	sp, #24
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009c12:	2300      	movs	r3, #0
 8009c14:	60fb      	str	r3, [r7, #12]
 8009c16:	2300      	movs	r3, #0
 8009c18:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2100      	movs	r1, #0
 8009c20:	4618      	mov	r0, r3
 8009c22:	f000 ffd4 	bl	800abce <SDMMC_GetResponse>
 8009c26:	4603      	mov	r3, r0
 8009c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c30:	d102      	bne.n	8009c38 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c36:	e02f      	b.n	8009c98 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c38:	f107 030c 	add.w	r3, r7, #12
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f82e 	bl	8009ca0 <SD_FindSCR>
 8009c44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d001      	beq.n	8009c50 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	e023      	b.n	8009c98 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d01c      	beq.n	8009c94 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c62:	041b      	lsls	r3, r3, #16
 8009c64:	4619      	mov	r1, r3
 8009c66:	4610      	mov	r0, r2
 8009c68:	f001 f93e 	bl	800aee8 <SDMMC_CmdAppCommand>
 8009c6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	e00f      	b.n	8009c98 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f001 f975 	bl	800af6e <SDMMC_CmdBusWidth>
 8009c84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	e003      	b.n	8009c98 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c90:	2300      	movs	r3, #0
 8009c92:	e001      	b.n	8009c98 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3718      	adds	r7, #24
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08e      	sub	sp, #56	; 0x38
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009caa:	f7f6 fb9b 	bl	80003e4 <HAL_GetTick>
 8009cae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	60bb      	str	r3, [r7, #8]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2108      	movs	r1, #8
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 ffc0 	bl	800ac4c <SDMMC_CmdBlockLength>
 8009ccc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d001      	beq.n	8009cd8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd6:	e0ad      	b.n	8009e34 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ce0:	041b      	lsls	r3, r3, #16
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	f001 f8ff 	bl	800aee8 <SDMMC_CmdAppCommand>
 8009cea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf4:	e09e      	b.n	8009e34 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cfa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009cfc:	2308      	movs	r3, #8
 8009cfe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009d00:	2330      	movs	r3, #48	; 0x30
 8009d02:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d04:	2302      	movs	r3, #2
 8009d06:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f107 0210 	add.w	r2, r7, #16
 8009d18:	4611      	mov	r1, r2
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f000 ff6a 	bl	800abf4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f001 f945 	bl	800afb4 <SDMMC_CmdSendSCR>
 8009d2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d027      	beq.n	8009d82 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d34:	e07e      	b.n	8009e34 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d113      	bne.n	8009d6c <SD_FindSCR+0xcc>
 8009d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d110      	bne.n	8009d6c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 fec8 	bl	800aae4 <SDMMC_ReadFIFO>
 8009d54:	4603      	mov	r3, r0
 8009d56:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 fec1 	bl	800aae4 <SDMMC_ReadFIFO>
 8009d62:	4603      	mov	r3, r0
 8009d64:	60fb      	str	r3, [r7, #12]
      index++;
 8009d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d68:	3301      	adds	r3, #1
 8009d6a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d6c:	f7f6 fb3a 	bl	80003e4 <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d7a:	d102      	bne.n	8009d82 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009d7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d80:	e058      	b.n	8009e34 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d88:	f240 532a 	movw	r3, #1322	; 0x52a
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0d1      	beq.n	8009d36 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d98:	f003 0308 	and.w	r3, r3, #8
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d005      	beq.n	8009dac <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2208      	movs	r2, #8
 8009da6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009da8:	2308      	movs	r3, #8
 8009daa:	e043      	b.n	8009e34 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	e036      	b.n	8009e34 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dcc:	f003 0320 	and.w	r3, r3, #32
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d005      	beq.n	8009de0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2220      	movs	r2, #32
 8009dda:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009ddc:	2320      	movs	r3, #32
 8009dde:	e029      	b.n	8009e34 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a15      	ldr	r2, [pc, #84]	; (8009e3c <SD_FindSCR+0x19c>)
 8009de6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	061a      	lsls	r2, r3, #24
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	021b      	lsls	r3, r3, #8
 8009df0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009df4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	0a1b      	lsrs	r3, r3, #8
 8009dfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009dfe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	0e1b      	lsrs	r3, r3, #24
 8009e04:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	601a      	str	r2, [r3, #0]
    scr++;
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	061a      	lsls	r2, r3, #24
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	021b      	lsls	r3, r3, #8
 8009e18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e1c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	0a1b      	lsrs	r3, r3, #8
 8009e22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e26:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	0e1b      	lsrs	r3, r3, #24
 8009e2c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e30:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3738      	adds	r7, #56	; 0x38
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	18000f3a 	.word	0x18000f3a

08009e40 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e52:	2b1f      	cmp	r3, #31
 8009e54:	d936      	bls.n	8009ec4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009e56:	2300      	movs	r3, #0
 8009e58:	617b      	str	r3, [r7, #20]
 8009e5a:	e027      	b.n	8009eac <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 fe3f 	bl	800aae4 <SDMMC_ReadFIFO>
 8009e66:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	b2da      	uxtb	r2, r3
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	3301      	adds	r3, #1
 8009e74:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	0a1b      	lsrs	r3, r3, #8
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	3301      	adds	r3, #1
 8009e84:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	0c1b      	lsrs	r3, r3, #16
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	3301      	adds	r3, #1
 8009e94:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	0e1b      	lsrs	r3, r3, #24
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	617b      	str	r3, [r7, #20]
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2b07      	cmp	r3, #7
 8009eb0:	d9d4      	bls.n	8009e5c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	f1a3 0220 	sub.w	r2, r3, #32
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	3718      	adds	r7, #24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a1b      	ldr	r3, [r3, #32]
 8009ed8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ede:	2b1f      	cmp	r3, #31
 8009ee0:	d93a      	bls.n	8009f58 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	617b      	str	r3, [r7, #20]
 8009ee6:	e02b      	b.n	8009f40 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	021a      	lsls	r2, r3, #8
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	3301      	adds	r3, #1
 8009f04:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	041a      	lsls	r2, r3, #16
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	3301      	adds	r3, #1
 8009f16:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	061a      	lsls	r2, r3, #24
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	3301      	adds	r3, #1
 8009f28:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f107 020c 	add.w	r2, r7, #12
 8009f32:	4611      	mov	r1, r2
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 fde2 	bl	800aafe <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	617b      	str	r3, [r7, #20]
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	2b07      	cmp	r3, #7
 8009f44:	d9d0      	bls.n	8009ee8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	f1a3 0220 	sub.w	r2, r3, #32
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009f58:	bf00      	nop
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e02b      	b.n	800a01c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d106      	bne.n	8009fde <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f002 fb8f 	bl	800c6fc <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	3304      	adds	r3, #4
 8009fee:	4619      	mov	r1, r3
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	f000 fc4f 	bl	800a894 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6818      	ldr	r0, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	461a      	mov	r2, r3
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	f000 fca3 	bl	800a94c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a006:	4b07      	ldr	r3, [pc, #28]	; (800a024 <HAL_SDRAM_Init+0x74>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a06      	ldr	r2, [pc, #24]	; (800a024 <HAL_SDRAM_Init+0x74>)
 800a00c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a010:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	52004000 	.word	0x52004000

0800a028 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a03a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d101      	bne.n	800a046 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a042:	2302      	movs	r3, #2
 800a044:	e021      	b.n	800a08a <HAL_SDRAM_SendCommand+0x62>
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d002      	beq.n	800a052 <HAL_SDRAM_SendCommand+0x2a>
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	2b05      	cmp	r3, #5
 800a050:	d118      	bne.n	800a084 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2202      	movs	r2, #2
 800a056:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	68b9      	ldr	r1, [r7, #8]
 800a062:	4618      	mov	r0, r3
 800a064:	f000 fcdc 	bl	800aa20 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d104      	bne.n	800a07a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2205      	movs	r2, #5
 800a074:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a078:	e006      	b.n	800a088 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a082:	e001      	b.n	800a088 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e000      	b.n	800a08a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d101      	bne.n	800a0ac <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	e016      	b.n	800a0da <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d10f      	bne.n	800a0d8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fcca 	bl	800aa60 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	e000      	b.n	800a0da <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
	...

0800a0e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e0e2      	b.n	800a2c0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a70      	ldr	r2, [pc, #448]	; (800a2c8 <HAL_SPI_Init+0x1e4>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d00f      	beq.n	800a12a <HAL_SPI_Init+0x46>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a6f      	ldr	r2, [pc, #444]	; (800a2cc <HAL_SPI_Init+0x1e8>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d00a      	beq.n	800a12a <HAL_SPI_Init+0x46>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a6d      	ldr	r2, [pc, #436]	; (800a2d0 <HAL_SPI_Init+0x1ec>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d005      	beq.n	800a12a <HAL_SPI_Init+0x46>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	2b0f      	cmp	r3, #15
 800a124:	d901      	bls.n	800a12a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e0ca      	b.n	800a2c0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fb96 	bl	800a85c <SPI_GetPacketSize>
 800a130:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a64      	ldr	r2, [pc, #400]	; (800a2c8 <HAL_SPI_Init+0x1e4>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d00c      	beq.n	800a156 <HAL_SPI_Init+0x72>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a62      	ldr	r2, [pc, #392]	; (800a2cc <HAL_SPI_Init+0x1e8>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d007      	beq.n	800a156 <HAL_SPI_Init+0x72>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a61      	ldr	r2, [pc, #388]	; (800a2d0 <HAL_SPI_Init+0x1ec>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d002      	beq.n	800a156 <HAL_SPI_Init+0x72>
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	2b08      	cmp	r3, #8
 800a154:	d811      	bhi.n	800a17a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a15a:	4a5b      	ldr	r2, [pc, #364]	; (800a2c8 <HAL_SPI_Init+0x1e4>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d009      	beq.n	800a174 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a59      	ldr	r2, [pc, #356]	; (800a2cc <HAL_SPI_Init+0x1e8>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d004      	beq.n	800a174 <HAL_SPI_Init+0x90>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a58      	ldr	r2, [pc, #352]	; (800a2d0 <HAL_SPI_Init+0x1ec>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d104      	bne.n	800a17e <HAL_SPI_Init+0x9a>
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2b10      	cmp	r3, #16
 800a178:	d901      	bls.n	800a17e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e0a0      	b.n	800a2c0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d106      	bne.n	800a198 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f003 faae 	bl	800d6f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2202      	movs	r2, #2
 800a19c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f022 0201 	bic.w	r2, r2, #1
 800a1ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1b8:	d110      	bne.n	800a1dc <HAL_SPI_Init+0xf8>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1c2:	d10b      	bne.n	800a1dc <HAL_SPI_Init+0xf8>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d107      	bne.n	800a1dc <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a1da:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	69da      	ldr	r2, [r3, #28]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e4:	431a      	orrs	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	431a      	orrs	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ee:	ea42 0103 	orr.w	r1, r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68da      	ldr	r2, [r3, #12]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a206:	431a      	orrs	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20c:	431a      	orrs	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	699b      	ldr	r3, [r3, #24]
 800a212:	431a      	orrs	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	431a      	orrs	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	431a      	orrs	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a1b      	ldr	r3, [r3, #32]
 800a224:	431a      	orrs	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	431a      	orrs	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a230:	431a      	orrs	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	431a      	orrs	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a23c:	ea42 0103 	orr.w	r1, r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	430a      	orrs	r2, r1
 800a24a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d113      	bne.n	800a27c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a266:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a27a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f022 0201 	bic.w	r2, r2, #1
 800a28a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00a      	beq.n	800a2ae <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	40013000 	.word	0x40013000
 800a2cc:	40003800 	.word	0x40003800
 800a2d0:	40003c00 	.word	0x40003c00

0800a2d4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08a      	sub	sp, #40	; 0x28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a2ec:	6a3a      	ldr	r2, [r7, #32]
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a306:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3330      	adds	r3, #48	; 0x30
 800a30e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a316:	2b00      	cmp	r3, #0
 800a318:	d113      	bne.n	800a342 <HAL_SPI_IRQHandler+0x6e>
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	f003 0320 	and.w	r3, r3, #32
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10e      	bne.n	800a342 <HAL_SPI_IRQHandler+0x6e>
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	f003 0304 	and.w	r3, r3, #4
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d009      	beq.n	800a342 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	4798      	blx	r3
    handled = 1UL;
 800a33e:	2301      	movs	r3, #1
 800a340:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10f      	bne.n	800a36c <HAL_SPI_IRQHandler+0x98>
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <HAL_SPI_IRQHandler+0x98>
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	f003 0304 	and.w	r3, r3, #4
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d105      	bne.n	800a36c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	4798      	blx	r3
    handled = 1UL;
 800a368:	2301      	movs	r3, #1
 800a36a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	f003 0320 	and.w	r3, r3, #32
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10f      	bne.n	800a396 <HAL_SPI_IRQHandler+0xc2>
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	f003 0302 	and.w	r3, r3, #2
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00a      	beq.n	800a396 <HAL_SPI_IRQHandler+0xc2>
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	f003 0304 	and.w	r3, r3, #4
 800a386:	2b00      	cmp	r3, #0
 800a388:	d105      	bne.n	800a396 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
    handled = 1UL;
 800a392:	2301      	movs	r3, #1
 800a394:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f040 8170 	bne.w	800a67e <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	f003 0308 	and.w	r3, r3, #8
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 80a0 	beq.w	800a4ea <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	699a      	ldr	r2, [r3, #24]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f042 0208 	orr.w	r2, r2, #8
 800a3b8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	699a      	ldr	r2, [r3, #24]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f042 0210 	orr.w	r2, r2, #16
 800a3c8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	699a      	ldr	r2, [r3, #24]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3d8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	691a      	ldr	r2, [r3, #16]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f022 0208 	bic.w	r2, r2, #8
 800a3e8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00f      	beq.n	800a414 <HAL_SPI_IRQHandler+0x140>
 800a3f4:	7cfb      	ldrb	r3, [r7, #19]
 800a3f6:	2b04      	cmp	r3, #4
 800a3f8:	d004      	beq.n	800a404 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3fe:	69db      	ldr	r3, [r3, #28]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d007      	beq.n	800a414 <HAL_SPI_IRQHandler+0x140>
 800a404:	7cfb      	ldrb	r3, [r7, #19]
 800a406:	2b03      	cmp	r3, #3
 800a408:	d059      	beq.n	800a4be <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a40e:	69db      	ldr	r3, [r3, #28]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d154      	bne.n	800a4be <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d13d      	bne.n	800a49e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a422:	e036      	b.n	800a492 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	2b0f      	cmp	r3, #15
 800a42a:	d90b      	bls.n	800a444 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a434:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a436:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a43c:	1d1a      	adds	r2, r3, #4
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	665a      	str	r2, [r3, #100]	; 0x64
 800a442:	e01d      	b.n	800a480 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	2b07      	cmp	r3, #7
 800a44a:	d90b      	bls.n	800a464 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	8812      	ldrh	r2, [r2, #0]
 800a454:	b292      	uxth	r2, r2
 800a456:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a45c:	1c9a      	adds	r2, r3, #2
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	665a      	str	r2, [r3, #100]	; 0x64
 800a462:	e00d      	b.n	800a480 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a470:	7812      	ldrb	r2, [r2, #0]
 800a472:	b2d2      	uxtb	r2, r2
 800a474:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a47a:	1c5a      	adds	r2, r3, #1
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a486:	b29b      	uxth	r3, r3
 800a488:	3b01      	subs	r3, #1
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a498:	b29b      	uxth	r3, r3
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1c2      	bne.n	800a424 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f93c 	bl	800a71c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d003      	beq.n	800a4be <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f90c 	bl	800a6d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a4bc:	e0e4      	b.n	800a688 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a4be:	7cfb      	ldrb	r3, [r7, #19]
 800a4c0:	2b05      	cmp	r3, #5
 800a4c2:	d103      	bne.n	800a4cc <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f8fb 	bl	800a6c0 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 800a4ca:	e0da      	b.n	800a682 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a4cc:	7cfb      	ldrb	r3, [r7, #19]
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	d103      	bne.n	800a4da <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f8ea 	bl	800a6ac <HAL_SPI_RxCpltCallback>
    return;
 800a4d8:	e0d3      	b.n	800a682 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a4da:	7cfb      	ldrb	r3, [r7, #19]
 800a4dc:	2b03      	cmp	r3, #3
 800a4de:	f040 80d0 	bne.w	800a682 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f8d8 	bl	800a698 <HAL_SPI_TxCpltCallback>
    return;
 800a4e8:	e0cb      	b.n	800a682 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00d      	beq.n	800a510 <HAL_SPI_IRQHandler+0x23c>
 800a4f4:	6a3b      	ldr	r3, [r7, #32]
 800a4f6:	f003 0308 	and.w	r3, r3, #8
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d008      	beq.n	800a510 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	699a      	ldr	r2, [r3, #24]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a50c:	619a      	str	r2, [r3, #24]

    return;
 800a50e:	e0bb      	b.n	800a688 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 80b6 	beq.w	800a688 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00f      	beq.n	800a546 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a52c:	f043 0204 	orr.w	r2, r3, #4
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	699a      	ldr	r2, [r3, #24]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a544:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00f      	beq.n	800a570 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a556:	f043 0201 	orr.w	r2, r3, #1
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	699a      	ldr	r2, [r3, #24]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a56e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00f      	beq.n	800a59a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a580:	f043 0208 	orr.w	r2, r3, #8
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	699a      	ldr	r2, [r3, #24]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a598:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	f003 0320 	and.w	r3, r3, #32
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00f      	beq.n	800a5c4 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	699a      	ldr	r2, [r3, #24]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f042 0220 	orr.w	r2, r2, #32
 800a5c2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d05b      	beq.n	800a686 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 0201 	bic.w	r2, r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	6919      	ldr	r1, [r3, #16]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	4b29      	ldr	r3, [pc, #164]	; (800a690 <HAL_SPI_IRQHandler+0x3bc>)
 800a5ea:	400b      	ands	r3, r1
 800a5ec:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a5f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a5f8:	d138      	bne.n	800a66c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689a      	ldr	r2, [r3, #8]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a608:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d013      	beq.n	800a63a <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a616:	4a1f      	ldr	r2, [pc, #124]	; (800a694 <HAL_SPI_IRQHandler+0x3c0>)
 800a618:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a61e:	4618      	mov	r0, r3
 800a620:	f7f7 fea8 	bl	8002374 <HAL_DMA_Abort_IT>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d007      	beq.n	800a63a <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d021      	beq.n	800a686 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a646:	4a13      	ldr	r2, [pc, #76]	; (800a694 <HAL_SPI_IRQHandler+0x3c0>)
 800a648:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a64e:	4618      	mov	r0, r3
 800a650:	f7f7 fe90 	bl	8002374 <HAL_DMA_Abort_IT>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d015      	beq.n	800a686 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a660:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a66a:	e00c      	b.n	800a686 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f82d 	bl	800a6d4 <HAL_SPI_ErrorCallback>
    return;
 800a67a:	bf00      	nop
 800a67c:	e003      	b.n	800a686 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a67e:	bf00      	nop
 800a680:	e002      	b.n	800a688 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800a682:	bf00      	nop
 800a684:	e000      	b.n	800a688 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800a686:	bf00      	nop
  }
}
 800a688:	3728      	adds	r7, #40	; 0x28
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	fffffc94 	.word	0xfffffc94
 800a694:	0800a6e9 	.word	0x0800a6e9

0800a698 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a6dc:	bf00      	nop
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f7ff ffe0 	bl	800a6d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a714:	bf00      	nop
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	699a      	ldr	r2, [r3, #24]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f042 0208 	orr.w	r2, r2, #8
 800a73a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	699a      	ldr	r2, [r3, #24]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f042 0210 	orr.w	r2, r2, #16
 800a74a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f022 0201 	bic.w	r2, r2, #1
 800a75a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	6919      	ldr	r1, [r3, #16]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	4b3c      	ldr	r3, [pc, #240]	; (800a858 <SPI_CloseTransfer+0x13c>)
 800a768:	400b      	ands	r3, r1
 800a76a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	689a      	ldr	r2, [r3, #8]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a77a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a782:	b2db      	uxtb	r3, r3
 800a784:	2b04      	cmp	r3, #4
 800a786:	d014      	beq.n	800a7b2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f003 0320 	and.w	r3, r3, #32
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00f      	beq.n	800a7b2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a798:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	699a      	ldr	r2, [r3, #24]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f042 0220 	orr.w	r2, r2, #32
 800a7b0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d014      	beq.n	800a7e8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00f      	beq.n	800a7e8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7ce:	f043 0204 	orr.w	r2, r3, #4
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	699a      	ldr	r2, [r3, #24]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7e6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00f      	beq.n	800a812 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7f8:	f043 0201 	orr.w	r2, r3, #1
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	699a      	ldr	r2, [r3, #24]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a810:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00f      	beq.n	800a83c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a822:	f043 0208 	orr.w	r2, r3, #8
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	699a      	ldr	r2, [r3, #24]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a83a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a84c:	bf00      	nop
 800a84e:	3714      	adds	r7, #20
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr
 800a858:	fffffc90 	.word	0xfffffc90

0800a85c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a868:	095b      	lsrs	r3, r3, #5
 800a86a:	3301      	adds	r3, #1
 800a86c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	3301      	adds	r3, #1
 800a874:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	3307      	adds	r3, #7
 800a87a:	08db      	lsrs	r3, r3, #3
 800a87c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	fb02 f303 	mul.w	r3, r2, r3
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
	...

0800a894 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d121      	bne.n	800a8ea <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	4b27      	ldr	r3, [pc, #156]	; (800a948 <FMC_SDRAM_Init+0xb4>)
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	6851      	ldr	r1, [r2, #4]
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	6892      	ldr	r2, [r2, #8]
 800a8b6:	4311      	orrs	r1, r2
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	68d2      	ldr	r2, [r2, #12]
 800a8bc:	4311      	orrs	r1, r2
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	6912      	ldr	r2, [r2, #16]
 800a8c2:	4311      	orrs	r1, r2
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	6952      	ldr	r2, [r2, #20]
 800a8c8:	4311      	orrs	r1, r2
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	6992      	ldr	r2, [r2, #24]
 800a8ce:	4311      	orrs	r1, r2
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	69d2      	ldr	r2, [r2, #28]
 800a8d4:	4311      	orrs	r1, r2
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	6a12      	ldr	r2, [r2, #32]
 800a8da:	4311      	orrs	r1, r2
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	431a      	orrs	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	601a      	str	r2, [r3, #0]
 800a8e8:	e026      	b.n	800a938 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	69d9      	ldr	r1, [r3, #28]
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	4319      	orrs	r1, r3
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	430b      	orrs	r3, r1
 800a902:	431a      	orrs	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	4b0e      	ldr	r3, [pc, #56]	; (800a948 <FMC_SDRAM_Init+0xb4>)
 800a90e:	4013      	ands	r3, r2
 800a910:	683a      	ldr	r2, [r7, #0]
 800a912:	6851      	ldr	r1, [r2, #4]
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	6892      	ldr	r2, [r2, #8]
 800a918:	4311      	orrs	r1, r2
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	68d2      	ldr	r2, [r2, #12]
 800a91e:	4311      	orrs	r1, r2
 800a920:	683a      	ldr	r2, [r7, #0]
 800a922:	6912      	ldr	r2, [r2, #16]
 800a924:	4311      	orrs	r1, r2
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	6952      	ldr	r2, [r2, #20]
 800a92a:	4311      	orrs	r1, r2
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	6992      	ldr	r2, [r2, #24]
 800a930:	430a      	orrs	r2, r1
 800a932:	431a      	orrs	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	ffff8000 	.word	0xffff8000

0800a94c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d128      	bne.n	800a9b0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	1e59      	subs	r1, r3, #1
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	3b01      	subs	r3, #1
 800a972:	011b      	lsls	r3, r3, #4
 800a974:	4319      	orrs	r1, r3
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	3b01      	subs	r3, #1
 800a97c:	021b      	lsls	r3, r3, #8
 800a97e:	4319      	orrs	r1, r3
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	3b01      	subs	r3, #1
 800a986:	031b      	lsls	r3, r3, #12
 800a988:	4319      	orrs	r1, r3
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	3b01      	subs	r3, #1
 800a990:	041b      	lsls	r3, r3, #16
 800a992:	4319      	orrs	r1, r3
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	3b01      	subs	r3, #1
 800a99a:	051b      	lsls	r3, r3, #20
 800a99c:	4319      	orrs	r1, r3
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	061b      	lsls	r3, r3, #24
 800a9a6:	430b      	orrs	r3, r1
 800a9a8:	431a      	orrs	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	609a      	str	r2, [r3, #8]
 800a9ae:	e02d      	b.n	800aa0c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	689a      	ldr	r2, [r3, #8]
 800a9b4:	4b19      	ldr	r3, [pc, #100]	; (800aa1c <FMC_SDRAM_Timing_Init+0xd0>)
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	68d2      	ldr	r2, [r2, #12]
 800a9bc:	3a01      	subs	r2, #1
 800a9be:	0311      	lsls	r1, r2, #12
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	6952      	ldr	r2, [r2, #20]
 800a9c4:	3a01      	subs	r2, #1
 800a9c6:	0512      	lsls	r2, r2, #20
 800a9c8:	430a      	orrs	r2, r1
 800a9ca:	431a      	orrs	r2, r3
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	1e59      	subs	r1, r3, #1
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	011b      	lsls	r3, r3, #4
 800a9e6:	4319      	orrs	r1, r3
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	021b      	lsls	r3, r3, #8
 800a9f0:	4319      	orrs	r1, r3
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	041b      	lsls	r3, r3, #16
 800a9fa:	4319      	orrs	r1, r3
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	061b      	lsls	r3, r3, #24
 800aa04:	430b      	orrs	r3, r1
 800aa06:	431a      	orrs	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	ff0f0fff 	.word	0xff0f0fff

0800aa20 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	691a      	ldr	r2, [r3, #16]
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	6819      	ldr	r1, [r3, #0]
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	4319      	orrs	r1, r3
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	015b      	lsls	r3, r3, #5
 800aa42:	4319      	orrs	r1, r3
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	025b      	lsls	r3, r3, #9
 800aa4a:	430b      	orrs	r3, r1
 800aa4c:	431a      	orrs	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	611a      	str	r2, [r3, #16]
                          (Command->CommandTarget)                                               |
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	695a      	ldr	r2, [r3, #20]
 800aa6e:	4b07      	ldr	r3, [pc, #28]	; (800aa8c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800aa70:	4013      	ands	r3, r2
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	0052      	lsls	r2, r2, #1
 800aa76:	431a      	orrs	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	370c      	adds	r7, #12
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	ffffc001 	.word	0xffffc001

0800aa90 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aa90:	b084      	sub	sp, #16
 800aa92:	b480      	push	{r7}
 800aa94:	b085      	sub	sp, #20
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	f107 001c 	add.w	r0, r7, #28
 800aa9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aaa6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800aaa8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aaaa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800aaae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800aab2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800aab6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685a      	ldr	r2, [r3, #4]
 800aac2:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <SDMMC_Init+0x50>)
 800aac4:	4013      	ands	r3, r2
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	431a      	orrs	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	b004      	add	sp, #16
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	ffc02c00 	.word	0xffc02c00

0800aae4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b083      	sub	sp, #12
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f043 0203 	orr.w	r2, r3, #3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	370c      	adds	r7, #12
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0303 	and.w	r3, r3, #3
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
	...

0800ab60 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab7e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ab84:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ab8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68da      	ldr	r2, [r3, #12]
 800ab96:	4b06      	ldr	r3, [pc, #24]	; (800abb0 <SDMMC_SendCommand+0x50>)
 800ab98:	4013      	ands	r3, r2
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	431a      	orrs	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	fffee0c0 	.word	0xfffee0c0

0800abb4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	b2db      	uxtb	r3, r3
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800abce:	b480      	push	{r7}
 800abd0:	b085      	sub	sp, #20
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	3314      	adds	r3, #20
 800abdc:	461a      	mov	r2, r3
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	4413      	add	r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac1a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ac20:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ac26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	431a      	orrs	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac3e:	2300      	movs	r3, #0

}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3714      	adds	r7, #20
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b088      	sub	sp, #32
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac5a:	2310      	movs	r3, #16
 800ac5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac64:	2300      	movs	r3, #0
 800ac66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac6e:	f107 0308 	add.w	r3, r7, #8
 800ac72:	4619      	mov	r1, r3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f7ff ff73 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac7e:	2110      	movs	r1, #16
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 faab 	bl	800b1dc <SDMMC_GetCmdResp1>
 800ac86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac88:	69fb      	ldr	r3, [r7, #28]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3720      	adds	r7, #32
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b088      	sub	sp, #32
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aca0:	2311      	movs	r3, #17
 800aca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acaa:	2300      	movs	r3, #0
 800acac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acb4:	f107 0308 	add.w	r3, r7, #8
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff ff50 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800acc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc4:	2111      	movs	r1, #17
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fa88 	bl	800b1dc <SDMMC_GetCmdResp1>
 800accc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acce:	69fb      	ldr	r3, [r7, #28]
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3720      	adds	r7, #32
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ace6:	2312      	movs	r3, #18
 800ace8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acf0:	2300      	movs	r3, #0
 800acf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acfa:	f107 0308 	add.w	r3, r7, #8
 800acfe:	4619      	mov	r1, r3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7ff ff2d 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad06:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad0a:	2112      	movs	r1, #18
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 fa65 	bl	800b1dc <SDMMC_GetCmdResp1>
 800ad12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad14:	69fb      	ldr	r3, [r7, #28]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3720      	adds	r7, #32
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b088      	sub	sp, #32
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
 800ad26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ad2c:	2318      	movs	r3, #24
 800ad2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad36:	2300      	movs	r3, #0
 800ad38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad40:	f107 0308 	add.w	r3, r7, #8
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7ff ff0a 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad50:	2118      	movs	r1, #24
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fa42 	bl	800b1dc <SDMMC_GetCmdResp1>
 800ad58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad5a:	69fb      	ldr	r3, [r7, #28]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3720      	adds	r7, #32
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b088      	sub	sp, #32
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad72:	2319      	movs	r3, #25
 800ad74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad76:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad86:	f107 0308 	add.w	r3, r7, #8
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7ff fee7 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad92:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad96:	2119      	movs	r1, #25
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fa1f 	bl	800b1dc <SDMMC_GetCmdResp1>
 800ad9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ada0:	69fb      	ldr	r3, [r7, #28]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3720      	adds	r7, #32
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
	...

0800adac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800adb4:	2300      	movs	r3, #0
 800adb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800adb8:	230c      	movs	r3, #12
 800adba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adc2:	2300      	movs	r3, #0
 800adc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adca:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ade4:	f107 0308 	add.w	r3, r7, #8
 800ade8:	4619      	mov	r1, r3
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7ff feb8 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800adf0:	4a0b      	ldr	r2, [pc, #44]	; (800ae20 <SDMMC_CmdStopTransfer+0x74>)
 800adf2:	210c      	movs	r1, #12
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 f9f1 	bl	800b1dc <SDMMC_GetCmdResp1>
 800adfa:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae0e:	d101      	bne.n	800ae14 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ae10:	2300      	movs	r3, #0
 800ae12:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ae14:	69fb      	ldr	r3, [r7, #28]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3720      	adds	r7, #32
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	05f5e100 	.word	0x05f5e100

0800ae24 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08a      	sub	sp, #40	; 0x28
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ae34:	2307      	movs	r3, #7
 800ae36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae3c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae46:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae48:	f107 0310 	add.w	r3, r7, #16
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff fe86 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae58:	2107      	movs	r1, #7
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f000 f9be 	bl	800b1dc <SDMMC_GetCmdResp1>
 800ae60:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3728      	adds	r7, #40	; 0x28
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b088      	sub	sp, #32
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ae74:	2300      	movs	r3, #0
 800ae76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae80:	2300      	movs	r3, #0
 800ae82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae8a:	f107 0308 	add.w	r3, r7, #8
 800ae8e:	4619      	mov	r1, r3
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f7ff fe65 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f976 	bl	800b188 <SDMMC_GetCmdError>
 800ae9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3720      	adds	r7, #32
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b088      	sub	sp, #32
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aeb0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aeb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aeb6:	2308      	movs	r3, #8
 800aeb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aec0:	2300      	movs	r3, #0
 800aec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aec8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeca:	f107 0308 	add.w	r3, r7, #8
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7ff fe45 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fb6a 	bl	800b5b0 <SDMMC_GetCmdResp7>
 800aedc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aede:	69fb      	ldr	r3, [r7, #28]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3720      	adds	r7, #32
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b088      	sub	sp, #32
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aef6:	2337      	movs	r3, #55	; 0x37
 800aef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aefa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aefe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af00:	2300      	movs	r3, #0
 800af02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af0a:	f107 0308 	add.w	r3, r7, #8
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff fe25 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af16:	f241 3288 	movw	r2, #5000	; 0x1388
 800af1a:	2137      	movs	r1, #55	; 0x37
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 f95d 	bl	800b1dc <SDMMC_GetCmdResp1>
 800af22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af24:	69fb      	ldr	r3, [r7, #28]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3720      	adds	r7, #32
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b088      	sub	sp, #32
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af3c:	2329      	movs	r3, #41	; 0x29
 800af3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af46:	2300      	movs	r3, #0
 800af48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af50:	f107 0308 	add.w	r3, r7, #8
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7ff fe02 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 fa75 	bl	800b44c <SDMMC_GetCmdResp3>
 800af62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af64:	69fb      	ldr	r3, [r7, #28]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3720      	adds	r7, #32
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b088      	sub	sp, #32
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af7c:	2306      	movs	r3, #6
 800af7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af86:	2300      	movs	r3, #0
 800af88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af90:	f107 0308 	add.w	r3, r7, #8
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff fde2 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800af9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800afa0:	2106      	movs	r1, #6
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f91a 	bl	800b1dc <SDMMC_GetCmdResp1>
 800afa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afaa:	69fb      	ldr	r3, [r7, #28]
}
 800afac:	4618      	mov	r0, r3
 800afae:	3720      	adds	r7, #32
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b088      	sub	sp, #32
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800afbc:	2300      	movs	r3, #0
 800afbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800afc0:	2333      	movs	r3, #51	; 0x33
 800afc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afca:	2300      	movs	r3, #0
 800afcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afd4:	f107 0308 	add.w	r3, r7, #8
 800afd8:	4619      	mov	r1, r3
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7ff fdc0 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800afe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe4:	2133      	movs	r1, #51	; 0x33
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f8f8 	bl	800b1dc <SDMMC_GetCmdResp1>
 800afec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afee:	69fb      	ldr	r3, [r7, #28]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3720      	adds	r7, #32
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b088      	sub	sp, #32
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b000:	2300      	movs	r3, #0
 800b002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b004:	2302      	movs	r3, #2
 800b006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b008:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b00c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b00e:	2300      	movs	r3, #0
 800b010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b016:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b018:	f107 0308 	add.w	r3, r7, #8
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7ff fd9e 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f9c9 	bl	800b3bc <SDMMC_GetCmdResp2>
 800b02a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b02c:	69fb      	ldr	r3, [r7, #28]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3720      	adds	r7, #32
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b088      	sub	sp, #32
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b044:	2309      	movs	r3, #9
 800b046:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b048:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b04c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b04e:	2300      	movs	r3, #0
 800b050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b056:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b058:	f107 0308 	add.w	r3, r7, #8
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff fd7e 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 f9a9 	bl	800b3bc <SDMMC_GetCmdResp2>
 800b06a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b06c:	69fb      	ldr	r3, [r7, #28]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3720      	adds	r7, #32
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b088      	sub	sp, #32
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b080:	2300      	movs	r3, #0
 800b082:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b084:	2303      	movs	r3, #3
 800b086:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b08c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b08e:	2300      	movs	r3, #0
 800b090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b096:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b098:	f107 0308 	add.w	r3, r7, #8
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7ff fd5e 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b0a4:	683a      	ldr	r2, [r7, #0]
 800b0a6:	2103      	movs	r1, #3
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fa0b 	bl	800b4c4 <SDMMC_GetCmdResp6>
 800b0ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0b0:	69fb      	ldr	r3, [r7, #28]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3720      	adds	r7, #32
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b088      	sub	sp, #32
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b0c8:	230d      	movs	r3, #13
 800b0ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0dc:	f107 0308 	add.w	r3, r7, #8
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7ff fd3c 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b0e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0ec:	210d      	movs	r1, #13
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f874 	bl	800b1dc <SDMMC_GetCmdResp1>
 800b0f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0f6:	69fb      	ldr	r3, [r7, #28]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3720      	adds	r7, #32
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b108:	2300      	movs	r3, #0
 800b10a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b10c:	230d      	movs	r3, #13
 800b10e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b110:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b116:	2300      	movs	r3, #0
 800b118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b11a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b11e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b120:	f107 0308 	add.w	r3, r7, #8
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7ff fd1a 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b12c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b130:	210d      	movs	r1, #13
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 f852 	bl	800b1dc <SDMMC_GetCmdResp1>
 800b138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b13a:	69fb      	ldr	r3, [r7, #28]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3720      	adds	r7, #32
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b088      	sub	sp, #32
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b14c:	2300      	movs	r3, #0
 800b14e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b150:	230b      	movs	r3, #11
 800b152:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b154:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b15a:	2300      	movs	r3, #0
 800b15c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b15e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b162:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b164:	f107 0308 	add.w	r3, r7, #8
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7ff fcf8 	bl	800ab60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b170:	f241 3288 	movw	r2, #5000	; 0x1388
 800b174:	210b      	movs	r1, #11
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f830 	bl	800b1dc <SDMMC_GetCmdResp1>
 800b17c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b17e:	69fb      	ldr	r3, [r7, #28]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3720      	adds	r7, #32
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b188:	b490      	push	{r4, r7}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b190:	4b0f      	ldr	r3, [pc, #60]	; (800b1d0 <SDMMC_GetCmdError+0x48>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a0f      	ldr	r2, [pc, #60]	; (800b1d4 <SDMMC_GetCmdError+0x4c>)
 800b196:	fba2 2303 	umull	r2, r3, r2, r3
 800b19a:	0a5b      	lsrs	r3, r3, #9
 800b19c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1a0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b1a4:	4623      	mov	r3, r4
 800b1a6:	1e5c      	subs	r4, r3, #1
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d102      	bne.n	800b1b2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1b0:	e009      	b.n	800b1c6 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d0f2      	beq.n	800b1a4 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a05      	ldr	r2, [pc, #20]	; (800b1d8 <SDMMC_GetCmdError+0x50>)
 800b1c2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bc90      	pop	{r4, r7}
 800b1ce:	4770      	bx	lr
 800b1d0:	20000010 	.word	0x20000010
 800b1d4:	10624dd3 	.word	0x10624dd3
 800b1d8:	002000c5 	.word	0x002000c5

0800b1dc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b1dc:	b590      	push	{r4, r7, lr}
 800b1de:	b087      	sub	sp, #28
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b1ea:	4b6f      	ldr	r3, [pc, #444]	; (800b3a8 <SDMMC_GetCmdResp1+0x1cc>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a6f      	ldr	r2, [pc, #444]	; (800b3ac <SDMMC_GetCmdResp1+0x1d0>)
 800b1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f4:	0a5b      	lsrs	r3, r3, #9
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b1fc:	4623      	mov	r3, r4
 800b1fe:	1e5c      	subs	r4, r3, #1
 800b200:	2b00      	cmp	r3, #0
 800b202:	d102      	bne.n	800b20a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b208:	e0c9      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b20e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b210:	697a      	ldr	r2, [r7, #20]
 800b212:	4b67      	ldr	r3, [pc, #412]	; (800b3b0 <SDMMC_GetCmdResp1+0x1d4>)
 800b214:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b216:	2b00      	cmp	r3, #0
 800b218:	d0f0      	beq.n	800b1fc <SDMMC_GetCmdResp1+0x20>
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1eb      	bne.n	800b1fc <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b228:	f003 0304 	and.w	r3, r3, #4
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d004      	beq.n	800b23a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2204      	movs	r2, #4
 800b234:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b236:	2304      	movs	r3, #4
 800b238:	e0b1      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b23e:	f003 0301 	and.w	r3, r3, #1
 800b242:	2b00      	cmp	r3, #0
 800b244:	d004      	beq.n	800b250 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2201      	movs	r2, #1
 800b24a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e0a6      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	4a58      	ldr	r2, [pc, #352]	; (800b3b4 <SDMMC_GetCmdResp1+0x1d8>)
 800b254:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f7ff fcac 	bl	800abb4 <SDMMC_GetCommandResponse>
 800b25c:	4603      	mov	r3, r0
 800b25e:	461a      	mov	r2, r3
 800b260:	7afb      	ldrb	r3, [r7, #11]
 800b262:	4293      	cmp	r3, r2
 800b264:	d001      	beq.n	800b26a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b266:	2301      	movs	r3, #1
 800b268:	e099      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b26a:	2100      	movs	r1, #0
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f7ff fcae 	bl	800abce <SDMMC_GetResponse>
 800b272:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	4b50      	ldr	r3, [pc, #320]	; (800b3b8 <SDMMC_GetCmdResp1+0x1dc>)
 800b278:	4013      	ands	r3, r2
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d101      	bne.n	800b282 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b27e:	2300      	movs	r3, #0
 800b280:	e08d      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	da02      	bge.n	800b28e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b28c:	e087      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b298:	2340      	movs	r3, #64	; 0x40
 800b29a:	e080      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b2a6:	2380      	movs	r3, #128	; 0x80
 800b2a8:	e079      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d002      	beq.n	800b2ba <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b2b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2b8:	e071      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b2c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2c8:	e069      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b2d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2d8:	e061      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b2e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2e8:	e059      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2f8:	e051      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b308:	e049      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b314:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b318:	e041      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b328:	e039      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d002      	beq.n	800b33a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b334:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b338:	e031      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d002      	beq.n	800b34a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b344:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b348:	e029      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b350:	2b00      	cmp	r3, #0
 800b352:	d002      	beq.n	800b35a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b354:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b358:	e021      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b364:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b368:	e019      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b374:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b378:	e011      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b384:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b388:	e009      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	f003 0308 	and.w	r3, r3, #8
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b394:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b398:	e001      	b.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b39a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	371c      	adds	r7, #28
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd90      	pop	{r4, r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	20000010 	.word	0x20000010
 800b3ac:	10624dd3 	.word	0x10624dd3
 800b3b0:	00200045 	.word	0x00200045
 800b3b4:	002000c5 	.word	0x002000c5
 800b3b8:	fdffe008 	.word	0xfdffe008

0800b3bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b3bc:	b490      	push	{r4, r7}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3c4:	4b1e      	ldr	r3, [pc, #120]	; (800b440 <SDMMC_GetCmdResp2+0x84>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a1e      	ldr	r2, [pc, #120]	; (800b444 <SDMMC_GetCmdResp2+0x88>)
 800b3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ce:	0a5b      	lsrs	r3, r3, #9
 800b3d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3d4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b3d8:	4623      	mov	r3, r4
 800b3da:	1e5c      	subs	r4, r3, #1
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d102      	bne.n	800b3e6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3e4:	e026      	b.n	800b434 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d0f0      	beq.n	800b3d8 <SDMMC_GetCmdResp2+0x1c>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1eb      	bne.n	800b3d8 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b404:	f003 0304 	and.w	r3, r3, #4
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d004      	beq.n	800b416 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2204      	movs	r2, #4
 800b410:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b412:	2304      	movs	r3, #4
 800b414:	e00e      	b.n	800b434 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d004      	beq.n	800b42c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2201      	movs	r2, #1
 800b426:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b428:	2301      	movs	r3, #1
 800b42a:	e003      	b.n	800b434 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a06      	ldr	r2, [pc, #24]	; (800b448 <SDMMC_GetCmdResp2+0x8c>)
 800b430:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bc90      	pop	{r4, r7}
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	20000010 	.word	0x20000010
 800b444:	10624dd3 	.word	0x10624dd3
 800b448:	002000c5 	.word	0x002000c5

0800b44c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b44c:	b490      	push	{r4, r7}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b454:	4b18      	ldr	r3, [pc, #96]	; (800b4b8 <SDMMC_GetCmdResp3+0x6c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a18      	ldr	r2, [pc, #96]	; (800b4bc <SDMMC_GetCmdResp3+0x70>)
 800b45a:	fba2 2303 	umull	r2, r3, r2, r3
 800b45e:	0a5b      	lsrs	r3, r3, #9
 800b460:	f241 3288 	movw	r2, #5000	; 0x1388
 800b464:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b468:	4623      	mov	r3, r4
 800b46a:	1e5c      	subs	r4, r3, #1
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d102      	bne.n	800b476 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b470:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b474:	e01b      	b.n	800b4ae <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b482:	2b00      	cmp	r3, #0
 800b484:	d0f0      	beq.n	800b468 <SDMMC_GetCmdResp3+0x1c>
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1eb      	bne.n	800b468 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b494:	f003 0304 	and.w	r3, r3, #4
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d004      	beq.n	800b4a6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2204      	movs	r2, #4
 800b4a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4a2:	2304      	movs	r3, #4
 800b4a4:	e003      	b.n	800b4ae <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a05      	ldr	r2, [pc, #20]	; (800b4c0 <SDMMC_GetCmdResp3+0x74>)
 800b4aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bc90      	pop	{r4, r7}
 800b4b6:	4770      	bx	lr
 800b4b8:	20000010 	.word	0x20000010
 800b4bc:	10624dd3 	.word	0x10624dd3
 800b4c0:	002000c5 	.word	0x002000c5

0800b4c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b4c4:	b590      	push	{r4, r7, lr}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	607a      	str	r2, [r7, #4]
 800b4d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4d2:	4b34      	ldr	r3, [pc, #208]	; (800b5a4 <SDMMC_GetCmdResp6+0xe0>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a34      	ldr	r2, [pc, #208]	; (800b5a8 <SDMMC_GetCmdResp6+0xe4>)
 800b4d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4dc:	0a5b      	lsrs	r3, r3, #9
 800b4de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4e2:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b4e6:	4623      	mov	r3, r4
 800b4e8:	1e5c      	subs	r4, r3, #1
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d102      	bne.n	800b4f4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4f2:	e052      	b.n	800b59a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4f8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b500:	2b00      	cmp	r3, #0
 800b502:	d0f0      	beq.n	800b4e6 <SDMMC_GetCmdResp6+0x22>
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1eb      	bne.n	800b4e6 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b512:	f003 0304 	and.w	r3, r3, #4
 800b516:	2b00      	cmp	r3, #0
 800b518:	d004      	beq.n	800b524 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2204      	movs	r2, #4
 800b51e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b520:	2304      	movs	r3, #4
 800b522:	e03a      	b.n	800b59a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b528:	f003 0301 	and.w	r3, r3, #1
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d004      	beq.n	800b53a <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2201      	movs	r2, #1
 800b534:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b536:	2301      	movs	r3, #1
 800b538:	e02f      	b.n	800b59a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f7ff fb3a 	bl	800abb4 <SDMMC_GetCommandResponse>
 800b540:	4603      	mov	r3, r0
 800b542:	461a      	mov	r2, r3
 800b544:	7afb      	ldrb	r3, [r7, #11]
 800b546:	4293      	cmp	r3, r2
 800b548:	d001      	beq.n	800b54e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e025      	b.n	800b59a <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	4a16      	ldr	r2, [pc, #88]	; (800b5ac <SDMMC_GetCmdResp6+0xe8>)
 800b552:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b554:	2100      	movs	r1, #0
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f7ff fb39 	bl	800abce <SDMMC_GetResponse>
 800b55c:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d106      	bne.n	800b576 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	0c1b      	lsrs	r3, r3, #16
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b572:	2300      	movs	r3, #0
 800b574:	e011      	b.n	800b59a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b584:	e009      	b.n	800b59a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b594:	e001      	b.n	800b59a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	371c      	adds	r7, #28
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd90      	pop	{r4, r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20000010 	.word	0x20000010
 800b5a8:	10624dd3 	.word	0x10624dd3
 800b5ac:	002000c5 	.word	0x002000c5

0800b5b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b5b0:	b490      	push	{r4, r7}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5b8:	4b21      	ldr	r3, [pc, #132]	; (800b640 <SDMMC_GetCmdResp7+0x90>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a21      	ldr	r2, [pc, #132]	; (800b644 <SDMMC_GetCmdResp7+0x94>)
 800b5be:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c2:	0a5b      	lsrs	r3, r3, #9
 800b5c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5c8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b5cc:	4623      	mov	r3, r4
 800b5ce:	1e5c      	subs	r4, r3, #1
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d102      	bne.n	800b5da <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5d8:	e02c      	b.n	800b634 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d0f0      	beq.n	800b5cc <SDMMC_GetCmdResp7+0x1c>
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1eb      	bne.n	800b5cc <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f8:	f003 0304 	and.w	r3, r3, #4
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d004      	beq.n	800b60a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2204      	movs	r2, #4
 800b604:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b606:	2304      	movs	r3, #4
 800b608:	e014      	b.n	800b634 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60e:	f003 0301 	and.w	r3, r3, #1
 800b612:	2b00      	cmp	r3, #0
 800b614:	d004      	beq.n	800b620 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2201      	movs	r2, #1
 800b61a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e009      	b.n	800b634 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2240      	movs	r2, #64	; 0x40
 800b630:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b632:	2300      	movs	r3, #0

}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bc90      	pop	{r4, r7}
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	20000010 	.word	0x20000010
 800b644:	10624dd3 	.word	0x10624dd3

0800b648 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 800b654:	2010      	movs	r0, #16
 800b656:	f000 f8dd 	bl	800b814 <mpool_align>
 800b65a:	4602      	mov	r2, r0
 800b65c:	4b0e      	ldr	r3, [pc, #56]	; (800b698 <mpool_create+0x50>)
 800b65e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    pool->mpool = (char*)memory;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	601a      	str	r2, [r3, #0]
    pool->usize  = 0;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	605a      	str	r2, [r3, #4]
    pool->msize  = size;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	609a      	str	r2, [r3, #8]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6818      	ldr	r0, [r3, #0]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	689a      	ldr	r2, [r3, #8]
 800b67a:	4b07      	ldr	r3, [pc, #28]	; (800b698 <mpool_create+0x50>)
 800b67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	2200      	movs	r2, #0
 800b682:	2100      	movs	r1, #0
 800b684:	f000 f8d4 	bl	800b830 <create_node>
 800b688:	4602      	mov	r2, r0
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	60da      	str	r2, [r3, #12]
    {
        memory[i+leaf.header_size]=0;
    }
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}
 800b68e:	bf00      	nop
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	20000054 	.word	0x20000054

0800b69c <leaf_pool_init>:

void leaf_pool_init(char* memory, size_t size)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
    mpool_create(memory, size, &leaf._internal_mempool);
 800b6a6:	4a06      	ldr	r2, [pc, #24]	; (800b6c0 <leaf_pool_init+0x24>)
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7ff ffcc 	bl	800b648 <mpool_create>
    
    leaf.mempool = &leaf._internal_mempool;
 800b6b0:	4b04      	ldr	r3, [pc, #16]	; (800b6c4 <leaf_pool_init+0x28>)
 800b6b2:	4a03      	ldr	r2, [pc, #12]	; (800b6c0 <leaf_pool_init+0x24>)
 800b6b4:	619a      	str	r2, [r3, #24]
}
 800b6b6:	bf00      	nop
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	20000070 	.word	0x20000070
 800b6c4:	20000054 	.word	0x20000054

0800b6c8 <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 800b6c8:	b590      	push	{r4, r7, lr}
 800b6ca:	b08b      	sub	sp, #44	; 0x2c
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d110      	bne.n	800b6fc <mpool_alloc+0x34>
    {
        if ((pool->msize - pool->usize) > asize)
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	689a      	ldr	r2, [r3, #8]
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d203      	bcs.n	800b6f2 <mpool_alloc+0x2a>
        {
            LEAF_internalErrorCallback(LEAFMempoolFragmentation);
 800b6ea:	2001      	movs	r0, #1
 800b6ec:	f000 fa3c 	bl	800bb68 <LEAF_internalErrorCallback>
 800b6f0:	e002      	b.n	800b6f8 <mpool_alloc+0x30>
        }
        else
        {
            LEAF_internalErrorCallback(LEAFMempoolOverrun);
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	f000 fa38 	bl	800bb68 <LEAF_internalErrorCallback>
        }
        return NULL;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	e085      	b.n	800b808 <mpool_alloc+0x140>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 f889 	bl	800b814 <mpool_align>
 800b702:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 800b70a:	e016      	b.n	800b73a <mpool_alloc+0x72>
    {
        node_to_alloc = node_to_alloc->next;
 800b70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 800b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b714:	2b00      	cmp	r3, #0
 800b716:	d110      	bne.n	800b73a <mpool_alloc+0x72>
        {
            if ((pool->msize - pool->usize) > asize)
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	689a      	ldr	r2, [r3, #8]
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	429a      	cmp	r2, r3
 800b726:	d203      	bcs.n	800b730 <mpool_alloc+0x68>
            {
                LEAF_internalErrorCallback(LEAFMempoolFragmentation);
 800b728:	2001      	movs	r0, #1
 800b72a:	f000 fa1d 	bl	800bb68 <LEAF_internalErrorCallback>
 800b72e:	e002      	b.n	800b736 <mpool_alloc+0x6e>
            }
            else
            {
                LEAF_internalErrorCallback(LEAFMempoolOverrun);
 800b730:	2000      	movs	r0, #0
 800b732:	f000 fa19 	bl	800bb68 <LEAF_internalErrorCallback>
            }
            return NULL;
 800b736:	2300      	movs	r3, #0
 800b738:	e066      	b.n	800b808 <mpool_alloc+0x140>
    while (node_to_alloc->size < size_to_alloc)
 800b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	69ba      	ldr	r2, [r7, #24]
 800b740:	429a      	cmp	r2, r3
 800b742:	d8e3      	bhi.n	800b70c <mpool_alloc+0x44>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	68da      	ldr	r2, [r3, #12]
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 800b74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b750:	69ba      	ldr	r2, [r7, #24]
 800b752:	60da      	str	r2, [r3, #12]
    if (leftover > leaf.header_size)
 800b754:	4b2e      	ldr	r3, [pc, #184]	; (800b810 <mpool_alloc+0x148>)
 800b756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b758:	697a      	ldr	r2, [r7, #20]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d91d      	bls.n	800b79a <mpool_alloc+0xd2>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800b75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	6812      	ldr	r2, [r2, #0]
 800b764:	1a9b      	subs	r3, r3, r2
 800b766:	613b      	str	r3, [r7, #16]
        offset += leaf.header_size + node_to_alloc->size;
 800b768:	4b29      	ldr	r3, [pc, #164]	; (800b810 <mpool_alloc+0x148>)
 800b76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	441a      	add	r2, r3
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	4413      	add	r3, r2
 800b776:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 800b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b782:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 800b784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b786:	689c      	ldr	r4, [r3, #8]
                               leftover - leaf.header_size);
 800b788:	4b21      	ldr	r3, [pc, #132]	; (800b810 <mpool_alloc+0x148>)
 800b78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        new_node = create_node(&pool->mpool[offset],
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	4622      	mov	r2, r4
 800b792:	f000 f84d 	bl	800b830 <create_node>
 800b796:	6238      	str	r0, [r7, #32]
 800b798:	e008      	b.n	800b7ac <mpool_alloc+0xe4>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 800b79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79c:	68da      	ldr	r2, [r3, #12]
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	441a      	add	r2, r3
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a4:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d102      	bne.n	800b7bc <mpool_alloc+0xf4>
    {
        pool->head = new_node;
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	6a3a      	ldr	r2, [r7, #32]
 800b7ba:	60da      	str	r2, [r3, #12]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 800b7bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7be:	f000 f859 	bl	800b874 <delink_node>
    
    pool->usize += leaf.header_size + node_to_alloc->size;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	685a      	ldr	r2, [r3, #4]
 800b7c6:	4b12      	ldr	r3, [pc, #72]	; (800b810 <mpool_alloc+0x148>)
 800b7c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	440b      	add	r3, r1
 800b7d0:	441a      	add	r2, r3
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	605a      	str	r2, [r3, #4]
    
    if (leaf.clearOnAllocation > 0)
 800b7d6:	4b0e      	ldr	r3, [pc, #56]	; (800b810 <mpool_alloc+0x148>)
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	dd12      	ble.n	800b804 <mpool_alloc+0x13c>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 800b7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	61fb      	str	r3, [r7, #28]
 800b7e8:	e007      	b.n	800b7fa <mpool_alloc+0x132>
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	701a      	strb	r2, [r3, #0]
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	61fb      	str	r3, [r7, #28]
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fc:	68da      	ldr	r2, [r3, #12]
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	429a      	cmp	r2, r3
 800b802:	d8f2      	bhi.n	800b7ea <mpool_alloc+0x122>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	681b      	ldr	r3, [r3, #0]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	372c      	adds	r7, #44	; 0x2c
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd90      	pop	{r4, r7, pc}
 800b810:	20000054 	.word	0x20000054

0800b814 <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3307      	adds	r3, #7
 800b820:	f023 0307 	bic.w	r3, r3, #7
}
 800b824:	4618      	mov	r0, r3
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size)
{
 800b830:	b480      	push	{r7}
 800b832:	b087      	sub	sp, #28
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]
 800b83c:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	617b      	str	r3, [r7, #20]
    node->pool = block_location + leaf.header_size;
 800b842:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <create_node+0x40>)
 800b844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	441a      	add	r2, r3
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	601a      	str	r2, [r3, #0]
    node->next = next;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	609a      	str	r2, [r3, #8]
    node->size = size;
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	60da      	str	r2, [r3, #12]
    
    return node;
 800b860:	697b      	ldr	r3, [r7, #20]
}
 800b862:	4618      	mov	r0, r3
 800b864:	371c      	adds	r7, #28
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	20000054 	.word	0x20000054

0800b874 <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d004      	beq.n	800b88e <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	6892      	ldr	r2, [r2, #8]
 800b88c:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d004      	beq.n	800b8a0 <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	6852      	ldr	r2, [r2, #4]
 800b89e:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	609a      	str	r2, [r3, #8]
}
 800b8ac:	bf00      	nop
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
    tMempool_initToPool(mp, memory, size, &leaf.mempool);
 800b8c4:	4b04      	ldr	r3, [pc, #16]	; (800b8d8 <tMempool_init+0x20>)
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	68b9      	ldr	r1, [r7, #8]
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f000 f806 	bl	800b8dc <tMempool_initToPool>
}
 800b8d0:	bf00      	nop
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	2000006c 	.word	0x2000006c

0800b8dc <tMempool_initToPool>:
{
    tMempool_freeFromPool(mp, &leaf.mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
 800b8e8:	603b      	str	r3, [r7, #0]
    _tMempool* mm = *mem;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	617b      	str	r3, [r7, #20]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800b8f0:	6979      	ldr	r1, [r7, #20]
 800b8f2:	2010      	movs	r0, #16
 800b8f4:	f7ff fee8 	bl	800b6c8 <mpool_alloc>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	613b      	str	r3, [r7, #16]
    
    mpool_create (memory, size, m);
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	6879      	ldr	r1, [r7, #4]
 800b908:	68b8      	ldr	r0, [r7, #8]
 800b90a:	f7ff fe9d 	bl	800b648 <mpool_create>
}
 800b90e:	bf00      	nop
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
	...

0800b918 <tCycle_init>:
    c->inc = c->freq * leaf.invSampleRate;
}

// Cycle
void    tCycle_init(tCycle* const cy)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
    tCycle_initToPool(cy, &leaf.mempool);
 800b920:	4903      	ldr	r1, [pc, #12]	; (800b930 <tCycle_init+0x18>)
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f806 	bl	800b934 <tCycle_initToPool>
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	2000006c 	.word	0x2000006c

0800b934 <tCycle_initToPool>:

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	60fb      	str	r3, [r7, #12]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 800b944:	68f9      	ldr	r1, [r7, #12]
 800b946:	2010      	movs	r0, #16
 800b948:	f7ff febe 	bl	800b6c8 <mpool_alloc>
 800b94c:	4602      	mov	r2, r0
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	601a      	str	r2, [r3, #0]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	60bb      	str	r3, [r7, #8]
    c->mempool = m;
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	601a      	str	r2, [r3, #0]
    
    c->inc      =  0.0f;
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	f04f 0200 	mov.w	r2, #0
 800b964:	609a      	str	r2, [r3, #8]
    c->phase    =  0.0f;
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	f04f 0200 	mov.w	r2, #0
 800b96c:	605a      	str	r2, [r3, #4]
}
 800b96e:	bf00      	nop
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
	...

0800b978 <tCycle_setFreq>:
    
    mpool_free((char*)c, c->mempool);
}

void     tCycle_setFreq(tCycle* const cy, float freq)
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	ed87 0a00 	vstr	s0, [r7]
    _tCycle* c = *cy;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	60fb      	str	r3, [r7, #12]
    
    c->freq  = freq;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	60da      	str	r2, [r3, #12]

    c->inc = freq * leaf.invSampleRate;
 800b990:	4b07      	ldr	r3, [pc, #28]	; (800b9b0 <tCycle_setFreq+0x38>)
 800b992:	ed93 7a01 	vldr	s14, [r3, #4]
 800b996:	edd7 7a00 	vldr	s15, [r7]
 800b99a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800b9a4:	bf00      	nop
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	20000054 	.word	0x20000054

0800b9b4 <tCycle_tick>:

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b089      	sub	sp, #36	; 0x24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
    _tCycle* c = *cy;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	61bb      	str	r3, [r7, #24]
    float fracPart;
    float samp0;
    float samp1;
    
    // Phasor increment
    c->phase += c->inc;
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	ed93 7a01 	vldr	s14, [r3, #4]
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	edd3 7a02 	vldr	s15, [r3, #8]
 800b9ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	edc3 7a01 	vstr	s15, [r3, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 800b9d8:	e009      	b.n	800b9ee <tCycle_tick+0x3a>
 800b9da:	69bb      	ldr	r3, [r7, #24]
 800b9dc:	edd3 7a01 	vldr	s15, [r3, #4]
 800b9e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	edc3 7a01 	vstr	s15, [r3, #4]
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	edd3 7a01 	vldr	s15, [r3, #4]
 800b9f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba00:	daeb      	bge.n	800b9da <tCycle_tick+0x26>
    while (c->phase < 0.0f) c->phase += 1.0f;
 800ba02:	e009      	b.n	800ba18 <tCycle_tick+0x64>
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	edc3 7a01 	vstr	s15, [r3, #4]
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba26:	d4ed      	bmi.n	800ba04 <tCycle_tick+0x50>

    // Wavetable synthesis

    temp = SINE_TABLE_SIZE * c->phase;
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba2e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800bab4 <tCycle_tick+0x100>
 800ba32:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba36:	edc7 7a05 	vstr	s15, [r7, #20]
    intPart = (int)temp;
 800ba3a:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba42:	ee17 3a90 	vmov	r3, s15
 800ba46:	61fb      	str	r3, [r7, #28]
    fracPart = temp - (float)intPart;
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	ee07 3a90 	vmov	s15, r3
 800ba4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba52:	ed97 7a05 	vldr	s14, [r7, #20]
 800ba56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba5a:	edc7 7a04 	vstr	s15, [r7, #16]
    samp0 = __leaf_table_sinewave[intPart];
 800ba5e:	4a16      	ldr	r2, [pc, #88]	; (800bab8 <tCycle_tick+0x104>)
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4413      	add	r3, r2
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	60fb      	str	r3, [r7, #12]
    if (++intPart >= SINE_TABLE_SIZE) intPart = 0;
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	61fb      	str	r3, [r7, #28]
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba76:	db01      	blt.n	800ba7c <tCycle_tick+0xc8>
 800ba78:	2300      	movs	r3, #0
 800ba7a:	61fb      	str	r3, [r7, #28]
    samp1 = __leaf_table_sinewave[intPart];
 800ba7c:	4a0e      	ldr	r2, [pc, #56]	; (800bab8 <tCycle_tick+0x104>)
 800ba7e:	69fb      	ldr	r3, [r7, #28]
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4413      	add	r3, r2
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	60bb      	str	r3, [r7, #8]

    return (samp0 + (samp1 - samp0) * fracPart);
 800ba88:	ed97 7a02 	vldr	s14, [r7, #8]
 800ba8c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba94:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba9c:	edd7 7a03 	vldr	s15, [r7, #12]
 800baa0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800baa4:	eeb0 0a67 	vmov.f32	s0, s15
 800baa8:	3724      	adds	r7, #36	; 0x24
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	45000000 	.word	0x45000000
 800bab8:	0800dcbc 	.word	0x0800dcbc

0800babc <LEAF_init>:

LEAF leaf;

void LEAF_init(float sr, int blocksize, char* memory, size_t memorysize, float(*random)(void))

{
 800babc:	b580      	push	{r7, lr}
 800babe:	b088      	sub	sp, #32
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	ed87 0a05 	vstr	s0, [r7, #20]
 800bac6:	6138      	str	r0, [r7, #16]
 800bac8:	60f9      	str	r1, [r7, #12]
 800baca:	60ba      	str	r2, [r7, #8]
 800bacc:	607b      	str	r3, [r7, #4]
    leaf_pool_init(memory, memorysize);
 800bace:	68b9      	ldr	r1, [r7, #8]
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f7ff fde3 	bl	800b69c <leaf_pool_init>
    
    leaf.sampleRate = sr;
 800bad6:	4a1b      	ldr	r2, [pc, #108]	; (800bb44 <LEAF_init+0x88>)
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	6013      	str	r3, [r2, #0]

    leaf.blockSize = blocksize;
 800badc:	4a19      	ldr	r2, [pc, #100]	; (800bb44 <LEAF_init+0x88>)
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	6093      	str	r3, [r2, #8]
    
    leaf.invSampleRate = 1.0f/sr;
 800bae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bae6:	ed97 7a05 	vldr	s14, [r7, #20]
 800baea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baee:	4b15      	ldr	r3, [pc, #84]	; (800bb44 <LEAF_init+0x88>)
 800baf0:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 800baf4:	4b13      	ldr	r3, [pc, #76]	; (800bb44 <LEAF_init+0x88>)
 800baf6:	edd3 7a01 	vldr	s15, [r3, #4]
 800bafa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800bb48 <LEAF_init+0x8c>
 800bafe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb02:	4b10      	ldr	r3, [pc, #64]	; (800bb44 <LEAF_init+0x88>)
 800bb04:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf.random = random;
 800bb08:	4a0e      	ldr	r2, [pc, #56]	; (800bb44 <LEAF_init+0x88>)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6113      	str	r3, [r2, #16]
    
    leaf.clearOnAllocation = 0;
 800bb0e:	4b0d      	ldr	r3, [pc, #52]	; (800bb44 <LEAF_init+0x88>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	615a      	str	r2, [r3, #20]
    
    leaf.errorCallback = &LEAF_defaultErrorCallback;
 800bb14:	4b0b      	ldr	r3, [pc, #44]	; (800bb44 <LEAF_init+0x88>)
 800bb16:	4a0d      	ldr	r2, [pc, #52]	; (800bb4c <LEAF_init+0x90>)
 800bb18:	631a      	str	r2, [r3, #48]	; 0x30
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	61fb      	str	r3, [r7, #28]
 800bb1e:	e009      	b.n	800bb34 <LEAF_init+0x78>
        leaf.errorState[i] = 0;
 800bb20:	4a08      	ldr	r2, [pc, #32]	; (800bb44 <LEAF_init+0x88>)
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	330c      	adds	r3, #12
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4413      	add	r3, r2
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	3301      	adds	r3, #1
 800bb32:	61fb      	str	r3, [r7, #28]
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	ddf2      	ble.n	800bb20 <LEAF_init+0x64>
}
 800bb3a:	bf00      	nop
 800bb3c:	3720      	adds	r7, #32
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	20000054 	.word	0x20000054
 800bb48:	40c90fdb 	.word	0x40c90fdb
 800bb4c:	0800bb51 	.word	0x0800bb51

0800bb50 <LEAF_defaultErrorCallback>:
{
    return leaf.sampleRate;
}

void LEAF_defaultErrorCallback(LEAFErrorType whichone)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	4603      	mov	r3, r0
 800bb58:	71fb      	strb	r3, [r7, #7]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 800bb5a:	bf00      	nop
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
	...

0800bb68 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAFErrorType whichone)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	4603      	mov	r3, r0
 800bb70:	71fb      	strb	r3, [r7, #7]
    leaf.errorState[whichone] = 1;
 800bb72:	79fb      	ldrb	r3, [r7, #7]
 800bb74:	4a07      	ldr	r2, [pc, #28]	; (800bb94 <LEAF_internalErrorCallback+0x2c>)
 800bb76:	330c      	adds	r3, #12
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	4413      	add	r3, r2
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	605a      	str	r2, [r3, #4]
    leaf.errorCallback(whichone);
 800bb80:	4b04      	ldr	r3, [pc, #16]	; (800bb94 <LEAF_internalErrorCallback+0x2c>)
 800bb82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb84:	79fa      	ldrb	r2, [r7, #7]
 800bb86:	4610      	mov	r0, r2
 800bb88:	4798      	blx	r3
}
 800bb8a:	bf00      	nop
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	20000054 	.word	0x20000054

0800bb98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b087      	sub	sp, #28
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	4613      	mov	r3, r2
 800bba4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bba6:	2301      	movs	r3, #1
 800bba8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bbae:	4b1f      	ldr	r3, [pc, #124]	; (800bc2c <FATFS_LinkDriverEx+0x94>)
 800bbb0:	7a5b      	ldrb	r3, [r3, #9]
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d131      	bne.n	800bc1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bbb8:	4b1c      	ldr	r3, [pc, #112]	; (800bc2c <FATFS_LinkDriverEx+0x94>)
 800bbba:	7a5b      	ldrb	r3, [r3, #9]
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	4b1a      	ldr	r3, [pc, #104]	; (800bc2c <FATFS_LinkDriverEx+0x94>)
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bbc6:	4b19      	ldr	r3, [pc, #100]	; (800bc2c <FATFS_LinkDriverEx+0x94>)
 800bbc8:	7a5b      	ldrb	r3, [r3, #9]
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	4a17      	ldr	r2, [pc, #92]	; (800bc2c <FATFS_LinkDriverEx+0x94>)
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bbd6:	4b15      	ldr	r3, [pc, #84]	; (800bc2c <FATFS_LinkDriverEx+0x94>)
 800bbd8:	7a5b      	ldrb	r3, [r3, #9]
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	461a      	mov	r2, r3
 800bbde:	4b13      	ldr	r3, [pc, #76]	; (800bc2c <FATFS_LinkDriverEx+0x94>)
 800bbe0:	4413      	add	r3, r2
 800bbe2:	79fa      	ldrb	r2, [r7, #7]
 800bbe4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bbe6:	4b11      	ldr	r3, [pc, #68]	; (800bc2c <FATFS_LinkDriverEx+0x94>)
 800bbe8:	7a5b      	ldrb	r3, [r3, #9]
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	1c5a      	adds	r2, r3, #1
 800bbee:	b2d1      	uxtb	r1, r2
 800bbf0:	4a0e      	ldr	r2, [pc, #56]	; (800bc2c <FATFS_LinkDriverEx+0x94>)
 800bbf2:	7251      	strb	r1, [r2, #9]
 800bbf4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bbf6:	7dbb      	ldrb	r3, [r7, #22]
 800bbf8:	3330      	adds	r3, #48	; 0x30
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	3301      	adds	r3, #1
 800bc04:	223a      	movs	r2, #58	; 0x3a
 800bc06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	3302      	adds	r3, #2
 800bc0c:	222f      	movs	r2, #47	; 0x2f
 800bc0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	3303      	adds	r3, #3
 800bc14:	2200      	movs	r2, #0
 800bc16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bc1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	20000034 	.word	0x20000034

0800bc30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f7ff ffaa 	bl	800bb98 <FATFS_LinkDriverEx>
 800bc44:	4603      	mov	r3, r0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
	...

0800bc50 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b08a      	sub	sp, #40	; 0x28
 800bc54:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800bc56:	f107 031c 	add.w	r3, r7, #28
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	601a      	str	r2, [r3, #0]
 800bc5e:	605a      	str	r2, [r3, #4]
 800bc60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800bc62:	463b      	mov	r3, r7
 800bc64:	2200      	movs	r2, #0
 800bc66:	601a      	str	r2, [r3, #0]
 800bc68:	605a      	str	r2, [r3, #4]
 800bc6a:	609a      	str	r2, [r3, #8]
 800bc6c:	60da      	str	r2, [r3, #12]
 800bc6e:	611a      	str	r2, [r3, #16]
 800bc70:	615a      	str	r2, [r3, #20]
 800bc72:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800bc74:	4b4d      	ldr	r3, [pc, #308]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bc76:	4a4e      	ldr	r2, [pc, #312]	; (800bdb0 <MX_ADC1_Init+0x160>)
 800bc78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800bc7a:	4b4c      	ldr	r3, [pc, #304]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bc7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bc80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800bc82:	4b4a      	ldr	r3, [pc, #296]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800bc88:	4b48      	ldr	r3, [pc, #288]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800bc8e:	4b47      	ldr	r3, [pc, #284]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bc90:	2208      	movs	r2, #8
 800bc92:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800bc94:	4b45      	ldr	r3, [pc, #276]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800bc9a:	4b44      	ldr	r3, [pc, #272]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 4;
 800bca0:	4b42      	ldr	r3, [pc, #264]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bca2:	2204      	movs	r2, #4
 800bca4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800bca6:	4b41      	ldr	r3, [pc, #260]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 4;
 800bcac:	4b3f      	ldr	r3, [pc, #252]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bcae:	2204      	movs	r2, #4
 800bcb0:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800bcb2:	4b3e      	ldr	r3, [pc, #248]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bcb4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800bcb8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800bcba:	4b3c      	ldr	r3, [pc, #240]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bcbc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800bcc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800bcc2:	4b3a      	ldr	r3, [pc, #232]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bcc4:	2203      	movs	r2, #3
 800bcc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800bcc8:	4b38      	ldr	r3, [pc, #224]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800bcce:	4b37      	ldr	r3, [pc, #220]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800bcd4:	4b35      	ldr	r3, [pc, #212]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 2;
 800bcdc:	4b33      	ldr	r3, [pc, #204]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bcde:	2202      	movs	r2, #2
 800bce0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800bce2:	4b32      	ldr	r3, [pc, #200]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bce4:	2220      	movs	r2, #32
 800bce6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800bce8:	4b30      	ldr	r3, [pc, #192]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 800bcee:	4b2f      	ldr	r3, [pc, #188]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bcf0:	f240 4201 	movw	r2, #1025	; 0x401
 800bcf4:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800bcf6:	482d      	ldr	r0, [pc, #180]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bcf8:	f7f4 fd42 	bl	8000780 <HAL_ADC_Init>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800bd02:	f001 f93d 	bl	800cf80 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800bd06:	2300      	movs	r3, #0
 800bd08:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800bd0a:	f107 031c 	add.w	r3, r7, #28
 800bd0e:	4619      	mov	r1, r3
 800bd10:	4826      	ldr	r0, [pc, #152]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bd12:	f7f5 fb07 	bl	8001324 <HAL_ADCEx_MultiModeConfigChannel>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d001      	beq.n	800bd20 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800bd1c:	f001 f930 	bl	800cf80 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800bd20:	4b24      	ldr	r3, [pc, #144]	; (800bdb4 <MX_ADC1_Init+0x164>)
 800bd22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800bd24:	2306      	movs	r3, #6
 800bd26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800bd2c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800bd30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800bd32:	2304      	movs	r3, #4
 800bd34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 32768;
 800bd36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd3a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bd3c:	463b      	mov	r3, r7
 800bd3e:	4619      	mov	r1, r3
 800bd40:	481a      	ldr	r0, [pc, #104]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bd42:	f7f4 febd 	bl	8000ac0 <HAL_ADC_ConfigChannel>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800bd4c:	f001 f918 	bl	800cf80 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800bd50:	4b19      	ldr	r3, [pc, #100]	; (800bdb8 <MX_ADC1_Init+0x168>)
 800bd52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800bd54:	230c      	movs	r3, #12
 800bd56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bd58:	463b      	mov	r3, r7
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	4813      	ldr	r0, [pc, #76]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bd5e:	f7f4 feaf 	bl	8000ac0 <HAL_ADC_ConfigChannel>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d001      	beq.n	800bd6c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800bd68:	f001 f90a 	bl	800cf80 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800bd6c:	4b13      	ldr	r3, [pc, #76]	; (800bdbc <MX_ADC1_Init+0x16c>)
 800bd6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800bd70:	2312      	movs	r3, #18
 800bd72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bd74:	463b      	mov	r3, r7
 800bd76:	4619      	mov	r1, r3
 800bd78:	480c      	ldr	r0, [pc, #48]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bd7a:	f7f4 fea1 	bl	8000ac0 <HAL_ADC_ConfigChannel>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800bd84:	f001 f8fc 	bl	800cf80 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800bd88:	4b0d      	ldr	r3, [pc, #52]	; (800bdc0 <MX_ADC1_Init+0x170>)
 800bd8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800bd8c:	2318      	movs	r3, #24
 800bd8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bd90:	463b      	mov	r3, r7
 800bd92:	4619      	mov	r1, r3
 800bd94:	4805      	ldr	r0, [pc, #20]	; (800bdac <MX_ADC1_Init+0x15c>)
 800bd96:	f7f4 fe93 	bl	8000ac0 <HAL_ADC_ConfigChannel>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800bda0:	f001 f8ee 	bl	800cf80 <Error_Handler>
  }

}
 800bda4:	bf00      	nop
 800bda6:	3728      	adds	r7, #40	; 0x28
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	20000094 	.word	0x20000094
 800bdb0:	40022000 	.word	0x40022000
 800bdb4:	3ef08000 	.word	0x3ef08000
 800bdb8:	47520000 	.word	0x47520000
 800bdbc:	3ac04000 	.word	0x3ac04000
 800bdc0:	43210000 	.word	0x43210000

0800bdc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b08a      	sub	sp, #40	; 0x28
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdcc:	f107 0314 	add.w	r3, r7, #20
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	605a      	str	r2, [r3, #4]
 800bdd6:	609a      	str	r2, [r3, #8]
 800bdd8:	60da      	str	r2, [r3, #12]
 800bdda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a42      	ldr	r2, [pc, #264]	; (800beec <HAL_ADC_MspInit+0x128>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d17e      	bne.n	800bee4 <HAL_ADC_MspInit+0x120>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800bde6:	4b42      	ldr	r3, [pc, #264]	; (800bef0 <HAL_ADC_MspInit+0x12c>)
 800bde8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bdec:	4a40      	ldr	r2, [pc, #256]	; (800bef0 <HAL_ADC_MspInit+0x12c>)
 800bdee:	f043 0320 	orr.w	r3, r3, #32
 800bdf2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bdf6:	4b3e      	ldr	r3, [pc, #248]	; (800bef0 <HAL_ADC_MspInit+0x12c>)
 800bdf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bdfc:	f003 0320 	and.w	r3, r3, #32
 800be00:	613b      	str	r3, [r7, #16]
 800be02:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be04:	4b3a      	ldr	r3, [pc, #232]	; (800bef0 <HAL_ADC_MspInit+0x12c>)
 800be06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be0a:	4a39      	ldr	r2, [pc, #228]	; (800bef0 <HAL_ADC_MspInit+0x12c>)
 800be0c:	f043 0301 	orr.w	r3, r3, #1
 800be10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be14:	4b36      	ldr	r3, [pc, #216]	; (800bef0 <HAL_ADC_MspInit+0x12c>)
 800be16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be1a:	f003 0301 	and.w	r3, r3, #1
 800be1e:	60fb      	str	r3, [r7, #12]
 800be20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800be22:	4b33      	ldr	r3, [pc, #204]	; (800bef0 <HAL_ADC_MspInit+0x12c>)
 800be24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be28:	4a31      	ldr	r2, [pc, #196]	; (800bef0 <HAL_ADC_MspInit+0x12c>)
 800be2a:	f043 0304 	orr.w	r3, r3, #4
 800be2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be32:	4b2f      	ldr	r3, [pc, #188]	; (800bef0 <HAL_ADC_MspInit+0x12c>)
 800be34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be38:	f003 0304 	and.w	r3, r3, #4
 800be3c:	60bb      	str	r3, [r7, #8]
 800be3e:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800be40:	23ff      	movs	r3, #255	; 0xff
 800be42:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800be44:	2303      	movs	r3, #3
 800be46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be48:	2300      	movs	r3, #0
 800be4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be4c:	f107 0314 	add.w	r3, r7, #20
 800be50:	4619      	mov	r1, r3
 800be52:	4828      	ldr	r0, [pc, #160]	; (800bef4 <HAL_ADC_MspInit+0x130>)
 800be54:	f7f7 fff0 	bl	8003e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800be58:	2330      	movs	r3, #48	; 0x30
 800be5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800be5c:	2303      	movs	r3, #3
 800be5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be60:	2300      	movs	r3, #0
 800be62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be64:	f107 0314 	add.w	r3, r7, #20
 800be68:	4619      	mov	r1, r3
 800be6a:	4823      	ldr	r0, [pc, #140]	; (800bef8 <HAL_ADC_MspInit+0x134>)
 800be6c:	f7f7 ffe4 	bl	8003e38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800be70:	4b22      	ldr	r3, [pc, #136]	; (800befc <HAL_ADC_MspInit+0x138>)
 800be72:	4a23      	ldr	r2, [pc, #140]	; (800bf00 <HAL_ADC_MspInit+0x13c>)
 800be74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800be76:	4b21      	ldr	r3, [pc, #132]	; (800befc <HAL_ADC_MspInit+0x138>)
 800be78:	2209      	movs	r2, #9
 800be7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800be7c:	4b1f      	ldr	r3, [pc, #124]	; (800befc <HAL_ADC_MspInit+0x138>)
 800be7e:	2200      	movs	r2, #0
 800be80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800be82:	4b1e      	ldr	r3, [pc, #120]	; (800befc <HAL_ADC_MspInit+0x138>)
 800be84:	2200      	movs	r2, #0
 800be86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800be88:	4b1c      	ldr	r3, [pc, #112]	; (800befc <HAL_ADC_MspInit+0x138>)
 800be8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800be8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800be90:	4b1a      	ldr	r3, [pc, #104]	; (800befc <HAL_ADC_MspInit+0x138>)
 800be92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800be96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800be98:	4b18      	ldr	r3, [pc, #96]	; (800befc <HAL_ADC_MspInit+0x138>)
 800be9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800be9e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800bea0:	4b16      	ldr	r3, [pc, #88]	; (800befc <HAL_ADC_MspInit+0x138>)
 800bea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bea6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800bea8:	4b14      	ldr	r3, [pc, #80]	; (800befc <HAL_ADC_MspInit+0x138>)
 800beaa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800beae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800beb0:	4b12      	ldr	r3, [pc, #72]	; (800befc <HAL_ADC_MspInit+0x138>)
 800beb2:	2204      	movs	r2, #4
 800beb4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800beb6:	4b11      	ldr	r3, [pc, #68]	; (800befc <HAL_ADC_MspInit+0x138>)
 800beb8:	2201      	movs	r2, #1
 800beba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800bebc:	4b0f      	ldr	r3, [pc, #60]	; (800befc <HAL_ADC_MspInit+0x138>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800bec2:	4b0e      	ldr	r3, [pc, #56]	; (800befc <HAL_ADC_MspInit+0x138>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800bec8:	480c      	ldr	r0, [pc, #48]	; (800befc <HAL_ADC_MspInit+0x138>)
 800beca:	f7f5 fc8d 	bl	80017e8 <HAL_DMA_Init>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 800bed4:	f001 f854 	bl	800cf80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a08      	ldr	r2, [pc, #32]	; (800befc <HAL_ADC_MspInit+0x138>)
 800bedc:	64da      	str	r2, [r3, #76]	; 0x4c
 800bede:	4a07      	ldr	r2, [pc, #28]	; (800befc <HAL_ADC_MspInit+0x138>)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800bee4:	bf00      	nop
 800bee6:	3728      	adds	r7, #40	; 0x28
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	40022000 	.word	0x40022000
 800bef0:	58024400 	.word	0x58024400
 800bef4:	58020000 	.word	0x58020000
 800bef8:	58020800 	.word	0x58020800
 800befc:	200000f8 	.word	0x200000f8
 800bf00:	40020010 	.word	0x40020010

0800bf04 <audioInit>:

/**********************************************/


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b08a      	sub	sp, #40	; 0x28
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
	// Initialize LEAF.

	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 800bf10:	4b2a      	ldr	r3, [pc, #168]	; (800bfbc <audioInit+0xb8>)
 800bf12:	4a2b      	ldr	r2, [pc, #172]	; (800bfc0 <audioInit+0xbc>)
 800bf14:	492b      	ldr	r1, [pc, #172]	; (800bfc4 <audioInit+0xc0>)
 800bf16:	2080      	movs	r0, #128	; 0x80
 800bf18:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800bfc8 <audioInit+0xc4>
 800bf1c:	f7ff fdce 	bl	800babc <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE);
 800bf20:	4a2a      	ldr	r2, [pc, #168]	; (800bfcc <audioInit+0xc8>)
 800bf22:	492b      	ldr	r1, [pc, #172]	; (800bfd0 <audioInit+0xcc>)
 800bf24:	482b      	ldr	r0, [pc, #172]	; (800bfd4 <audioInit+0xd0>)
 800bf26:	f7ff fcc7 	bl	800b8b8 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE);
 800bf2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800bf2e:	492a      	ldr	r1, [pc, #168]	; (800bfd8 <audioInit+0xd4>)
 800bf30:	482a      	ldr	r0, [pc, #168]	; (800bfdc <audioInit+0xd8>)
 800bf32:	f7ff fcc1 	bl	800b8b8 <tMempool_init>

	tCycle_init(&mySine[0]);
 800bf36:	482a      	ldr	r0, [pc, #168]	; (800bfe0 <audioInit+0xdc>)
 800bf38:	f7ff fcee 	bl	800b918 <tCycle_init>
	tCycle_setFreq(&mySine[0], 220.0f);
 800bf3c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800bfe4 <audioInit+0xe0>
 800bf40:	4827      	ldr	r0, [pc, #156]	; (800bfe0 <audioInit+0xdc>)
 800bf42:	f7ff fd19 	bl	800b978 <tCycle_setFreq>
	//loadingPreset = 1;
	//previousPreset = PresetNil;

	HAL_Delay(10);
 800bf46:	200a      	movs	r0, #10
 800bf48:	f7f4 fa58 	bl	80003fc <HAL_Delay>

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf50:	e007      	b.n	800bf62 <audioInit+0x5e>
	{
		audioOutBuffer[i] = 0;
 800bf52:	4a25      	ldr	r2, [pc, #148]	; (800bfe8 <audioInit+0xe4>)
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	2100      	movs	r1, #0
 800bf58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	3301      	adds	r3, #1
 800bf60:	627b      	str	r3, [r7, #36]	; 0x24
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf68:	dbf3      	blt.n	800bf52 <audioInit+0x4e>
	}

	HAL_Delay(1);
 800bf6a:	2001      	movs	r0, #1
 800bf6c:	f7f4 fa46 	bl	80003fc <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800bf70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf74:	491c      	ldr	r1, [pc, #112]	; (800bfe8 <audioInit+0xe4>)
 800bf76:	68b8      	ldr	r0, [r7, #8]
 800bf78:	f7fb fe56 	bl	8007c28 <HAL_SAI_Transmit_DMA>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	461a      	mov	r2, r3
 800bf80:	4b1a      	ldr	r3, [pc, #104]	; (800bfec <audioInit+0xe8>)
 800bf82:	701a      	strb	r2, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 800bf84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf88:	4919      	ldr	r1, [pc, #100]	; (800bff0 <audioInit+0xec>)
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7fb ff02 	bl	8007d94 <HAL_SAI_Receive_DMA>
 800bf90:	4603      	mov	r3, r0
 800bf92:	461a      	mov	r2, r3
 800bf94:	4b17      	ldr	r3, [pc, #92]	; (800bff4 <audioInit+0xf0>)
 800bf96:	701a      	strb	r2, [r3, #0]
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f000 f9a5 	bl	800c2e8 <AudioCodec_init>
	HAL_Delay(1);
 800bf9e:	2001      	movs	r0, #1
 800bfa0:	f7f4 fa2c 	bl	80003fc <HAL_Delay>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfa4:	f107 0310 	add.w	r3, r7, #16
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	601a      	str	r2, [r3, #0]
 800bfac:	605a      	str	r2, [r3, #4]
 800bfae:	609a      	str	r2, [r3, #8]
 800bfb0:	60da      	str	r2, [r3, #12]
 800bfb2:	611a      	str	r2, [r3, #16]
}
 800bfb4:	bf00      	nop
 800bfb6:	3728      	adds	r7, #40	; 0x28
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	0800cebd 	.word	0x0800cebd
 800bfc0:	000139c8 	.word	0x000139c8
 800bfc4:	20000178 	.word	0x20000178
 800bfc8:	473b8000 	.word	0x473b8000
 800bfcc:	0007eb58 	.word	0x0007eb58
 800bfd0:	24000000 	.word	0x24000000
 800bfd4:	20013b50 	.word	0x20013b50
 800bfd8:	60000000 	.word	0x60000000
 800bfdc:	20013b48 	.word	0x20013b48
 800bfe0:	20000170 	.word	0x20000170
 800bfe4:	435c0000 	.word	0x435c0000
 800bfe8:	30000000 	.word	0x30000000
 800bfec:	20013b40 	.word	0x20013b40
 800bff0:	30000800 	.word	0x30000800
 800bff4:	20013b4c 	.word	0x20013b4c

0800bff8 <audioFrame>:

void audioFrame(uint16_t buffer_offset)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	4603      	mov	r3, r0
 800c000:	80fb      	strh	r3, [r7, #6]

	int i;

	uint32_t clipCatcher = 0;
 800c002:	2300      	movs	r3, #0
 800c004:	613b      	str	r3, [r7, #16]
	//}

	//if the codec isn't ready, keep the buffer as all zeros
	//otherwise, start computing audio!

	bufferCleared = TRUE;
 800c006:	4b30      	ldr	r3, [pc, #192]	; (800c0c8 <audioFrame+0xd0>)
 800c008:	2201      	movs	r2, #1
 800c00a:	701a      	strb	r2, [r3, #0]

	if (codecReady)
 800c00c:	4b2f      	ldr	r3, [pc, #188]	; (800c0cc <audioFrame+0xd4>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d055      	beq.n	800c0c0 <audioFrame+0xc8>
	{

		for (i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 800c014:	2300      	movs	r3, #0
 800c016:	617b      	str	r3, [r7, #20]
 800c018:	e04f      	b.n	800c0ba <audioFrame+0xc2>
		{
			float theSamples[2];
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 800c01a:	88fa      	ldrh	r2, [r7, #6]
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	4413      	add	r3, r2
 800c020:	4a2b      	ldr	r2, [pc, #172]	; (800c0d0 <audioFrame+0xd8>)
 800c022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c026:	021b      	lsls	r3, r3, #8
 800c028:	ee07 3a90 	vmov	s15, r3
 800c02c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c030:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800c0d4 <audioFrame+0xdc>
 800c034:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c038:	edc7 7a02 	vstr	s15, [r7, #8]
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 800c03c:	88fa      	ldrh	r2, [r7, #6]
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	4413      	add	r3, r2
 800c042:	3301      	adds	r3, #1
 800c044:	4a22      	ldr	r2, [pc, #136]	; (800c0d0 <audioFrame+0xd8>)
 800c046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c04a:	021b      	lsls	r3, r3, #8
 800c04c:	ee07 3a90 	vmov	s15, r3
 800c050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c054:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c0d4 <audioFrame+0xdc>
 800c058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c05c:	edc7 7a03 	vstr	s15, [r7, #12]

			clipCatcher |= audioTick(theSamples);
 800c060:	f107 0308 	add.w	r3, r7, #8
 800c064:	4618      	mov	r0, r3
 800c066:	f000 f83b 	bl	800c0e0 <audioTick>
 800c06a:	4602      	mov	r2, r0
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	4313      	orrs	r3, r2
 800c070:	613b      	str	r3, [r7, #16]
			audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_23);
 800c072:	edd7 7a03 	vldr	s15, [r7, #12]
 800c076:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800c0d8 <audioFrame+0xe0>
 800c07a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c07e:	88fa      	ldrh	r2, [r7, #6]
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	4413      	add	r3, r2
 800c084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c088:	ee17 1a90 	vmov	r1, s15
 800c08c:	4a13      	ldr	r2, [pc, #76]	; (800c0dc <audioFrame+0xe4>)
 800c08e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_23);
 800c092:	edd7 7a02 	vldr	s15, [r7, #8]
 800c096:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c0d8 <audioFrame+0xe0>
 800c09a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c09e:	88fa      	ldrh	r2, [r7, #6]
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0aa:	ee17 1a90 	vmov	r1, s15
 800c0ae:	4a0b      	ldr	r2, [pc, #44]	; (800c0dc <audioFrame+0xe4>)
 800c0b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	3302      	adds	r3, #2
 800c0b8:	617b      	str	r3, [r7, #20]
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2bff      	cmp	r3, #255	; 0xff
 800c0be:	ddac      	ble.n	800c01a <audioFrame+0x22>
		//if (!loadingPreset)
		//{
			//bufferCleared = 0;
		//}
	}
}
 800c0c0:	bf00      	nop
 800c0c2:	3718      	adds	r7, #24
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	20000005 	.word	0x20000005
 800c0cc:	20000040 	.word	0x20000040
 800c0d0:	30000800 	.word	0x30000800
 800c0d4:	2ffffff6 	.word	0x2ffffff6
 800c0d8:	4b000000 	.word	0x4b000000
 800c0dc:	30000000 	.word	0x30000000

0800c0e0 <audioTick>:




uint32_t audioTick(float* samples)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
	uint32_t clips = 0;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	60fb      	str	r3, [r7, #12]

	//tickFunctions[currentPreset](samples);
	samples[0] = tCycle_tick(&mySine[0]);
 800c0ec:	4808      	ldr	r0, [pc, #32]	; (800c110 <audioTick+0x30>)
 800c0ee:	f7ff fc61 	bl	800b9b4 <tCycle_tick>
 800c0f2:	eef0 7a40 	vmov.f32	s15, s0
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	edc3 7a00 	vstr	s15, [r3]
	samples[1] = samples[0];
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	3304      	adds	r3, #4
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	6812      	ldr	r2, [r2, #0]
 800c104:	601a      	str	r2, [r3, #0]
	return clips;
 800c106:	68fb      	ldr	r3, [r7, #12]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	20000170 	.word	0x20000170

0800c114 <HAL_SAI_ErrorCallback>:




void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
	//setLED_Edit(1);
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]

}
 800c130:	bf00      	nop
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]

}
 800c144:	bf00      	nop
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
	audioFrame(HALF_BUFFER_SIZE);
 800c158:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c15c:	f7ff ff4c 	bl	800bff8 <audioFrame>
}
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
	audioFrame(0);
 800c170:	2000      	movs	r0, #0
 800c172:	f7ff ff41 	bl	800bff8 <audioFrame>
}
 800c176:	bf00      	nop
 800c178:	3708      	adds	r7, #8
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
	...

0800c180 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c186:	2300      	movs	r3, #0
 800c188:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c18a:	f000 f89b 	bl	800c2c4 <BSP_SD_IsDetected>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b01      	cmp	r3, #1
 800c192:	d001      	beq.n	800c198 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c194:	2302      	movs	r3, #2
 800c196:	e012      	b.n	800c1be <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c198:	480b      	ldr	r0, [pc, #44]	; (800c1c8 <BSP_SD_Init+0x48>)
 800c19a:	f7fc f8da 	bl	8008352 <HAL_SD_Init>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c1a2:	79fb      	ldrb	r3, [r7, #7]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d109      	bne.n	800c1bc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c1a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c1ac:	4806      	ldr	r0, [pc, #24]	; (800c1c8 <BSP_SD_Init+0x48>)
 800c1ae:	f7fd f959 	bl	8009464 <HAL_SD_ConfigWideBusOperation>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d001      	beq.n	800c1bc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c1bc:	79fb      	ldrb	r3, [r7, #7]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	20014a88 	.word	0x20014a88

0800c1cc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b088      	sub	sp, #32
 800c1d0:	af02      	add	r7, sp, #8
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
 800c1d8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	68f9      	ldr	r1, [r7, #12]
 800c1e8:	4806      	ldr	r0, [pc, #24]	; (800c204 <BSP_SD_ReadBlocks+0x38>)
 800c1ea:	f7fc f9d1 	bl	8008590 <HAL_SD_ReadBlocks>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d001      	beq.n	800c1f8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3718      	adds	r7, #24
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	20014a88 	.word	0x20014a88

0800c208 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af02      	add	r7, sp, #8
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
 800c214:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	9300      	str	r3, [sp, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	68f9      	ldr	r1, [r7, #12]
 800c224:	4806      	ldr	r0, [pc, #24]	; (800c240 <BSP_SD_WriteBlocks+0x38>)
 800c226:	f7fc fb3d 	bl	80088a4 <HAL_SD_WriteBlocks>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d001      	beq.n	800c234 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c234:	7dfb      	ldrb	r3, [r7, #23]
}
 800c236:	4618      	mov	r0, r3
 800c238:	3718      	adds	r7, #24
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20014a88 	.word	0x20014a88

0800c244 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c248:	4805      	ldr	r0, [pc, #20]	; (800c260 <BSP_SD_GetCardState+0x1c>)
 800c24a:	f7fd f9b5 	bl	80095b8 <HAL_SD_GetCardState>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b04      	cmp	r3, #4
 800c252:	bf14      	ite	ne
 800c254:	2301      	movne	r3, #1
 800c256:	2300      	moveq	r3, #0
 800c258:	b2db      	uxtb	r3, r3
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20014a88 	.word	0x20014a88

0800c264 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c26c:	6879      	ldr	r1, [r7, #4]
 800c26e:	4803      	ldr	r0, [pc, #12]	; (800c27c <BSP_SD_GetCardInfo+0x18>)
 800c270:	f7fd f8cc 	bl	800940c <HAL_SD_GetCardInfo>
}
 800c274:	bf00      	nop
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	20014a88 	.word	0x20014a88

0800c280 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c288:	f000 f80e 	bl	800c2a8 <BSP_SD_WriteCpltCallback>
}
 800c28c:	bf00      	nop
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c29c:	f000 f80b 	bl	800c2b6 <BSP_SD_ReadCpltCallback>
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	af00      	add	r7, sp, #0

}
 800c2ac:	bf00      	nop
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	af00      	add	r7, sp, #0

}
 800c2ba:	bf00      	nop
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c2ce:	f000 f929 	bl	800c524 <BSP_PlatformIsDetected>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	b2db      	uxtb	r3, r3
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3708      	adds	r7, #8
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af02      	add	r7, sp, #8
 800c2ee:	6078      	str	r0, [r7, #4]

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c2f6:	4858      	ldr	r0, [pc, #352]	; (800c458 <AudioCodec_init+0x170>)
 800c2f8:	f7f7 ff66 	bl	80041c8 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 800c2fc:	2002      	movs	r0, #2
 800c2fe:	f7f4 f87d 	bl	80003fc <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 800c302:	4b56      	ldr	r3, [pc, #344]	; (800c45c <AudioCodec_init+0x174>)
 800c304:	2207      	movs	r2, #7
 800c306:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x03;
 800c308:	4b54      	ldr	r3, [pc, #336]	; (800c45c <AudioCodec_init+0x174>)
 800c30a:	2203      	movs	r2, #3
 800c30c:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800c30e:	4b54      	ldr	r3, [pc, #336]	; (800c460 <AudioCodec_init+0x178>)
 800c310:	881a      	ldrh	r2, [r3, #0]
 800c312:	4b54      	ldr	r3, [pc, #336]	; (800c464 <AudioCodec_init+0x17c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	4613      	mov	r3, r2
 800c31a:	4a50      	ldr	r2, [pc, #320]	; (800c45c <AudioCodec_init+0x174>)
 800c31c:	2120      	movs	r1, #32
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7f7 fffc 	bl	800431c <HAL_I2C_Master_Transmit>
 800c324:	4603      	mov	r3, r0
 800c326:	461a      	mov	r2, r3
 800c328:	4b4f      	ldr	r3, [pc, #316]	; (800c468 <AudioCodec_init+0x180>)
 800c32a:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 800c32c:	4b4b      	ldr	r3, [pc, #300]	; (800c45c <AudioCodec_init+0x174>)
 800c32e:	2201      	movs	r2, #1
 800c330:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x41;
 800c332:	4b4a      	ldr	r3, [pc, #296]	; (800c45c <AudioCodec_init+0x174>)
 800c334:	2241      	movs	r2, #65	; 0x41
 800c336:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800c338:	4b49      	ldr	r3, [pc, #292]	; (800c460 <AudioCodec_init+0x178>)
 800c33a:	881a      	ldrh	r2, [r3, #0]
 800c33c:	4b49      	ldr	r3, [pc, #292]	; (800c464 <AudioCodec_init+0x17c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	4613      	mov	r3, r2
 800c344:	4a45      	ldr	r2, [pc, #276]	; (800c45c <AudioCodec_init+0x174>)
 800c346:	2120      	movs	r1, #32
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f7f7 ffe7 	bl	800431c <HAL_I2C_Master_Transmit>
 800c34e:	4603      	mov	r3, r0
 800c350:	461a      	mov	r2, r3
 800c352:	4b45      	ldr	r3, [pc, #276]	; (800c468 <AudioCodec_init+0x180>)
 800c354:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 800c356:	4b41      	ldr	r3, [pc, #260]	; (800c45c <AudioCodec_init+0x174>)
 800c358:	2202      	movs	r2, #2
 800c35a:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x00;
 800c35c:	4b3f      	ldr	r3, [pc, #252]	; (800c45c <AudioCodec_init+0x174>)
 800c35e:	2200      	movs	r2, #0
 800c360:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800c362:	4b3f      	ldr	r3, [pc, #252]	; (800c460 <AudioCodec_init+0x178>)
 800c364:	881a      	ldrh	r2, [r3, #0]
 800c366:	4b3f      	ldr	r3, [pc, #252]	; (800c464 <AudioCodec_init+0x17c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	4613      	mov	r3, r2
 800c36e:	4a3b      	ldr	r2, [pc, #236]	; (800c45c <AudioCodec_init+0x174>)
 800c370:	2120      	movs	r1, #32
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7f7 ffd2 	bl	800431c <HAL_I2C_Master_Transmit>
 800c378:	4603      	mov	r3, r0
 800c37a:	461a      	mov	r2, r3
 800c37c:	4b3a      	ldr	r3, [pc, #232]	; (800c468 <AudioCodec_init+0x180>)
 800c37e:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 800c380:	4b36      	ldr	r3, [pc, #216]	; (800c45c <AudioCodec_init+0x174>)
 800c382:	2203      	movs	r2, #3
 800c384:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x79;
 800c386:	4b35      	ldr	r3, [pc, #212]	; (800c45c <AudioCodec_init+0x174>)
 800c388:	2279      	movs	r2, #121	; 0x79
 800c38a:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800c38c:	4b34      	ldr	r3, [pc, #208]	; (800c460 <AudioCodec_init+0x178>)
 800c38e:	881a      	ldrh	r2, [r3, #0]
 800c390:	4b34      	ldr	r3, [pc, #208]	; (800c464 <AudioCodec_init+0x17c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	4613      	mov	r3, r2
 800c398:	4a30      	ldr	r2, [pc, #192]	; (800c45c <AudioCodec_init+0x174>)
 800c39a:	2120      	movs	r1, #32
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7f7 ffbd 	bl	800431c <HAL_I2C_Master_Transmit>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	4b30      	ldr	r3, [pc, #192]	; (800c468 <AudioCodec_init+0x180>)
 800c3a8:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 800c3aa:	4b2c      	ldr	r3, [pc, #176]	; (800c45c <AudioCodec_init+0x174>)
 800c3ac:	2204      	movs	r2, #4
 800c3ae:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 800c3b0:	4b2a      	ldr	r3, [pc, #168]	; (800c45c <AudioCodec_init+0x174>)
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800c3b6:	4b2a      	ldr	r3, [pc, #168]	; (800c460 <AudioCodec_init+0x178>)
 800c3b8:	881a      	ldrh	r2, [r3, #0]
 800c3ba:	4b2a      	ldr	r3, [pc, #168]	; (800c464 <AudioCodec_init+0x17c>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	4a26      	ldr	r2, [pc, #152]	; (800c45c <AudioCodec_init+0x174>)
 800c3c4:	2120      	movs	r1, #32
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f7f7 ffa8 	bl	800431c <HAL_I2C_Master_Transmit>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	4b25      	ldr	r3, [pc, #148]	; (800c468 <AudioCodec_init+0x180>)
 800c3d2:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 800c3d4:	4b21      	ldr	r3, [pc, #132]	; (800c45c <AudioCodec_init+0x174>)
 800c3d6:	2205      	movs	r2, #5
 800c3d8:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 800c3da:	4b20      	ldr	r3, [pc, #128]	; (800c45c <AudioCodec_init+0x174>)
 800c3dc:	2201      	movs	r2, #1
 800c3de:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800c3e0:	4b1f      	ldr	r3, [pc, #124]	; (800c460 <AudioCodec_init+0x178>)
 800c3e2:	881a      	ldrh	r2, [r3, #0]
 800c3e4:	4b1f      	ldr	r3, [pc, #124]	; (800c464 <AudioCodec_init+0x17c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	4a1b      	ldr	r2, [pc, #108]	; (800c45c <AudioCodec_init+0x174>)
 800c3ee:	2120      	movs	r1, #32
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f7f7 ff93 	bl	800431c <HAL_I2C_Master_Transmit>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	4b1b      	ldr	r3, [pc, #108]	; (800c468 <AudioCodec_init+0x180>)
 800c3fc:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 800c3fe:	4b17      	ldr	r3, [pc, #92]	; (800c45c <AudioCodec_init+0x174>)
 800c400:	2206      	movs	r2, #6
 800c402:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x10;
 800c404:	4b15      	ldr	r3, [pc, #84]	; (800c45c <AudioCodec_init+0x174>)
 800c406:	2210      	movs	r2, #16
 800c408:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800c40a:	4b15      	ldr	r3, [pc, #84]	; (800c460 <AudioCodec_init+0x178>)
 800c40c:	881a      	ldrh	r2, [r3, #0]
 800c40e:	4b15      	ldr	r3, [pc, #84]	; (800c464 <AudioCodec_init+0x17c>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	4613      	mov	r3, r2
 800c416:	4a11      	ldr	r2, [pc, #68]	; (800c45c <AudioCodec_init+0x174>)
 800c418:	2120      	movs	r1, #32
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7f7 ff7e 	bl	800431c <HAL_I2C_Master_Transmit>
 800c420:	4603      	mov	r3, r0
 800c422:	461a      	mov	r2, r3
 800c424:	4b10      	ldr	r3, [pc, #64]	; (800c468 <AudioCodec_init+0x180>)
 800c426:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 800c428:	4b0c      	ldr	r3, [pc, #48]	; (800c45c <AudioCodec_init+0x174>)
 800c42a:	2207      	movs	r2, #7
 800c42c:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x02;
 800c42e:	4b0b      	ldr	r3, [pc, #44]	; (800c45c <AudioCodec_init+0x174>)
 800c430:	2202      	movs	r2, #2
 800c432:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800c434:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <AudioCodec_init+0x178>)
 800c436:	881a      	ldrh	r2, [r3, #0]
 800c438:	4b0a      	ldr	r3, [pc, #40]	; (800c464 <AudioCodec_init+0x17c>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	4613      	mov	r3, r2
 800c440:	4a06      	ldr	r2, [pc, #24]	; (800c45c <AudioCodec_init+0x174>)
 800c442:	2120      	movs	r1, #32
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f7f7 ff69 	bl	800431c <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 800c44a:	4b08      	ldr	r3, [pc, #32]	; (800c46c <AudioCodec_init+0x184>)
 800c44c:	2201      	movs	r2, #1
 800c44e:	601a      	str	r2, [r3, #0]

}
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	58020800 	.word	0x58020800
 800c45c:	20000044 	.word	0x20000044
 800c460:	20000006 	.word	0x20000006
 800c464:	20000008 	.word	0x20000008
 800c468:	20014364 	.word	0x20014364
 800c46c:	20000040 	.word	0x20000040

0800c470 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c476:	4b21      	ldr	r3, [pc, #132]	; (800c4fc <MX_DMA_Init+0x8c>)
 800c478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c47c:	4a1f      	ldr	r2, [pc, #124]	; (800c4fc <MX_DMA_Init+0x8c>)
 800c47e:	f043 0301 	orr.w	r3, r3, #1
 800c482:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c486:	4b1d      	ldr	r3, [pc, #116]	; (800c4fc <MX_DMA_Init+0x8c>)
 800c488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c48c:	f003 0301 	and.w	r3, r3, #1
 800c490:	607b      	str	r3, [r7, #4]
 800c492:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800c494:	2200      	movs	r2, #0
 800c496:	2101      	movs	r1, #1
 800c498:	200b      	movs	r0, #11
 800c49a:	f7f5 f8f8 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800c49e:	200b      	movs	r0, #11
 800c4a0:	f7f5 f90f 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	2102      	movs	r1, #2
 800c4a8:	200c      	movs	r0, #12
 800c4aa:	f7f5 f8f0 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800c4ae:	200c      	movs	r0, #12
 800c4b0:	f7f5 f907 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	2103      	movs	r1, #3
 800c4b8:	200d      	movs	r0, #13
 800c4ba:	f7f5 f8e8 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800c4be:	200d      	movs	r0, #13
 800c4c0:	f7f5 f8ff 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	2104      	movs	r1, #4
 800c4c8:	200e      	movs	r0, #14
 800c4ca:	f7f5 f8e0 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800c4ce:	200e      	movs	r0, #14
 800c4d0:	f7f5 f8f7 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	2105      	movs	r1, #5
 800c4d8:	200f      	movs	r0, #15
 800c4da:	f7f5 f8d8 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800c4de:	200f      	movs	r0, #15
 800c4e0:	f7f5 f8ef 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	2010      	movs	r0, #16
 800c4ea:	f7f5 f8d0 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800c4ee:	2010      	movs	r0, #16
 800c4f0:	f7f5 f8e7 	bl	80016c2 <HAL_NVIC_EnableIRQ>

}
 800c4f4:	bf00      	nop
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	58024400 	.word	0x58024400

0800c500 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c504:	4904      	ldr	r1, [pc, #16]	; (800c518 <MX_FATFS_Init+0x18>)
 800c506:	4805      	ldr	r0, [pc, #20]	; (800c51c <MX_FATFS_Init+0x1c>)
 800c508:	f7ff fb92 	bl	800bc30 <FATFS_LinkDriver>
 800c50c:	4603      	mov	r3, r0
 800c50e:	461a      	mov	r2, r3
 800c510:	4b03      	ldr	r3, [pc, #12]	; (800c520 <MX_FATFS_Init+0x20>)
 800c512:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c514:	bf00      	nop
 800c516:	bd80      	pop	{r7, pc}
 800c518:	2001436c 	.word	0x2001436c
 800c51c:	0800fcbc 	.word	0x0800fcbc
 800c520:	20014368 	.word	0x20014368

0800c524 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c52a:	2301      	movs	r3, #1
 800c52c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c52e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c532:	4806      	ldr	r0, [pc, #24]	; (800c54c <BSP_PlatformIsDetected+0x28>)
 800c534:	f7f7 fe30 	bl	8004198 <HAL_GPIO_ReadPin>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d001      	beq.n	800c542 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c53e:	2300      	movs	r3, #0
 800c540:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c542:	79fb      	ldrb	r3, [r7, #7]
}  
 800c544:	4618      	mov	r0, r3
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	58020800 	.word	0x58020800

0800c550 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b088      	sub	sp, #32
 800c554:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800c556:	1d3b      	adds	r3, r7, #4
 800c558:	2200      	movs	r2, #0
 800c55a:	601a      	str	r2, [r3, #0]
 800c55c:	605a      	str	r2, [r3, #4]
 800c55e:	609a      	str	r2, [r3, #8]
 800c560:	60da      	str	r2, [r3, #12]
 800c562:	611a      	str	r2, [r3, #16]
 800c564:	615a      	str	r2, [r3, #20]
 800c566:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800c568:	4b21      	ldr	r3, [pc, #132]	; (800c5f0 <MX_FMC_Init+0xa0>)
 800c56a:	4a22      	ldr	r2, [pc, #136]	; (800c5f4 <MX_FMC_Init+0xa4>)
 800c56c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800c56e:	4b20      	ldr	r3, [pc, #128]	; (800c5f0 <MX_FMC_Init+0xa0>)
 800c570:	2200      	movs	r2, #0
 800c572:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800c574:	4b1e      	ldr	r3, [pc, #120]	; (800c5f0 <MX_FMC_Init+0xa0>)
 800c576:	2201      	movs	r2, #1
 800c578:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800c57a:	4b1d      	ldr	r3, [pc, #116]	; (800c5f0 <MX_FMC_Init+0xa0>)
 800c57c:	2208      	movs	r2, #8
 800c57e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800c580:	4b1b      	ldr	r3, [pc, #108]	; (800c5f0 <MX_FMC_Init+0xa0>)
 800c582:	2210      	movs	r2, #16
 800c584:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800c586:	4b1a      	ldr	r3, [pc, #104]	; (800c5f0 <MX_FMC_Init+0xa0>)
 800c588:	2240      	movs	r2, #64	; 0x40
 800c58a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800c58c:	4b18      	ldr	r3, [pc, #96]	; (800c5f0 <MX_FMC_Init+0xa0>)
 800c58e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c592:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800c594:	4b16      	ldr	r3, [pc, #88]	; (800c5f0 <MX_FMC_Init+0xa0>)
 800c596:	2200      	movs	r2, #0
 800c598:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800c59a:	4b15      	ldr	r3, [pc, #84]	; (800c5f0 <MX_FMC_Init+0xa0>)
 800c59c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800c5a0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800c5a2:	4b13      	ldr	r3, [pc, #76]	; (800c5f0 <MX_FMC_Init+0xa0>)
 800c5a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c5a8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800c5aa:	4b11      	ldr	r3, [pc, #68]	; (800c5f0 <MX_FMC_Init+0xa0>)
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800c5b0:	2302      	movs	r3, #2
 800c5b2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 800c5b4:	2306      	movs	r3, #6
 800c5b6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800c5b8:	2304      	movs	r3, #4
 800c5ba:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 800c5bc:	2306      	movs	r3, #6
 800c5be:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800c5c8:	2302      	movs	r3, #2
 800c5ca:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800c5cc:	1d3b      	adds	r3, r7, #4
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	4807      	ldr	r0, [pc, #28]	; (800c5f0 <MX_FMC_Init+0xa0>)
 800c5d2:	f7fd fced 	bl	8009fb0 <HAL_SDRAM_Init>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d001      	beq.n	800c5e0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800c5dc:	f000 fcd0 	bl	800cf80 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800c5e0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800c5e4:	f7f3 ff38 	bl	8000458 <HAL_SetFMCMemorySwappingConfig>

}
 800c5e8:	bf00      	nop
 800c5ea:	3720      	adds	r7, #32
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	200147d4 	.word	0x200147d4
 800c5f4:	52004140 	.word	0x52004140

0800c5f8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5fe:	1d3b      	adds	r3, r7, #4
 800c600:	2200      	movs	r2, #0
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	605a      	str	r2, [r3, #4]
 800c606:	609a      	str	r2, [r3, #8]
 800c608:	60da      	str	r2, [r3, #12]
 800c60a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800c60c:	4b34      	ldr	r3, [pc, #208]	; (800c6e0 <HAL_FMC_MspInit+0xe8>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d161      	bne.n	800c6d8 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 800c614:	4b32      	ldr	r3, [pc, #200]	; (800c6e0 <HAL_FMC_MspInit+0xe8>)
 800c616:	2201      	movs	r2, #1
 800c618:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800c61a:	4b32      	ldr	r3, [pc, #200]	; (800c6e4 <HAL_FMC_MspInit+0xec>)
 800c61c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c620:	4a30      	ldr	r2, [pc, #192]	; (800c6e4 <HAL_FMC_MspInit+0xec>)
 800c622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c626:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c62a:	4b2e      	ldr	r3, [pc, #184]	; (800c6e4 <HAL_FMC_MspInit+0xec>)
 800c62c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c634:	603b      	str	r3, [r7, #0]
 800c636:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800c638:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800c63c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c63e:	2302      	movs	r3, #2
 800c640:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c642:	2300      	movs	r3, #0
 800c644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c646:	2303      	movs	r3, #3
 800c648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800c64a:	230c      	movs	r3, #12
 800c64c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800c64e:	1d3b      	adds	r3, r7, #4
 800c650:	4619      	mov	r1, r3
 800c652:	4825      	ldr	r0, [pc, #148]	; (800c6e8 <HAL_FMC_MspInit+0xf0>)
 800c654:	f7f7 fbf0 	bl	8003e38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800c658:	230d      	movs	r3, #13
 800c65a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c65c:	2302      	movs	r3, #2
 800c65e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c660:	2300      	movs	r3, #0
 800c662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c664:	2303      	movs	r3, #3
 800c666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800c668:	230c      	movs	r3, #12
 800c66a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c66c:	1d3b      	adds	r3, r7, #4
 800c66e:	4619      	mov	r1, r3
 800c670:	481e      	ldr	r0, [pc, #120]	; (800c6ec <HAL_FMC_MspInit+0xf4>)
 800c672:	f7f7 fbe1 	bl	8003e38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800c676:	f248 1337 	movw	r3, #33079	; 0x8137
 800c67a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c67c:	2302      	movs	r3, #2
 800c67e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c680:	2300      	movs	r3, #0
 800c682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c684:	2303      	movs	r3, #3
 800c686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800c688:	230c      	movs	r3, #12
 800c68a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c68c:	1d3b      	adds	r3, r7, #4
 800c68e:	4619      	mov	r1, r3
 800c690:	4817      	ldr	r0, [pc, #92]	; (800c6f0 <HAL_FMC_MspInit+0xf8>)
 800c692:	f7f7 fbd1 	bl	8003e38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800c696:	f64f 7383 	movw	r3, #65411	; 0xff83
 800c69a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c69c:	2302      	movs	r3, #2
 800c69e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6a4:	2303      	movs	r3, #3
 800c6a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800c6a8:	230c      	movs	r3, #12
 800c6aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c6ac:	1d3b      	adds	r3, r7, #4
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	4810      	ldr	r0, [pc, #64]	; (800c6f4 <HAL_FMC_MspInit+0xfc>)
 800c6b2:	f7f7 fbc1 	bl	8003e38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800c6b6:	f24c 7303 	movw	r3, #50947	; 0xc703
 800c6ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6bc:	2302      	movs	r3, #2
 800c6be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800c6c8:	230c      	movs	r3, #12
 800c6ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c6cc:	1d3b      	adds	r3, r7, #4
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	4809      	ldr	r0, [pc, #36]	; (800c6f8 <HAL_FMC_MspInit+0x100>)
 800c6d2:	f7f7 fbb1 	bl	8003e38 <HAL_GPIO_Init>
 800c6d6:	e000      	b.n	800c6da <HAL_FMC_MspInit+0xe2>
    return;
 800c6d8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800c6da:	3718      	adds	r7, #24
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	20000048 	.word	0x20000048
 800c6e4:	58024400 	.word	0x58024400
 800c6e8:	58021400 	.word	0x58021400
 800c6ec:	58020800 	.word	0x58020800
 800c6f0:	58021800 	.word	0x58021800
 800c6f4:	58021000 	.word	0x58021000
 800c6f8:	58020c00 	.word	0x58020c00

0800c6fc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800c704:	f7ff ff78 	bl	800c5f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b08e      	sub	sp, #56	; 0x38
 800c714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c71a:	2200      	movs	r2, #0
 800c71c:	601a      	str	r2, [r3, #0]
 800c71e:	605a      	str	r2, [r3, #4]
 800c720:	609a      	str	r2, [r3, #8]
 800c722:	60da      	str	r2, [r3, #12]
 800c724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c726:	4b8f      	ldr	r3, [pc, #572]	; (800c964 <MX_GPIO_Init+0x254>)
 800c728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c72c:	4a8d      	ldr	r2, [pc, #564]	; (800c964 <MX_GPIO_Init+0x254>)
 800c72e:	f043 0310 	orr.w	r3, r3, #16
 800c732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c736:	4b8b      	ldr	r3, [pc, #556]	; (800c964 <MX_GPIO_Init+0x254>)
 800c738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c73c:	f003 0310 	and.w	r3, r3, #16
 800c740:	623b      	str	r3, [r7, #32]
 800c742:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c744:	4b87      	ldr	r3, [pc, #540]	; (800c964 <MX_GPIO_Init+0x254>)
 800c746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c74a:	4a86      	ldr	r2, [pc, #536]	; (800c964 <MX_GPIO_Init+0x254>)
 800c74c:	f043 0304 	orr.w	r3, r3, #4
 800c750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c754:	4b83      	ldr	r3, [pc, #524]	; (800c964 <MX_GPIO_Init+0x254>)
 800c756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c75a:	f003 0304 	and.w	r3, r3, #4
 800c75e:	61fb      	str	r3, [r7, #28]
 800c760:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c762:	4b80      	ldr	r3, [pc, #512]	; (800c964 <MX_GPIO_Init+0x254>)
 800c764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c768:	4a7e      	ldr	r2, [pc, #504]	; (800c964 <MX_GPIO_Init+0x254>)
 800c76a:	f043 0320 	orr.w	r3, r3, #32
 800c76e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c772:	4b7c      	ldr	r3, [pc, #496]	; (800c964 <MX_GPIO_Init+0x254>)
 800c774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c778:	f003 0320 	and.w	r3, r3, #32
 800c77c:	61bb      	str	r3, [r7, #24]
 800c77e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c780:	4b78      	ldr	r3, [pc, #480]	; (800c964 <MX_GPIO_Init+0x254>)
 800c782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c786:	4a77      	ldr	r2, [pc, #476]	; (800c964 <MX_GPIO_Init+0x254>)
 800c788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c78c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c790:	4b74      	ldr	r3, [pc, #464]	; (800c964 <MX_GPIO_Init+0x254>)
 800c792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c79a:	617b      	str	r3, [r7, #20]
 800c79c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c79e:	4b71      	ldr	r3, [pc, #452]	; (800c964 <MX_GPIO_Init+0x254>)
 800c7a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7a4:	4a6f      	ldr	r2, [pc, #444]	; (800c964 <MX_GPIO_Init+0x254>)
 800c7a6:	f043 0301 	orr.w	r3, r3, #1
 800c7aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c7ae:	4b6d      	ldr	r3, [pc, #436]	; (800c964 <MX_GPIO_Init+0x254>)
 800c7b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7b4:	f003 0301 	and.w	r3, r3, #1
 800c7b8:	613b      	str	r3, [r7, #16]
 800c7ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c7bc:	4b69      	ldr	r3, [pc, #420]	; (800c964 <MX_GPIO_Init+0x254>)
 800c7be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7c2:	4a68      	ldr	r2, [pc, #416]	; (800c964 <MX_GPIO_Init+0x254>)
 800c7c4:	f043 0302 	orr.w	r3, r3, #2
 800c7c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c7cc:	4b65      	ldr	r3, [pc, #404]	; (800c964 <MX_GPIO_Init+0x254>)
 800c7ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7d2:	f003 0302 	and.w	r3, r3, #2
 800c7d6:	60fb      	str	r3, [r7, #12]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c7da:	4b62      	ldr	r3, [pc, #392]	; (800c964 <MX_GPIO_Init+0x254>)
 800c7dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7e0:	4a60      	ldr	r2, [pc, #384]	; (800c964 <MX_GPIO_Init+0x254>)
 800c7e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c7ea:	4b5e      	ldr	r3, [pc, #376]	; (800c964 <MX_GPIO_Init+0x254>)
 800c7ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f4:	60bb      	str	r3, [r7, #8]
 800c7f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c7f8:	4b5a      	ldr	r3, [pc, #360]	; (800c964 <MX_GPIO_Init+0x254>)
 800c7fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7fe:	4a59      	ldr	r2, [pc, #356]	; (800c964 <MX_GPIO_Init+0x254>)
 800c800:	f043 0308 	orr.w	r3, r3, #8
 800c804:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c808:	4b56      	ldr	r3, [pc, #344]	; (800c964 <MX_GPIO_Init+0x254>)
 800c80a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c80e:	f003 0308 	and.w	r3, r3, #8
 800c812:	607b      	str	r3, [r7, #4]
 800c814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800c816:	2200      	movs	r2, #0
 800c818:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c81c:	4852      	ldr	r0, [pc, #328]	; (800c968 <MX_GPIO_Init+0x258>)
 800c81e:	f7f7 fcd3 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800c822:	2200      	movs	r2, #0
 800c824:	2180      	movs	r1, #128	; 0x80
 800c826:	4851      	ldr	r0, [pc, #324]	; (800c96c <MX_GPIO_Init+0x25c>)
 800c828:	f7f7 fcce 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800c82c:	2200      	movs	r2, #0
 800c82e:	2110      	movs	r1, #16
 800c830:	484f      	ldr	r0, [pc, #316]	; (800c970 <MX_GPIO_Init+0x260>)
 800c832:	f7f7 fcc9 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c83a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c83c:	2300      	movs	r3, #0
 800c83e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c840:	2302      	movs	r3, #2
 800c842:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c848:	4619      	mov	r1, r3
 800c84a:	4847      	ldr	r0, [pc, #284]	; (800c968 <MX_GPIO_Init+0x258>)
 800c84c:	f7f7 faf4 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800c850:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c856:	2301      	movs	r3, #1
 800c858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c85a:	2302      	movs	r3, #2
 800c85c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c85e:	2300      	movs	r3, #0
 800c860:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c866:	4619      	mov	r1, r3
 800c868:	483f      	ldr	r0, [pc, #252]	; (800c968 <MX_GPIO_Init+0x258>)
 800c86a:	f7f7 fae5 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800c86e:	f248 03c2 	movw	r3, #32962	; 0x80c2
 800c872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c874:	2303      	movs	r3, #3
 800c876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c878:	2300      	movs	r3, #0
 800c87a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c87c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c880:	4619      	mov	r1, r3
 800c882:	4839      	ldr	r0, [pc, #228]	; (800c968 <MX_GPIO_Init+0x258>)
 800c884:	f7f7 fad8 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800c888:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800c88c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c88e:	2303      	movs	r3, #3
 800c890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c892:	2300      	movs	r3, #0
 800c894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800c896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c89a:	4619      	mov	r1, r3
 800c89c:	4835      	ldr	r0, [pc, #212]	; (800c974 <MX_GPIO_Init+0x264>)
 800c89e:	f7f7 facb 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
 800c8a2:	f240 33e7 	movw	r3, #999	; 0x3e7
 800c8a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c8a8:	2303      	movs	r3, #3
 800c8aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c8b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	482e      	ldr	r0, [pc, #184]	; (800c970 <MX_GPIO_Init+0x260>)
 800c8b8:	f7f7 fabe 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800c8bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c8c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c8c2:	4b2d      	ldr	r3, [pc, #180]	; (800c978 <MX_GPIO_Init+0x268>)
 800c8c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c8ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	482a      	ldr	r0, [pc, #168]	; (800c97c <MX_GPIO_Init+0x26c>)
 800c8d2:	f7f7 fab1 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 PD4 
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 800c8d6:	f243 0378 	movw	r3, #12408	; 0x3078
 800c8da:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c8dc:	2303      	movs	r3, #3
 800c8de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c8e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	4824      	ldr	r0, [pc, #144]	; (800c97c <MX_GPIO_Init+0x26c>)
 800c8ec:	f7f7 faa4 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG12 PG13 
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13 
 800c8f0:	f247 0348 	movw	r3, #28744	; 0x7048
 800c8f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c8fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c902:	4619      	mov	r1, r3
 800c904:	4819      	ldr	r0, [pc, #100]	; (800c96c <MX_GPIO_Init+0x25c>)
 800c906:	f7f7 fa97 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c90a:	2380      	movs	r3, #128	; 0x80
 800c90c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c90e:	2301      	movs	r3, #1
 800c910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c912:	2300      	movs	r3, #0
 800c914:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c916:	2300      	movs	r3, #0
 800c918:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c91a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c91e:	4619      	mov	r1, r3
 800c920:	4812      	ldr	r0, [pc, #72]	; (800c96c <MX_GPIO_Init+0x25c>)
 800c922:	f7f7 fa89 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800c926:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 800c92a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c92c:	2303      	movs	r3, #3
 800c92e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c930:	2300      	movs	r3, #0
 800c932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c938:	4619      	mov	r1, r3
 800c93a:	4811      	ldr	r0, [pc, #68]	; (800c980 <MX_GPIO_Init+0x270>)
 800c93c:	f7f7 fa7c 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c940:	2310      	movs	r3, #16
 800c942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c944:	2301      	movs	r3, #1
 800c946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c948:	2300      	movs	r3, #0
 800c94a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c94c:	2300      	movs	r3, #0
 800c94e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c954:	4619      	mov	r1, r3
 800c956:	4806      	ldr	r0, [pc, #24]	; (800c970 <MX_GPIO_Init+0x260>)
 800c958:	f7f7 fa6e 	bl	8003e38 <HAL_GPIO_Init>

}
 800c95c:	bf00      	nop
 800c95e:	3738      	adds	r7, #56	; 0x38
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	58024400 	.word	0x58024400
 800c968:	58020800 	.word	0x58020800
 800c96c:	58021800 	.word	0x58021800
 800c970:	58020400 	.word	0x58020400
 800c974:	58021400 	.word	0x58021400
 800c978:	11110000 	.word	0x11110000
 800c97c:	58020c00 	.word	0x58020c00
 800c980:	58020000 	.word	0x58020000

0800c984 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800c988:	4b1b      	ldr	r3, [pc, #108]	; (800c9f8 <MX_I2C2_Init+0x74>)
 800c98a:	4a1c      	ldr	r2, [pc, #112]	; (800c9fc <MX_I2C2_Init+0x78>)
 800c98c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800c98e:	4b1a      	ldr	r3, [pc, #104]	; (800c9f8 <MX_I2C2_Init+0x74>)
 800c990:	4a1b      	ldr	r2, [pc, #108]	; (800ca00 <MX_I2C2_Init+0x7c>)
 800c992:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800c994:	4b18      	ldr	r3, [pc, #96]	; (800c9f8 <MX_I2C2_Init+0x74>)
 800c996:	2200      	movs	r2, #0
 800c998:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c99a:	4b17      	ldr	r3, [pc, #92]	; (800c9f8 <MX_I2C2_Init+0x74>)
 800c99c:	2201      	movs	r2, #1
 800c99e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c9a0:	4b15      	ldr	r3, [pc, #84]	; (800c9f8 <MX_I2C2_Init+0x74>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c9a6:	4b14      	ldr	r3, [pc, #80]	; (800c9f8 <MX_I2C2_Init+0x74>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c9ac:	4b12      	ldr	r3, [pc, #72]	; (800c9f8 <MX_I2C2_Init+0x74>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c9b2:	4b11      	ldr	r3, [pc, #68]	; (800c9f8 <MX_I2C2_Init+0x74>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c9b8:	4b0f      	ldr	r3, [pc, #60]	; (800c9f8 <MX_I2C2_Init+0x74>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c9be:	480e      	ldr	r0, [pc, #56]	; (800c9f8 <MX_I2C2_Init+0x74>)
 800c9c0:	f7f7 fc1c 	bl	80041fc <HAL_I2C_Init>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d001      	beq.n	800c9ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800c9ca:	f000 fad9 	bl	800cf80 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	4809      	ldr	r0, [pc, #36]	; (800c9f8 <MX_I2C2_Init+0x74>)
 800c9d2:	f7f7 ff0b 	bl	80047ec <HAL_I2CEx_ConfigAnalogFilter>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d001      	beq.n	800c9e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800c9dc:	f000 fad0 	bl	800cf80 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	4805      	ldr	r0, [pc, #20]	; (800c9f8 <MX_I2C2_Init+0x74>)
 800c9e4:	f7f7 ff4d 	bl	8004882 <HAL_I2CEx_ConfigDigitalFilter>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800c9ee:	f000 fac7 	bl	800cf80 <Error_Handler>
  }

}
 800c9f2:	bf00      	nop
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	20014808 	.word	0x20014808
 800c9fc:	40005800 	.word	0x40005800
 800ca00:	00b03fdb 	.word	0x00b03fdb

0800ca04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b08a      	sub	sp, #40	; 0x28
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca0c:	f107 0314 	add.w	r3, r7, #20
 800ca10:	2200      	movs	r2, #0
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	605a      	str	r2, [r3, #4]
 800ca16:	609a      	str	r2, [r3, #8]
 800ca18:	60da      	str	r2, [r3, #12]
 800ca1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a1a      	ldr	r2, [pc, #104]	; (800ca8c <HAL_I2C_MspInit+0x88>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d12e      	bne.n	800ca84 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca26:	4b1a      	ldr	r3, [pc, #104]	; (800ca90 <HAL_I2C_MspInit+0x8c>)
 800ca28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ca2c:	4a18      	ldr	r2, [pc, #96]	; (800ca90 <HAL_I2C_MspInit+0x8c>)
 800ca2e:	f043 0302 	orr.w	r3, r3, #2
 800ca32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ca36:	4b16      	ldr	r3, [pc, #88]	; (800ca90 <HAL_I2C_MspInit+0x8c>)
 800ca38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ca3c:	f003 0302 	and.w	r3, r3, #2
 800ca40:	613b      	str	r3, [r7, #16]
 800ca42:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ca44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ca48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ca4a:	2312      	movs	r3, #18
 800ca4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca52:	2303      	movs	r3, #3
 800ca54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800ca56:	2304      	movs	r3, #4
 800ca58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca5a:	f107 0314 	add.w	r3, r7, #20
 800ca5e:	4619      	mov	r1, r3
 800ca60:	480c      	ldr	r0, [pc, #48]	; (800ca94 <HAL_I2C_MspInit+0x90>)
 800ca62:	f7f7 f9e9 	bl	8003e38 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800ca66:	4b0a      	ldr	r3, [pc, #40]	; (800ca90 <HAL_I2C_MspInit+0x8c>)
 800ca68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ca6c:	4a08      	ldr	r2, [pc, #32]	; (800ca90 <HAL_I2C_MspInit+0x8c>)
 800ca6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ca72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ca76:	4b06      	ldr	r3, [pc, #24]	; (800ca90 <HAL_I2C_MspInit+0x8c>)
 800ca78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ca7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca80:	60fb      	str	r3, [r7, #12]
 800ca82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800ca84:	bf00      	nop
 800ca86:	3728      	adds	r7, #40	; 0x28
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	40005800 	.word	0x40005800
 800ca90:	58024400 	.word	0x58024400
 800ca94:	58020400 	.word	0x58020400

0800ca98 <SCB_EnableICache>:
{
 800ca98:	b480      	push	{r7}
 800ca9a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ca9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800caa0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800caa4:	4b0b      	ldr	r3, [pc, #44]	; (800cad4 <SCB_EnableICache+0x3c>)
 800caa6:	2200      	movs	r2, #0
 800caa8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800caac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cab0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800cab4:	4b07      	ldr	r3, [pc, #28]	; (800cad4 <SCB_EnableICache+0x3c>)
 800cab6:	695b      	ldr	r3, [r3, #20]
 800cab8:	4a06      	ldr	r2, [pc, #24]	; (800cad4 <SCB_EnableICache+0x3c>)
 800caba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cabe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800cac0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cac4:	f3bf 8f6f 	isb	sy
}
 800cac8:	bf00      	nop
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	e000ed00 	.word	0xe000ed00

0800cad8 <SCB_EnableDCache>:
{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800cade:	4b1d      	ldr	r3, [pc, #116]	; (800cb54 <SCB_EnableDCache+0x7c>)
 800cae0:	2200      	movs	r2, #0
 800cae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800cae6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800caea:	4b1a      	ldr	r3, [pc, #104]	; (800cb54 <SCB_EnableDCache+0x7c>)
 800caec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800caf0:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	0b5b      	lsrs	r3, r3, #13
 800caf6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cafa:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	08db      	lsrs	r3, r3, #3
 800cb00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb04:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	015a      	lsls	r2, r3, #5
 800cb0a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800cb0e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cb14:	490f      	ldr	r1, [pc, #60]	; (800cb54 <SCB_EnableDCache+0x7c>)
 800cb16:	4313      	orrs	r3, r2
 800cb18:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	1e5a      	subs	r2, r3, #1
 800cb20:	60ba      	str	r2, [r7, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1ef      	bne.n	800cb06 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	1e5a      	subs	r2, r3, #1
 800cb2a:	60fa      	str	r2, [r7, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1e5      	bne.n	800cafc <SCB_EnableDCache+0x24>
 800cb30:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800cb34:	4b07      	ldr	r3, [pc, #28]	; (800cb54 <SCB_EnableDCache+0x7c>)
 800cb36:	695b      	ldr	r3, [r3, #20]
 800cb38:	4a06      	ldr	r2, [pc, #24]	; (800cb54 <SCB_EnableDCache+0x7c>)
 800cb3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb3e:	6153      	str	r3, [r2, #20]
 800cb40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cb44:	f3bf 8f6f 	isb	sy
}
 800cb48:	bf00      	nop
 800cb4a:	3714      	adds	r7, #20
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	e000ed00 	.word	0xe000ed00

0800cb58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  MPU_Conf();
 800cb5e:	f000 f9cd 	bl	800cefc <MPU_Conf>
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800cb62:	f7ff ff99 	bl	800ca98 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800cb66:	f7ff ffb7 	bl	800cad8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cb6a:	f7f3 fbb5 	bl	80002d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cb6e:	f000 f83b 	bl	800cbe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cb72:	f7ff fdcd 	bl	800c710 <MX_GPIO_Init>
  MX_DMA_Init();
 800cb76:	f7ff fc7b 	bl	800c470 <MX_DMA_Init>
  MX_FMC_Init();
 800cb7a:	f7ff fce9 	bl	800c550 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 800cb7e:	f000 fc7b 	bl	800d478 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800cb82:	f7ff fcbd 	bl	800c500 <MX_FATFS_Init>
  MX_SAI1_Init();
 800cb86:	f000 fa3b 	bl	800d000 <MX_SAI1_Init>
  MX_RNG_Init();
 800cb8a:	f000 fa01 	bl	800cf90 <MX_RNG_Init>
  MX_SPI2_Init();
 800cb8e:	f000 fd61 	bl	800d654 <MX_SPI2_Init>
  MX_I2C2_Init();
 800cb92:	f7ff fef7 	bl	800c984 <MX_I2C2_Init>
  MX_ADC1_Init();
 800cb96:	f7ff f85b 	bl	800bc50 <MX_ADC1_Init>
  MX_SPI1_Init();
 800cb9a:	f000 fd03 	bl	800d5a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //pull reset pin on audio codec low to make sure it's stable
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800cb9e:	2200      	movs	r2, #0
 800cba0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cba4:	480c      	ldr	r0, [pc, #48]	; (800cbd8 <main+0x80>)
 800cba6:	f7f7 fb0f 	bl	80041c8 <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800cbaa:	eef1 3a10 	vmrs	r3, fpscr
 800cbae:	607b      	str	r3, [r7, #4]
  return(result);
 800cbb0:	687b      	ldr	r3, [r7, #4]

  uint32_t tempFPURegisterVal = __get_FPSCR();
 800cbb2:	60fb      	str	r3, [r7, #12]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cbba:	60fb      	str	r3, [r7, #12]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	eee1 3a10 	vmsr	fpscr, r3
  __set_FPSCR(tempFPURegisterVal);


  SDRAM_Initialization_sequence();
 800cbc6:	f000 f915 	bl	800cdf4 <SDRAM_Initialization_sequence>

  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 800cbca:	4a04      	ldr	r2, [pc, #16]	; (800cbdc <main+0x84>)
 800cbcc:	4904      	ldr	r1, [pc, #16]	; (800cbe0 <main+0x88>)
 800cbce:	4805      	ldr	r0, [pc, #20]	; (800cbe4 <main+0x8c>)
 800cbd0:	f7ff f998 	bl	800bf04 <audioInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800cbd4:	e7fe      	b.n	800cbd4 <main+0x7c>
 800cbd6:	bf00      	nop
 800cbd8:	58020800 	.word	0x58020800
 800cbdc:	20014868 	.word	0x20014868
 800cbe0:	200149f0 	.word	0x200149f0
 800cbe4:	20014808 	.word	0x20014808

0800cbe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b0cc      	sub	sp, #304	; 0x130
 800cbec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cbee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800cbf2:	224c      	movs	r2, #76	; 0x4c
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f001 f848 	bl	800dc8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cbfc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800cc00:	2220      	movs	r2, #32
 800cc02:	2100      	movs	r1, #0
 800cc04:	4618      	mov	r0, r3
 800cc06:	f001 f841 	bl	800dc8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cc0a:	f107 0308 	add.w	r3, r7, #8
 800cc0e:	4618      	mov	r0, r3
 800cc10:	23bc      	movs	r3, #188	; 0xbc
 800cc12:	461a      	mov	r2, r3
 800cc14:	2100      	movs	r1, #0
 800cc16:	f001 f839 	bl	800dc8c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800cc1a:	2002      	movs	r0, #2
 800cc1c:	f7f7 fe7e 	bl	800491c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800cc20:	1d3b      	adds	r3, r7, #4
 800cc22:	2200      	movs	r2, #0
 800cc24:	601a      	str	r2, [r3, #0]
 800cc26:	4b6f      	ldr	r3, [pc, #444]	; (800cde4 <SystemClock_Config+0x1fc>)
 800cc28:	699b      	ldr	r3, [r3, #24]
 800cc2a:	4a6e      	ldr	r2, [pc, #440]	; (800cde4 <SystemClock_Config+0x1fc>)
 800cc2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cc30:	6193      	str	r3, [r2, #24]
 800cc32:	4b6c      	ldr	r3, [pc, #432]	; (800cde4 <SystemClock_Config+0x1fc>)
 800cc34:	699b      	ldr	r3, [r3, #24]
 800cc36:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800cc3a:	1d3b      	adds	r3, r7, #4
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	4b6a      	ldr	r3, [pc, #424]	; (800cde8 <SystemClock_Config+0x200>)
 800cc40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc42:	4a69      	ldr	r2, [pc, #420]	; (800cde8 <SystemClock_Config+0x200>)
 800cc44:	f043 0301 	orr.w	r3, r3, #1
 800cc48:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc4a:	4b67      	ldr	r3, [pc, #412]	; (800cde8 <SystemClock_Config+0x200>)
 800cc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4e:	f003 0201 	and.w	r2, r3, #1
 800cc52:	1d3b      	adds	r3, r7, #4
 800cc54:	601a      	str	r2, [r3, #0]
 800cc56:	1d3b      	adds	r3, r7, #4
 800cc58:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800cc5a:	bf00      	nop
 800cc5c:	4b61      	ldr	r3, [pc, #388]	; (800cde4 <SystemClock_Config+0x1fc>)
 800cc5e:	699b      	ldr	r3, [r3, #24]
 800cc60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cc64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc68:	d1f8      	bne.n	800cc5c <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800cc6a:	4b60      	ldr	r3, [pc, #384]	; (800cdec <SystemClock_Config+0x204>)
 800cc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6e:	f023 0303 	bic.w	r3, r3, #3
 800cc72:	4a5e      	ldr	r2, [pc, #376]	; (800cdec <SystemClock_Config+0x204>)
 800cc74:	f043 0302 	orr.w	r3, r3, #2
 800cc78:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800cc7a:	2323      	movs	r3, #35	; 0x23
 800cc7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800cc80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cc84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800cc8e:	2340      	movs	r3, #64	; 0x40
 800cc90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800cc94:	2301      	movs	r3, #1
 800cc96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cc9a:	2302      	movs	r3, #2
 800cc9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800cca0:	2302      	movs	r3, #2
 800cca2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800cca6:	2305      	movs	r3, #5
 800cca8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 800ccac:	23c0      	movs	r3, #192	; 0xc0
 800ccae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800ccb2:	2302      	movs	r3, #2
 800ccb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800ccb8:	2302      	movs	r3, #2
 800ccba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800ccbe:	2302      	movs	r3, #2
 800ccc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800ccc4:	2308      	movs	r3, #8
 800ccc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800ccca:	2300      	movs	r3, #0
 800cccc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ccd6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7f7 fe58 	bl	8004990 <HAL_RCC_OscConfig>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d001      	beq.n	800ccea <SystemClock_Config+0x102>
  {
    Error_Handler();
 800cce6:	f000 f94b 	bl	800cf80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ccea:	233f      	movs	r3, #63	; 0x3f
 800ccec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ccf0:	2303      	movs	r3, #3
 800ccf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800ccfc:	2308      	movs	r3, #8
 800ccfe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800cd02:	2340      	movs	r3, #64	; 0x40
 800cd04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800cd08:	2340      	movs	r3, #64	; 0x40
 800cd0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800cd0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800cd16:	2340      	movs	r3, #64	; 0x40
 800cd18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800cd1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800cd20:	2104      	movs	r1, #4
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7f8 fa0c 	bl	8005140 <HAL_RCC_ClockConfig>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d001      	beq.n	800cd32 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800cd2e:	f000 f927 	bl	800cf80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SPI1
 800cd32:	f107 0308 	add.w	r3, r7, #8
 800cd36:	4a2e      	ldr	r2, [pc, #184]	; (800cdf0 <SystemClock_Config+0x208>)
 800cd38:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FMC
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800cd3a:	f107 0308 	add.w	r3, r7, #8
 800cd3e:	2219      	movs	r2, #25
 800cd40:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800cd42:	f107 0308 	add.w	r3, r7, #8
 800cd46:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800cd4a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800cd4c:	f107 0308 	add.w	r3, r7, #8
 800cd50:	2207      	movs	r2, #7
 800cd52:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800cd54:	f107 0308 	add.w	r3, r7, #8
 800cd58:	2202      	movs	r2, #2
 800cd5a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800cd5c:	f107 0308 	add.w	r3, r7, #8
 800cd60:	2202      	movs	r2, #2
 800cd62:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800cd64:	f107 0308 	add.w	r3, r7, #8
 800cd68:	2200      	movs	r2, #0
 800cd6a:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800cd6c:	f107 0308 	add.w	r3, r7, #8
 800cd70:	2200      	movs	r2, #0
 800cd72:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800cd74:	f107 0308 	add.w	r3, r7, #8
 800cd78:	2200      	movs	r2, #0
 800cd7a:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800cd7c:	f107 0308 	add.w	r3, r7, #8
 800cd80:	2200      	movs	r2, #0
 800cd82:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800cd84:	f107 0308 	add.w	r3, r7, #8
 800cd88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cd8c:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800cd8e:	f107 0308 	add.w	r3, r7, #8
 800cd92:	2200      	movs	r2, #0
 800cd94:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800cd96:	f107 0308 	add.w	r3, r7, #8
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	655a      	str	r2, [r3, #84]	; 0x54
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800cd9e:	f107 0308 	add.w	r3, r7, #8
 800cda2:	2200      	movs	r2, #0
 800cda4:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800cda6:	f107 0308 	add.w	r3, r7, #8
 800cdaa:	2200      	movs	r2, #0
 800cdac:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800cdae:	f107 0308 	add.w	r3, r7, #8
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800cdb8:	f107 0308 	add.w	r3, r7, #8
 800cdbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cdc0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cdc4:	f107 0308 	add.w	r3, r7, #8
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7f8 fd11 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d001      	beq.n	800cdd8 <SystemClock_Config+0x1f0>
  {
    Error_Handler();
 800cdd4:	f000 f8d4 	bl	800cf80 <Error_Handler>
  }
}
 800cdd8:	bf00      	nop
 800cdda:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	58024800 	.word	0x58024800
 800cde8:	58000400 	.word	0x58000400
 800cdec:	58024400 	.word	0x58024400
 800cdf0:	810b1108 	.word	0x810b1108

0800cdf4 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b086      	sub	sp, #24
 800cdf8:	af00      	add	r7, sp, #0
    __IO uint32_t tmpmrd = 0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	617b      	str	r3, [r7, #20]
    FMC_SDRAM_CommandTypeDef Command;
    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800ce02:	2310      	movs	r3, #16
 800ce04:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 800ce06:	2301      	movs	r3, #1
 800ce08:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800ce0e:	1d3b      	adds	r3, r7, #4
 800ce10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce14:	4619      	mov	r1, r3
 800ce16:	4828      	ldr	r0, [pc, #160]	; (800ceb8 <SDRAM_Initialization_sequence+0xc4>)
 800ce18:	f7fd f906 	bl	800a028 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800ce1c:	2001      	movs	r0, #1
 800ce1e:	f7f3 faed 	bl	80003fc <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800ce22:	2302      	movs	r3, #2
 800ce24:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800ce26:	2310      	movs	r3, #16
 800ce28:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800ce32:	1d3b      	adds	r3, r7, #4
 800ce34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce38:	4619      	mov	r1, r3
 800ce3a:	481f      	ldr	r0, [pc, #124]	; (800ceb8 <SDRAM_Initialization_sequence+0xc4>)
 800ce3c:	f7fd f8f4 	bl	800a028 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800ce40:	f240 2322 	movw	r3, #546	; 0x222
 800ce44:	617b      	str	r3, [r7, #20]
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800ce46:	2304      	movs	r3, #4
 800ce48:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800ce4a:	2310      	movs	r3, #16
 800ce4c:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800ce56:	1d3b      	adds	r3, r7, #4
 800ce58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	4816      	ldr	r0, [pc, #88]	; (800ceb8 <SDRAM_Initialization_sequence+0xc4>)
 800ce60:	f7fd f8e2 	bl	800a028 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800ce64:	2303      	movs	r3, #3
 800ce66:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800ce68:	2310      	movs	r3, #16
 800ce6a:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 800ce6c:	2308      	movs	r3, #8
 800ce6e:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800ce74:	1d3b      	adds	r3, r7, #4
 800ce76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	480e      	ldr	r0, [pc, #56]	; (800ceb8 <SDRAM_Initialization_sequence+0xc4>)
 800ce7e:	f7fd f8d3 	bl	800a028 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800ce82:	2001      	movs	r0, #1
 800ce84:	f7f3 faba 	bl	80003fc <HAL_Delay>

    /* Step 5: Configure the 2nd Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800ce88:	2303      	movs	r3, #3
 800ce8a:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800ce8c:	2310      	movs	r3, #16
 800ce8e:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 800ce90:	2308      	movs	r3, #8
 800ce92:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800ce94:	2300      	movs	r3, #0
 800ce96:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800ce98:	1d3b      	adds	r3, r7, #4
 800ce9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce9e:	4619      	mov	r1, r3
 800cea0:	4805      	ldr	r0, [pc, #20]	; (800ceb8 <SDRAM_Initialization_sequence+0xc4>)
 800cea2:	f7fd f8c1 	bl	800a028 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 800cea6:	f240 5169 	movw	r1, #1385	; 0x569
 800ceaa:	4803      	ldr	r0, [pc, #12]	; (800ceb8 <SDRAM_Initialization_sequence+0xc4>)
 800ceac:	f7fd f8f1 	bl	800a092 <HAL_SDRAM_ProgramRefreshRate>
}
 800ceb0:	bf00      	nop
 800ceb2:	3718      	adds	r7, #24
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	200147d4 	.word	0x200147d4

0800cebc <randomNumber>:

float randomNumber(void) {
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800cec2:	463b      	mov	r3, r7
 800cec4:	4619      	mov	r1, r3
 800cec6:	480b      	ldr	r0, [pc, #44]	; (800cef4 <randomNumber+0x38>)
 800cec8:	f7fa fba1 	bl	800760e <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	ee07 3a90 	vmov	s15, r3
 800ced2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ced6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800cef8 <randomNumber+0x3c>
 800ceda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cede:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	ee07 3a90 	vmov	s15, r3
}
 800cee8:	eeb0 0a67 	vmov.f32	s0, s15
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	20014854 	.word	0x20014854
 800cef8:	2f80000d 	.word	0x2f80000d

0800cefc <MPU_Conf>:


void MPU_Conf(void)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	HAL_MPU_Disable();
 800cf02:	f7f4 fbf9 	bl	80016f8 <HAL_MPU_Disable>

  //currently leaving D1 SRAM not configured by the MPU - just set as normal default memory.

	//the following code configures D2 and D3 SRAM

  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800cf06:	2301      	movs	r3, #1
 800cf08:	703b      	strb	r3, [r7, #0]

  //D2 Domain�SRAM1
  MPU_InitStruct.BaseAddress = 0x30000000;
 800cf0a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800cf0e:	607b      	str	r3, [r7, #4]
  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800cf10:	2311      	movs	r3, #17
 800cf12:	723b      	strb	r3, [r7, #8]

  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800cf14:	2303      	movs	r3, #3
 800cf16:	72fb      	strb	r3, [r7, #11]

  //AN4838
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800cf20:	2300      	movs	r3, #0
 800cf22:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800cf24:	2300      	movs	r3, #0
 800cf26:	737b      	strb	r3, [r7, #13]
	  //MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	  //MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	  //MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	707b      	strb	r3, [r7, #1]

  MPU_InitStruct.SubRegionDisable = 0x00;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	727b      	strb	r3, [r7, #9]


  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800cf30:	2300      	movs	r3, #0
 800cf32:	733b      	strb	r3, [r7, #12]


  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800cf34:	463b      	mov	r3, r7
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7f4 fc12 	bl	8001760 <HAL_MPU_ConfigRegion>


  //now set up D3 domain RAM

  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	703b      	strb	r3, [r7, #0]

  //D3 Domain�SRAM1
  MPU_InitStruct.BaseAddress = 0x38000000;
 800cf40:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800cf44:	607b      	str	r3, [r7, #4]


  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800cf46:	230f      	movs	r3, #15
 800cf48:	723b      	strb	r3, [r7, #8]

  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800cf4a:	2303      	movs	r3, #3
 800cf4c:	72fb      	strb	r3, [r7, #11]

  //AN4838
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800cf4e:	2301      	movs	r3, #1
 800cf50:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800cf52:	2300      	movs	r3, #0
 800cf54:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800cf56:	2300      	movs	r3, #0
 800cf58:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800cf5e:	2302      	movs	r3, #2
 800cf60:	707b      	strb	r3, [r7, #1]

  MPU_InitStruct.SubRegionDisable = 0x00;
 800cf62:	2300      	movs	r3, #0
 800cf64:	727b      	strb	r3, [r7, #9]


  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800cf66:	2300      	movs	r3, #0
 800cf68:	733b      	strb	r3, [r7, #12]


  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800cf6a:	463b      	mov	r3, r7
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7f4 fbf7 	bl	8001760 <HAL_MPU_ConfigRegion>
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  */



  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800cf72:	2004      	movs	r0, #4
 800cf74:	f7f4 fbd6 	bl	8001724 <HAL_MPU_Enable>
}
 800cf78:	bf00      	nop
 800cf7a:	3710      	adds	r7, #16
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800cf80:	b480      	push	{r7}
 800cf82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800cf84:	bf00      	nop
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
	...

0800cf90 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 800cf94:	4b07      	ldr	r3, [pc, #28]	; (800cfb4 <MX_RNG_Init+0x24>)
 800cf96:	4a08      	ldr	r2, [pc, #32]	; (800cfb8 <MX_RNG_Init+0x28>)
 800cf98:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800cf9a:	4b06      	ldr	r3, [pc, #24]	; (800cfb4 <MX_RNG_Init+0x24>)
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800cfa0:	4804      	ldr	r0, [pc, #16]	; (800cfb4 <MX_RNG_Init+0x24>)
 800cfa2:	f7fa fad9 	bl	8007558 <HAL_RNG_Init>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d001      	beq.n	800cfb0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800cfac:	f7ff ffe8 	bl	800cf80 <Error_Handler>
  }

}
 800cfb0:	bf00      	nop
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	20014854 	.word	0x20014854
 800cfb8:	48021800 	.word	0x48021800

0800cfbc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b085      	sub	sp, #20
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a0b      	ldr	r2, [pc, #44]	; (800cff8 <HAL_RNG_MspInit+0x3c>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d10e      	bne.n	800cfec <HAL_RNG_MspInit+0x30>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800cfce:	4b0b      	ldr	r3, [pc, #44]	; (800cffc <HAL_RNG_MspInit+0x40>)
 800cfd0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800cfd4:	4a09      	ldr	r2, [pc, #36]	; (800cffc <HAL_RNG_MspInit+0x40>)
 800cfd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfda:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800cfde:	4b07      	ldr	r3, [pc, #28]	; (800cffc <HAL_RNG_MspInit+0x40>)
 800cfe0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800cfe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfe8:	60fb      	str	r3, [r7, #12]
 800cfea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800cfec:	bf00      	nop
 800cfee:	3714      	adds	r7, #20
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr
 800cff8:	48021800 	.word	0x48021800
 800cffc:	58024400 	.word	0x58024400

0800d000 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 800d004:	4b2a      	ldr	r3, [pc, #168]	; (800d0b0 <MX_SAI1_Init+0xb0>)
 800d006:	4a2b      	ldr	r2, [pc, #172]	; (800d0b4 <MX_SAI1_Init+0xb4>)
 800d008:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800d00a:	4b29      	ldr	r3, [pc, #164]	; (800d0b0 <MX_SAI1_Init+0xb0>)
 800d00c:	2200      	movs	r2, #0
 800d00e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800d010:	4b27      	ldr	r3, [pc, #156]	; (800d0b0 <MX_SAI1_Init+0xb0>)
 800d012:	2200      	movs	r2, #0
 800d014:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800d016:	4b26      	ldr	r3, [pc, #152]	; (800d0b0 <MX_SAI1_Init+0xb0>)
 800d018:	2200      	movs	r2, #0
 800d01a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800d01c:	4b24      	ldr	r3, [pc, #144]	; (800d0b0 <MX_SAI1_Init+0xb0>)
 800d01e:	2200      	movs	r2, #0
 800d020:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800d022:	4b23      	ldr	r3, [pc, #140]	; (800d0b0 <MX_SAI1_Init+0xb0>)
 800d024:	2201      	movs	r2, #1
 800d026:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800d028:	4b21      	ldr	r3, [pc, #132]	; (800d0b0 <MX_SAI1_Init+0xb0>)
 800d02a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800d02e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800d030:	4b1f      	ldr	r3, [pc, #124]	; (800d0b0 <MX_SAI1_Init+0xb0>)
 800d032:	2200      	movs	r2, #0
 800d034:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800d036:	4b1e      	ldr	r3, [pc, #120]	; (800d0b0 <MX_SAI1_Init+0xb0>)
 800d038:	2200      	movs	r2, #0
 800d03a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800d03c:	4b1c      	ldr	r3, [pc, #112]	; (800d0b0 <MX_SAI1_Init+0xb0>)
 800d03e:	2200      	movs	r2, #0
 800d040:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800d042:	4b1b      	ldr	r3, [pc, #108]	; (800d0b0 <MX_SAI1_Init+0xb0>)
 800d044:	2200      	movs	r2, #0
 800d046:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800d048:	2302      	movs	r3, #2
 800d04a:	2202      	movs	r2, #2
 800d04c:	2100      	movs	r1, #0
 800d04e:	4818      	ldr	r0, [pc, #96]	; (800d0b0 <MX_SAI1_Init+0xb0>)
 800d050:	f7fa fb2c 	bl	80076ac <HAL_SAI_InitProtocol>
 800d054:	4603      	mov	r3, r0
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 800d05a:	f7ff ff91 	bl	800cf80 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800d05e:	4b16      	ldr	r3, [pc, #88]	; (800d0b8 <MX_SAI1_Init+0xb8>)
 800d060:	4a16      	ldr	r2, [pc, #88]	; (800d0bc <MX_SAI1_Init+0xbc>)
 800d062:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800d064:	4b14      	ldr	r3, [pc, #80]	; (800d0b8 <MX_SAI1_Init+0xb8>)
 800d066:	2203      	movs	r2, #3
 800d068:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800d06a:	4b13      	ldr	r3, [pc, #76]	; (800d0b8 <MX_SAI1_Init+0xb8>)
 800d06c:	2201      	movs	r2, #1
 800d06e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800d070:	4b11      	ldr	r3, [pc, #68]	; (800d0b8 <MX_SAI1_Init+0xb8>)
 800d072:	2200      	movs	r2, #0
 800d074:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800d076:	4b10      	ldr	r3, [pc, #64]	; (800d0b8 <MX_SAI1_Init+0xb8>)
 800d078:	2201      	movs	r2, #1
 800d07a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800d07c:	4b0e      	ldr	r3, [pc, #56]	; (800d0b8 <MX_SAI1_Init+0xb8>)
 800d07e:	2200      	movs	r2, #0
 800d080:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800d082:	4b0d      	ldr	r3, [pc, #52]	; (800d0b8 <MX_SAI1_Init+0xb8>)
 800d084:	2200      	movs	r2, #0
 800d086:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800d088:	4b0b      	ldr	r3, [pc, #44]	; (800d0b8 <MX_SAI1_Init+0xb8>)
 800d08a:	2200      	movs	r2, #0
 800d08c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800d08e:	4b0a      	ldr	r3, [pc, #40]	; (800d0b8 <MX_SAI1_Init+0xb8>)
 800d090:	2200      	movs	r2, #0
 800d092:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800d094:	2302      	movs	r3, #2
 800d096:	2202      	movs	r2, #2
 800d098:	2100      	movs	r1, #0
 800d09a:	4807      	ldr	r0, [pc, #28]	; (800d0b8 <MX_SAI1_Init+0xb8>)
 800d09c:	f7fa fb06 	bl	80076ac <HAL_SAI_InitProtocol>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d001      	beq.n	800d0aa <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 800d0a6:	f7ff ff6b 	bl	800cf80 <Error_Handler>
  }

}
 800d0aa:	bf00      	nop
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	200149f0 	.word	0x200149f0
 800d0b4:	40015804 	.word	0x40015804
 800d0b8:	20014868 	.word	0x20014868
 800d0bc:	40015824 	.word	0x40015824

0800d0c0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08a      	sub	sp, #40	; 0x28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a6f      	ldr	r2, [pc, #444]	; (800d28c <HAL_SAI_MspInit+0x1cc>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d169      	bne.n	800d1a6 <HAL_SAI_MspInit+0xe6>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800d0d2:	4b6f      	ldr	r3, [pc, #444]	; (800d290 <HAL_SAI_MspInit+0x1d0>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10e      	bne.n	800d0f8 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800d0da:	4b6e      	ldr	r3, [pc, #440]	; (800d294 <HAL_SAI_MspInit+0x1d4>)
 800d0dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d0e0:	4a6c      	ldr	r2, [pc, #432]	; (800d294 <HAL_SAI_MspInit+0x1d4>)
 800d0e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d0e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d0ea:	4b6a      	ldr	r3, [pc, #424]	; (800d294 <HAL_SAI_MspInit+0x1d4>)
 800d0ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d0f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0f4:	613b      	str	r3, [r7, #16]
 800d0f6:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800d0f8:	4b65      	ldr	r3, [pc, #404]	; (800d290 <HAL_SAI_MspInit+0x1d0>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	4a64      	ldr	r2, [pc, #400]	; (800d290 <HAL_SAI_MspInit+0x1d0>)
 800d100:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800d102:	2374      	movs	r3, #116	; 0x74
 800d104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d106:	2302      	movs	r3, #2
 800d108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d10a:	2300      	movs	r3, #0
 800d10c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d10e:	2303      	movs	r3, #3
 800d110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800d112:	2306      	movs	r3, #6
 800d114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d116:	f107 0314 	add.w	r3, r7, #20
 800d11a:	4619      	mov	r1, r3
 800d11c:	485e      	ldr	r0, [pc, #376]	; (800d298 <HAL_SAI_MspInit+0x1d8>)
 800d11e:	f7f6 fe8b 	bl	8003e38 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai1_a.Instance = DMA1_Stream1;
 800d122:	4b5e      	ldr	r3, [pc, #376]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d124:	4a5e      	ldr	r2, [pc, #376]	; (800d2a0 <HAL_SAI_MspInit+0x1e0>)
 800d126:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800d128:	4b5c      	ldr	r3, [pc, #368]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d12a:	2257      	movs	r2, #87	; 0x57
 800d12c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d12e:	4b5b      	ldr	r3, [pc, #364]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d130:	2240      	movs	r2, #64	; 0x40
 800d132:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800d134:	4b59      	ldr	r3, [pc, #356]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d136:	2200      	movs	r2, #0
 800d138:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800d13a:	4b58      	ldr	r3, [pc, #352]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d13c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d140:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d142:	4b56      	ldr	r3, [pc, #344]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d148:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d14a:	4b54      	ldr	r3, [pc, #336]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d14c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d150:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800d152:	4b52      	ldr	r3, [pc, #328]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d154:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d158:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800d15a:	4b50      	ldr	r3, [pc, #320]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d15c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d160:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800d162:	4b4e      	ldr	r3, [pc, #312]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d164:	2204      	movs	r2, #4
 800d166:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800d168:	4b4c      	ldr	r3, [pc, #304]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800d16e:	4b4b      	ldr	r3, [pc, #300]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d170:	2200      	movs	r2, #0
 800d172:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800d174:	4b49      	ldr	r3, [pc, #292]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d176:	2200      	movs	r2, #0
 800d178:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800d17a:	4848      	ldr	r0, [pc, #288]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d17c:	f7f4 fb34 	bl	80017e8 <HAL_DMA_Init>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d001      	beq.n	800d18a <HAL_SAI_MspInit+0xca>
    {
      Error_Handler();
 800d186:	f7ff fefb 	bl	800cf80 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4a43      	ldr	r2, [pc, #268]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d18e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800d192:	4a42      	ldr	r2, [pc, #264]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4a40      	ldr	r2, [pc, #256]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d19c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800d1a0:	4a3e      	ldr	r2, [pc, #248]	; (800d29c <HAL_SAI_MspInit+0x1dc>)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(hsai->Instance==SAI1_Block_B)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4a3e      	ldr	r2, [pc, #248]	; (800d2a4 <HAL_SAI_MspInit+0x1e4>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d169      	bne.n	800d284 <HAL_SAI_MspInit+0x1c4>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 800d1b0:	4b37      	ldr	r3, [pc, #220]	; (800d290 <HAL_SAI_MspInit+0x1d0>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d10e      	bne.n	800d1d6 <HAL_SAI_MspInit+0x116>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800d1b8:	4b36      	ldr	r3, [pc, #216]	; (800d294 <HAL_SAI_MspInit+0x1d4>)
 800d1ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d1be:	4a35      	ldr	r2, [pc, #212]	; (800d294 <HAL_SAI_MspInit+0x1d4>)
 800d1c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d1c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d1c8:	4b32      	ldr	r3, [pc, #200]	; (800d294 <HAL_SAI_MspInit+0x1d4>)
 800d1ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d1ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800d1d6:	4b2e      	ldr	r3, [pc, #184]	; (800d290 <HAL_SAI_MspInit+0x1d0>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	4a2c      	ldr	r2, [pc, #176]	; (800d290 <HAL_SAI_MspInit+0x1d0>)
 800d1de:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d1e0:	2308      	movs	r3, #8
 800d1e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1e4:	2302      	movs	r3, #2
 800d1e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1ec:	2303      	movs	r3, #3
 800d1ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800d1f0:	2306      	movs	r3, #6
 800d1f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d1f4:	f107 0314 	add.w	r3, r7, #20
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4827      	ldr	r0, [pc, #156]	; (800d298 <HAL_SAI_MspInit+0x1d8>)
 800d1fc:	f7f6 fe1c 	bl	8003e38 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai1_b.Instance = DMA1_Stream2;
 800d200:	4b29      	ldr	r3, [pc, #164]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d202:	4a2a      	ldr	r2, [pc, #168]	; (800d2ac <HAL_SAI_MspInit+0x1ec>)
 800d204:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800d206:	4b28      	ldr	r3, [pc, #160]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d208:	2258      	movs	r2, #88	; 0x58
 800d20a:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d20c:	4b26      	ldr	r3, [pc, #152]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d20e:	2200      	movs	r2, #0
 800d210:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800d212:	4b25      	ldr	r3, [pc, #148]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d214:	2200      	movs	r2, #0
 800d216:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800d218:	4b23      	ldr	r3, [pc, #140]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d21a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d21e:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d220:	4b21      	ldr	r3, [pc, #132]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d222:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d226:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d228:	4b1f      	ldr	r3, [pc, #124]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d22a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d22e:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800d230:	4b1d      	ldr	r3, [pc, #116]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d232:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d236:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800d238:	4b1b      	ldr	r3, [pc, #108]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d23a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d23e:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800d240:	4b19      	ldr	r3, [pc, #100]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d242:	2204      	movs	r2, #4
 800d244:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800d246:	4b18      	ldr	r3, [pc, #96]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d248:	2200      	movs	r2, #0
 800d24a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800d24c:	4b16      	ldr	r3, [pc, #88]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d24e:	2200      	movs	r2, #0
 800d250:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800d252:	4b15      	ldr	r3, [pc, #84]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d254:	2200      	movs	r2, #0
 800d256:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800d258:	4813      	ldr	r0, [pc, #76]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d25a:	f7f4 fac5 	bl	80017e8 <HAL_DMA_Init>
 800d25e:	4603      	mov	r3, r0
 800d260:	2b00      	cmp	r3, #0
 800d262:	d001      	beq.n	800d268 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 800d264:	f7ff fe8c 	bl	800cf80 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	4a0f      	ldr	r2, [pc, #60]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d26c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800d270:	4a0d      	ldr	r2, [pc, #52]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4a0b      	ldr	r2, [pc, #44]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d27a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800d27e:	4a0a      	ldr	r2, [pc, #40]	; (800d2a8 <HAL_SAI_MspInit+0x1e8>)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800d284:	bf00      	nop
 800d286:	3728      	adds	r7, #40	; 0x28
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	40015804 	.word	0x40015804
 800d290:	2000004c 	.word	0x2000004c
 800d294:	58024400 	.word	0x58024400
 800d298:	58021000 	.word	0x58021000
 800d29c:	20014900 	.word	0x20014900
 800d2a0:	40020028 	.word	0x40020028
 800d2a4:	40015824 	.word	0x40015824
 800d2a8:	20014978 	.word	0x20014978
 800d2ac:	40020040 	.word	0x40020040

0800d2b0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d2ba:	4b0b      	ldr	r3, [pc, #44]	; (800d2e8 <SD_CheckStatus+0x38>)
 800d2bc:	2201      	movs	r2, #1
 800d2be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d2c0:	f7fe ffc0 	bl	800c244 <BSP_SD_GetCardState>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d107      	bne.n	800d2da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d2ca:	4b07      	ldr	r3, [pc, #28]	; (800d2e8 <SD_CheckStatus+0x38>)
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	f023 0301 	bic.w	r3, r3, #1
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	4b04      	ldr	r3, [pc, #16]	; (800d2e8 <SD_CheckStatus+0x38>)
 800d2d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d2da:	4b03      	ldr	r3, [pc, #12]	; (800d2e8 <SD_CheckStatus+0x38>)
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	b2db      	uxtb	r3, r3
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	2000000c 	.word	0x2000000c

0800d2ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800d2f6:	4b0b      	ldr	r3, [pc, #44]	; (800d324 <SD_initialize+0x38>)
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d2fc:	f7fe ff40 	bl	800c180 <BSP_SD_Init>
 800d300:	4603      	mov	r3, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d107      	bne.n	800d316 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d306:	79fb      	ldrb	r3, [r7, #7]
 800d308:	4618      	mov	r0, r3
 800d30a:	f7ff ffd1 	bl	800d2b0 <SD_CheckStatus>
 800d30e:	4603      	mov	r3, r0
 800d310:	461a      	mov	r2, r3
 800d312:	4b04      	ldr	r3, [pc, #16]	; (800d324 <SD_initialize+0x38>)
 800d314:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d316:	4b03      	ldr	r3, [pc, #12]	; (800d324 <SD_initialize+0x38>)
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	b2db      	uxtb	r3, r3
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	2000000c 	.word	0x2000000c

0800d328 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	4603      	mov	r3, r0
 800d330:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d332:	79fb      	ldrb	r3, [r7, #7]
 800d334:	4618      	mov	r0, r3
 800d336:	f7ff ffbb 	bl	800d2b0 <SD_CheckStatus>
 800d33a:	4603      	mov	r3, r0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b086      	sub	sp, #24
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60b9      	str	r1, [r7, #8]
 800d34c:	607a      	str	r2, [r7, #4]
 800d34e:	603b      	str	r3, [r7, #0]
 800d350:	4603      	mov	r3, r0
 800d352:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d354:	2301      	movs	r3, #1
 800d356:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d35c:	683a      	ldr	r2, [r7, #0]
 800d35e:	6879      	ldr	r1, [r7, #4]
 800d360:	68b8      	ldr	r0, [r7, #8]
 800d362:	f7fe ff33 	bl	800c1cc <BSP_SD_ReadBlocks>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d107      	bne.n	800d37c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d36c:	bf00      	nop
 800d36e:	f7fe ff69 	bl	800c244 <BSP_SD_GetCardState>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d1fa      	bne.n	800d36e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d378:	2300      	movs	r3, #0
 800d37a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d37c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3718      	adds	r7, #24
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b086      	sub	sp, #24
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
 800d390:	603b      	str	r3, [r7, #0]
 800d392:	4603      	mov	r3, r0
 800d394:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d396:	2301      	movs	r3, #1
 800d398:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d39a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d39e:	683a      	ldr	r2, [r7, #0]
 800d3a0:	6879      	ldr	r1, [r7, #4]
 800d3a2:	68b8      	ldr	r0, [r7, #8]
 800d3a4:	f7fe ff30 	bl	800c208 <BSP_SD_WriteBlocks>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d107      	bne.n	800d3be <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d3ae:	bf00      	nop
 800d3b0:	f7fe ff48 	bl	800c244 <BSP_SD_GetCardState>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1fa      	bne.n	800d3b0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d3be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3718      	adds	r7, #24
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b08c      	sub	sp, #48	; 0x30
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	603a      	str	r2, [r7, #0]
 800d3d2:	71fb      	strb	r3, [r7, #7]
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d3de:	4b25      	ldr	r3, [pc, #148]	; (800d474 <SD_ioctl+0xac>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	f003 0301 	and.w	r3, r3, #1
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d001      	beq.n	800d3f0 <SD_ioctl+0x28>
 800d3ec:	2303      	movs	r3, #3
 800d3ee:	e03c      	b.n	800d46a <SD_ioctl+0xa2>

  switch (cmd)
 800d3f0:	79bb      	ldrb	r3, [r7, #6]
 800d3f2:	2b03      	cmp	r3, #3
 800d3f4:	d834      	bhi.n	800d460 <SD_ioctl+0x98>
 800d3f6:	a201      	add	r2, pc, #4	; (adr r2, 800d3fc <SD_ioctl+0x34>)
 800d3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3fc:	0800d40d 	.word	0x0800d40d
 800d400:	0800d415 	.word	0x0800d415
 800d404:	0800d42d 	.word	0x0800d42d
 800d408:	0800d447 	.word	0x0800d447
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d412:	e028      	b.n	800d466 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d414:	f107 0308 	add.w	r3, r7, #8
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fe ff23 	bl	800c264 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d41e:	6a3a      	ldr	r2, [r7, #32]
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d42a:	e01c      	b.n	800d466 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d42c:	f107 0308 	add.w	r3, r7, #8
 800d430:	4618      	mov	r0, r3
 800d432:	f7fe ff17 	bl	800c264 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d438:	b29a      	uxth	r2, r3
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d43e:	2300      	movs	r3, #0
 800d440:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d444:	e00f      	b.n	800d466 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d446:	f107 0308 	add.w	r3, r7, #8
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe ff0a 	bl	800c264 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d452:	0a5a      	lsrs	r2, r3, #9
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d458:	2300      	movs	r3, #0
 800d45a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d45e:	e002      	b.n	800d466 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d460:	2304      	movs	r3, #4
 800d462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3730      	adds	r7, #48	; 0x30
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	2000000c 	.word	0x2000000c

0800d478 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800d478:	b480      	push	{r7}
 800d47a:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 800d47c:	4b0d      	ldr	r3, [pc, #52]	; (800d4b4 <MX_SDMMC1_SD_Init+0x3c>)
 800d47e:	4a0e      	ldr	r2, [pc, #56]	; (800d4b8 <MX_SDMMC1_SD_Init+0x40>)
 800d480:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800d482:	4b0c      	ldr	r3, [pc, #48]	; (800d4b4 <MX_SDMMC1_SD_Init+0x3c>)
 800d484:	2200      	movs	r2, #0
 800d486:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d488:	4b0a      	ldr	r3, [pc, #40]	; (800d4b4 <MX_SDMMC1_SD_Init+0x3c>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800d48e:	4b09      	ldr	r3, [pc, #36]	; (800d4b4 <MX_SDMMC1_SD_Init+0x3c>)
 800d490:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d494:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d496:	4b07      	ldr	r3, [pc, #28]	; (800d4b4 <MX_SDMMC1_SD_Init+0x3c>)
 800d498:	2200      	movs	r2, #0
 800d49a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 16;
 800d49c:	4b05      	ldr	r3, [pc, #20]	; (800d4b4 <MX_SDMMC1_SD_Init+0x3c>)
 800d49e:	2210      	movs	r2, #16
 800d4a0:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800d4a2:	4b04      	ldr	r3, [pc, #16]	; (800d4b4 <MX_SDMMC1_SD_Init+0x3c>)
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	619a      	str	r2, [r3, #24]

}
 800d4a8:	bf00      	nop
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	20014a88 	.word	0x20014a88
 800d4b8:	52007000 	.word	0x52007000

0800d4bc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b08a      	sub	sp, #40	; 0x28
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4c4:	f107 0314 	add.w	r3, r7, #20
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]
 800d4cc:	605a      	str	r2, [r3, #4]
 800d4ce:	609a      	str	r2, [r3, #8]
 800d4d0:	60da      	str	r2, [r3, #12]
 800d4d2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a2e      	ldr	r2, [pc, #184]	; (800d594 <HAL_SD_MspInit+0xd8>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d155      	bne.n	800d58a <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800d4de:	4b2e      	ldr	r3, [pc, #184]	; (800d598 <HAL_SD_MspInit+0xdc>)
 800d4e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d4e4:	4a2c      	ldr	r2, [pc, #176]	; (800d598 <HAL_SD_MspInit+0xdc>)
 800d4e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4ea:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800d4ee:	4b2a      	ldr	r3, [pc, #168]	; (800d598 <HAL_SD_MspInit+0xdc>)
 800d4f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d4f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4f8:	613b      	str	r3, [r7, #16]
 800d4fa:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d4fc:	4b26      	ldr	r3, [pc, #152]	; (800d598 <HAL_SD_MspInit+0xdc>)
 800d4fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d502:	4a25      	ldr	r2, [pc, #148]	; (800d598 <HAL_SD_MspInit+0xdc>)
 800d504:	f043 0304 	orr.w	r3, r3, #4
 800d508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d50c:	4b22      	ldr	r3, [pc, #136]	; (800d598 <HAL_SD_MspInit+0xdc>)
 800d50e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d512:	f003 0304 	and.w	r3, r3, #4
 800d516:	60fb      	str	r3, [r7, #12]
 800d518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d51a:	4b1f      	ldr	r3, [pc, #124]	; (800d598 <HAL_SD_MspInit+0xdc>)
 800d51c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d520:	4a1d      	ldr	r2, [pc, #116]	; (800d598 <HAL_SD_MspInit+0xdc>)
 800d522:	f043 0308 	orr.w	r3, r3, #8
 800d526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d52a:	4b1b      	ldr	r3, [pc, #108]	; (800d598 <HAL_SD_MspInit+0xdc>)
 800d52c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d530:	f003 0308 	and.w	r3, r3, #8
 800d534:	60bb      	str	r3, [r7, #8]
 800d536:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800d538:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800d53c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d53e:	2302      	movs	r3, #2
 800d540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d542:	2301      	movs	r3, #1
 800d544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800d546:	2301      	movs	r3, #1
 800d548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800d54a:	230c      	movs	r3, #12
 800d54c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d54e:	f107 0314 	add.w	r3, r7, #20
 800d552:	4619      	mov	r1, r3
 800d554:	4811      	ldr	r0, [pc, #68]	; (800d59c <HAL_SD_MspInit+0xe0>)
 800d556:	f7f6 fc6f 	bl	8003e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d55a:	2304      	movs	r3, #4
 800d55c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d55e:	2302      	movs	r3, #2
 800d560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d562:	2301      	movs	r3, #1
 800d564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800d566:	2301      	movs	r3, #1
 800d568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800d56a:	230c      	movs	r3, #12
 800d56c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d56e:	f107 0314 	add.w	r3, r7, #20
 800d572:	4619      	mov	r1, r3
 800d574:	480a      	ldr	r0, [pc, #40]	; (800d5a0 <HAL_SD_MspInit+0xe4>)
 800d576:	f7f6 fc5f 	bl	8003e38 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 800d57a:	2200      	movs	r2, #0
 800d57c:	2107      	movs	r1, #7
 800d57e:	2031      	movs	r0, #49	; 0x31
 800d580:	f7f4 f885 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800d584:	2031      	movs	r0, #49	; 0x31
 800d586:	f7f4 f89c 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800d58a:	bf00      	nop
 800d58c:	3728      	adds	r7, #40	; 0x28
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	52007000 	.word	0x52007000
 800d598:	58024400 	.word	0x58024400
 800d59c:	58020800 	.word	0x58020800
 800d5a0:	58020c00 	.word	0x58020c00

0800d5a4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800d5a8:	4b28      	ldr	r3, [pc, #160]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d5aa:	4a29      	ldr	r2, [pc, #164]	; (800d650 <MX_SPI1_Init+0xac>)
 800d5ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d5ae:	4b27      	ldr	r3, [pc, #156]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d5b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800d5b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800d5b6:	4b25      	ldr	r3, [pc, #148]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d5b8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800d5bc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d5be:	4b23      	ldr	r3, [pc, #140]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d5c0:	2207      	movs	r2, #7
 800d5c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d5c4:	4b21      	ldr	r3, [pc, #132]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d5ca:	4b20      	ldr	r3, [pc, #128]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800d5d0:	4b1e      	ldr	r3, [pc, #120]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d5d2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d5d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800d5d8:	4b1c      	ldr	r3, [pc, #112]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d5da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d5de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d5e0:	4b1a      	ldr	r3, [pc, #104]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d5e6:	4b19      	ldr	r3, [pc, #100]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d5ec:	4b17      	ldr	r3, [pc, #92]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800d5f2:	4b16      	ldr	r3, [pc, #88]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d5f8:	4b14      	ldr	r3, [pc, #80]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d5fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d5fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800d600:	4b12      	ldr	r3, [pc, #72]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d602:	2200      	movs	r2, #0
 800d604:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800d606:	4b11      	ldr	r3, [pc, #68]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d608:	2200      	movs	r2, #0
 800d60a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d60c:	4b0f      	ldr	r3, [pc, #60]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d60e:	2200      	movs	r2, #0
 800d610:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d612:	4b0e      	ldr	r3, [pc, #56]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d614:	2200      	movs	r2, #0
 800d616:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800d618:	4b0c      	ldr	r3, [pc, #48]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d61a:	2200      	movs	r2, #0
 800d61c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800d61e:	4b0b      	ldr	r3, [pc, #44]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d620:	2200      	movs	r2, #0
 800d622:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800d624:	4b09      	ldr	r3, [pc, #36]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d626:	2200      	movs	r2, #0
 800d628:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800d62a:	4b08      	ldr	r3, [pc, #32]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800d630:	4b06      	ldr	r3, [pc, #24]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d632:	2200      	movs	r2, #0
 800d634:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d636:	4805      	ldr	r0, [pc, #20]	; (800d64c <MX_SPI1_Init+0xa8>)
 800d638:	f7fc fd54 	bl	800a0e4 <HAL_SPI_Init>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d001      	beq.n	800d646 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800d642:	f7ff fc9d 	bl	800cf80 <Error_Handler>
  }

}
 800d646:	bf00      	nop
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	20014c08 	.word	0x20014c08
 800d650:	40013000 	.word	0x40013000

0800d654 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800d658:	4b24      	ldr	r3, [pc, #144]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d65a:	4a25      	ldr	r2, [pc, #148]	; (800d6f0 <MX_SPI2_Init+0x9c>)
 800d65c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800d65e:	4b23      	ldr	r3, [pc, #140]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d660:	2200      	movs	r2, #0
 800d662:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800d664:	4b21      	ldr	r3, [pc, #132]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d666:	2200      	movs	r2, #0
 800d668:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800d66a:	4b20      	ldr	r3, [pc, #128]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d66c:	2207      	movs	r2, #7
 800d66e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d670:	4b1e      	ldr	r3, [pc, #120]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d672:	2200      	movs	r2, #0
 800d674:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d676:	4b1d      	ldr	r3, [pc, #116]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d678:	2200      	movs	r2, #0
 800d67a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800d67c:	4b1b      	ldr	r3, [pc, #108]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d67e:	2200      	movs	r2, #0
 800d680:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d682:	4b1a      	ldr	r3, [pc, #104]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d684:	2200      	movs	r2, #0
 800d686:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d688:	4b18      	ldr	r3, [pc, #96]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d68a:	2200      	movs	r2, #0
 800d68c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d68e:	4b17      	ldr	r3, [pc, #92]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d690:	2200      	movs	r2, #0
 800d692:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800d694:	4b15      	ldr	r3, [pc, #84]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d696:	2200      	movs	r2, #0
 800d698:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800d69a:	4b14      	ldr	r3, [pc, #80]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d69c:	2200      	movs	r2, #0
 800d69e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800d6a0:	4b12      	ldr	r3, [pc, #72]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800d6a6:	4b11      	ldr	r3, [pc, #68]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d6ac:	4b0f      	ldr	r3, [pc, #60]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d6b2:	4b0e      	ldr	r3, [pc, #56]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800d6b8:	4b0c      	ldr	r3, [pc, #48]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800d6be:	4b0b      	ldr	r3, [pc, #44]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800d6c4:	4b09      	ldr	r3, [pc, #36]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800d6ca:	4b08      	ldr	r3, [pc, #32]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800d6d0:	4b06      	ldr	r3, [pc, #24]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800d6d6:	4805      	ldr	r0, [pc, #20]	; (800d6ec <MX_SPI2_Init+0x98>)
 800d6d8:	f7fc fd04 	bl	800a0e4 <HAL_SPI_Init>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <MX_SPI2_Init+0x92>
  {
    Error_Handler();
 800d6e2:	f7ff fc4d 	bl	800cf80 <Error_Handler>
  }

}
 800d6e6:	bf00      	nop
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	20014b08 	.word	0x20014b08
 800d6f0:	40003800 	.word	0x40003800

0800d6f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b08c      	sub	sp, #48	; 0x30
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6fc:	f107 031c 	add.w	r3, r7, #28
 800d700:	2200      	movs	r2, #0
 800d702:	601a      	str	r2, [r3, #0]
 800d704:	605a      	str	r2, [r3, #4]
 800d706:	609a      	str	r2, [r3, #8]
 800d708:	60da      	str	r2, [r3, #12]
 800d70a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4aa9      	ldr	r2, [pc, #676]	; (800d9b8 <HAL_SPI_MspInit+0x2c4>)
 800d712:	4293      	cmp	r3, r2
 800d714:	f040 809f 	bne.w	800d856 <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d718:	4ba8      	ldr	r3, [pc, #672]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d71a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d71e:	4aa7      	ldr	r2, [pc, #668]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d720:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d724:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d728:	4ba4      	ldr	r3, [pc, #656]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d72a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d72e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d732:	61bb      	str	r3, [r7, #24]
 800d734:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d736:	4ba1      	ldr	r3, [pc, #644]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d73c:	4a9f      	ldr	r2, [pc, #636]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d73e:	f043 0308 	orr.w	r3, r3, #8
 800d742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d746:	4b9d      	ldr	r3, [pc, #628]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d74c:	f003 0308 	and.w	r3, r3, #8
 800d750:	617b      	str	r3, [r7, #20]
 800d752:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800d754:	4b99      	ldr	r3, [pc, #612]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d75a:	4a98      	ldr	r2, [pc, #608]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d764:	4b95      	ldr	r3, [pc, #596]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d76e:	613b      	str	r3, [r7, #16]
 800d770:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800d772:	2380      	movs	r3, #128	; 0x80
 800d774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d776:	2302      	movs	r3, #2
 800d778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d77a:	2300      	movs	r3, #0
 800d77c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d77e:	2302      	movs	r3, #2
 800d780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d782:	2305      	movs	r3, #5
 800d784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d786:	f107 031c 	add.w	r3, r7, #28
 800d78a:	4619      	mov	r1, r3
 800d78c:	488c      	ldr	r0, [pc, #560]	; (800d9c0 <HAL_SPI_MspInit+0x2cc>)
 800d78e:	f7f6 fb53 	bl	8003e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d792:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d798:	2302      	movs	r3, #2
 800d79a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d79c:	2300      	movs	r3, #0
 800d79e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d7a4:	2305      	movs	r3, #5
 800d7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d7a8:	f107 031c 	add.w	r3, r7, #28
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	4885      	ldr	r0, [pc, #532]	; (800d9c4 <HAL_SPI_MspInit+0x2d0>)
 800d7b0:	f7f6 fb42 	bl	8003e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800d7b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d7b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7ba:	2302      	movs	r3, #2
 800d7bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d7c2:	2302      	movs	r3, #2
 800d7c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d7c6:	2305      	movs	r3, #5
 800d7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d7ca:	f107 031c 	add.w	r3, r7, #28
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	487c      	ldr	r0, [pc, #496]	; (800d9c4 <HAL_SPI_MspInit+0x2d0>)
 800d7d2:	f7f6 fb31 	bl	8003e38 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 800d7d6:	4b7c      	ldr	r3, [pc, #496]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d7d8:	4a7c      	ldr	r2, [pc, #496]	; (800d9cc <HAL_SPI_MspInit+0x2d8>)
 800d7da:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800d7dc:	4b7a      	ldr	r3, [pc, #488]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d7de:	2226      	movs	r2, #38	; 0x26
 800d7e0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d7e2:	4b79      	ldr	r3, [pc, #484]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d7e4:	2240      	movs	r2, #64	; 0x40
 800d7e6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d7e8:	4b77      	ldr	r3, [pc, #476]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d7ee:	4b76      	ldr	r3, [pc, #472]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d7f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d7f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d7f6:	4b74      	ldr	r3, [pc, #464]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d7fc:	4b72      	ldr	r3, [pc, #456]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d7fe:	2200      	movs	r2, #0
 800d800:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800d802:	4b71      	ldr	r3, [pc, #452]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d804:	2200      	movs	r2, #0
 800d806:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800d808:	4b6f      	ldr	r3, [pc, #444]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d80a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d80e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800d810:	4b6d      	ldr	r3, [pc, #436]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d812:	2204      	movs	r2, #4
 800d814:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800d816:	4b6c      	ldr	r3, [pc, #432]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d818:	2201      	movs	r2, #1
 800d81a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800d81c:	4b6a      	ldr	r3, [pc, #424]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d81e:	2200      	movs	r2, #0
 800d820:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800d822:	4b69      	ldr	r3, [pc, #420]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d824:	2200      	movs	r2, #0
 800d826:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800d828:	4867      	ldr	r0, [pc, #412]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d82a:	f7f3 ffdd 	bl	80017e8 <HAL_DMA_Init>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d001      	beq.n	800d838 <HAL_SPI_MspInit+0x144>
    {
      Error_Handler();
 800d834:	f7ff fba4 	bl	800cf80 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	4a63      	ldr	r2, [pc, #396]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d83c:	679a      	str	r2, [r3, #120]	; 0x78
 800d83e:	4a62      	ldr	r2, [pc, #392]	; (800d9c8 <HAL_SPI_MspInit+0x2d4>)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800d844:	2200      	movs	r2, #0
 800d846:	2100      	movs	r1, #0
 800d848:	2023      	movs	r0, #35	; 0x23
 800d84a:	f7f3 ff20 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800d84e:	2023      	movs	r0, #35	; 0x23
 800d850:	f7f3 ff37 	bl	80016c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800d854:	e0ac      	b.n	800d9b0 <HAL_SPI_MspInit+0x2bc>
  else if(spiHandle->Instance==SPI2)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a5d      	ldr	r2, [pc, #372]	; (800d9d0 <HAL_SPI_MspInit+0x2dc>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	f040 80a7 	bne.w	800d9b0 <HAL_SPI_MspInit+0x2bc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d862:	4b56      	ldr	r3, [pc, #344]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d864:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d868:	4a54      	ldr	r2, [pc, #336]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d86a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d86e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d872:	4b52      	ldr	r3, [pc, #328]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d87c:	60fb      	str	r3, [r7, #12]
 800d87e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d880:	4b4e      	ldr	r3, [pc, #312]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d886:	4a4d      	ldr	r2, [pc, #308]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d888:	f043 0302 	orr.w	r3, r3, #2
 800d88c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d890:	4b4a      	ldr	r3, [pc, #296]	; (800d9bc <HAL_SPI_MspInit+0x2c8>)
 800d892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d896:	f003 0302 	and.w	r3, r3, #2
 800d89a:	60bb      	str	r3, [r7, #8]
 800d89c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800d89e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d8a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8a4:	2302      	movs	r3, #2
 800d8a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8ac:	2303      	movs	r3, #3
 800d8ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d8b0:	2305      	movs	r3, #5
 800d8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8b4:	f107 031c 	add.w	r3, r7, #28
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	4846      	ldr	r0, [pc, #280]	; (800d9d4 <HAL_SPI_MspInit+0x2e0>)
 800d8bc:	f7f6 fabc 	bl	8003e38 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800d8c0:	4b45      	ldr	r3, [pc, #276]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d8c2:	4a46      	ldr	r2, [pc, #280]	; (800d9dc <HAL_SPI_MspInit+0x2e8>)
 800d8c4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800d8c6:	4b44      	ldr	r3, [pc, #272]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d8c8:	2227      	movs	r2, #39	; 0x27
 800d8ca:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d8cc:	4b42      	ldr	r3, [pc, #264]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d8d2:	4b41      	ldr	r3, [pc, #260]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d8d8:	4b3f      	ldr	r3, [pc, #252]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d8da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d8de:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d8e0:	4b3d      	ldr	r3, [pc, #244]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d8e6:	4b3c      	ldr	r3, [pc, #240]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800d8ec:	4b3a      	ldr	r3, [pc, #232]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d8ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8f2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800d8f4:	4b38      	ldr	r3, [pc, #224]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d8f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d8fa:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800d8fc:	4b36      	ldr	r3, [pc, #216]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d8fe:	2204      	movs	r2, #4
 800d900:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800d902:	4b35      	ldr	r3, [pc, #212]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d904:	2201      	movs	r2, #1
 800d906:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800d908:	4b33      	ldr	r3, [pc, #204]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d90a:	2200      	movs	r2, #0
 800d90c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800d90e:	4b32      	ldr	r3, [pc, #200]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d910:	2200      	movs	r2, #0
 800d912:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800d914:	4830      	ldr	r0, [pc, #192]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d916:	f7f3 ff67 	bl	80017e8 <HAL_DMA_Init>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d001      	beq.n	800d924 <HAL_SPI_MspInit+0x230>
      Error_Handler();
 800d920:	f7ff fb2e 	bl	800cf80 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4a2c      	ldr	r2, [pc, #176]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d928:	67da      	str	r2, [r3, #124]	; 0x7c
 800d92a:	4a2b      	ldr	r2, [pc, #172]	; (800d9d8 <HAL_SPI_MspInit+0x2e4>)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800d930:	4b2b      	ldr	r3, [pc, #172]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d932:	4a2c      	ldr	r2, [pc, #176]	; (800d9e4 <HAL_SPI_MspInit+0x2f0>)
 800d934:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800d936:	4b2a      	ldr	r3, [pc, #168]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d938:	2228      	movs	r2, #40	; 0x28
 800d93a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d93c:	4b28      	ldr	r3, [pc, #160]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d93e:	2240      	movs	r2, #64	; 0x40
 800d940:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d942:	4b27      	ldr	r3, [pc, #156]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d944:	2200      	movs	r2, #0
 800d946:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d948:	4b25      	ldr	r3, [pc, #148]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d94a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d94e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d950:	4b23      	ldr	r3, [pc, #140]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d952:	2200      	movs	r2, #0
 800d954:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d956:	4b22      	ldr	r3, [pc, #136]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d958:	2200      	movs	r2, #0
 800d95a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800d95c:	4b20      	ldr	r3, [pc, #128]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d95e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d962:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800d964:	4b1e      	ldr	r3, [pc, #120]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d966:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d96a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800d96c:	4b1c      	ldr	r3, [pc, #112]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d96e:	2204      	movs	r2, #4
 800d970:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800d972:	4b1b      	ldr	r3, [pc, #108]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d974:	2201      	movs	r2, #1
 800d976:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800d978:	4b19      	ldr	r3, [pc, #100]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d97a:	2200      	movs	r2, #0
 800d97c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800d97e:	4b18      	ldr	r3, [pc, #96]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d980:	2200      	movs	r2, #0
 800d982:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800d984:	4816      	ldr	r0, [pc, #88]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d986:	f7f3 ff2f 	bl	80017e8 <HAL_DMA_Init>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d001      	beq.n	800d994 <HAL_SPI_MspInit+0x2a0>
      Error_Handler();
 800d990:	f7ff faf6 	bl	800cf80 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4a12      	ldr	r2, [pc, #72]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d998:	679a      	str	r2, [r3, #120]	; 0x78
 800d99a:	4a11      	ldr	r2, [pc, #68]	; (800d9e0 <HAL_SPI_MspInit+0x2ec>)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	2024      	movs	r0, #36	; 0x24
 800d9a6:	f7f3 fe72 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800d9aa:	2024      	movs	r0, #36	; 0x24
 800d9ac:	f7f3 fe89 	bl	80016c2 <HAL_NVIC_EnableIRQ>
}
 800d9b0:	bf00      	nop
 800d9b2:	3730      	adds	r7, #48	; 0x30
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	40013000 	.word	0x40013000
 800d9bc:	58024400 	.word	0x58024400
 800d9c0:	58020c00 	.word	0x58020c00
 800d9c4:	58021800 	.word	0x58021800
 800d9c8:	20014d08 	.word	0x20014d08
 800d9cc:	40020088 	.word	0x40020088
 800d9d0:	40003800 	.word	0x40003800
 800d9d4:	58020400 	.word	0x58020400
 800d9d8:	20014b90 	.word	0x20014b90
 800d9dc:	40020058 	.word	0x40020058
 800d9e0:	20014c90 	.word	0x20014c90
 800d9e4:	40020070 	.word	0x40020070

0800d9e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d9ee:	4b0a      	ldr	r3, [pc, #40]	; (800da18 <HAL_MspInit+0x30>)
 800d9f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d9f4:	4a08      	ldr	r2, [pc, #32]	; (800da18 <HAL_MspInit+0x30>)
 800d9f6:	f043 0302 	orr.w	r3, r3, #2
 800d9fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d9fe:	4b06      	ldr	r3, [pc, #24]	; (800da18 <HAL_MspInit+0x30>)
 800da00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800da04:	f003 0302 	and.w	r3, r3, #2
 800da08:	607b      	str	r3, [r7, #4]
 800da0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr
 800da18:	58024400 	.word	0x58024400

0800da1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800da1c:	b480      	push	{r7}
 800da1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800da20:	bf00      	nop
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr

0800da2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800da2a:	b480      	push	{r7}
 800da2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800da2e:	e7fe      	b.n	800da2e <HardFault_Handler+0x4>

0800da30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800da30:	b480      	push	{r7}
 800da32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800da34:	e7fe      	b.n	800da34 <MemManage_Handler+0x4>

0800da36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800da36:	b480      	push	{r7}
 800da38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800da3a:	e7fe      	b.n	800da3a <BusFault_Handler+0x4>

0800da3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800da3c:	b480      	push	{r7}
 800da3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800da40:	e7fe      	b.n	800da40 <UsageFault_Handler+0x4>

0800da42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800da42:	b480      	push	{r7}
 800da44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800da46:	bf00      	nop
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800da50:	b480      	push	{r7}
 800da52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800da54:	bf00      	nop
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr

0800da5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800da5e:	b480      	push	{r7}
 800da60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800da62:	bf00      	nop
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr

0800da6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800da70:	f7f2 fca4 	bl	80003bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800da74:	bf00      	nop
 800da76:	bd80      	pop	{r7, pc}

0800da78 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800da7c:	4802      	ldr	r0, [pc, #8]	; (800da88 <DMA1_Stream0_IRQHandler+0x10>)
 800da7e:	f7f4 febd 	bl	80027fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800da82:	bf00      	nop
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	200000f8 	.word	0x200000f8

0800da8c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800da90:	4802      	ldr	r0, [pc, #8]	; (800da9c <DMA1_Stream1_IRQHandler+0x10>)
 800da92:	f7f4 feb3 	bl	80027fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800da96:	bf00      	nop
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	20014900 	.word	0x20014900

0800daa0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800daa4:	4802      	ldr	r0, [pc, #8]	; (800dab0 <DMA1_Stream2_IRQHandler+0x10>)
 800daa6:	f7f4 fea9 	bl	80027fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800daaa:	bf00      	nop
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	20014978 	.word	0x20014978

0800dab4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800dab8:	4802      	ldr	r0, [pc, #8]	; (800dac4 <DMA1_Stream3_IRQHandler+0x10>)
 800daba:	f7f4 fe9f 	bl	80027fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800dabe:	bf00      	nop
 800dac0:	bd80      	pop	{r7, pc}
 800dac2:	bf00      	nop
 800dac4:	20014b90 	.word	0x20014b90

0800dac8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800dacc:	4802      	ldr	r0, [pc, #8]	; (800dad8 <DMA1_Stream4_IRQHandler+0x10>)
 800dace:	f7f4 fe95 	bl	80027fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800dad2:	bf00      	nop
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	20014c90 	.word	0x20014c90

0800dadc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800dae0:	4802      	ldr	r0, [pc, #8]	; (800daec <DMA1_Stream5_IRQHandler+0x10>)
 800dae2:	f7f4 fe8b 	bl	80027fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800dae6:	bf00      	nop
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	20014d08 	.word	0x20014d08

0800daf0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800daf4:	4802      	ldr	r0, [pc, #8]	; (800db00 <SPI1_IRQHandler+0x10>)
 800daf6:	f7fc fbed 	bl	800a2d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800dafa:	bf00      	nop
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	20014c08 	.word	0x20014c08

0800db04 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800db08:	4802      	ldr	r0, [pc, #8]	; (800db14 <SPI2_IRQHandler+0x10>)
 800db0a:	f7fc fbe3 	bl	800a2d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800db0e:	bf00      	nop
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	20014b08 	.word	0x20014b08

0800db18 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800db1c:	4802      	ldr	r0, [pc, #8]	; (800db28 <SDMMC1_IRQHandler+0x10>)
 800db1e:	f7fb f84f 	bl	8008bc0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800db22:	bf00      	nop
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	20014a88 	.word	0x20014a88

0800db2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800db2c:	b480      	push	{r7}
 800db2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800db30:	4b29      	ldr	r3, [pc, #164]	; (800dbd8 <SystemInit+0xac>)
 800db32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db36:	4a28      	ldr	r2, [pc, #160]	; (800dbd8 <SystemInit+0xac>)
 800db38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800db40:	4b26      	ldr	r3, [pc, #152]	; (800dbdc <SystemInit+0xb0>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a25      	ldr	r2, [pc, #148]	; (800dbdc <SystemInit+0xb0>)
 800db46:	f043 0301 	orr.w	r3, r3, #1
 800db4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800db4c:	4b23      	ldr	r3, [pc, #140]	; (800dbdc <SystemInit+0xb0>)
 800db4e:	2200      	movs	r2, #0
 800db50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800db52:	4b22      	ldr	r3, [pc, #136]	; (800dbdc <SystemInit+0xb0>)
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	4921      	ldr	r1, [pc, #132]	; (800dbdc <SystemInit+0xb0>)
 800db58:	4b21      	ldr	r3, [pc, #132]	; (800dbe0 <SystemInit+0xb4>)
 800db5a:	4013      	ands	r3, r2
 800db5c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800db5e:	4b1f      	ldr	r3, [pc, #124]	; (800dbdc <SystemInit+0xb0>)
 800db60:	2200      	movs	r2, #0
 800db62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800db64:	4b1d      	ldr	r3, [pc, #116]	; (800dbdc <SystemInit+0xb0>)
 800db66:	2200      	movs	r2, #0
 800db68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800db6a:	4b1c      	ldr	r3, [pc, #112]	; (800dbdc <SystemInit+0xb0>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800db70:	4b1a      	ldr	r3, [pc, #104]	; (800dbdc <SystemInit+0xb0>)
 800db72:	2200      	movs	r2, #0
 800db74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800db76:	4b19      	ldr	r3, [pc, #100]	; (800dbdc <SystemInit+0xb0>)
 800db78:	2200      	movs	r2, #0
 800db7a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800db7c:	4b17      	ldr	r3, [pc, #92]	; (800dbdc <SystemInit+0xb0>)
 800db7e:	2200      	movs	r2, #0
 800db80:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800db82:	4b16      	ldr	r3, [pc, #88]	; (800dbdc <SystemInit+0xb0>)
 800db84:	2200      	movs	r2, #0
 800db86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800db88:	4b14      	ldr	r3, [pc, #80]	; (800dbdc <SystemInit+0xb0>)
 800db8a:	2200      	movs	r2, #0
 800db8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800db8e:	4b13      	ldr	r3, [pc, #76]	; (800dbdc <SystemInit+0xb0>)
 800db90:	2200      	movs	r2, #0
 800db92:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800db94:	4b11      	ldr	r3, [pc, #68]	; (800dbdc <SystemInit+0xb0>)
 800db96:	2200      	movs	r2, #0
 800db98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800db9a:	4b10      	ldr	r3, [pc, #64]	; (800dbdc <SystemInit+0xb0>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800dba0:	4b0e      	ldr	r3, [pc, #56]	; (800dbdc <SystemInit+0xb0>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a0d      	ldr	r2, [pc, #52]	; (800dbdc <SystemInit+0xb0>)
 800dba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dbaa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800dbac:	4b0b      	ldr	r3, [pc, #44]	; (800dbdc <SystemInit+0xb0>)
 800dbae:	2200      	movs	r2, #0
 800dbb0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800dbb2:	4b0c      	ldr	r3, [pc, #48]	; (800dbe4 <SystemInit+0xb8>)
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	4b0c      	ldr	r3, [pc, #48]	; (800dbe8 <SystemInit+0xbc>)
 800dbb8:	4013      	ands	r3, r2
 800dbba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dbbe:	d202      	bcs.n	800dbc6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800dbc0:	4b0a      	ldr	r3, [pc, #40]	; (800dbec <SystemInit+0xc0>)
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800dbc6:	4b04      	ldr	r3, [pc, #16]	; (800dbd8 <SystemInit+0xac>)
 800dbc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dbcc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800dbce:	bf00      	nop
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr
 800dbd8:	e000ed00 	.word	0xe000ed00
 800dbdc:	58024400 	.word	0x58024400
 800dbe0:	eaf6ed7f 	.word	0xeaf6ed7f
 800dbe4:	5c001000 	.word	0x5c001000
 800dbe8:	ffff0000 	.word	0xffff0000
 800dbec:	51008108 	.word	0x51008108

0800dbf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800dbf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dc28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800dbf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800dbf6:	e003      	b.n	800dc00 <LoopCopyDataInit>

0800dbf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800dbf8:	4b0c      	ldr	r3, [pc, #48]	; (800dc2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800dbfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800dbfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800dbfe:	3104      	adds	r1, #4

0800dc00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800dc00:	480b      	ldr	r0, [pc, #44]	; (800dc30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800dc02:	4b0c      	ldr	r3, [pc, #48]	; (800dc34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800dc04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800dc06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800dc08:	d3f6      	bcc.n	800dbf8 <CopyDataInit>
  ldr  r2, =_sbss
 800dc0a:	4a0b      	ldr	r2, [pc, #44]	; (800dc38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800dc0c:	e002      	b.n	800dc14 <LoopFillZerobss>

0800dc0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800dc0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800dc10:	f842 3b04 	str.w	r3, [r2], #4

0800dc14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800dc14:	4b09      	ldr	r3, [pc, #36]	; (800dc3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800dc16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800dc18:	d3f9      	bcc.n	800dc0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800dc1a:	f7ff ff87 	bl	800db2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800dc1e:	f000 f811 	bl	800dc44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dc22:	f7fe ff99 	bl	800cb58 <main>
  bx  lr    
 800dc26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800dc28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800dc2c:	0800fce8 	.word	0x0800fce8
  ldr  r0, =_sdata
 800dc30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800dc34:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 800dc38:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 800dc3c:	20014d80 	.word	0x20014d80

0800dc40 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dc40:	e7fe      	b.n	800dc40 <ADC3_IRQHandler>
	...

0800dc44 <__libc_init_array>:
 800dc44:	b570      	push	{r4, r5, r6, lr}
 800dc46:	4e0d      	ldr	r6, [pc, #52]	; (800dc7c <__libc_init_array+0x38>)
 800dc48:	4c0d      	ldr	r4, [pc, #52]	; (800dc80 <__libc_init_array+0x3c>)
 800dc4a:	1ba4      	subs	r4, r4, r6
 800dc4c:	10a4      	asrs	r4, r4, #2
 800dc4e:	2500      	movs	r5, #0
 800dc50:	42a5      	cmp	r5, r4
 800dc52:	d109      	bne.n	800dc68 <__libc_init_array+0x24>
 800dc54:	4e0b      	ldr	r6, [pc, #44]	; (800dc84 <__libc_init_array+0x40>)
 800dc56:	4c0c      	ldr	r4, [pc, #48]	; (800dc88 <__libc_init_array+0x44>)
 800dc58:	f000 f820 	bl	800dc9c <_init>
 800dc5c:	1ba4      	subs	r4, r4, r6
 800dc5e:	10a4      	asrs	r4, r4, #2
 800dc60:	2500      	movs	r5, #0
 800dc62:	42a5      	cmp	r5, r4
 800dc64:	d105      	bne.n	800dc72 <__libc_init_array+0x2e>
 800dc66:	bd70      	pop	{r4, r5, r6, pc}
 800dc68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dc6c:	4798      	blx	r3
 800dc6e:	3501      	adds	r5, #1
 800dc70:	e7ee      	b.n	800dc50 <__libc_init_array+0xc>
 800dc72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dc76:	4798      	blx	r3
 800dc78:	3501      	adds	r5, #1
 800dc7a:	e7f2      	b.n	800dc62 <__libc_init_array+0x1e>
 800dc7c:	0800fce0 	.word	0x0800fce0
 800dc80:	0800fce0 	.word	0x0800fce0
 800dc84:	0800fce0 	.word	0x0800fce0
 800dc88:	0800fce4 	.word	0x0800fce4

0800dc8c <memset>:
 800dc8c:	4402      	add	r2, r0
 800dc8e:	4603      	mov	r3, r0
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d100      	bne.n	800dc96 <memset+0xa>
 800dc94:	4770      	bx	lr
 800dc96:	f803 1b01 	strb.w	r1, [r3], #1
 800dc9a:	e7f9      	b.n	800dc90 <memset+0x4>

0800dc9c <_init>:
 800dc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9e:	bf00      	nop
 800dca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dca2:	bc08      	pop	{r3}
 800dca4:	469e      	mov	lr, r3
 800dca6:	4770      	bx	lr

0800dca8 <_fini>:
 800dca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcaa:	bf00      	nop
 800dcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcae:	bc08      	pop	{r3}
 800dcb0:	469e      	mov	lr, r3
 800dcb2:	4770      	bx	lr
